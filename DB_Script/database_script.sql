
-- MySQL dump 10.13  Distrib 8.0.30, for Win64 (x86_64)
	--
	-- Host: 192.168.1.10    Database: spryple
	-- ------------------------------------------------------
	-- Server version	5.7.39-log

	/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
	/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
	/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
	/*!50503 SET NAMES utf8 */;
	/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
	/*!40103 SET TIME_ZONE='+00:00' */;
	/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
	/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
	/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
	/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

	set global event_scheduler = ON;
	--
	-- Table structure for table `approval_level_attribute_master`
	--
	
	set @created_by = 1;

	DROP TABLE IF EXISTS `approval_level_attribute_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `approval_level_attribute_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `affectingvalue` varchar(32) NOT NULL,
	  `moduleid` int(11) NOT NULL,
	  `enabled` int(1) NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `approval_level_value_master_mid_fk` (`moduleid`),
	  CONSTRAINT `approval_level_value_master_mid_fk` FOREIGN KEY (`moduleid`) REFERENCES `modulesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `approval_level_attribute_master`
	--

	LOCK TABLES `approval_level_attribute_master` WRITE;
	/*!40000 ALTER TABLE `approval_level_attribute_master` DISABLE KEYS */;
	INSERT INTO `approval_level_attribute_master` VALUES (1,'Leave Days',2,1);
	/*!40000 ALTER TABLE `approval_level_attribute_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `approval_level_count_master`
	--

	DROP TABLE IF EXISTS `approval_level_count_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `approval_level_count_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `jsonstring` json NOT NULL,
	  `operator` varchar(32) NOT NULL,
	  `value` varchar(16) NOT NULL,
	  `approver_count` int(11) NOT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `approval_level_count_master`
	--

	LOCK TABLES `approval_level_count_master` WRITE;
	/*!40000 ALTER TABLE `approval_level_count_master` DISABLE KEYS */;
	INSERT INTO `approval_level_count_master` VALUES (1,'{\"days\": 1, \"designation\": 1, \"leaveTypeId\": 1}','<=','3',1),(2,'{\"days\": 1, \"designation\": 1, \"leaveTypeId\": 1}','>','3',2),(3,'{\"days\": 1, \"designation\": 1, \"leaveTypeId\": 1}','<','3',1),(4,'{\"days\": 1, \"designation\": 1, \"leaveTypeId\": 1}','<','10',2),(5,'{\"days\": 1, \"designation\": 1, \"leaveTypeId\": 1}','>','10',3);
	/*!40000 ALTER TABLE `approval_level_count_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `approval_level_parameter_master`
	--

	DROP TABLE IF EXISTS `approval_level_parameter_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `approval_level_parameter_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `affectingparameter` varchar(32) NOT NULL,
	  `moduleid` int(11) NOT NULL,
	  `enabled` int(1) NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `approval_level_parameter_master_mid_fk` (`moduleid`),
	  CONSTRAINT `approval_level_parameter_master_mid_fk` FOREIGN KEY (`moduleid`) REFERENCES `modulesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `approval_level_parameter_master`
	--

	LOCK TABLES `approval_level_parameter_master` WRITE;
	/*!40000 ALTER TABLE `approval_level_parameter_master` DISABLE KEYS */;
	INSERT INTO `approval_level_parameter_master` VALUES (1,'Leave Type',2,1),(2,'Designation',2,1);
	/*!40000 ALTER TABLE `approval_level_parameter_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `approver_master`
	--

	DROP TABLE IF EXISTS `approver_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `approver_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `master_id` int(11) NOT NULL,
	  `level` int(11) NOT NULL,
	  `approver` varchar(32) NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `approver_master_master_id_fk` (`master_id`),
	  CONSTRAINT `approver_master_master_id_fk` FOREIGN KEY (`master_id`) REFERENCES `approval_level_count_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `approver_master`
	--

	LOCK TABLES `approver_master` WRITE;
	/*!40000 ALTER TABLE `approver_master` DISABLE KEYS */;
	/*!40000 ALTER TABLE `approver_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `attendance_errormessages`
	--

	DROP TABLE IF EXISTS `attendance_errormessages`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `attendance_errormessages` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `errorcode` varchar(255) DEFAULT NULL,
	  `screenname` varchar(255) DEFAULT NULL,
	  `errormessage` varchar(2048) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `attendance_errormessages`
	--

	LOCK TABLES `attendance_errormessages` WRITE;
	/*!40000 ALTER TABLE `attendance_errormessages` DISABLE KEYS */;
	/*!40000 ALTER TABLE `attendance_errormessages` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `attendance_messages`
	--

	DROP TABLE IF EXISTS `attendance_messages`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `attendance_messages` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `code` varchar(255) DEFAULT NULL,
	  `screenname` varchar(255) DEFAULT NULL,
	  `message` varchar(2048) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `attendance_messages`
	--

	LOCK TABLES `attendance_messages` WRITE;
	/*!40000 ALTER TABLE `attendance_messages` DISABLE KEYS */;
	INSERT INTO `attendance_messages` VALUES (1,'ATT1','Common','This field is required.'),(2,'ATT2','Common','Please select an option'),(3,'ATT3','Common','Please enter valid data.'),(4,'ATT4','Login','Unable to login, please try again.'),(5,'ATT5',NULL,'The username and/or password you entered did not match our records. Please double-check and try again.'),(6,'ATT6','Reset Password','The confirm password you entered does not match with new password. Please re-enter your password.'),(7,'ATT7','Reset Password','Password reset successfully.'),(8,'ATT8','Reset Password','Unable to reset password. Please try again.'),(9,'ATT9','Change Password','Password changed successfully.'),(10,'ATT10',NULL,'Please enter correct old password.'),(11,'ATT11','Attendance Request','Attendance request applied successfully.'),(12,'ATT12','Attendance Request','Unable to apply request. Please try again.'),(13,'ATT13','Request- Approve ','Attendance request approved successfully.'),(14,'ATT14','Request- Approve ','Unable to approve request. Please try again.'),(15,'ATT15','Request- Reject','Attendance request rejected successfully.'),(16,'ATT16','Request- Reject','Unable to reject request. Please try again.'),(17,'ATT17','Excel upload','Please select file.'),(18,'ATT18','Excel upload','Record is not inserted.'),(19,'ATT19','Excel upload','File size exceeds 15MB. Please reduce file size.'),(20,'ATT20','Excel upload','Data uploaded successfully.'),(21,'ATT21','Excel upload','Unable to upload data. Please try again.'),(22,'ATT22','Department','This department have active employees. So we are unable to inactivate this department now. Please move those employee to another department and try again.'),(23,'ATT23','Department-Add','Department added successfully.'),(24,'ATT24','Department-Add','Unable to add department, please try again.'),(25,'ATT25','Department-Update','Department updated successfully.'),(26,'ATt26','Department-Update','Unable to update department. Please try again.'),(27,'ATT27','Department- Active','Department activated successfully.'),(28,'ATT28','Department- Active','Unable to activate department. Please try again.'),(29,'ATT29','Department- Inactive','Department deactivated successfully.'),(30,'ATT30','Department- Inactive','Unable to add department. Please try again.'),(31,'ATT31','Designation','This designation have active employees. So we are unable to inactivate this designation now. Please move those employee to another designation and try again.'),(32,'ATT32','Designation-Add','Designation added successfully.'),(33,'ATT33','Designation-Add','Unable to add designation. Please try again.'),(34,'ATT34','Designation-Update','Designation updated successfully.'),(35,'ATT35','Designation-Update','Unable to update designation. Please try again.'),(36,'ATT36','Designation- Active','Designation activated successfully.'),(37,'ATT37','Designation- Active','Designation activated successfully.'),(38,'ATT38','Designation- Inactive','Designation deactivated successfully.'),(39,'ATT39','Designation- Inactive','Unable to deactivate designation. Please try again.'),(40,'ATT40','Company Information-Add','Company Information added successfully.'),(41,'ATT41','Company Information-Add','Unable to add company information. Please try again.'),(42,'ATT42','Company Information-Edit','Company Information updated successfully.'),(43,'ATT43','Company Information-Edit','Unable to update company information. Please try again.'),(44,'ATT44','Employee Master','Please enter a valid pincode.'),(45,'ATT45',NULL,'To date must be greater than from date. '),(46,'ATT46',NULL,'To date must be greater than from date. '),(47,'ATT47','Employee Master - Add','Employee added successfully.'),(48,'ATT48','Employee Master - Add','Unable to add employee. Please try again.'),(49,'ATT49','Employee Master - Edit','Employee updated successfully.'),(50,'ATT50','Employee Master - Edit','Unable to update employee details. Please try again.'),(51,'ATT51','Role - add','Role added successfully.'),(52,'ATT52','Roles & Permissions- for same role','Role Name already exists. Try another.'),(53,'ATT53',NULL,'Roles & Permissions already exists. Try another.'),(54,'ATT54',NULL,'Role & Permissions added successfully.'),(55,'ATT55',NULL,'\"Unable to add Role. Please try again.\nUnable to add Role Permissions. Please try again.\"'),(56,'ATT56','Roles & Permissions-Edit','Role & Permissions updated successfully.'),(57,'ATT57','Roles & Permissions-Edit','Unable to update Role Permissions. Please try again.'),(58,'ATT58','Company Logo-Upload','Company logo uploaded successfully.'),(59,'ATT59',NULL,'Unable to change company logo. Please try again.'),(60,'ATT60','Company Logo-Remove','Company logo removed successfully.'),(61,'ATT61',NULL,'Unable to remove company logo. Please try again.'),(62,'ATT62',NULL,'Record already exist.'),(63,'ATT63','Shift Master - add','Shift added successfully.'),(64,'ATT64','Shift Master - add','Unable to add shift. Please try again.'),(65,'ATT65','Shift Master - Active','Shift activated successfully.'),(66,'ATT66','Shift Master - Active','Unable to activate shift. Please try again.'),(67,'ATT67','Shift Master - Inactive','Shift deactivated successfully.'),(68,'ATT68','Shift Master - Inactive','This shift have active employees. So we are unable to inactivate this shift now. Please move those employee to another shift and try again.'),(69,'ATT69','Configure Shift','Shift assigned successfully.'),(70,'ATT70','Configure Shift','Unable to assign shift. Please try again.'),(71,'ATT71','Messages Master','Message already exists. Try another.'),(72,'ATT72','Messages Master','Message updated successfully.'),(73,'ATT73','Messages Master','Unable to update message. Please try again.'),(74,'ATT74','','Generic error message'),(75,'ATT75','Attendance Request','Attendance Request Updated successfully'),(76,'ATT76','Attendance Request','Unable to update Attendance Request.');
	/*!40000 ALTER TABLE `attendance_messages` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `attendance_rulecategorymaster`
	--

	DROP TABLE IF EXISTS `attendance_rulecategorymaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `attendance_rulecategorymaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `subcategory` varchar(64) DEFAULT NULL,
	  `module` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `attendance_rulecategorymaster`
	--

	LOCK TABLES `attendance_rulecategorymaster` WRITE;
	/*!40000 ALTER TABLE `attendance_rulecategorymaster` DISABLE KEYS */;
	/*!40000 ALTER TABLE `attendance_rulecategorymaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `attendance_rulemaster`
	--

	DROP TABLE IF EXISTS `attendance_rulemaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `attendance_rulemaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `rulename` varchar(255) DEFAULT NULL,
	  `description` varchar(2048) DEFAULT NULL,
	  `iscommonrule` varchar(1) DEFAULT 'n',
	  `additional_information` varchar(1000) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `attendance_rulemaster`
	--

	LOCK TABLES `attendance_rulemaster` WRITE;
	/*!40000 ALTER TABLE `attendance_rulemaster` DISABLE KEYS */;
	/*!40000 ALTER TABLE `attendance_rulemaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `attendance_rulevalues`
	--

	DROP TABLE IF EXISTS `attendance_rulevalues`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `attendance_rulevalues` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `ruleid` int(11) NOT NULL,
	  `value` varchar(64) DEFAULT NULL,
	  `effectivefromdate` datetime DEFAULT NULL,
	  `effectivetodate` datetime DEFAULT NULL,
	  `status` char(8) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `ruleid` (`ruleid`),
	  CONSTRAINT `attendance_rulevalues_ibfk_1` FOREIGN KEY (`ruleid`) REFERENCES `attendance_rulemaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `attendance_rulevalues`
	--

	LOCK TABLES `attendance_rulevalues` WRITE;
	/*!40000 ALTER TABLE `attendance_rulevalues` DISABLE KEYS */;
	/*!40000 ALTER TABLE `attendance_rulevalues` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `attendance_statusmaster`
	--

	DROP TABLE IF EXISTS `attendance_statusmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `attendance_statusmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `name` varchar(64) DEFAULT NULL,
	  `display_name` varchar(64) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `attendance_statusmaster`
	--

	LOCK TABLES `attendance_statusmaster` WRITE;
	/*!40000 ALTER TABLE `attendance_statusmaster` DISABLE KEYS */;
	/*!40000 ALTER TABLE `attendance_statusmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `attendance_workflowstatus_tracker`
	--

	DROP TABLE IF EXISTS `attendance_workflowstatus_tracker`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `attendance_workflowstatus_tracker` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `attendancerequest_id` int(11) NOT NULL,
	  `approval_level` int(1) NOT NULL,
	  `status` varchar(64) NOT NULL,
	  `action_date` datetime NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `attendance_workflowstatus_tracker_emfk` (`empid`),
	  KEY `attendance_workflowstatus_tracker_lrfk` (`attendancerequest_id`),
	  CONSTRAINT `attendance_workflowstatus_tracker_emfk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `attendance_workflowstatus_tracker_lrfk` FOREIGN KEY (`attendancerequest_id`) REFERENCES `employee_attendance_regularization` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `attendance_workflowstatus_tracker`
	--

	LOCK TABLES `attendance_workflowstatus_tracker` WRITE;
	/*!40000 ALTER TABLE `attendance_workflowstatus_tracker` DISABLE KEYS */;
	/*!40000 ALTER TABLE `attendance_workflowstatus_tracker` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `attendancetypesmaster`
	--

	DROP TABLE IF EXISTS `attendancetypesmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `attendancetypesmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `type` varchar(64) DEFAULT NULL,
	  `status` varchar(32) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `attendancetypesmaster`
	--

	LOCK TABLES `attendancetypesmaster` WRITE;
	/*!40000 ALTER TABLE `attendancetypesmaster` DISABLE KEYS */;
	INSERT INTO `attendancetypesmaster` VALUES (1,'Work From Office','Active'),(2,'Work From Home','Active'),(3,'On-duty','Active'),(4,'Work From Remote location','Active');
	/*!40000 ALTER TABLE `attendancetypesmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `auditlog`
	--

	DROP TABLE IF EXISTS `auditlog`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `auditlog` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `category` varchar(255) NOT NULL,
	  `username` varchar(255) NOT NULL,
	  `action` varchar(255) NOT NULL,
	  `beforedata` varchar(10000) DEFAULT NULL,
	  `afterdata` varchar(10000) DEFAULT NULL,
	  `loggeddate` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `auditlog`
	--

	LOCK TABLES `auditlog` WRITE;
	/*!40000 ALTER TABLE `auditlog` DISABLE KEYS */;
	/*!40000 ALTER TABLE `auditlog` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `biometric_attendance`
	--

	DROP TABLE IF EXISTS `biometric_attendance`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `biometric_attendance` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` varchar(255) NOT NULL,
	  `attendancedate` date NOT NULL,
	  `punchtime` datetime DEFAULT NULL,
	  `punchcategory` varchar(16) DEFAULT NULL,
	  `shiftid` varchar(64) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
    drop trigger if exists after_punchin_insert;
	/*!50003 CREATE*/ /*!50017 */ /*!50003 TRIGGER after_punchin_insert
		after insert ON biometric_attendance
		FOR EACH ROW 
	begin
		set @empl = new.empid;
		set @bempl = (select boonempid from integration_empids where deviceempid=@empl);
		set @shiftid = (select shiftid from employee_shift_details where empid=@bempl 
						and current_date() between fromdate and todate
						order by employee_shift_details.id desc limit 1);
		select shiftsmaster.fromtime,shiftsmaster.totime into @fromtime,@totime 
		from shiftsmaster where shiftsmaster.id = @shiftid;
		set @id=0;
		if (@totime > @fromtime) then 
			if not exists(select * from employee_attendance where empid=@bempl and attendancedate=new.attendancedate) then
				INSERT INTO employee_attendance(empid,attendancedate,attendancetype,firstlogintime,shiftid)
				values(@bempl,new.attendancedate,1,new.punchtime,@shiftid); 
				set @id = last_insert_id();
			else
				set @id = (select id from employee_attendance where empid=@bempl and attendancedate=new.attendancedate);
			end if;
			INSERT INTO employee_attendance_details(attendanceid,punchtime,category)
			values(@id,new.punchtime,new.punchcategory); 
		 elseif (@fromtime > @totime) then
				 if new.punchtime between addtime(@fromtime, '-1:00:00') and cast('23:59:59' as time) then
					if not exists (select id from employee_attendance where empid = @bempl and attendancedate = new.attendancedate) then
						INSERT INTO employee_attendance(empid,attendancedate,attendancetype,firstlogintime,shiftid)
						values(@bempl,new.attendancedate,1,new.punchtime,@shiftid); 
						set @id = last_insert_id();
						INSERT INTO employee_attendance_details(attendanceid,punchtime,category)
						values(@id,new.punchtime,new.punchcategory); 
					else
						set @id = (select id from employee_attendance where empid=@bempl order by id desc limit 1);
						INSERT INTO employee_attendance_details(attendanceid,punchtime,category)
						values(@id,new.punchtime,new.punchcategory); 
					-- set @id = last_insert_id();
					end if;
				 elseif new.punchtime between cast('00:00:00' as time) and addtime(@fromtime,'-1:00:01') then   
					set @id = (select id from employee_attendance where empid=@bempl order by id desc limit 1);
					INSERT INTO employee_attendance_details(attendanceid,punchtime,category)
					values(@id,new.punchtime,new.punchcategory); 
				 end if;
		 end if;
	end */;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;

	--
	-- Table structure for table `bloodgroupmaster`
	--

	DROP TABLE IF EXISTS `bloodgroupmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `bloodgroupmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `bloodgroup` varchar(32) NOT NULL,
	  `status` int(1) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `bloodgroupmaster`
	--

	LOCK TABLES `bloodgroupmaster` WRITE;
	/*!40000 ALTER TABLE `bloodgroupmaster` DISABLE KEYS */;
	INSERT INTO `bloodgroupmaster` VALUES (1,'A+',1),(2,'A-',1),(3,'B+',1),(4,'B-',1),(5,'AB+',1),(6,'AB-',1),(7,'O+',1),(8,'O-',1);
	/*!40000 ALTER TABLE `bloodgroupmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `companyinformation`
	--

	DROP TABLE IF EXISTS `companyinformation`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `companyinformation` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `companyname` varchar(255) NOT NULL,
	  `companywebsite` varchar(255) DEFAULT NULL,
	  `cin` varchar(50) DEFAULT NULL,
	  `gstnumber` varchar(50) DEFAULT NULL,
	  `established_date` date DEFAULT NULL,
	  `primarycontactnumber` varchar(25) NOT NULL,
	  `secondarycontactnumber` varchar(25) DEFAULT NULL,
	  `primarycontactemail` varchar(128) NOT NULL,
	  `address1` varchar(128) NOT NULL,
	  `address2` varchar(128) DEFAULT NULL,
	  `city` int(11) NOT NULL,
	  `state` int(11) NOT NULL,
	  `pincode` varchar(128) NOT NULL,
	  `country` int(11) NOT NULL,
	  `created_on` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `companyinformation_fk_city` (`city`),
	  KEY `companyinformation_fk_state` (`state`),
	  KEY `companyinformation_fk_country` (`country`),
	  CONSTRAINT `companyinformation_fk_city` FOREIGN KEY (`city`) REFERENCES `locationsmaster` (`id`),
	  CONSTRAINT `companyinformation_fk_country` FOREIGN KEY (`country`) REFERENCES `countrymaster` (`id`),
	  CONSTRAINT `companyinformation_fk_state` FOREIGN KEY (`state`) REFERENCES `statesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `companyworklocationsmaster`
	--

	DROP TABLE IF EXISTS `companyworklocationsmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `companyworklocationsmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `branchcode` varchar(64) DEFAULT NULL,
	  `address1` varchar(255) DEFAULT NULL,
	  `address2` varchar(255) DEFAULT NULL,
	  `location` varchar(255) DEFAULT NULL,
	  `city` int(11) NOT NULL,
	  `state` int(11) NOT NULL,
	  `pincode` varchar(128) NOT NULL,
	  `country` int(11) NOT NULL,
	  `createddate` datetime NOT NULL,
	  `status` int(11) NOT NULL,
	  `created_on` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `cwlm_fk_city` (`city`),
	  KEY `cwlm_fk_state` (`state`),
	  KEY `cwlm_fk_country` (`country`),
	  KEY `wlm_idx` (`id`,`city`,`state`,`country`),
	  CONSTRAINT `cwlm_fk_city` FOREIGN KEY (`city`) REFERENCES `locationsmaster` (`id`),
	  CONSTRAINT `cwlm_fk_country` FOREIGN KEY (`country`) REFERENCES `countrymaster` (`id`),
	  CONSTRAINT `cwlm_fk_state` FOREIGN KEY (`state`) REFERENCES `statesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `companyworklocationsmaster`
	--

	--
	-- Table structure for table `configs`
	--

	DROP TABLE IF EXISTS `configs`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `configs` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `name` varchar(255) NOT NULL,
	  `value` varchar(255) DEFAULT NULL,
	  `effective_from_date` datetime DEFAULT NULL,
	  `effective_to_date` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `configs`
	--

	LOCK TABLES `configs` WRITE;
	/*!40000 ALTER TABLE `configs` DISABLE KEYS */;
	INSERT INTO `configs` VALUES (1,'Company EPF Registration Number',null,null,NULL);
	/*!40000 ALTER TABLE `configs` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `countrymaster`
	--

	DROP TABLE IF EXISTS `countrymaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `countrymaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `country` varchar(128) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `countrymaster`
	--

	LOCK TABLES `countrymaster` WRITE;
	/*!40000 ALTER TABLE `countrymaster` DISABLE KEYS */;
	INSERT INTO `countrymaster` VALUES (1,'India');
	/*!40000 ALTER TABLE `countrymaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `cron_job_logs`
	--

	DROP TABLE IF EXISTS `cron_job_logs`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `cron_job_logs` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `job_name` varchar(255) DEFAULT NULL,
	  `createdat` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `departmentsmaster`
	--

	DROP TABLE IF EXISTS `departmentsmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `departmentsmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `deptname` varchar(64) DEFAULT NULL,
	  `depthead` varchar(64) DEFAULT NULL,
	  `headcount` int(11) DEFAULT NULL,
	  `status` int(11) NOT NULL,
	  `created_on` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `departmentsmaster`
	--

	LOCK TABLES `departmentsmaster` WRITE;
	/*!40000 ALTER TABLE `departmentsmaster` DISABLE KEYS */;
	INSERT INTO `departmentsmaster` VALUES (1,'IT',NULL,NULL,1,current_timestamp(),1,NULL,NULL),(2,'Human Resources',NULL,NULL,1,current_timestamp(),1,NULL,NULL),(3,'Finance',NULL,NULL,1,current_timestamp(),1,NULL,NULL);
	/*!40000 ALTER TABLE `departmentsmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `designationsmaster`
	--

	DROP TABLE IF EXISTS `designationsmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `designationsmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `designation` varchar(32) NOT NULL,
	  `status` int(11) NOT NULL,
	  `created_on` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `document_category_master`
	--

	DROP TABLE IF EXISTS `document_category_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `document_category_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `category` varchar(100) DEFAULT NULL,
	  `status` int(11) NOT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `document_category_master`
	--

	LOCK TABLES `document_category_master` WRITE;
	/*!40000 ALTER TABLE `document_category_master` DISABLE KEYS */;
	/*!40000 ALTER TABLE `document_category_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `employee`
	--

	DROP TABLE IF EXISTS `employee`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` varchar(20) NOT NULL,
	  `firstname` varchar(255) NOT NULL,
	  `middlename` varchar(255) DEFAULT NULL,
	  `lastname` varchar(255) DEFAULT NULL,
	  `personalemail` varchar(255) DEFAULT NULL,
	  `officeemail` varchar(255) DEFAULT NULL,
	  `dateofbirth` datetime DEFAULT NULL,
	  `gender` int(11) DEFAULT NULL,
	  `maritalstatus` int(11) DEFAULT NULL,
	  `employmenttype` int(11) DEFAULT NULL,
	  `dateofjoin` datetime DEFAULT NULL,
	  `hiredon` datetime DEFAULT NULL,
	  `noticeperiod` int(11) DEFAULT NULL,
	  `languages_spoken` varchar(255) DEFAULT NULL,
	  `bloodgroup` varchar(8) DEFAULT NULL,
	  `contactnumber` varchar(15) DEFAULT NULL,
	  `emergencycontactnumber` varchar(15) DEFAULT NULL,
	  `emergencycontactrelation` varchar(15) DEFAULT NULL,
	  `emergencycontactname` varchar(255) DEFAULT NULL,
	  `address` varchar(255) DEFAULT NULL,
	  `city` int(11) DEFAULT NULL,
	  `state` int(11) DEFAULT NULL,
	  `pincode` varchar(255) DEFAULT NULL,
	  `country` int(11) DEFAULT NULL,
	  `paddress` varchar(255) DEFAULT NULL,
	  `pcity` int(11) DEFAULT NULL,
	  `pstate` int(11) DEFAULT NULL,
	  `ppincode` varchar(255) DEFAULT NULL,
	  `pcountry` int(11) DEFAULT NULL,
	  `aadharnumber` varchar(12) DEFAULT NULL,
	  `passport` varchar(32) DEFAULT NULL,
	  `status` int(11) NOT NULL,
	  `created_on` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `emp_idx` (`id`,`gender`,`maritalstatus`,`employmenttype`,`bloodgroup`,`city`,`state`,`country`,`pcity`,`pstate`,`pcountry`,`status`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_attendance`
	--

	DROP TABLE IF EXISTS `employee_attendance`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_attendance` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `attendancetype` int(11) DEFAULT NULL,
	  `attendancedate` date NOT NULL,
	  `firstlogintime` datetime DEFAULT NULL,
	  `lastlogouttime` datetime DEFAULT NULL,
	  `workedhours` time DEFAULT NULL,
	  `breakhours` time DEFAULT NULL,
	  `productivehours` time DEFAULT NULL,
	  `shiftid` int(11) DEFAULT NULL,
	  `status` varchar(32) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  KEY `attendancetype` (`attendancetype`),
	  KEY `shiftid` (`shiftid`),
	  CONSTRAINT `employee_attendance_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `employee_attendance_ibfk_2` FOREIGN KEY (`attendancetype`) REFERENCES `attendancetypesmaster` (`id`),
	  CONSTRAINT `employee_attendance_ibfk_3` FOREIGN KEY (`shiftid`) REFERENCES `shiftsmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_attendance_details`
	--

	DROP TABLE IF EXISTS `employee_attendance_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_attendance_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `attendanceid` int(11) NOT NULL,
	  `punchtime` datetime DEFAULT NULL,
	  `category` varchar(16) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `attendanceid` (`attendanceid`),
	  CONSTRAINT `employee_attendance_details_ibfk_1` FOREIGN KEY (`attendanceid`) REFERENCES `employee_attendance` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_attendance_regularization`
	--

	DROP TABLE IF EXISTS `employee_attendance_regularization`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_attendance_regularization` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `applieddate` date NOT NULL,
	  `shiftid` int(11) DEFAULT NULL,
	  `fromdate` date NOT NULL,
	  `todate` date NOT NULL,
	  `logintime` time DEFAULT NULL,
	  `logouttime` time DEFAULT NULL,
	  `worktype` int(11) DEFAULT NULL,
	  `reason` varchar(255) DEFAULT NULL,
	  `raisedby` int(11) DEFAULT NULL,
	  `approvercomments` varchar(255) DEFAULT NULL,
	  `actionby` int(11) DEFAULT NULL,
	  `actiondate` date DEFAULT NULL,
	  `status` varchar(32) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  KEY `raisedby` (`raisedby`),
	  KEY `shiftid` (`shiftid`),
	  KEY `worktype` (`worktype`),
	  CONSTRAINT `employee_attendance_regularization_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `employee_attendance_regularization_ibfk_2` FOREIGN KEY (`raisedby`) REFERENCES `employee` (`id`),
	  CONSTRAINT `employee_attendance_regularization_ibfk_3` FOREIGN KEY (`shiftid`) REFERENCES `shiftsmaster` (`id`),
	  CONSTRAINT `employee_attendance_regularization_ibfk_4` FOREIGN KEY (`worktype`) REFERENCES `attendancetypesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_attendance_summary`
	--

	DROP TABLE IF EXISTS `employee_attendance_summary`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_attendance_summary` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `attendanceid` int(11) NOT NULL,
	  `attendancedate` date NOT NULL,
	  `firstlogintime` datetime NOT NULL,
	  `lastlogouttime` datetime NOT NULL,
	  `totalhours` time NOT NULL,
	  `breaks` varchar(1024) DEFAULT NULL,
	  `breaktime` time DEFAULT NULL,
	  `productivehours` time DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  CONSTRAINT `employee_attendance_summary_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_ctc_master`
	--

	DROP TABLE IF EXISTS `employee_ctc_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_ctc_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `cost_to_company` decimal(15,2) NOT NULL,
	  `basic_salary` decimal(15,2) DEFAULT NULL,
	  `dearness_allowance` decimal(15,2) DEFAULT NULL,
	  `house_rent_allowance` decimal(15,2) DEFAULT NULL,
	  `conveyance_allowance` decimal(15,2) DEFAULT NULL,
	  `travelling_allowance` decimal(15,2) DEFAULT NULL,
	  `transport_allowance` decimal(15,2) DEFAULT NULL,
	  `commission` decimal(15,2) DEFAULT NULL,
	  `bonus` decimal(15,2) DEFAULT NULL,
	  `gratuity` decimal(15,2) DEFAULT NULL,
	  `leave_encashment` decimal(15,2) DEFAULT NULL,
	  `fixed_allowance` decimal(15,2) DEFAULT NULL,
	  `children_education_allowance` decimal(15,2) DEFAULT NULL,
	  `hostel_expenditure_allowance` decimal(15,2) DEFAULT NULL,
	  `helper_allowance` decimal(15,2) DEFAULT NULL,
	  `uniform_allowance` decimal(15,2) DEFAULT NULL,
	  `daily_allowance` decimal(15,2) DEFAULT NULL,
	  `city_compensatory_allowance` decimal(15,2) DEFAULT NULL,
	  `overtime_allowance` decimal(15,2) DEFAULT NULL,
	  `telephone_allowance` decimal(15,2) DEFAULT NULL,
	  `fixed_medical_allowance` decimal(15,2) DEFAULT NULL,
	  `project_allowance` decimal(15,2) DEFAULT NULL,
	  `food_allowance` decimal(15,2) DEFAULT NULL,
	  `holiday_allowance` decimal(15,2) DEFAULT NULL,
	  `entertainment_allowance` decimal(15,2) DEFAULT NULL,
	  `custom_allowance` decimal(15,2) DEFAULT NULL,
	  `food_coupon` decimal(15,2) DEFAULT NULL,
	  `gift_coupon` decimal(15,2) DEFAULT NULL,
	  `research_allowance` decimal(15,2) DEFAULT NULL,
	  `books_and_periodicals_allowance` decimal(15,2) DEFAULT NULL,
	  `fuel_allowance` decimal(15,2) DEFAULT NULL,
	  `driver_allowance` decimal(15,2) DEFAULT NULL,
	  `leave_travel_allowance` decimal(15,2) DEFAULT NULL,
	  `vehicle_maintenance_allowance` decimal(15,2) DEFAULT NULL,
	  `telephone_and_internet_allowance` decimal(15,2) DEFAULT NULL,
	  `other_allowance` decimal(15,2) DEFAULT NULL,
	  `effective_from_date` date NOT NULL,
	  `effective_to_date` date DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_ctc_master_empid_fk` (`empid`),
	  CONSTRAINT `employee_ctc_master_empid_fk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_departments`
	--

	DROP TABLE IF EXISTS `employee_departments`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_departments` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `departmentid` int(11) DEFAULT NULL,
	  `effectivestartdate` datetime DEFAULT NULL,
	  `effectiveenddate` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  KEY `employee_departments_ibfk_1` (`departmentid`),
	  KEY `emp_depts_idx` (`empid`,`departmentid`),
	  CONSTRAINT `employee_departments_ibfk_1` FOREIGN KEY (`departmentid`) REFERENCES `departmentsmaster` (`id`),
	  CONSTRAINT `employee_departments_ibfk_2` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_designations`
	--

	DROP TABLE IF EXISTS `employee_designations`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_designations` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `designationid` int(11) DEFAULT NULL,
	  `effectivestartdate` datetime DEFAULT NULL,
	  `effectiveenddate` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `designationid` (`designationid`),
	  KEY `employee_id_fk` (`empid`),
	  KEY `emp_desigs_idx` (`empid`,`designationid`),
	  CONSTRAINT `employee_designations_ibfk_2` FOREIGN KEY (`designationid`) REFERENCES `designationsmaster` (`id`),
	  CONSTRAINT `employee_id_fk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_education_details`
	--

	DROP TABLE IF EXISTS `employee_education_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_education_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) DEFAULT NULL,
	  `course` varchar(255) DEFAULT NULL,
	  `institutename` varchar(255) DEFAULT NULL,
	  `fromdate` varchar(32) DEFAULT NULL,
	  `todate` varchar(32) DEFAULT NULL,
	  `percentage` varchar(6) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_id_efk_1` (`empid`),
	  CONSTRAINT `employee_id_efk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_experience_details`
	--

	DROP TABLE IF EXISTS `employee_experience_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_experience_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) DEFAULT NULL,
	  `companyname` varchar(255) DEFAULT NULL,
	  `skills` varchar(400) DEFAULT NULL,
	  `fromdate` varchar(10) DEFAULT NULL,
	  `todate` varchar(10) DEFAULT NULL,
	  `designation` varchar(50) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_id_eedfk_1` (`empid`),
	  CONSTRAINT `employee_id_eedfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_extended_ctc_master`
	--

	DROP TABLE IF EXISTS `employee_extended_ctc_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_extended_ctc_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `component_id` int(11) DEFAULT NULL,
	  `component_short_name` varchar(64) DEFAULT NULL,
	  `amount_value` decimal(15,2) DEFAULT NULL,
	  `effective_from_date` date NOT NULL,
	  `effective_to_date` date DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_extended_ctc_master_empid_fk` (`empid`),
	  KEY `employee_extended_ctc_master_cid_fk` (`component_id`),
	  CONSTRAINT `employee_extended_ctc_master_cid_fk` FOREIGN KEY (`component_id`) REFERENCES `payroll_salary_components_master` (`id`),
	  CONSTRAINT `employee_extended_ctc_master_empid_fk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_extended_salary_details`
	--

	DROP TABLE IF EXISTS `employee_extended_salary_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_extended_salary_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `employee_salary_details_id` int(11) NOT NULL,
	  `employee_extended_ctc_master_id` int(11) NOT NULL,
	  `amount_value` decimal(15,2) NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_extended_salary_details_esdid_fk` (`employee_salary_details_id`),
	  KEY `employee_extended_salary_details_ecmid_fk` (`employee_extended_ctc_master_id`),
	  CONSTRAINT `employee_extended_salary_details_ecmid_fk` FOREIGN KEY (`employee_extended_ctc_master_id`) REFERENCES `employee_extended_ctc_master` (`id`),
	  CONSTRAINT `employee_extended_salary_details_esdid_fk` FOREIGN KEY (`employee_salary_details_id`) REFERENCES `employee_gross_salary_details` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_financials_master`
	--

	DROP TABLE IF EXISTS `employee_financials_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_financials_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) DEFAULT NULL,
	  `bankname` varchar(255) DEFAULT NULL,
	  `ifsccode` varchar(255) DEFAULT NULL,
	  `nameasperbankaccount` varchar(255) DEFAULT NULL,
	  `branchname` varchar(255) DEFAULT NULL,
	  `bankaccountnumber` varchar(32) DEFAULT NULL,
	  `uanumber` varchar(32) DEFAULT NULL,
	  `pfaccountnumber` varchar(32) DEFAULT NULL,
	  `pan` varchar(32) DEFAULT NULL,
	  `esi` varchar(32) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  CONSTRAINT `employee_financials_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_gross_salary_details`
	--

	DROP TABLE IF EXISTS `employee_gross_salary_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_gross_salary_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `year` int(4) NOT NULL,
	  `month` int(2) NOT NULL,
	  `basic_salary` decimal(15,2) NOT NULL,
	  `dearness_allowance` decimal(15,2) DEFAULT NULL,
	  `house_rent_allowance` decimal(15,2) DEFAULT NULL,
	  `conveyance_allowance` decimal(15,2) DEFAULT NULL,
	  `travelling_allowance` decimal(15,2) DEFAULT NULL,
	  `transport_allowance` decimal(15,2) DEFAULT NULL,
	  `commission` decimal(15,2) DEFAULT NULL,
	  `bonus` decimal(15,2) DEFAULT NULL,
	  `gratuity` decimal(15,2) DEFAULT NULL,
	  `professional_tax` decimal(15,2) DEFAULT NULL,
	  `esi` decimal(15,2) DEFAULT NULL,
	  `employee_provident_fund` decimal(15,2) DEFAULT NULL,
	  `leave_encashment` decimal(15,2) DEFAULT NULL,
	  `fixed_allowance` decimal(15,2) DEFAULT NULL,
	  `children_education_allowance` decimal(15,2) DEFAULT NULL,
	  `hostel_expenditure_allowance` decimal(15,2) DEFAULT NULL,
	  `helper_allowance` decimal(15,2) DEFAULT NULL,
	  `uniform_allowance` decimal(15,2) DEFAULT NULL,
	  `daily_allowance` decimal(15,2) DEFAULT NULL,
	  `city_compensatory_allowance` decimal(15,2) DEFAULT NULL,
	  `overtime_allowance` decimal(15,2) DEFAULT NULL,
	  `telephone_allowance` decimal(15,2) DEFAULT NULL,
	  `fixed_medical_allowance` decimal(15,2) DEFAULT NULL,
	  `project_allowance` decimal(15,2) DEFAULT NULL,
	  `food_allowance` decimal(15,2) DEFAULT NULL,
	  `holiday_allowance` decimal(15,2) DEFAULT NULL,
	  `entertainment_allowance` decimal(15,2) DEFAULT NULL,
	  `custom_allowance` decimal(15,2) DEFAULT NULL,
	  `food_coupon` decimal(15,2) DEFAULT NULL,
	  `gift_coupon` decimal(15,2) DEFAULT NULL,
	  `research_allowance` decimal(15,2) DEFAULT NULL,
	  `books_and_periodicals_allowance` decimal(15,2) DEFAULT NULL,
	  `fuel_allowance` decimal(15,2) DEFAULT NULL,
	  `driver_allowance` decimal(15,2) DEFAULT NULL,
	  `leave_travel_allowance` decimal(15,2) DEFAULT NULL,
	  `vehicle_maintenance_allowance` decimal(15,2) DEFAULT NULL,
	  `telephone_and_internet_allowance` decimal(15,2) DEFAULT NULL,
	  `other_allowance` decimal(15,2) DEFAULT NULL,
	  `total_gross_salary` decimal(15,2) DEFAULT NULL,
	  `financial_year` varchar(16) DEFAULT NULL,
	  `assessment_year` varchar(16) DEFAULT NULL,
	  `created_on` datetime DEFAULT NULL,
	  `created_by` int(11) DEFAULT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_salary_details_empid_fk` (`empid`),
	  CONSTRAINT `employee_salary_details_empid_fk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_idgenerator`
	--

	DROP TABLE IF EXISTS `employee_idgenerator`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_idgenerator` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `prefix` varchar(16) DEFAULT NULL,
	  `seed` int(11) DEFAULT NULL,
	  `currentvalue` int(11) DEFAULT NULL,
	  `companylocation` int(11) DEFAULT NULL,
	  `createddate` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_idgenerator_fk_cl` (`companylocation`),
	  CONSTRAINT `employee_idgenerator_ibfk_1` FOREIGN KEY (`companylocation`) REFERENCES `companyworklocationsmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_leave_summary`
	--

	DROP TABLE IF EXISTS `employee_leave_summary`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_leave_summary` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `leavetype_id` int(11) NOT NULL,
	  `year` int(4) DEFAULT NULL,
	  `january` float DEFAULT NULL,
	  `february` float DEFAULT NULL,
	  `march` float DEFAULT NULL,
	  `april` float DEFAULT NULL,
	  `may` float DEFAULT NULL,
	  `june` float DEFAULT NULL,
	  `july` float DEFAULT NULL,
	  `august` float DEFAULT NULL,
	  `september` float DEFAULT NULL,
	  `october` float DEFAULT NULL,
	  `november` float DEFAULT NULL,
	  `december` float DEFAULT NULL,
	  `total` float DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  KEY `leavetype_id` (`leavetype_id`),
	  KEY `idx_els` (`year`),
	  CONSTRAINT `employee_leave_summary_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `employee_leave_summary_ibfk_2` FOREIGN KEY (`leavetype_id`) REFERENCES `lm_leavesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;


	--
	-- Table structure for table `employee_login`
	--

	DROP TABLE IF EXISTS `employee_login`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_login` (
	  `id` int(11) NOT NULL,
	  `login` varchar(255) DEFAULT NULL,
	  `password` varchar(1024) NOT NULL,
	  `status` varchar(16) DEFAULT NULL,
	  `firstlogin` varchar(1) DEFAULT NULL,
	  `lastpasswordchangedate` datetime DEFAULT NULL,
	  `qrcode` varchar(1024) DEFAULT NULL,
	  `qrcoderesetflag` varchar(1) DEFAULT 'n',
	  KEY `employee_login_ibfk_1` (`id`),
	  CONSTRAINT `employee_login_ibfk_1` FOREIGN KEY (`id`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_net_salary_details`
	--

	DROP TABLE IF EXISTS `employee_net_salary_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_net_salary_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `year` int(4) NOT NULL,
	  `month` int(2) NOT NULL,
	  `basic_salary` decimal(15,2) NOT NULL,
	  `dearness_allowance` decimal(15,2) DEFAULT NULL,
	  `house_rent_allowance` decimal(15,2) DEFAULT NULL,
	  `conveyance_allowance` decimal(15,2) DEFAULT NULL,
	  `travelling_allowance` decimal(15,2) DEFAULT NULL,
	  `transport_allowance` decimal(15,2) DEFAULT NULL,
	  `commission` decimal(15,2) DEFAULT NULL,
	  `bonus` decimal(15,2) DEFAULT NULL,
	  `gratuity` decimal(15,2) DEFAULT NULL,
	  `professional_tax` decimal(15,2) DEFAULT NULL,
	  `esi` decimal(15,2) DEFAULT NULL,
	  `employee_provident_fund` decimal(15,2) DEFAULT NULL,
	  `leave_encashment` decimal(15,2) DEFAULT NULL,
	  `fixed_allowance` decimal(15,2) DEFAULT NULL,
	  `children_education_allowance` decimal(15,2) DEFAULT NULL,
	  `hostel_expenditure_allowance` decimal(15,2) DEFAULT NULL,
	  `helper_allowance` decimal(15,2) DEFAULT NULL,
	  `uniform_allowance` decimal(15,2) DEFAULT NULL,
	  `daily_allowance` decimal(15,2) DEFAULT NULL,
	  `city_compensatory_allowance` decimal(15,2) DEFAULT NULL,
	  `overtime_allowance` decimal(15,2) DEFAULT NULL,
	  `telephone_allowance` decimal(15,2) DEFAULT NULL,
	  `fixed_medical_allowance` decimal(15,2) DEFAULT NULL,
	  `project_allowance` decimal(15,2) DEFAULT NULL,
	  `food_allowance` decimal(15,2) DEFAULT NULL,
	  `holiday_allowance` decimal(15,2) DEFAULT NULL,
	  `entertainment_allowance` decimal(15,2) DEFAULT NULL,
	  `custom_allowance` decimal(15,2) DEFAULT NULL,
	  `food_coupon` decimal(15,2) DEFAULT NULL,
	  `gift_coupon` decimal(15,2) DEFAULT NULL,
	  `research_allowance` decimal(15,2) DEFAULT NULL,
	  `books_and_periodicals_allowance` decimal(15,2) DEFAULT NULL,
	  `fuel_allowance` decimal(15,2) DEFAULT NULL,
	  `driver_allowance` decimal(15,2) DEFAULT NULL,
	  `leave_travel_allowance` decimal(15,2) DEFAULT NULL,
	  `vehicle_maintenance_allowance` decimal(15,2) DEFAULT NULL,
	  `telephone_and_internet_allowance` decimal(15,2) DEFAULT NULL,
	  `other_allowance` decimal(15,2) DEFAULT NULL,
	  `total_net_salary` decimal(15,2) DEFAULT NULL,
	  `paid_days` decimal(4,2) DEFAULT NULL,
	  `lop_days` decimal(4,2) DEFAULT NULL,
	  `financial_year` varchar(16) DEFAULT NULL,
	  `assessment_year` varchar(16) DEFAULT NULL,
	  `created_on` datetime DEFAULT NULL,
	  `created_by` int(11) DEFAULT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_net_salary_details_empid_fk` (`empid`),
	  CONSTRAINT `employee_net_salary_details_empid_fk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;


	--
	-- Table structure for table `employee_recognition_message`
	--

	DROP TABLE IF EXISTS `employee_recognition_message`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_recognition_message` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `recognition_sender_empid` int(11) NOT NULL,
	  `recognition_reciever_empid` int(11) NOT NULL,
	  `recognition_type_id` int(11) NOT NULL,
	  `recognition_message_id` int(11) DEFAULT NULL,
	  `recognition_message` varchar(255) NOT NULL,
	  `recognition_isread` int(11) DEFAULT '0',
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `recognition_type_master_rtmidfk` (`recognition_type_id`),
	  CONSTRAINT `employee_recognition_message_ibfk_1` FOREIGN KEY (`recognition_type_id`) REFERENCES `recognition_type_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_relations`
	--

	DROP TABLE IF EXISTS `employee_relations`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_relations` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) DEFAULT NULL,
	  `firstname` varchar(255) DEFAULT NULL,
	  `lastname` varchar(255) DEFAULT NULL,
	  `gender` varchar(6) DEFAULT NULL,
	  `contactnumber` varchar(16) DEFAULT NULL,
	  `dateofbirth` varchar(10) DEFAULT NULL,
	  `relationship` varchar(64) DEFAULT NULL,
	  `status` varchar(6) DEFAULT NULL,
	  `bereavement_leave_utilized` int(1) DEFAULT NULL,
	  `utilized_leave_id` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_id_ibfk_1` (`empid`),
	  CONSTRAINT `employee_id_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_reportingmanagers`
	--

	DROP TABLE IF EXISTS `employee_reportingmanagers`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_reportingmanagers` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `reportingmanagerid` int(11) DEFAULT NULL,
	  `effectivestartdate` datetime DEFAULT NULL,
	  `effectiveenddate` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  KEY `emp_rep_mgrs_idx` (`empid`,`reportingmanagerid`),
	  CONSTRAINT `employee_reportingmanagers_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_roles`
	--

	DROP TABLE IF EXISTS `employee_roles`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_roles` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `employee_id` int(11) NOT NULL,
	  `role_id` int(11) NOT NULL,
	  `rmid` int(11) NOT NULL,
	  `effective_from_date` date DEFAULT NULL,
	  `effective_to_date` date DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_id` (`employee_id`),
	  KEY `role_id` (`role_id`),
	  KEY `rmid` (`rmid`),
	  CONSTRAINT `employee_roles_ibfk_1` FOREIGN KEY (`employee_id`) REFERENCES `employee` (`id`),
	  CONSTRAINT `employee_roles_ibfk_2` FOREIGN KEY (`role_id`) REFERENCES `rolesmaster` (`id`),
	  CONSTRAINT `employee_roles_ibfk_3` FOREIGN KEY (`rmid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_shift_details`
	--

	DROP TABLE IF EXISTS `employee_shift_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_shift_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `shiftid` int(11) NOT NULL,
	  `fromdate` datetime NOT NULL,
	  `todate` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  KEY `emp_shift_det_idx` (`empid`,`shiftid`,`fromdate`,`todate`),
	  CONSTRAINT `employee_shifts_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_weekoffs`
	--

	DROP TABLE IF EXISTS `employee_weekoffs`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_weekoffs` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `weekoffday1` int(1) DEFAULT NULL,
	  `weekoffday2` int(1) DEFAULT NULL,
	  `weekoffday3` int(1) DEFAULT NULL,
	  `effectivefromdate` date NOT NULL,
	  `effectivetodate` date DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `wo_fk_empid` (`empid`),
	  CONSTRAINT `wo_fk_empid` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_working_days`
	--

	DROP TABLE IF EXISTS `employee_working_days`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_working_days` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `year` int(4) DEFAULT NULL,
	  `january` float DEFAULT NULL,
	  `february` float DEFAULT NULL,
	  `march` float DEFAULT NULL,
	  `april` float DEFAULT NULL,
	  `may` float DEFAULT NULL,
	  `june` float DEFAULT NULL,
	  `july` float DEFAULT NULL,
	  `august` float DEFAULT NULL,
	  `september` float DEFAULT NULL,
	  `october` float DEFAULT NULL,
	  `november` float DEFAULT NULL,
	  `december` float DEFAULT NULL,
	  `total` float DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  CONSTRAINT `employee_working_days_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employee_worklocations`
	--

	DROP TABLE IF EXISTS `employee_worklocations`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employee_worklocations` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `locationid` int(11) NOT NULL,
	  `effectivefromdate` date NOT NULL,
	  `effectivetodate` date DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `ewl_fk_empid` (`empid`),
	  KEY `ewl_fk_locationid` (`locationid`),
	  KEY `emp_ew_idx` (`empid`,`locationid`),
	  CONSTRAINT `ewl_fk_empid` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `ewl_fk_locationid` FOREIGN KEY (`locationid`) REFERENCES `companyworklocationsmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `employmenttypemaster`
	--

	DROP TABLE IF EXISTS `employmenttypemaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `employmenttypemaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `employmenttype` varchar(32) NOT NULL,
	  `status` varchar(32) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `emptype_idx` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `employmenttypemaster`
	--

	LOCK TABLES `employmenttypemaster` WRITE;
	/*!40000 ALTER TABLE `employmenttypemaster` DISABLE KEYS */;
	INSERT INTO `employmenttypemaster` VALUES (1,'Full-time',NULL),(2,'Part-time',NULL),(3,'Contract',NULL),(4,'Consultant',NULL);
	/*!40000 ALTER TABLE `employmenttypemaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `ems_announcements_topics_master`
	--

	DROP TABLE IF EXISTS `ems_announcements_topics_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_announcements_topics_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `topic` varchar(128) DEFAULT NULL,
	  `status` int(11) NOT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `ems_announcements_topics_master`
	--

	LOCK TABLES `ems_announcements_topics_master` WRITE;
	/*!40000 ALTER TABLE `ems_announcements_topics_master` DISABLE KEYS */;
	INSERT INTO `ems_announcements_topics_master` VALUES (1,'Company News',1,current_timestamp(),1,NULL,NULL),
    (2,'New Joiners',1,current_timestamp(),1,NULL,NULL),(3,'Breaking News',1,current_timestamp(),1,NULL,NULL),
    (4,'Events',1,current_timestamp(),1,NULL,NULL);
	/*!40000 ALTER TABLE `ems_announcements_topics_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `ems_announcements`
	--

	DROP TABLE IF EXISTS `ems_announcements`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_announcements` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `topicid` int(11) DEFAULT NULL,
	  `title` varchar(60) DEFAULT NULL,
	  `fromdate` datetime NOT NULL,
	  `todate` datetime NOT NULL,
	  `description` text NOT NULL,
	  `status` varchar(25) NOT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `announcements_topic_id_fk_1` (`topicid`),
	  CONSTRAINT `ems_announcements_ibfk_1` FOREIGN KEY (`topicid`) REFERENCES `ems_announcements_topics_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_candidate_education_details`
	--

	DROP TABLE IF EXISTS `ems_candidate_education_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_candidate_education_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `candidateid` int(11) DEFAULT NULL,
	  `course` varchar(255) DEFAULT NULL,
	  `institutename` varchar(255) DEFAULT NULL,
	  `fromdate` varchar(32) DEFAULT NULL,
	  `todate` varchar(32) DEFAULT NULL,
	  `percentage` varchar(6) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `candidate_education_id_efk_1` (`candidateid`),
	  CONSTRAINT `ems_candidate_education_details_ibfk_1` FOREIGN KEY (`candidateid`) REFERENCES `ems_new_hire` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_candidate_experience_details`
	--

	DROP TABLE IF EXISTS `ems_candidate_experience_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_candidate_experience_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `candidateid` int(11) DEFAULT NULL,
	  `companyname` varchar(255) DEFAULT NULL,
	  `designation` varchar(50) DEFAULT NULL,
	  `skills` varchar(255) DEFAULT NULL,
	  `fromdate` varchar(10) DEFAULT NULL,
	  `todate` varchar(10) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `candidate_experience_details_ibfk_1` (`candidateid`),
	  CONSTRAINT `ems_candidate_experience_details_ibfk_1` FOREIGN KEY (`candidateid`) REFERENCES `ems_new_hire` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	
	--
	-- Table structure for table `ems_candidate_relations`
	--

	DROP TABLE IF EXISTS `ems_candidate_relations`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_candidate_relations` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `candidateid` int(11) DEFAULT NULL,
	  `firstname` varchar(255) DEFAULT NULL,
	  `lastname` varchar(255) DEFAULT NULL,
	  `gender` int(2) DEFAULT NULL,
	  `contactnumber` varchar(16) DEFAULT NULL,
	  `dateofbirth` varchar(10) DEFAULT NULL,
	  `relationship` int(2) DEFAULT NULL,
	  `status` varchar(6) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `candidate_id_ibfk_1` (`candidateid`),
	  KEY `gender_ibfk_2` (`gender`),
	  KEY `relationship_id_ibfk_3` (`relationship`),
	  CONSTRAINT `ems_candidate_relations_ibfk_1` FOREIGN KEY (`candidateid`) REFERENCES `ems_new_hire` (`id`),
	  CONSTRAINT `ems_candidate_relations_ibfk_2` FOREIGN KEY (`gender`) REFERENCES `gendermaster` (`id`),
	  CONSTRAINT `ems_candidate_relations_ibfk_3` FOREIGN KEY (`relationship`) REFERENCES `relationshipmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_checklist_master`
	--

	DROP TABLE IF EXISTS `ems_checklist_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_checklist_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `name` varchar(64) DEFAULT NULL,
	  `description` varchar(255) DEFAULT NULL,
	  `department_id` int(11) DEFAULT NULL,
	  `category` varchar(25) DEFAULT NULL,
	  `status` varchar(25) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `department_fk_1` (`department_id`),
	  CONSTRAINT `ems_checklist_master_ibfk_1` FOREIGN KEY (`department_id`) REFERENCES `departmentsmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	-- Table structure for table `ems_employee_checklist`
	--

	DROP TABLE IF EXISTS `ems_employee_checklist`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_employee_checklist` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `checklist_id` int(11) DEFAULT NULL,
	  `empid` int(11) DEFAULT NULL,
	  `department_id` int(11) DEFAULT NULL,
	  `status` varchar(25) DEFAULT NULL,
	  `final_status` varchar(45) DEFAULT NULL,
	  `comment` varchar(255) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid_fk_2` (`empid`),
	  KEY `schedule_id_fk_1` (`checklist_id`),
	  CONSTRAINT `ems_employee_checklist_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `ems_employee_checklist_ibfk_2` FOREIGN KEY (`checklist_id`) REFERENCES `ems_checklist_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_employee_column_configuration_master`
	--

	DROP TABLE IF EXISTS `ems_employee_column_configuration_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_employee_column_configuration_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `employee_status` int(1) DEFAULT NULL,
	  `employee_type` int(1) DEFAULT NULL,
	  `department` int(1) DEFAULT NULL,
	  `designation` int(1) DEFAULT NULL,
	  `location` int(1) DEFAULT NULL,
	  `gender` int(1) DEFAULT NULL,
	  `blood_group` int(1) DEFAULT NULL,
	  `marital_status` int(1) DEFAULT NULL,
	  `shift` int(1) DEFAULT NULL,
	  `reporting_manager` int(1) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  CONSTRAINT `ems_employee_column_configuration_master_idfk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `ems_employee_column_configuration_master`
	--

	LOCK TABLES `ems_employee_column_configuration_master` WRITE;
	/*!40000 ALTER TABLE `ems_employee_column_configuration_master` DISABLE KEYS */;
	INSERT INTO `ems_employee_column_configuration_master` VALUES (1,11,1,1,1,1,1,0,0,0,0,0);
	/*!40000 ALTER TABLE `ems_employee_column_configuration_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `ems_employee_contract_details`
	--

	DROP TABLE IF EXISTS `ems_employee_contract_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_employee_contract_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) DEFAULT NULL,
	  `contractname` varchar(255) DEFAULT NULL,
	  `startdate` datetime DEFAULT NULL,
	  `enddate` datetime DEFAULT NULL,
	  `notes` varchar(255) DEFAULT NULL,
	  `fileid` varchar(60) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_contract_fk_1` (`empid`),
	  CONSTRAINT `ems_employee_contract_details_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `ems_employee_contract_details`
	--

	LOCK TABLES `ems_employee_contract_details` WRITE;
	/*!40000 ALTER TABLE `ems_employee_contract_details` DISABLE KEYS */;
	/*!40000 ALTER TABLE `ems_employee_contract_details` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `ems_employee_induction_conductedby`
	--

	DROP TABLE IF EXISTS `ems_employee_induction_conductedby`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_employee_induction_conductedby` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `induction_conductedby_id` int(11) NOT NULL,
	  `empid` int(11) NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_induction_conductedby_ibfk_1` (`empid`),
	  KEY `induction_conductedby_id` (`induction_conductedby_id`),
	  CONSTRAINT `ems_employee_induction_conductedby_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `ems_employee_induction_conductedby_ibfk_2` FOREIGN KEY (`induction_conductedby_id`) REFERENCES `ems_induction_conductedby` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_employee_program_schedule`
	--

	DROP TABLE IF EXISTS `ems_employee_program_schedule`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_employee_program_schedule` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `schedule_id` int(11) DEFAULT NULL,
	  `empid` int(11) DEFAULT NULL,
	  `status` varchar(25) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_empid_fk_2` (`empid`),
	  KEY `ems_programs_schedule_fk_1` (`schedule_id`),
	  CONSTRAINT `ems_employee_program_schedule_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `ems_employee_program_schedule_ibfk_2` FOREIGN KEY (`schedule_id`) REFERENCES `ems_program_schedules` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_employee_promotions_details`
	--

	DROP TABLE IF EXISTS `ems_employee_promotions_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_employee_promotions_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) DEFAULT NULL,
	  `salary` decimal(15,2) DEFAULT NULL,
	  `description` varchar(1024) DEFAULT NULL,
	  `effectivedate` datetime DEFAULT NULL,
	  `annualsalary` decimal(15,2) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `employee_promotions_fk_1` (`empid`),
	  CONSTRAINT `ems_employee_promotions_details_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `ems_employee_promotions_details`
	--

	LOCK TABLES `ems_employee_promotions_details` WRITE;
	/*!40000 ALTER TABLE `ems_employee_promotions_details` DISABLE KEYS */;
	/*!40000 ALTER TABLE `ems_employee_promotions_details` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `ems_employee_resignations`
	--

	DROP TABLE IF EXISTS `ems_employee_resignations`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_employee_resignations` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) DEFAULT NULL,
	  `applied_date` datetime NOT NULL,
	  `notice_period` int(11) DEFAULT NULL,
	  `original_relieving_date` datetime DEFAULT NULL,
	  `actual_relieving_date` datetime DEFAULT NULL,
	  `requested_relieving_date` datetime DEFAULT NULL,
	  `reason_id` int(11) DEFAULT NULL,
	  `status` varchar(25) DEFAULT NULL,
	  `comment` varchar(255) DEFAULT NULL,
	  `approver_comment` varchar(255) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid_fk_1` (`empid`),
	  KEY `reason_id_fk_2` (`reason_id`),
	  CONSTRAINT `ems_employee_resignations_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `ems_employee_resignations_ibfk_2` FOREIGN KEY (`reason_id`) REFERENCES `ems_reason_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_employee_terminations`
	--

	DROP TABLE IF EXISTS `ems_employee_terminations`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_employee_terminations` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) DEFAULT NULL,
	  `termination_date` datetime NOT NULL,
	  `category_id` int(11) DEFAULT NULL,
	  `status` varchar(25) DEFAULT NULL,
	  `comment` varchar(255) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `category_id_fk_2` (`category_id`),
	  KEY `termination_empid_fk_1` (`empid`),
	  CONSTRAINT `ems_employee_terminations_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `ems_termination_category_master` (`id`),
	  CONSTRAINT `ems_employee_terminations_ibfk_2` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_induction_conductedby`
	--

	DROP TABLE IF EXISTS `ems_induction_conductedby`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_induction_conductedby` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `program_id` int(11) NOT NULL,
	  `department_id` int(11) NOT NULL,
	  `status` int(11) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `ems_conductedby_programs_master_fk_1` (`program_id`),
	  CONSTRAINT `ems_induction_conductedby_ibfk_1` FOREIGN KEY (`program_id`) REFERENCES `ems_programs_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_messages`
	--

	DROP TABLE IF EXISTS `ems_messages`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_messages` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `code` varchar(255) DEFAULT NULL,
	  `screenname` varchar(255) DEFAULT NULL,
	  `message` varchar(2048) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `ems_messages`
	--

	LOCK TABLES `ems_messages` WRITE;
	/*!40000 ALTER TABLE `ems_messages` DISABLE KEYS */;
	INSERT INTO `ems_messages` VALUES (1,'EM1','Common','This field is required.',current_timestamp(),1,null,null),(2,'EM2','Common','Please select an option.',current_timestamp(),1,NULL,NULL),(3,'EM3','Common','Please enter valid data.',current_timestamp(),1,NULL,NULL),(7,'EM4','Induction','Induction added successfully.',current_timestamp(),1,null,null),(8,'EM5','Induction','Induction already existed.',current_timestamp(),1,null,null),(9,'EM6','Induction','Unable to add induction. Please try again later.',current_timestamp(),1,null,null),(10,'EM7','Induction','Induction updated successfully.',current_timestamp(),1,null,null),(11,'EM8','Induction','Unable to update induction. Please try again later.',current_timestamp(),1,null,null),(12,'EM9','Induction','Please enter program master.',current_timestamp(),1,null,null),(13,'EM10','Induction','Unable to inactive program type because based on this program created one schedule so please cancel that schedule and then inactivate program type.',current_timestamp(),1,null,null),(20,'EM11','Pre-Onboarding','Document uploaded successfully.',current_timestamp(),1,null,null),
    (21,'EM12','Pre-Onboarding','Unable to upload document. Please try again later.',current_timestamp(),1,null,null),(22,'EM13','Pre-Onboarding','PDF,JPG,PNG are allowed.',current_timestamp(),1,null,null),(23,'EM14','Pre-Onboarding','File size is must be less than 1MB.',current_timestamp(),1,null,null),(24,'EM15','Pre-Onboarding','Document deleted successfully.',current_timestamp(),1,null,null),(25,'EM16','Pre-Onboarding','Are you sure you want to delete document ?',current_timestamp(),1,null,null),(26,'EM17','Pre-Onboarding','Please try again later.',current_timestamp(),1,null,null),
    (27,'EM18','Pre-Onboarding','Please select a file or image.',current_timestamp(),1,null,null),(28,'EM19','Pre-Onboarding','Document updated successfully.',current_timestamp(),1,null,null),(29,'EM20','Pre-Onboarding','Unable to update document. Please try again later.',current_timestamp(),1,null,null),(30,'EM21','Pre-Onboarding','Already uploaded do you want to replace ?',current_timestamp(),1,null,null),
    (31,'EM22','Pre-Onboarding','Minimum 6 characters.',current_timestamp(),1,null,null),
    (32,'EM23','Pre-Onboarding','Maximum 14 characters.',current_timestamp(),1,null,null),
    (33,'EM24','Announcements','Announcement added successfully.',current_timestamp(),1,null,null),
    (34,'EM25','Announcements','Unable to add announcement. Please try again later.',current_timestamp(),1,null,null),
    (35,'EM26','Offboard settings','Offboarding settings updated successfully.',current_timestamp(),1,null,null),
    (36,'EM27','Offboard settings','Unable to update offboarding settings. Please try again later.',current_timestamp(),1,null,null),
    (37,'EM28','Onboardsettings','On Boarding Settings updated successfully.',current_timestamp(),1,NULL,NULL),
    (38,'EM29','Onboardsettings','Unable to update On Boarding Settings.',current_timestamp(),1,NULL,NULL),
    (39,'EM30','Announcements','Announcement updated successfully',current_timestamp(),1,NULL,NULL),
    (40,'EM31','Announcements','Unable to update announcements.',current_timestamp(),1,NULL,NULL),
    (41,'EM32','Announcements','Announcement add as Draft',current_timestamp(),1,NULL,NULL),
    (42,'EM33','Announcements','Unable to add as dreft',current_timestamp(),1,NULL,NULL),
    (43,'EM34','Induction Program','Program schedule successfully',current_timestamp(),1,NULL,NULL),
    (44,'EM35','Induction Program','Unable to Program scheduled.',current_timestamp(),1,NULL,NULL),
    (45,'EM36','Induction Program','Program schedule update successfully',current_timestamp(),1,NULL,NULL),
    (46,'EM37','Induction Program','Unable to update Program scheduled.',current_timestamp(),1,NULL,NULL),
    (47,'EM38','Induction Program','Employee program schedule updated successfully.',current_timestamp(),1,null,null),
    (48,'EM39','Induction Program','Unable to to update employee program schedule',current_timestamp(),1,NULL,NULL),
    (49,'EM40','Induction Program','Please change endtime.',current_timestamp(),1,NULL,NULL),
    (50,'EM41','','Data already Exists',current_timestamp(),1,NULL,NULL),
    (51,'EM42',NULL,'Data saved successfully',current_timestamp(),1,NULL,NULL),
    (52,'EM43',NULL,'Unable to save data',current_timestamp(),1,NULL,NULL),
    (53,'EM44','Announcements','Announcement cancel successfully',current_timestamp(),1,NULL,NULL),
    (54,'EM45','Announcements','Unable to cancel announcement.please try again.',current_timestamp(),1,NULL,NULL),
    (55,'EM46','HR-Pending Approval','Resignation approved successfully.',current_timestamp(),1,NULL,NULL),
    (56,'EM47','HR-Pending Approval','Resignation rejected successfully.',current_timestamp(),1,NULL,NULL),
    (57,'EM48','HR-Pending Approval','Unable to approved Resignation.Please try agian later',current_timestamp(),1,NULL,NULL),
    (58,'EM49','HR-Pending Approval','Unable reject Resignation.Please try agian later',current_timestamp(),1,NULL,NULL),
    (59,'EM50','Termination','Unable to terminate Employee.',current_timestamp(),1,NULL,NULL),
    (60,'EM51','Employee Directory','Please complete personal details first.',current_timestamp(),1,NULL,NULL),
    (61,'EM52','Document Approvals','Document Rejected successfully.',current_timestamp(),1,NULL,NULL),
    (62,'EM53','Document Approvals','Document Approved successfully.',current_timestamp(),1,NULL,NULL),
    (63,'EM54','Check List Meet','Program schedule mails send successfully.',current_timestamp(),1,NULL,NULL),
    (64,'EM55','New Hired','New hire added successfully.',current_timestamp(),1,NULL,NULL),
    (65,'EM56','Check List Meet','Please select checklist.',current_timestamp(),1,NULL,NULL),
    (66,'EM57','Document Upload','Aadhar Card Already uploaded you want to replace ?',current_timestamp(),1,NULL,NULL),
    (67,'EM58','Resignation','Resignation applied successfully.',current_timestamp(),1,NULL,NULL),
    (68,'EM59','Resignation','Unable to apply resignation request. Please try again.',current_timestamp(),1,NULL,NULL),
    (69,'EM60','Resignation','Resignation not cancelled.',current_timestamp(),1,NULL,NULL),
    (70,'EM61','Pre-Onboarding','Are you sure you want to delete ?',current_timestamp(),1,NULL,NULL),
    (71,'EM62',NULL,'Data is not saved.',current_timestamp(),1,NULL,NULL),
    (72,'EM63',NULL,'Please select date.',current_timestamp(),1,NULL,NULL),
    (73,'EM64',NULL,'Data added successfully.',current_timestamp(),1,NULL,NULL),
    (74,'EM65',NULL,'Induction status Updated sucessfully.',current_timestamp(),1,NULL,NULL),
    (75,'EM66',NULL,'Unable to update induction status',current_timestamp(),1,NULL,NULL),
    (76,'EM67','Company Information','Unable to add company information. Please try again.',current_timestamp(),1,NULL,NULL),
    (77,'EM68','Company Information','Unable to update company information. Please try again.',current_timestamp(),1,NULL,NULL),
    (78,'EM69','Company Information','Company Information added successfully.',current_timestamp(),1,NULL,NULL),
    (79,'EM70','Company Information','Company Information updated successfully.',current_timestamp(),1,NULL,NULL),(80,'EM71','Company Logo','Unable to add company logo. Please try again.',current_timestamp(),1,NULL,NULL),(81,'EM72','Company Logo','Unable to change company logo. Please try again.',current_timestamp(),1,NULL,NULL),(82,'EM73','Company Logo','Unable to remove company logo. Please try again.',current_timestamp(),1,NULL,NULL),(83,'EM74','Company Logo','Company logo uploaded successfully.',current_timestamp(),1,NULL,NULL),(84,'EM75','Company Logo','Company logo removed successfully.',current_timestamp(),1,NULL,NULL),(85,'EM76','Work Location','Unable to add work location. Please try again.',current_timestamp(),1,NULL,NULL),(86,'EM77','Work Location','Unable to update work location. Please try again.',current_timestamp(),1,NULL,NULL),(87,'EM78','Work Location','Unable to activate work location. Please try again.',current_timestamp(),1,NULL,NULL),(88,'EM79','Work Location','Unable to deactivate work location. Please try again.',current_timestamp(),1,NULL,NULL),(89,'EM80','Work Location','Work location added successfully.',current_timestamp(),1,NULL,NULL),(90,'EM81','Work Location','This work location have active employees. So we are unable to inactivate this work location now. Please move those employee to another work location and try again.',current_timestamp(),1,NULL,NULL),(91,'EM82','Work Location','Work location status updated successfully.',current_timestamp(),1,NULL,NULL),(92,'EM83','Work Location','Work Location already existed.',current_timestamp(),1,NULL,NULL),(93,'EM84','Department','Unable to add department. Please try again.',current_timestamp(),1,NULL,NULL),(94,'EM85','Department','Unable to update department. Please try again.',current_timestamp(),1,NULL,NULL),(95,'EM86','Department','Unable to activate department. Please try again.',current_timestamp(),1,NULL,NULL),(96,'EM87','Department','Unable to deactivate department. Please try again.',current_timestamp(),1,NULL,NULL),(97,'EM88','Department','Department added successfully.',current_timestamp(),1,NULL,NULL),(98,'EM89','Department','This department have active employees. So we are unable to inactivate this department now.  Please move those employee to another department and try again.',current_timestamp(),1,NULL,NULL),(99,'EM90','Department','Department status updated successfully.',current_timestamp(),1,NULL,NULL),(100,'EM91','Department','Department status updated successfully.',current_timestamp(),1,NULL,NULL),(101,'EM92','Department','Department already existed.',current_timestamp(),1,NULL,NULL),(102,'EM93','Designation','Unable to add designation. Please try again.',current_timestamp(),1,NULL,NULL),(103,'EM94','Designation','Designation added successfully.',current_timestamp(),1,NULL,NULL),(104,'EM95','Designation','Designation already existed.',current_timestamp(),1,NULL,NULL),(105,'EM96','Designation','Designation updated successfully.',current_timestamp(),1,NULL,NULL),(106,'EM97','Designation','Designation status updated successfully.',current_timestamp(),1,NULL,NULL),(107,'EM98','Designation','This designation have active employees. So we are unable to inactivate this designation now. Please move those employees to another designation and try again.',current_timestamp(),1,NULL,NULL),(108,'EM99','Designation','Unable to update designation. Please try again.',current_timestamp(),1,NULL,NULL),(109,'EM100','Designation','Unable to activate designation. Please try again.',current_timestamp(),1,NULL,NULL),(110,'EM101','Designation','Unable to deactivate designation. Please try again.',current_timestamp(),1,NULL,NULL),(111,'EM102','Employee','Unable to add employee. Please try again.',current_timestamp(),1,NULL,NULL),(112,'EM103','Employee','Unable to update employee details. Please try again.',current_timestamp(),1,NULL,NULL),(113,'EM104','Employee','Employee added successfully.',current_timestamp(),1,NULL,NULL),(114,'EM105','Employee','Employee updated successfully.',current_timestamp(),1,NULL,NULL),(115,'EM106','Role Permissions','Unable to add Role. Please try again.',current_timestamp(),1,NULL,NULL),(116,'EM107','Role Permissions','Role Name already exists. Try another.',current_timestamp(),1,NULL,NULL),(117,'EM108','Role Permissions','Role added successfully.',current_timestamp(),1,NULL,NULL),(118,'EM109','Role Permissions','Rule updated successfully.',current_timestamp(),1,NULL,NULL),(119,'EM110','Role Permissions','Existing permissions are already chosen with role \"x\".',current_timestamp(),1,NULL,NULL),(120,'EM111','Role Permissions','Unable to add Permissions to the Role. Please try again.',current_timestamp(),1,NULL,NULL),(121,'EM112','Role Permissions','Unable to update Role Permissions. Please try again.',current_timestamp(),1,NULL,NULL),(122,'EM113','Role Permissions','Role Permissions updated successfully.',current_timestamp(),1,NULL,NULL),(123,'EM114','Holiday','added successfully.',current_timestamp(),1,NULL,NULL),(124,'EM115','Holiday','Holiday updated successfully.',current_timestamp(),1,NULL,NULL),(125,'EM116','Holiday','Holiday deleted successfully.',current_timestamp(),1,NULL,NULL),(126,'EM117','Shift Master','Shift added successfully.',current_timestamp(),1,NULL,NULL),(127,'EM118','Shift Master','Shift updated successfully.',current_timestamp(),1,NULL,NULL),(128,'EM119','Shift Master','Unable to add shift. Please try again.',current_timestamp(),1,NULL,NULL),(129,'EM120','Shift Master','Shift activated successfully.',current_timestamp(),1,NULL,NULL),(130,'EM121','Shift Master','Unable to activate shift. Please try again.',current_timestamp(),1,NULL,NULL),(131,'EM122','Shift Master','Shift deactivated successfully.',current_timestamp(),1,NULL,NULL),(132,'EM123','Shift Master','This shift have active employees. So we are unable to inactivate this shift now. Please move those employee to another shift and try again.',current_timestamp(),1,NULL,NULL),(133,'EM124','Company Logo','Flie size exceeds 1MB. Please reduce file size.',current_timestamp(),1,NULL,NULL),(134,'EM125','Holiday','Unable to add holiday. Please try again.',current_timestamp(),1,NULL,NULL),(135,'EM126','Holiday','Unable to update holidays. Please try again.',current_timestamp(),1,NULL,NULL),(136,'EM127','Holiday','Unable to delete holidays. Please try again.',current_timestamp(),1,NULL,NULL),(137,'EM128','Change Password','Your new password cannot be the same as previous password(s) count of \"n\".',current_timestamp(),1,NULL,NULL),(138,'EM129','Change Password','The confirm password you entered does not match with new password. Please re-enter your password.',current_timestamp(),1,NULL,NULL),(139,'EM130','Change Password','Entered Email ID or Username is not registered.',current_timestamp(),1,NULL,NULL),(140,'EM131','Change Password','Password reset successfully.',current_timestamp(),1,NULL,NULL),(141,'EM132','Change Password','Password changed successfully.',current_timestamp(),1,NULL,NULL),(142,'EM133','New Hire List','Joining date should not greater than today.',current_timestamp(),1,NULL,NULL),(143,'EM134','Users Login','Login credentials created successfully.',current_timestamp(),1,NULL,NULL),(144,'EM135','Users Login','Unable to create login credentials.Please try again later.',current_timestamp(),1,NULL,NULL),(145,'EM136','Users Login','Login credentials updated successfully.',current_timestamp(),1,NULL,NULL),(146,'EM137','Users Login','Unable to update login credentials.Please try again later.',current_timestamp(),1,NULL,NULL),(147,'EM138','Messages Master','Message already exists. Try another.',current_timestamp(),1,NULL,NULL),(148,'EM139','Messages Master','Message updated successfully.',current_timestamp(),1,null,null),(149,'EM140','Messages Master','Unable to update message. Please try again.',current_timestamp(),1,NULL,NULL),(150,'EM141',NULL,'Please select a valid Image',current_timestamp(),1,NULL,NULL);
	/*!40000 ALTER TABLE `ems_messages` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `ems_new_hire`
	--

	DROP TABLE IF EXISTS `ems_new_hire`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_new_hire` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `candidate_id` varchar(20) DEFAULT NULL,
	  `empid` int(11) DEFAULT NULL,
	  `firstname` varchar(255) NOT NULL,
	  `middlename` varchar(255) DEFAULT NULL,
	  `lastname` varchar(255) DEFAULT NULL,
	  `personal_email` varchar(255) DEFAULT NULL,
	  `dateofjoin` datetime DEFAULT NULL,
	  `hired_date` datetime DEFAULT NULL,
	  `designation` int(11) DEFAULT NULL,
	  `contact_number` varchar(15) DEFAULT NULL,
	  `alternatecontact_number` varchar(15) DEFAULT NULL,
	  `status` int(11) NOT NULL,
	  `comment` varchar(512) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_preonboard_candidate`
	--

	DROP TABLE IF EXISTS `ems_preonboard_candidate`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_preonboard_candidate` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `candidateid` int(11) DEFAULT NULL,
	  `firstname` varchar(255) NOT NULL,
	  `middlename` varchar(255) DEFAULT NULL,
	  `lastname` varchar(255) DEFAULT NULL,
	  `personal_email` varchar(255) DEFAULT NULL,
	  `dateofbirth` datetime DEFAULT NULL,
	  `hired_date` datetime DEFAULT NULL,
	  `gender` int(11) DEFAULT NULL,
	  `maritalstatus` int(11) DEFAULT NULL,
	  `dateofjoin` datetime DEFAULT NULL,
	  `noticeperiod` int(11) DEFAULT NULL,
	  `languages_spoken` varchar(255) DEFAULT NULL,
	  `bloodgroup` int(11) DEFAULT NULL,
	  `designation` int(11) DEFAULT NULL,
	  `contact_number` varchar(15) DEFAULT NULL,
	  `emergencycontact_number` varchar(15) DEFAULT NULL,
	  `emergencycontact_relation` varchar(15) DEFAULT NULL,
	  `emergencycontactname` varchar(255) DEFAULT NULL,
	  `address` varchar(255) DEFAULT NULL,
	  `city` int(11) DEFAULT NULL,
	  `state` int(11) DEFAULT NULL,
	  `pincode` varchar(255) DEFAULT NULL,
	  `country` int(11) DEFAULT NULL,
	  `paddress` varchar(255) DEFAULT NULL,
	  `pcity` int(11) DEFAULT NULL,
	  `pstate` int(11) DEFAULT NULL,
	  `ppincode` varchar(255) DEFAULT NULL,
	  `pcountry` int(11) DEFAULT NULL,
	  `aadharnumber` varchar(12) DEFAULT NULL,
	  `passport` varchar(32) DEFAULT NULL,
	  `stepcompleted` int(11) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `candidate_id_efk_1` (`candidateid`),
	  CONSTRAINT `ems_preonboard_candidate_ibfk_1` FOREIGN KEY (`candidateid`) REFERENCES `ems_new_hire` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_program_schedules`
	--

	DROP TABLE IF EXISTS `ems_program_schedules`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_program_schedules` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `program_id` int(11) DEFAULT NULL,
	  `department` int(11) NOT NULL,
	  `designation` int(11) DEFAULT NULL,
	  `conducted_by` int(11) DEFAULT NULL,
	  `schedule_date` date NOT NULL,
	  `schedule_starttime` time NOT NULL,
	  `schedule_endtime` time NOT NULL,
	  `description` varchar(500) DEFAULT NULL,
	  `status` varchar(50) DEFAULT NULL,
	  `reason` varchar(500) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `conducted_by_fk_2` (`conducted_by`),
	  KEY `ems_programs_fk_1` (`program_id`),
	  CONSTRAINT `ems_program_schedules_ibfk_1` FOREIGN KEY (`conducted_by`) REFERENCES `employee` (`id`),
	  CONSTRAINT `ems_program_schedules_ibfk_2` FOREIGN KEY (`program_id`) REFERENCES `ems_programs_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_program_tasks`
	--

	DROP TABLE IF EXISTS `ems_program_tasks`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_program_tasks` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `program_id` int(11) DEFAULT NULL,
	  `name` varchar(64) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `ems_programs_master_fk_1` (`program_id`),
	  CONSTRAINT `ems_program_tasks_ibfk_1` FOREIGN KEY (`program_id`) REFERENCES `ems_programs_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `ems_program_tasks`
	--

	LOCK TABLES `ems_program_tasks` WRITE;
	/*!40000 ALTER TABLE `ems_program_tasks` DISABLE KEYS */;
	/*!40000 ALTER TABLE `ems_program_tasks` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `ems_programs_master`
	--

	DROP TABLE IF EXISTS `ems_programs_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_programs_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `name` varchar(64) DEFAULT NULL,
	  `description` varchar(255) DEFAULT NULL,
	  `status` int(11) NOT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `ems_reason_master`
	--

	DROP TABLE IF EXISTS `ems_reason_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_reason_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `reason` varchar(100) DEFAULT NULL,
	  `status` int(11) NOT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `ems_reason_master`
	--

	LOCK TABLES `ems_reason_master` WRITE;
	/*!40000 ALTER TABLE `ems_reason_master` DISABLE KEYS */;
	INSERT INTO `ems_reason_master` VALUES (1,'Better prospects',1,current_timestamp(),1,null,null),(2,'Family problems',1,current_timestamp(),1,NULL,NULL),
    (3,'Office at distant location',1,current_timestamp(),1,NULL,NULL),(4,'Unsatisfactory pay scale',1,current_timestamp(),1,null,null),(5,'Health Issue',1,current_timestamp(),1,NULL,NULL),(6,'Other',1,current_timestamp(),1,NULL,NULL),(7,'Sample new',2,current_timestamp(),1,null,null);
	/*!40000 ALTER TABLE `ems_reason_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `ems_rulemaster`
	--

	DROP TABLE IF EXISTS `ems_rulemaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_rulemaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `rulename` varchar(255) NOT NULL,
	  `description` varchar(1024) NOT NULL,
	  `category` varchar(25) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  UNIQUE KEY `rulename` (`rulename`),
	  UNIQUE KEY `description` (`description`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `ems_rulemaster`
	--

	LOCK TABLES `ems_rulemaster` WRITE;
	/*!40000 ALTER TABLE `ems_rulemaster` DISABLE KEYS */;
	INSERT INTO `ems_rulemaster` VALUES (1,'PASSWORD_MIN_LENGTH','Minimum length of user\'s password',NULL),(2,'PASSWORD_MAX_LENGTH','Maximum length of user\'s password',NULL),(3,'PASSWORD_LAST_PASSWORD_MATCH_COUNT','How many last passwords should not match with the current password',NULL),(4,'PASSWORD_IS_START_WITH_CAPITAL_LETTER','Should the password start with a capital letter',NULL),(5,'PASSWORD_MIN_CAPITAL_LETTERS_COUNT','How many minimum capital letters should be there in the password',NULL),(6,'PASSWORD_IS_SPECIAL_CHARACTERS_ALLOWED','Is special characters allowed in the password?',NULL),(7,'PASSWORD_MIN_SPECIAL_CHARACTERS_COUNT','Minimum count of special characters allowed in the password',NULL),(8,'PASSWORD_MIN_SMALL_LETTERS_COUNT','How many minimum small letters should be there in the password',NULL),(9,'PASSWORD_MIN_NUMBERS_COUNT','How many minimum numbers should be there in the password',NULL),(10,'SEND_AUTOMATIC_REMAINDERS_ONBOARD','Send Automatic Remainders for Onboarding','Onboarding'),(11,'PROBATION_PERIOD','Probation Period','Onboarding'),(12,'PROBATION_PERIOD_DAYS','Probation Period in Days','Onboarding'),(13,'SEND_AUTOMATIC_REMAINDERS_OFFBOARD','Send Automatic Remainders for Offboarding','Offboarding'),(14,'NOTICE_PERIOD','Notice Period','Offboarding'),(15,'NOTICE_PERIOD_DAYS','Notice Period in Days','Offboarding'),(16,'DEFAULT_WEEKOFF_1','1st default weekoff',NULL),(17,'DEFAULT_WEEKOFF_2','2nd default weekoff',NULL),(18,'DEFAULT_WEEKOFF_3','3rd default weekoff',NULL);
	/*!40000 ALTER TABLE `ems_rulemaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `ems_rulevalues`
	--

	DROP TABLE IF EXISTS `ems_rulevalues`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_rulevalues` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `ruleid` int(11) NOT NULL,
	  `value` varchar(64) DEFAULT NULL,
	  `effectivefromdate` datetime DEFAULT NULL,
	  `effectivetodate` datetime DEFAULT NULL,
	  `status` char(1) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `ruleid` (`ruleid`),
	  CONSTRAINT `ems_ibfk_1` FOREIGN KEY (`ruleid`) REFERENCES `ems_rulemaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `ems_rulevalues`
	--

	LOCK TABLES `ems_rulevalues` WRITE;
	/*!40000 ALTER TABLE `ems_rulevalues` DISABLE KEYS */;
	INSERT INTO `ems_rulevalues` VALUES (1,1,'8',current_timestamp(),null,'1'),
    (2,2,'8',current_timestamp(),null,'1'),
    (3,3,'3',current_timestamp(),null,'1'),
    (4,4,'0',current_timestamp(),null,'1'),
    (5,5,'1',current_timestamp(),null,'1'),
    (6,6,'1',current_timestamp(),null,'1'),
    (7,7,'1',current_timestamp(),null,'1'),
    (8,8,'1',current_timestamp(),null,'1'),
    (9,9,'1',current_timestamp(),null,'1'),
    (10,10,'1',current_timestamp(),null,'1'),
    (11,11,'1',current_timestamp(),null,'1'),
    (12,12,'15',current_timestamp(),null,'1'),
    (13,13,'1',current_timestamp(),null,'1'),
    (14,14,'1',current_timestamp(),null,'1'),
    (15,15,'30',current_timestamp(),null,'1'),
    (16,16,'7',current_timestamp(),NULL,'1'),
    (17,17,'1',current_timestamp(),NULL,'1');
	/*!40000 ALTER TABLE `ems_rulevalues` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `ems_statusmaster`
	--

	DROP TABLE IF EXISTS `ems_statusmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_statusmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `name` varchar(64) DEFAULT NULL,
	  `display_name` varchar(64) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `ems_statusmaster`
	--

	LOCK TABLES `ems_statusmaster` WRITE;
	/*!40000 ALTER TABLE `ems_statusmaster` DISABLE KEYS */;
	/*!40000 ALTER TABLE `ems_statusmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `ems_termination_category_master`
	--

	DROP TABLE IF EXISTS `ems_termination_category_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `ems_termination_category_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `category` varchar(100) DEFAULT NULL,
	  `status` int(11) NOT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `ems_termination_category_master`
	--

	LOCK TABLES `ems_termination_category_master` WRITE;
	/*!40000 ALTER TABLE `ems_termination_category_master` DISABLE KEYS */;
	INSERT INTO `ems_termination_category_master` VALUES (1,'Violation of Company Rules',1,current_timestamp(),1,NULL,NULL),
    (2,'Employee Disciplinary Action ',1,current_timestamp(),1,NULL,NULL),
    (3,'Lack of cooperation and progressive discipline',1,current_timestamp(),1,NULL,NULL);
	/*!40000 ALTER TABLE `ems_termination_category_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `errorlogs`
	--

	DROP TABLE IF EXISTS `errorlogs`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `errorlogs` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `service` varchar(32) DEFAULT NULL,
	  `function` varchar(255) DEFAULT NULL,
	  `method` varchar(512) DEFAULT NULL,
	  `request` varchar(10000) DEFAULT NULL,
	  `response` varchar(10000) DEFAULT NULL,
	  `statuscode` int(11) DEFAULT NULL,
	  `createdat` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;
    
    
--
-- Table structure for table `esi_configs`
--

DROP TABLE IF EXISTS `esi_configs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `esi_configs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `state_id` int(11) NOT NULL,
  `value` varchar(255) DEFAULT NULL,
  `effective_from_date` datetime DEFAULT NULL,
  `effective_to_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `esi_configs_state_id_fk` (`state_id`),
  CONSTRAINT `esi_configs_state_id_fk` FOREIGN KEY (`state_id`) REFERENCES `statesmaster` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `esi_configs`
--
--
-- Table structure for table `filecategory_master`
--

DROP TABLE IF EXISTS `filecategory_master`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `filecategory_master` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `module_id` int(11) NOT NULL,
  `category` varchar(64) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `filecategory_master_module_id_fk` (`module_id`),
  CONSTRAINT `filecategory_master_module_id_fk` FOREIGN KEY (`module_id`) REFERENCES `modulesmaster` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `filecategory_master`
--

LOCK TABLES `filecategory_master` WRITE;
/*!40000 ALTER TABLE `filecategory_master` DISABLE KEYS */;
INSERT INTO `filecategory_master` VALUES (1,1,'PAN','PAN Card'),(2,1,'AADHAR','Aadhar Card'),(3,1,'DRVLICENSE','Driving License'),(4,1,'PASSPORT','Passport'),(5,1,'MARKSSHEET','Marks Sheet'),(6,1,'EXPLETTER','Experience Letter'),(7,1,'OFFERLETTER','Offer Letter'),(8,2,'SL','Sick Leave Document'),(9,2,'ML','Maternity Leave Document'),(10,2,'PL','Paternity Leave Document'),(11,4,'ATTENDANCE','Attendance'),(12,5,'PAYSLIP','Payslip'),(13,5,'FORM16','Form-16'),(14,6,'QUOTATION','Quotation'),(15,6,'BILLS','Bills'),(16,7,'RESUME','Resume'),(17,1,'PROFILE','Profile'),(18,2,'LOGO','Logo'),(19,2,'test','test'),(20,5,'INVESTMENTS','Investment proofs'),(21,5,'DISABILITIES','Disability proofs');
/*!40000 ALTER TABLE `filecategory_master` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `filepaths_master`
--

DROP TABLE IF EXISTS `filepaths_master`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `filepaths_master` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `module_id` int(11) NOT NULL,
  `root_folder` varchar(64) DEFAULT NULL,
  `module_code` varchar(16) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `module_id_fk` (`module_id`),
  CONSTRAINT `filepaths_master_ibfk_1` FOREIGN KEY (`module_id`) REFERENCES `modulesmaster` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;


--
-- Table structure for table `files_master`
--

DROP TABLE IF EXISTS `files_master`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `files_master` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `empid` int(11) NOT NULL,
  `candidate_id` int(11) DEFAULT NULL,
  `file_category` int(11) DEFAULT NULL,
  `document_number` varchar(64) DEFAULT NULL,
  `request_id` int(11) DEFAULT NULL,
  `filepath_id` int(11) NOT NULL,
  `filename` varchar(1024) DEFAULT NULL,
  `upload_date` datetime DEFAULT NULL,
  `file_status` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `filepath_id_fk` (`filepath_id`),
  KEY `file_category_id_fk` (`file_category`),
  CONSTRAINT `file_category_id_fk` FOREIGN KEY (`file_category`) REFERENCES `filecategory_master` (`id`),
  CONSTRAINT `filepath_id_fk` FOREIGN KEY (`filepath_id`) REFERENCES `filepaths_master` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=94 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `functionalitiesmaster`
	--

	DROP TABLE IF EXISTS `functionalitiesmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `functionalitiesmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `functionalityname` varchar(128) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `functionalitiesmaster`
	--

	LOCK TABLES `functionalitiesmaster` WRITE;
	/*!40000 ALTER TABLE `functionalitiesmaster` DISABLE KEYS */;
	INSERT INTO `functionalitiesmaster` VALUES (1,'Add'),(2,'Edit'),(3,'View'),(4,'Cancel'),(5,'Delete'),(6,'Approval');
	/*!40000 ALTER TABLE `functionalitiesmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `gendermaster`
	--

	DROP TABLE IF EXISTS `gendermaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `gendermaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `gender` varchar(32) NOT NULL,
	  `status` int(1) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `gendermaster`
	--

	LOCK TABLES `gendermaster` WRITE;
	/*!40000 ALTER TABLE `gendermaster` DISABLE KEYS */;
	INSERT INTO `gendermaster` VALUES (1,'Male',1),(2,'Female',1),(3,'Others',1);
	/*!40000 ALTER TABLE `gendermaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `holidaysmaster`
	--

	DROP TABLE IF EXISTS `holidaysmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `holidaysmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `year` int(4) NOT NULL,
	  `description` varchar(255) NOT NULL,
	  `date` date DEFAULT NULL,
	  `day` varchar(15) NOT NULL,
	  `location` int(11) DEFAULT NULL,
	  `leave_cycle_year` int(4) DEFAULT NULL,
	  `created_on` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	  `created_by` int(11) DEFAULT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `location` (`location`),
	  CONSTRAINT `holidaysmaster_ibfk_1` FOREIGN KEY (`location`) REFERENCES `companyworklocationsmaster` (`city`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `integration_empids`
	--

	DROP TABLE IF EXISTS `integration_empids`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `integration_empids` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `boonempid` int(11) NOT NULL,
	  `deviceempid` int(11) NOT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `leave_cycle_year_master`
	--

	DROP TABLE IF EXISTS `leave_cycle_year_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `leave_cycle_year_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `leave_cycle_year_name` varchar(64) NOT NULL,
	  `cycle_commencement_month` varchar(64) NOT NULL,
	  PRIMARY KEY (`id`),
	  UNIQUE KEY `leave_cycle_year_name` (`leave_cycle_year_name`),
	  UNIQUE KEY `cycle_commencement_month` (`cycle_commencement_month`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `leave_cycle_year_master`
	--

	LOCK TABLES `leave_cycle_year_master` WRITE;
	/*!40000 ALTER TABLE `leave_cycle_year_master` DISABLE KEYS */;
	INSERT INTO `leave_cycle_year_master` VALUES (1,'Jan - Dec','1'),(2,'Apr - Mar','4');
	/*!40000 ALTER TABLE `leave_cycle_year_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `lm_approval_count_master`
	--

	DROP TABLE IF EXISTS `lm_approval_count_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_approval_count_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `designation_id` int(11) NOT NULL,
	  `leavetypeid` int(11) NOT NULL,
	  `threshold_value` int(3) NOT NULL,
	  `pre_threshold_approval_count` int(1) NOT NULL,
	  `post_threshold_approval_count` int(1) NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `lm_approval_count_master_fk` (`designation_id`),
	  KEY `lm_approval_count_master_lv_fk` (`leavetypeid`),
	  CONSTRAINT `lm_approval_count_master_fk` FOREIGN KEY (`designation_id`) REFERENCES `designationsmaster` (`id`),
	  CONSTRAINT `lm_approval_count_master_lv_fk` FOREIGN KEY (`leavetypeid`) REFERENCES `lm_leavesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `lm_approval_count_master`
	--

	LOCK TABLES `lm_approval_count_master` WRITE;
	/*!40000 ALTER TABLE `lm_approval_count_master` DISABLE KEYS */;
	/*!40000 ALTER TABLE `lm_approval_count_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `lm_employee_approver_master`
	--

	DROP TABLE IF EXISTS `lm_employee_approver_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_employee_approver_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `approver_level` int(2) NOT NULL,
	  `approver_id` int(11) NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `lm_employee_approver_master_empfk` (`empid`),
	  KEY `lm_employee_approver_master_appfk` (`approver_id`),
	  CONSTRAINT `lm_employee_approver_master_appfk` FOREIGN KEY (`approver_id`) REFERENCES `employee` (`id`),
	  CONSTRAINT `lm_employee_approver_master_empfk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `lm_employee_approver_master`
	--

	LOCK TABLES `lm_employee_approver_master` WRITE;
	/*!40000 ALTER TABLE `lm_employee_approver_master` DISABLE KEYS */;
	/*!40000 ALTER TABLE `lm_employee_approver_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `lm_employee_utilized_event_leaves`
	--

	DROP TABLE IF EXISTS `lm_employee_utilized_event_leaves`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_employee_utilized_event_leaves` (
	  `id` int(11) NOT NULL,
	  `empid` int(11) NOT NULL,
	  `leavetype` int(11) NOT NULL,
	  `fromdate` datetime DEFAULT NULL,
	  `todate` datetime DEFAULT NULL,
	  `fromhalfdayleave` varchar(32) DEFAULT NULL,
	  `tohalfdayleave` varchar(32) DEFAULT NULL,
	  `leavecount` varchar(6) DEFAULT NULL,
	  `appliedon` datetime DEFAULT NULL,
	  `approvedby` varchar(64) DEFAULT NULL,
	  `leavereason` varchar(512) DEFAULT NULL,
	  `leavestatus` varchar(32) DEFAULT NULL,
	  `contactnumber` varchar(15) DEFAULT NULL,
	  `contactemail` varchar(32) DEFAULT NULL,
	  `contactaddress` varchar(1024) DEFAULT NULL,
	  `action_reason` varchar(512) DEFAULT NULL,
	  `approvedon` datetime DEFAULT NULL,
	  `updatedon` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  KEY `leavetype` (`leavetype`),
	  CONSTRAINT `lm_employee_utilized_event_leaves_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `lm_employee_utilized_event_leaves_ibfk_2` FOREIGN KEY (`leavetype`) REFERENCES `lm_leavesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;


	--
	-- Table structure for table `lm_employeeleavebalance`
	--

	DROP TABLE IF EXISTS `lm_employeeleavebalance`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_employeeleavebalance` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `leavetypeid` int(11) NOT NULL,
	  `balance` decimal(5,2) DEFAULT NULL,
	  `lastupdatedat` datetime DEFAULT NULL,
	  `leave_cycle_year` int(4) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `lm_employeeleavebalance` (`id`),
	  KEY `lm_employeeleavebalance_fk` (`empid`),
	  KEY `lm_employeelb_leavetype_fk` (`leavetypeid`),
	  CONSTRAINT `lm_employeelb_leavetype_fk` FOREIGN KEY (`leavetypeid`) REFERENCES `lm_leavesmaster` (`id`),
	  CONSTRAINT `lm_employeeleavebalance_fk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `lm_employeeleaves`
	--

	DROP TABLE IF EXISTS `lm_employeeleaves`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_employeeleaves` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `leavetype` int(11) NOT NULL,
	  `fromdate` datetime DEFAULT NULL,
	  `todate` datetime DEFAULT NULL,
	  `fromhalfdayleave` varchar(32) DEFAULT NULL,
	  `tohalfdayleave` varchar(32) DEFAULT NULL,
	  `leavecount` varchar(6) DEFAULT NULL,
	  `appliedon` datetime DEFAULT NULL,
	  `approvedby` varchar(64) DEFAULT NULL,
	  `leavereason` varchar(512) DEFAULT NULL,
	  `leavestatus` varchar(32) DEFAULT NULL,
	  `contactnumber` varchar(15) DEFAULT NULL,
	  `contactemail` varchar(32) DEFAULT NULL,
	  `contactaddress` varchar(1024) DEFAULT NULL,
	  `leave_cycle_year` int(4) DEFAULT NULL,
	  `action_reason` varchar(512) DEFAULT NULL,
	  `approvedon` datetime DEFAULT NULL,
	  `updatedon` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  KEY `leavetype` (`leavetype`),
	  CONSTRAINT `lm_employeeleaves_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `lm_employeeleaves_ibfk_2` FOREIGN KEY (`leavetype`) REFERENCES `lm_leavesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `lm_errormessages`
	--

	DROP TABLE IF EXISTS `lm_errormessages`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_errormessages` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `errorcode` varchar(255) DEFAULT NULL,
	  `screenname` varchar(255) DEFAULT NULL,
	  `errormessage` varchar(2048) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `lm_errormessages`
	--

	LOCK TABLES `lm_errormessages` WRITE;
	/*!40000 ALTER TABLE `lm_errormessages` DISABLE KEYS */;
	INSERT INTO `lm_errormessages` VALUES (1,'LM1','common','This field is required.s'),(2,'LM2','common','Please enter valid data.'),(3,'LM3','common','Please select an option.'),(7,'LM7',NULL,'To date must be greater than From date.'),(8,'LM8',NULL,'Unable to update your profile. Please try again.'),(9,'LM9',NULL,'You may have overdrawn the balance and hence cannot apply anymore. Your balance as on DD/MM/YYYY is 2.'),(10,'LM10',NULL,'Leaves during probation period is not permitted.'),(11,'LM11',NULL,'Leave availed days exceeds the maximum limit for this leave type.'),(12,'LM12',NULL,'One year is the minimum gap between each pregnancy.'),(13,'LM13',NULL,'One year is the minimum gap between each pregnancy of your spouse.'),(14,'LM14',NULL,'The username and/or password you entered did not match our records. Please double-check and try again.'),(15,'LM15',NULL,'Unable to submit leave request. Please try again.'),(16,'LM16',NULL,'Unable to delete leave request. Please try again.'),(17,'LM17',NULL,'Unable to cancel leave request. Please try again.'),(18,'LM18',NULL,'Unable to approve leave request. Please try again.'),(19,'LM19',NULL,'Unable to reject leave request. Please try again.'),(34,'LM34',NULL,'Flie size exceeds 1MB. Please reduce file size.'),(40,'LM40','Leavepolicies','Unable to add leave policies. Please try again.'),(41,'LM41','Leavepolicies','Unable to update leave policies. Please try again.'),(42,'LM42','Leavepolicies','Unable to add leave type. Please try again.'),(43,'LM43','Leavepolicies','Unable to update leave type. Please try again.'),(44,'LM44','Leavepolicies','This field requires a unique entry and the entered value already exists.'),(45,'LM45','Leavepolicies','Leave Type Name already exists. Try another.'),(46,'LM46','Leavepolicies','Display Name already exists. Try another.'),(53,'LM53','Message Master','Error Message already exists. Try another message.'),(54,'LM54','common','Please enter a valid pincode.'),(65,'LM65','Leavepolicies','Leave type added successfully'),(66,'LM66','Leavepolicies','Leave type updated successfully'),(67,'LM67','Leavepolicies','Leave type activated successfully'),(68,'LM68','Leavepolicies','Leave type deactivated successfully'),(72,'LM72','New Leave Request','Leave request updated successfully'),(73,'LM73',NULL,'Leave request deleted successfully'),(74,'LM74',NULL,'Leave request cancelled successfully'),(75,'LM75','Edit Profile','Edit profile updated successfully'),(76,'LM76',NULL,'Leave request updated successfully'),(77,'LM77',NULL,'Leave request deleted successfully'),(78,'LM78',NULL,'Leave request cancelled successfully'),(79,'LM79',NULL,'Leave request applied successfully.'),(80,'LM80',NULL,'Leave request updated successfully'),(81,'LM81',NULL,'Leave request deleted successfully'),(82,'LM82',NULL,'Leave request cancelled successfully'),(83,'LM83',NULL,'Comp-off applied successfully'),(84,'LM84',NULL,'Leave request applied  successfully'),(85,'LM85',NULL,'Leave request approved successfully'),(86,'LM86',NULL,'Leave request is rejected'),(89,'LM89','Message Mater','Unable to update message. Please try again.'),(90,'LM90','Message Master','Unable to update messages. Please try again.'),(91,'LM91','Message Master','Message updated successfully.'),(92,'LM92','Message Master','Messages updated successfully.'),(97,'LM97',NULL,'The number of days in your leave request exceeds maximum permissable value in one instance for this leave type. Please select shorter duration.'),(98,'LM98',NULL,'The number of days leave request of this leave type has to be applied in advance is'),(99,'LM99',NULL,'You have availed this leave type upto maximum permissable limit in a year. Please select another leave type.'),(100,'LM100',NULL,'For known ailments, sick leave can be applied not less than 10 days in advance.'),(101,'LM101',NULL,'The gap between each leave of this leave type is 1 year.'),(102,'LM102',NULL,'You have availed this leave type upto maximum permissable limit.'),(103,'LM103',NULL,'Your leave request exceeds maximum permissable count for this leave type per term.'),(107,'LM107',NULL,'Supporting document should be uploaded for this leave duration.'),(108,'LM108',NULL,'Unable to update the password. Please try again.'),(109,'LM109',NULL,'You do not have sufficient balance in this leave type. Please select another leave type.'),(110,'LM110','Leave policies','Leave type added successfully.'),(111,'LM111','Leave Policies','Leave type updated successfully.'),(112,'LM112','Common','Please enter below 500 characters only'),(113,'LM113',NULL,'Leave approved successfully.'),(114,'LM114',NULL,'Leave rejected successfully.'),(115,'LM115',NULL,'Comp off approved successfully.'),(116,'LM116',NULL,'Comp off rejected successfully.'),(117,'LM117',NULL,'Image size exceeds 1MB. Please reduce image size.'),(118,'LM118',NULL,'Profile updated successfully.'),(119,'LM119',NULL,'Please try again later'),(120,'LM120',NULL,'Leave cancellation approved successfully.'),(121,'LM121',NULL,'Leave cancellation rejected successfully.'),(133,'LM133',NULL,'Leave type activated successfully.'),(134,'LM134',NULL,'Unable to activate leave type. Please try again.'),(135,'LM135',NULL,'Leave type deactivated successfully.'),(136,'LM136',NULL,'Comp Off registered successfully.'),(137,'LM137',NULL,'Unable to register Comp Off. Please try again.'),(138,'LM138',NULL,'Unable to update Profile. Please try again.'),(139,'LM139',NULL,'Modifying this leavetype credit frequency to once a yer will deactive Advanced Leave. Do you wish to continue ?.'),(140,'LM140',NULL,'File size must be less than 1MB.'),(141,'LM141',NULL,'Only PDF allowed.'),(142,'LM142',NULL,'Please select a file'),(143,'LM143',NULL,'Leave for this leave type can be applied not less than 7 days in advance.');
	/*!40000 ALTER TABLE `lm_errormessages` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `lm_leaveapprovalstatustracker`
	--

	DROP TABLE IF EXISTS `lm_leaveapprovalstatustracker`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_leaveapprovalstatustracker` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `leaveid` int(11) NOT NULL,
	  `approverid` int(11) DEFAULT NULL,
	  `level` int(2) DEFAULT NULL,
	  `status` varchar(32) DEFAULT NULL,
	  `createddate` datetime DEFAULT NULL,
	  `updateddate` datetime DEFAULT NULL,
	  `action_reason` varchar(1024) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid_fk` (`empid`),
	  KEY `leaveid_fk` (`leaveid`),
	  KEY `rmid_fk` (`approverid`),
	  CONSTRAINT `empid_fk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `leaveid_fk` FOREIGN KEY (`leaveid`) REFERENCES `lm_employeeleaves` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `lm_leavecreditsmaster`
	--

	DROP TABLE IF EXISTS `lm_leavecreditsmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_leavecreditsmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `leavetypeid` int(11) NOT NULL,
	  `leavecount` decimal(5,2) NOT NULL,
	  `crediteddate` date NOT NULL,
	  `leave_cycle_year` int(4) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `lm_leavecreditsmaster_emfk_1` (`empid`),
	  KEY `lm_leavecreditsmaster_ltfk_1` (`leavetypeid`),
	  CONSTRAINT `lm_leavecreditsmaster_emfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `lm_leavecreditsmaster_ltfk_1` FOREIGN KEY (`leavetypeid`) REFERENCES `lm_leavesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `lm_leavescarryforward`
	--

	DROP TABLE IF EXISTS `lm_leavescarryforward`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_leavescarryforward` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `leavetype_id` int(11) NOT NULL,
	  `leave_cycle_year` varchar(4) NOT NULL,
	  `opening_balance` int(11) NOT NULL,
	  `leaves_assigned` int(11) NOT NULL,
	  `leaves_availed` int(11) NOT NULL,
	  `closing_balance` int(11) NOT NULL,
	  `total_carryforwarded` int(11) NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  KEY `lm_leavescarryforward_lidfk` (`leavetype_id`),
	  CONSTRAINT `lm_leavescarryforward_ibfk_1` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `lm_leavescarryforward`
	--

	LOCK TABLES `lm_leavescarryforward` WRITE;
	/*!40000 ALTER TABLE `lm_leavescarryforward` DISABLE KEYS */;
	/*!40000 ALTER TABLE `lm_leavescarryforward` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `lm_leavesmaster`
	--

	DROP TABLE IF EXISTS `lm_leavesmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_leavesmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `leavename` varchar(64) NOT NULL,
	  `leavecolor` varchar(64) DEFAULT NULL,
	  `status` char(8) DEFAULT NULL,
	  `display_name` varchar(64) NOT NULL,
	  `ispredefined` int(1) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `lm_leavesmaster`
	--

	LOCK TABLES `lm_leavesmaster` WRITE;
	/*!40000 ALTER TABLE `lm_leavesmaster` DISABLE KEYS */;
	INSERT INTO `lm_leavesmaster` VALUES (1,'Advanced Leave','rgb(228,206,62)','Inactive','Advanced Leave',1),
    (2,'Casual Leave','rgb(228,206,62)','Inactive','Casual Leave',1),
    (3,'Sick Leave','rgb(22,49,48)','Inactive','Sick Leave',1),
    (4,'Earned Leave','rgb(161,50,91)','Inactive','Earned Leaves',1),
    (5,'Maternity Leave','rgb(228,206,62)','Inactive','Maternity Leave',1),
    (6,'Paternity Leave','rgb(135,119,18)','Inactive','Paternity Leave',1),
    (7,'Marriage Leave','rgb(5,97,86)','Inactive','Marriage Leave',1),
    (8,'Bereavement Leave','rgb(55,144,143)','Inactive','Bereavement Leaves',1),
    (9,'Comp Off Leave','rgb(49,72,124)','Inactive','Comp Off Leave',1),
    (10,'Loss of Pay Leave','rgb(13,194,174)','Inactive','Loss of Pay Leave',1);
	/*!40000 ALTER TABLE `lm_leavesmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `lm_register_comp_off`
	--

	DROP TABLE IF EXISTS `lm_register_comp_off`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_register_comp_off` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `comp_off_date` date NOT NULL,
	  `applied_date` date NOT NULL,
	  `worked_hours` int(2) NOT NULL,
	  `worked_minutes` int(2) DEFAULT NULL,
	  `reason` varchar(1000) DEFAULT NULL,
	  `rmid` int(11) NOT NULL,
	  `status` varchar(255) DEFAULT NULL,
	  `remarks` varchar(1000) DEFAULT NULL,
	  `createddate` datetime DEFAULT NULL,
	  `updateddate` datetime DEFAULT NULL,
	  `utilized_leave_id` varchar(255) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `lm_register_comp_off_empid_fk` (`empid`),
	  KEY `lm_register_comp_off_rmid_fk` (`rmid`),
	  CONSTRAINT `lm_register_comp_off_empid_fk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `lm_register_comp_off_rmid_fk` FOREIGN KEY (`rmid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;


	--
	-- Table structure for table `lm_rulecategorymaster`
	--

	DROP TABLE IF EXISTS `lm_rulecategorymaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_rulecategorymaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `subcategory` varchar(64) DEFAULT NULL,
	  `module` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `lm_rulecategorymaster`
	--

	LOCK TABLES `lm_rulecategorymaster` WRITE;
	/*!40000 ALTER TABLE `lm_rulecategorymaster` DISABLE KEYS */;
	/*!40000 ALTER TABLE `lm_rulecategorymaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `lm_rulemaster`
	--

	DROP TABLE IF EXISTS `lm_rulemaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_rulemaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `rulename` varchar(255) DEFAULT NULL,
	  `description` varchar(2048) DEFAULT NULL,
	  `iscommonrule` varchar(1) DEFAULT 'n',
	  `additional_information` varchar(1000) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `lm_rulemaster`
	--

	LOCK TABLES `lm_rulemaster` WRITE;
	/*!40000 ALTER TABLE `lm_rulemaster` DISABLE KEYS */;
	INSERT INTO `lm_rulemaster` VALUES (1,'LEAVETYPE_THAT_CAN_BE_AVAILED_IN_ADVANCE','Leave type that can be availed in advance','n','Select the leave type that can be availed in advance.'),(2,'LEAVES_MAX_COUNT_PER_YEAR','Maximum count of leaves per year','n',NULL),(3,'LEAVES_CREDIT_FREQUENCY','Does the company credit leaves monthly/quarterly/half-yearly/yearly?(in months)?','n',NULL),(4,'LEAVES_WEEKENDS_INCLUDED','Will the company consider both weekends as part of leave, if leave is applied on Friday & Monday(Week-offs)?','n',NULL),(5,'LEAVES_MAX_CAP_FOR_ONE_INSTANCE','How many maximum number of leaves can be taken at an instance?','n',NULL),(6,'LEAVES_MIN_SERVICE_ELIGIBILITY','Minimum service (in months) for employees to get these leaves (for the first time joinee)','n',NULL),(7,'LEAVES_MIN_DAYS_PRIOR_APPLICATION','How many days in advance , employee has to apply this leave in case of planned leaves?','n',NULL),(8,'LEAVES_COMPANY_HOLIDAYS_INCLUDED','Should the company  consider company holiday as part of leave, if leave is applied on prior and later days?','n',NULL),(9,'LEAVES_COUNT_TO_BE_CARRIED_FORWARD','If leaves are not utilized,how many maximum leaves will be carried forward','n','Maximum number of leaves that will be carried forward. If leave balance < this value, the lower value will be carried forward  '),(10,'LEAVES_ENCASHMENT_MIN_COUNT_ELIGIBILITY','Minimum no.of leaves to be accumulated for eligibility of leave encashment','n','If 30 is entered, for encashment, user should have 30+ leaves as balance.'),(11,'LEAVES_MAX_AVAIL_COUNT','Max no.of times this type of leaves can be availed per year','n',NULL),(12,'SICK_LEAVES_MIN_DAYS_PRIOR_APPLICATION_FOR_KNOWN_AILMENTS','How many days in advance , employee has to apply this leave (only for planned hospital treatments)','n',NULL),(13,'LEAVES_MIN_DAYS_FOR_DOCUMENT_UPLOAD','Min. leave days for employees that require supporting document upload','n',NULL),(14,'LEAVES_GAP_BETWEEN_TERMS','How much minimum (years) gap should be there between each term','n','This rule is applicable only to maternity/paternity leave.'),(15,'LEAVES_ELIGIBLE_ON_WEEKOFFS','Is working on weekoff days considered for comp-off?','n','This rule is applicable only to comp-off leave.'),(16,'LEAVES_ELIGIBLE_ON_COMPANY_HOLIDAYS','Is working on company holidays considered for comp-off?','n',NULL),(17,'LEAVES_LAPSE_PERIOD','Max no.of days by when unused leaves will be lapsed/converted to perks','n','Please enter number of calendar days.'),(18,'LEAVES_LAPSED_CONVERSION_TO_PERKS_APPLICABLE','Are lapsed leaves convertible to perks?','n',NULL),(19,'LEAVES_ELIGIBILITY_MINIMUM_HOURS','How many minimum hours of non-working day will be eligible for this leave type','n','This rule is applicable only to comp-off leave.'),(20,'LEAVES_DURATION_FOR_BACKDATED_LEAVES','How many past days is allowed for applying past dated leaves','y','Please enter number of calendar days.'),(21,'LEAVES_IS_MAIL_FACILITY_REQUIRED','Do you need sending of mails when submitted/approved/rejected?','y',NULL),(22,'LEAVE_CYCLE_YEAR','Please select the leave cycle of the company.','y','Please select Jan-Dec if leave cycle starts from January.'),(23,'MAX_AVAIL_COUNT','Maximum no.of times to avail this type of leave','n','This rule is applicable only to marriage/maternity/paternity/bereavement/loss of pay leave types.'),(24,'LEAVES_MAX_COUNT_PER_TERM','Maximum count of leaves per term','n',NULL),(25,'COMPOFF_MIN_WORKING_HOURS_FOR_ELIGIBILITY','Minimum number of hours employee should work so as to get eligibility for comp-off','n','This rule is applicable only to comp-off leave.'),(26,'COMPOFF_MAX_BACKDATED_DAYS_PERMITTED_FOR_SUBMISSION','Maximum number of backdated days permitted for an employee to submit compoff eligible work','n','This rule is applicable only to comp-off leave.'),(27,'COMPOFF_THRESHOLD_DAYS_TO_LAPSE_OR_CONVERT_LEAVES_TO_PERKS','Maximum number of days after which earned compoff leaves will be lapsed or converted to perks.','n','This rule is applicable only to comp-off leave.'),(28,'LEAVETYPE_FOR_WHICH_BALANCE_IS_TO_BE_CARRIED_FORWARD','Balance of which leavetype should be carried forward?','y',NULL),(29,'QUANTITY_OF_LEAVES_TO_BE_CARRIED_FORWARD','How many number of leaves are to be carried forward?','y',NULL);
	/*!40000 ALTER TABLE `lm_rulemaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `lm_rulevalues`
	--

	DROP TABLE IF EXISTS `lm_rulevalues`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_rulevalues` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `ruleid` int(11) NOT NULL,
	  `leavetypeid` int(11) DEFAULT NULL,
	  `value` varchar(64) DEFAULT NULL,
	  `effectivefromdate` datetime DEFAULT NULL,
	  `effectivetodate` datetime DEFAULT NULL,
	  `status` char(8) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `ruleid` (`ruleid`),
	  KEY `leavetypeid` (`leavetypeid`),
	  CONSTRAINT `lm_leavesmaster_ibfk_1` FOREIGN KEY (`leavetypeid`) REFERENCES `lm_leavesmaster` (`id`),
	  CONSTRAINT `lm_rulevalues_ibfk_1` FOREIGN KEY (`ruleid`) REFERENCES `lm_rulemaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `lm_rulevalues`
	--

	LOCK TABLES `lm_rulevalues` WRITE;
	/*!40000 ALTER TABLE `lm_rulevalues` DISABLE KEYS */;
	insert into lm_rulevalues(ruleid,leavetypeid,value,status) values
(1,1,null,'Active'),
(2,2,'12','Active'),
(4,2,'1','Active'),
(3,2,'1','Active'),
(5,2,'3','Active'),
(6,2,'3','Active'),
(7,2,'7','Active'),
(8,2,'1','Active'),
(2,3,'6','Active'),
(3,3,'1','Active'),
(13,3,'3','Active'),
(4,3,'1','Active'),
(8,3,'1','Active'),
(2,4,'12','Active'),
(3,4,'1','Active'),
(5,4,'5','Active'),
(6,4,'8','Active'),
(7,4,'15','Active'),
(9,4,'50','Active'),
(11,4,'3','Active'),
(4,4,'1','Active'),
(8,4,'1','Active'),
(24,5,'180','Active'),
(6,5,'6','Active'),
(23,5,'2','Active'),
(13,5,'3','Active'),
(14,5,'1','Active'),
(24,6,'3','Active'),
(6,6,'3','Active'),
(14,6,'1','Active'),
(23,6,'2','Active'),
(24,7,'5','Active'),
(6,7,'6','Active'),
(7,7,'15','Active'),
(23,7,'1','Active'),
(24,8,'2','Active'),
(23,8,'5','Active'),
(15,9,'1','Active'),
(5,9,'3','Active'),
(16,9,'1','Active'),
(18,9,'1','Active'),
(6,9,'6','Active'),
(25,9,'6','Active'),
(26,9,'7','Active'),
(27,9,'30','Active'),
(4,10,'1','Active'),
(8,10,'1','Active');

insert into lm_rulevalues(ruleid,value,effectivefromdate,status) values
(20,'0',curdate(),'Active'),
(21,'1',curdate(),'Active'),
(22,'2',curdate(),'Active');

    /*!40000 ALTER TABLE `lm_rulevalues` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `lm_statusmaster`
	--

	DROP TABLE IF EXISTS `lm_statusmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_statusmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `name` varchar(64) DEFAULT NULL,
	  `display_name` varchar(64) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `lm_statusmaster`
	--

	LOCK TABLES `lm_statusmaster` WRITE;
	/*!40000 ALTER TABLE `lm_statusmaster` DISABLE KEYS */;
	/*!40000 ALTER TABLE `lm_statusmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `lm_workflowstatus_tracker`
	--

	DROP TABLE IF EXISTS `lm_workflowstatus_tracker`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `lm_workflowstatus_tracker` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `leaverequest_id` int(11) NOT NULL,
	  `approval_level` int(1) NOT NULL,
	  `status` varchar(64) NOT NULL,
	  `action_date` datetime NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `lm_workflowstatus_tracker_emfk` (`empid`),
	  KEY `lm_workflowstatus_tracker_lrfk` (`leaverequest_id`),
	  CONSTRAINT `lm_workflowstatus_tracker_emfk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `lm_workflowstatus_tracker_lrfk` FOREIGN KEY (`leaverequest_id`) REFERENCES `lm_employeeleaves` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `lm_workflowstatus_tracker`
	--

	LOCK TABLES `lm_workflowstatus_tracker` WRITE;
	/*!40000 ALTER TABLE `lm_workflowstatus_tracker` DISABLE KEYS */;
	/*!40000 ALTER TABLE `lm_workflowstatus_tracker` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `locationsmaster`
	--

	DROP TABLE IF EXISTS `locationsmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `locationsmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `countryid` int(11) DEFAULT NULL,
	  `stateid` int(11) DEFAULT NULL,
	  `location` varchar(255) NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `countryid` (`countryid`),
	  KEY `stateid` (`stateid`),
	  KEY `locations_idx` (`id`,`countryid`,`stateid`),
	  CONSTRAINT `locationsmaster_ibfk_1` FOREIGN KEY (`countryid`) REFERENCES `countrymaster` (`id`),
	  CONSTRAINT `locationsmaster_ibfk_2` FOREIGN KEY (`stateid`) REFERENCES `statesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `locationsmaster`
	--

	LOCK TABLES `locationsmaster` WRITE;
	/*!40000 ALTER TABLE `locationsmaster` DISABLE KEYS */;
	INSERT INTO `locationsmaster` VALUES (30,1,15,'Mumbai'),(31,1,30,'Delhi'),(32,1,12,'Bengaluru'),(33,1,7,'Ahmedabad'),(34,1,25,'Hyderabad'),(35,1,24,'Chennai'),(36,1,29,'Kolkata'),(37,1,15,'Pune'),(38,1,22,'Jaipur'),(39,1,7,'Surat'),(40,1,27,'Lucknow'),(41,1,27,'Kanpur'),(42,1,15,'Nagpur'),(43,1,4,'Patna'),(44,1,14,'Indore'),(45,1,15,'Thane'),(46,1,14,'Bhopal'),(47,1,1,'Visakhapatnam'),(48,1,7,'Vadodara'),(49,1,27,'Firozabad'),(50,1,21,'Ludhiana'),(51,1,7,'Rajkot'),(52,1,27,'Agra'),(53,1,29,'Siliguri'),(54,1,15,'Nashik'),(55,1,8,'Faridabad'),(56,1,21,'Patiala'),(57,1,27,'Meerut'),(58,1,15,'Kalyan-Dombivali'),(59,1,15,'Vasai-Virar'),(60,1,27,'Varanasi'),(61,1,31,'Srinagar'),(62,1,10,'Dhanbad'),(63,1,22,'Jodhpur'),(64,1,21,'Amritsar'),(65,1,5,'Raipur'),(66,1,27,'Allahabad'),(67,1,24,'Coimbatore'),(68,1,14,'Jabalpur'),(69,1,14,'Gwalior'),(70,1,1,'Vijayawada'),(71,1,24,'Madurai'),(72,1,3,'Guwahati'),(73,1,32,'Chandigarh'),(74,1,12,'Hubli-Dharwad'),(75,1,27,'Amroha'),(76,1,27,'Moradabad'),(77,1,8,'Gurgaon'),(78,1,27,'Aligarh'),(79,1,15,'Solapur'),(80,1,10,'Ranchi'),(81,1,21,'Jalandhar'),(82,1,24,'Tiruchirappalli'),(83,1,20,'Bhubaneswar'),(84,1,24,'Salem'),(85,1,25,'Warangal'),(86,1,15,'Mira-Bhayandar'),(87,1,13,'Thiruvananthapuram'),(88,1,15,'Bhiwandi'),(89,1,27,'Saharanpur'),(90,1,1,'Guntur'),(91,1,15,'Amravati'),(92,1,22,'Bikaner'),(93,1,27,'Noida'),(94,1,10,'Jamshedpur'),(95,1,5,'Bhilai Nagar'),(96,1,20,'Cuttack'),(97,1,13,'Kochi'),(98,1,22,'Udaipur'),(99,1,7,'Bhavnagar'),(100,1,28,'Dehradun'),(101,1,29,'Asansol'),(102,1,15,'Nanded-Waghala'),(103,1,22,'Ajmer'),(104,1,7,'Jamnagar'),(105,1,14,'Ujjain'),(106,1,15,'Sangli'),(107,1,27,'Loni'),(108,1,27,'Jhansi'),(109,1,33,'Pondicherry'),(110,1,1,'Nellore'),(111,1,31,'Jammu'),(112,1,12,'Belagavi'),(113,1,20,'Raurkela'),(114,1,12,'Mangaluru'),(115,1,24,'Tirunelveli'),(116,1,15,'Malegaon'),(117,1,4,'Gaya'),(118,1,24,'Tiruppur'),(119,1,12,'Davanagere'),(120,1,13,'Kozhikode'),(121,1,15,'Akola'),(122,1,1,'Kurnool'),(123,1,10,'Bokaro Steel City'),(124,1,1,'Rajahmundry'),(125,1,12,'Ballari'),(126,1,26,'Agartala'),(127,1,4,'Bhagalpur'),(128,1,15,'Latur'),(129,1,15,'Dhule'),(130,1,5,'Korba'),(131,1,22,'Bhilwara'),(132,1,20,'Brahmapur'),(133,1,12,'Mysore'),(134,1,4,'Muzaffarpur'),(135,1,15,'Ahmednagar'),(136,1,13,'Kollam'),(137,1,29,'Raghunathganj'),(138,1,5,'Bilaspur'),(139,1,27,'Shahjahanpur'),(140,1,13,'Thrissur'),(141,1,22,'Alwar'),(142,1,1,'Kakinada'),(143,1,25,'Nizamabad'),(144,1,14,'Sagar'),(145,1,12,'Tumkur'),(146,1,8,'Hisar'),(147,1,8,'Rohtak'),(148,1,8,'Panipat'),(149,1,4,'Darbhanga'),(150,1,29,'Kharagpur'),(151,1,18,'Aizawl'),(152,1,15,'Ichalkaranji'),(153,1,1,'Tirupati'),(154,1,8,'Karnal'),(155,1,21,'Bathinda'),(156,1,27,'Rampur'),(157,1,12,'Shivamogga'),(158,1,14,'Ratlam'),(159,1,27,'Modinagar'),(160,1,5,'Durg'),(161,1,17,'Shillong'),(162,1,16,'Imphal'),(163,1,27,'Hapur'),(164,1,24,'Ranipet'),(165,1,1,'Anantapur'),(166,1,4,'Arrah'),(167,1,25,'Karimnagar'),(168,1,15,'Parbhani'),(169,1,27,'Etawah'),(170,1,22,'Bharatpur'),(171,1,4,'Begusarai'),(172,1,30,'New Delhi'),(173,1,4,'Chhapra'),(174,1,1,'Kadapa'),(175,1,25,'Ramagundam'),(176,1,22,'Pali'),(177,1,14,'Satna'),(178,1,1,'Vizianagaram'),(179,1,4,'Katihar'),(180,1,28,'Hardwar'),(181,1,8,'Sonipat'),(182,1,24,'Nagercoil'),(183,1,24,'Thanjavur'),(184,1,14,'Murwara (Katni)'),(185,1,29,'Naihati'),(186,1,27,'Sambhal'),(187,1,7,'Nadiad'),(188,1,8,'Yamunanagar'),(189,1,29,'English Bazar'),(190,1,1,'Eluru'),(191,1,4,'Munger'),(192,1,8,'Panchkula'),(193,1,12,'Raayachuru'),(194,1,15,'Panvel'),(195,1,10,'Deoghar'),(196,1,1,'Ongole'),(197,1,1,'Nandyal'),(198,1,14,'Morena'),(199,1,8,'Bhiwani'),(200,1,7,'Porbandar'),(201,1,13,'Palakkad'),(202,1,7,'Anand'),(203,1,4,'Purnia'),(204,1,29,'Baharampur'),(205,1,22,'Barmer'),(206,1,7,'Morvi'),(207,1,27,'Orai'),(208,1,27,'Bahraich'),(209,1,22,'Sikar'),(210,1,24,'Vellore'),(211,1,14,'Singrauli'),(212,1,25,'Khammam'),(213,1,7,'Mahesana'),(214,1,3,'Silchar'),(215,1,20,'Sambalpur'),(216,1,14,'Rewa'),(217,1,27,'Unnao'),(218,1,29,'Hugli-Chinsurah'),(219,1,29,'Raiganj'),(220,1,10,'Phusro'),(221,1,10,'Adityapur'),(222,1,13,'Alappuzha'),(223,1,8,'Bahadurgarh'),(224,1,1,'Machilipatnam'),(225,1,27,'Rae Bareli'),(226,1,29,'Jalpaiguri'),(227,1,7,'Bharuch'),(228,1,21,'Pathankot'),(229,1,21,'Hoshiarpur'),(230,1,31,'Baramula'),(231,1,1,'Adoni'),(232,1,8,'Jind'),(233,1,22,'Tonk'),(234,1,1,'Tenali'),(235,1,24,'Kancheepuram'),(236,1,7,'Vapi'),(237,1,8,'Sirsa'),(238,1,7,'Navsari'),(239,1,25,'Mahbubnagar'),(240,1,20,'Puri'),(241,1,12,'Robertson Pet'),(242,1,24,'Erode'),(243,1,21,'Batala'),(244,1,28,'Haldwani-cum-Kathgodam'),(245,1,14,'Vidisha'),(246,1,4,'Saharsa'),(247,1,8,'Thanesar'),(248,1,1,'Chittoor'),(249,1,7,'Veraval'),(250,1,27,'Lakhimpur'),(251,1,27,'Sitapur'),(252,1,1,'Hindupur'),(253,1,29,'Santipur'),(254,1,29,'Balurghat'),(255,1,14,'Ganjbasoda'),(256,1,21,'Moga'),(257,1,1,'Proddatur'),(258,1,28,'Srinagar'),(259,1,29,'Medinipur'),(260,1,29,'Habra'),(261,1,4,'Sasaram'),(262,1,4,'Hajipur'),(263,1,7,'Bhuj'),(264,1,14,'Shivpuri'),(265,1,29,'Ranaghat'),(266,1,9,'Shimla'),(267,1,24,'Tiruvannamalai'),(268,1,8,'Kaithal'),(269,1,5,'Rajnandgaon'),(270,1,7,'Godhra'),(271,1,10,'Hazaribag'),(272,1,1,'Bhimavaram'),(273,1,14,'Mandsaur'),(274,1,3,'Dibrugarh'),(275,1,12,'Kolar'),(276,1,29,'Bankura'),(277,1,12,'Mandya'),(278,1,4,'Dehri-on-Sone'),(279,1,1,'Madanapalle'),(280,1,21,'Malerkotla'),(281,1,27,'Lalitpur'),(282,1,4,'Bettiah'),(283,1,24,'Pollachi'),(284,1,21,'Khanna'),(285,1,14,'Neemuch'),(286,1,8,'Palwal'),(287,1,7,'Palanpur'),(288,1,1,'Guntakal'),(289,1,29,'Nabadwip'),(290,1,12,'Udupi'),(291,1,5,'Jagdalpur'),(292,1,4,'Motihari'),(293,1,27,'Pilibhit'),(294,1,19,'Dimapur'),(295,1,21,'Mohali'),(296,1,22,'Sadulpur'),(297,1,24,'Rajapalayam'),(298,1,1,'Dharmavaram'),(299,1,28,'Kashipur'),(300,1,24,'Sivakasi'),(301,1,29,'Darjiling'),(302,1,12,'Chikkamagaluru'),(303,1,1,'Gudivada'),(304,1,20,'Baleshwar Town'),(305,1,25,'Mancherial'),(306,1,1,'Srikakulam'),(307,1,25,'Adilabad'),(308,1,15,'Yavatmal'),(309,1,21,'Barnala'),(310,1,3,'Nagaon'),(311,1,1,'Narasaraopet'),(312,1,5,'Raigarh'),(313,1,28,'Roorkee'),(314,1,7,'Valsad'),(315,1,5,'Ambikapur'),(316,1,10,'Giridih'),(317,1,27,'Chandausi'),(318,1,29,'Purulia'),(319,1,7,'Patan'),(320,1,4,'Bagaha'),(321,1,27,'Hardoi'),(322,1,15,'Achalpur'),(323,1,15,'Osmanabad'),(324,1,7,'Deesa'),(325,1,15,'Nandurbar'),(326,1,27,'Azamgarh'),(327,1,10,'Ramgarh'),(328,1,21,'Firozpur'),(329,1,20,'Baripada Town'),(330,1,12,'Karwar'),(331,1,4,'Siwan'),(332,1,1,'Rajampet'),(333,1,24,'Pudukkottai'),(334,1,31,'Anantnag'),(335,1,1,'Tadpatri'),(336,1,15,'Satara'),(337,1,20,'Bhadrak'),(338,1,4,'Kishanganj'),(339,1,25,'Suryapet'),(340,1,15,'Wardha'),(341,1,12,'Ranebennuru'),(342,1,7,'Amreli'),(343,1,24,'Neyveli (TS)'),(344,1,4,'Jamalpur'),(345,1,6,'Marmagao'),(346,1,15,'Udgir'),(347,1,1,'Tadepalligudem'),(348,1,24,'Nagapattinam'),(349,1,4,'Buxar'),(350,1,15,'Aurangabad'),(351,1,4,'Jehanabad'),(352,1,21,'Phagwara'),(353,1,27,'Khair'),(354,1,22,'Sawai Madhopur'),(355,1,21,'Kapurthala'),(356,1,1,'Chilakaluripet'),(357,1,4,'Aurangabad'),(358,1,13,'Malappuram'),(359,1,8,'Rewari'),(360,1,22,'Nagaur'),(361,1,27,'Sultanpur'),(362,1,14,'Nagda'),(363,1,34,'Port Blair'),(364,1,4,'Lakhisarai'),(365,1,6,'Panaji'),(366,1,3,'Tinsukia'),(367,1,14,'Itarsi'),(368,1,19,'Kohima'),(369,1,20,'Balangir'),(370,1,4,'Nawada'),(371,1,20,'Jharsuguda'),(372,1,25,'Jagtial'),(373,1,24,'Viluppuram'),(374,1,15,'Amalner'),(375,1,21,'Zirakpur'),(376,1,27,'Tanda'),(377,1,24,'Tiruchengode'),(378,1,27,'Nagina'),(379,1,1,'Yemmiganur'),(380,1,24,'Vaniyambadi'),(381,1,14,'Sarni'),(382,1,24,'Theni Allinagaram'),(383,1,6,'Margao'),(384,1,15,'Akot'),(385,1,14,'Sehore'),(386,1,14,'Mhow Cantonment'),(387,1,21,'Kot Kapura'),(388,1,22,'Makrana'),(389,1,15,'Pandharpur'),(390,1,25,'Miryalaguda'),(391,1,27,'Shamli'),(392,1,14,'Seoni'),(393,1,12,'Ranibennur'),(394,1,1,'Kadiri'),(395,1,15,'Shrirampur'),(396,1,28,'Rudrapur'),(397,1,15,'Parli'),(398,1,27,'Najibabad'),(399,1,25,'Nirmal'),(400,1,24,'Udhagamandalam'),(401,1,27,'Shikohabad'),(402,1,10,'Jhumri Tilaiya'),(403,1,24,'Aruppukkottai'),(404,1,13,'Ponnani'),(405,1,4,'Jamui'),(406,1,4,'Sitamarhi'),(407,1,1,'Chirala'),(408,1,7,'Anjar'),(409,1,33,'Karaikal'),(410,1,8,'Hansi'),(411,1,1,'Anakapalle'),(412,1,5,'Mahasamund'),(413,1,21,'Faridkot'),(414,1,10,'Saunda'),(415,1,7,'Dhoraji'),(416,1,24,'Paramakudi'),(417,1,14,'Balaghat'),(418,1,22,'Sujangarh'),(419,1,7,'Khambhat'),(420,1,21,'Muktsar'),(421,1,21,'Rajpura'),(422,1,1,'Kavali'),(423,1,5,'Dhamtari'),(424,1,14,'Ashok Nagar'),(425,1,22,'Sardarshahar'),(426,1,7,'Mahuva'),(427,1,20,'Bargarh'),(428,1,25,'Kamareddy'),(429,1,10,'Sahibganj'),(430,1,25,'Kothagudem'),(431,1,12,'Ramanagaram'),(432,1,12,'Gokak'),(433,1,14,'Tikamgarh'),(434,1,4,'Araria'),(435,1,28,'Rishikesh'),(436,1,14,'Shahdol'),(437,1,10,'Medininagar (Daltonganj)'),(438,1,24,'Arakkonam'),(439,1,15,'Washim'),(440,1,21,'Sangrur'),(441,1,25,'Bodhan'),(442,1,21,'Fazilka'),(443,1,1,'Palacole'),(444,1,7,'Keshod'),(445,1,1,'Sullurpeta'),(446,1,7,'Wadhwan'),(447,1,21,'Gurdaspur'),(448,1,13,'Vatakara'),(449,1,17,'Tura'),(450,1,8,'Narnaul'),(451,1,21,'Kharar'),(452,1,12,'Yadgir'),(453,1,15,'Ambejogai'),(454,1,7,'Ankleshwar'),(455,1,7,'Savarkundla'),(456,1,20,'Paradip'),(457,1,24,'Virudhachalam'),(458,1,13,'Kanhangad'),(459,1,7,'Kadi'),(460,1,24,'Srivilliputhur'),(461,1,21,'Gobindgarh'),(462,1,24,'Tindivanam'),(463,1,21,'Mansa'),(464,1,13,'Taliparamba'),(465,1,15,'Manmad'),(466,1,1,'Tanuku'),(467,1,1,'Rayachoti'),(468,1,24,'Virudhunagar'),(469,1,13,'Koyilandy'),(470,1,3,'Jorhat'),(471,1,24,'Karur'),(472,1,24,'Valparai'),(473,1,1,'Srikalahasti'),(474,1,13,'Neyyattinkara'),(475,1,1,'Bapatla'),(476,1,8,'Fatehabad'),(477,1,21,'Malout'),(478,1,24,'Sankarankovil'),(479,1,24,'Tenkasi'),(480,1,15,'Ratnagiri'),(481,1,12,'Rabkavi Banhatti'),(482,1,27,'Sikandrabad'),(483,1,10,'Chaibasa'),(484,1,5,'Chirmiri'),(485,1,25,'Palwancha'),(486,1,20,'Bhawanipatna'),(487,1,13,'Kayamkulam'),(488,1,14,'Pithampur'),(489,1,21,'Nabha'),(490,1,27,'Shahabad, Hardoi'),(491,1,20,'Dhenkanal'),(492,1,15,'Uran Islampur'),(493,1,4,'Gopalganj'),(494,1,3,'Bongaigaon City'),(495,1,24,'Palani'),(496,1,15,'Pusad'),(497,1,31,'Sopore'),(498,1,27,'Pilkhuwa'),(499,1,21,'Tarn Taran'),(500,1,27,'Renukoot'),(501,1,25,'Mandamarri'),(502,1,12,'Shahabad'),(503,1,20,'Barbil'),(504,1,25,'Koratla'),(505,1,4,'Madhubani'),(506,1,29,'Arambagh'),(507,1,8,'Gohana'),(508,1,22,'Ladnu'),(509,1,24,'Pattukkottai'),(510,1,12,'Sirsi'),(511,1,25,'Sircilla'),(512,1,29,'Tamluk'),(513,1,21,'Jagraon'),(514,1,29,'AlipurdUrban Agglomerationr'),(515,1,14,'Alirajpur'),(516,1,25,'Tandur'),(517,1,1,'Naidupet'),(518,1,24,'Tirupathur'),(519,1,8,'Tohana'),(520,1,22,'Ratangarh'),(521,1,3,'Dhubri'),(522,1,4,'Masaurhi'),(523,1,7,'Visnagar'),(524,1,27,'Vrindavan'),(525,1,22,'Nokha'),(526,1,1,'Nagari'),(527,1,8,'Narwana'),(528,1,24,'Ramanathapuram'),(529,1,27,'Ujhani'),(530,1,4,'Samastipur'),(531,1,27,'Laharpur'),(532,1,15,'Sangamner'),(533,1,22,'Nimbahera'),(534,1,25,'Siddipet'),(535,1,29,'Suri'),(536,1,3,'Diphu'),(537,1,29,'Jhargram'),(538,1,15,'Shirpur-Warwade'),(539,1,27,'Tilhar'),(540,1,12,'Sindhnur'),(541,1,24,'Udumalaipettai'),(542,1,15,'Malkapur'),(543,1,25,'Wanaparthy'),(544,1,1,'Gudur'),(545,1,20,'Kendujhar'),(546,1,14,'Mandla'),(547,1,9,'Mandi'),(548,1,13,'Nedumangad'),(549,1,3,'North Lakhimpur'),(550,1,1,'Vinukonda'),(551,1,12,'Tiptur'),(552,1,24,'Gobichettipalayam'),(553,1,20,'Sunabeda'),(554,1,15,'Wani'),(555,1,7,'Upleta'),(556,1,1,'Narasapuram'),(557,1,1,'Nuzvid'),(558,1,3,'Tezpur'),(559,1,7,'Una'),(560,1,1,'Markapur'),(561,1,14,'Sheopur'),(562,1,24,'Thiruvarur'),(563,1,7,'Sidhpur'),(564,1,27,'Sahaswan'),(565,1,22,'Suratgarh'),(566,1,14,'Shajapur'),(567,1,20,'Rayagada'),(568,1,15,'Lonavla'),(569,1,1,'Ponnur'),(570,1,25,'Kagaznagar'),(571,1,25,'Gadwal'),(572,1,5,'Bhatapara'),(573,1,1,'Kandukur'),(574,1,25,'Sangareddy'),(575,1,7,'Unjha'),(576,1,18,'Lunglei'),(577,1,3,'Karimganj'),(578,1,13,'Kannur'),(579,1,1,'Bobbili'),(580,1,4,'Mokameh'),(581,1,15,'Talegaon Dabhade'),(582,1,15,'Anjangaon'),(583,1,7,'Mangrol'),(584,1,21,'Sunam'),(585,1,29,'Gangarampur'),(586,1,24,'Thiruvallur'),(587,1,13,'Tirur'),(588,1,27,'Rath'),(589,1,20,'Jatani'),(590,1,7,'Viramgam'),(591,1,22,'Rajsamand'),(592,1,33,'Yanam'),(593,1,13,'Kottayam'),(594,1,24,'Panruti'),(595,1,21,'Dhuri'),(596,1,24,'Namakkal'),(597,1,13,'Kasaragod'),(598,1,7,'Modasa'),(599,1,1,'Rayadurg'),(600,1,4,'Supaul'),(601,1,13,'Kunnamkulam'),(602,1,15,'Umred'),(603,1,25,'Bellampalle'),(604,1,3,'Sibsagar'),(605,1,8,'Mandi Dabwali'),(606,1,13,'Ottappalam'),(607,1,4,'Dumraon'),(608,1,1,'Samalkot'),(609,1,1,'Jaggaiahpet'),(610,1,3,'Goalpara'),(611,1,1,'Tuni'),(612,1,22,'Lachhmangarh'),(613,1,25,'Bhongir'),(614,1,1,'Amalapuram'),(615,1,21,'Firozpur Cantt.'),(616,1,25,'Vikarabad'),(617,1,13,'Thiruvalla'),(618,1,27,'Sherkot'),(619,1,15,'Palghar'),(620,1,15,'Shegaon'),(621,1,25,'Jangaon'),(622,1,1,'Bheemunipatnam'),(623,1,14,'Panna'),(624,1,13,'Thodupuzha'),(625,1,31,'KathUrban Agglomeration'),(626,1,7,'Palitana'),(627,1,4,'Arwal'),(628,1,1,'Venkatagiri'),(629,1,27,'Kalpi'),(630,1,22,'Rajgarh (Churu)'),(631,1,1,'Sattenapalle'),(632,1,12,'Arsikere'),(633,1,15,'Ozar'),(634,1,24,'Thirumangalam'),(635,1,7,'Petlad'),(636,1,22,'Nasirabad'),(637,1,15,'Phaltan'),(638,1,29,'Rampurhat'),(639,1,12,'Nanjangud'),(640,1,4,'Forbesganj'),(641,1,27,'Tundla'),(642,1,4,'BhabUrban Agglomeration'),(643,1,12,'Sagara'),(644,1,1,'Pithapuram'),(645,1,12,'Sira'),(646,1,25,'Bhadrachalam'),(647,1,8,'Charkhi Dadri'),(648,1,10,'Chatra'),(649,1,1,'Palasa Kasibugga'),(650,1,22,'Nohar'),(651,1,15,'Yevla'),(652,1,21,'Sirhind Fatehgarh Sahib'),(653,1,25,'Bhainsa'),(654,1,1,'Parvathipuram'),(655,1,15,'Shahade'),(656,1,13,'Chalakudy'),(657,1,4,'Narkatiaganj'),(658,1,7,'Kapadvanj'),(659,1,1,'Macherla'),(660,1,14,'Raghogarh-Vijaypur'),(661,1,21,'Rupnagar'),(662,1,4,'Naugachhia'),(663,1,14,'Sendhwa'),(664,1,20,'Byasanagar'),(665,1,27,'Sandila'),(666,1,1,'Gooty'),(667,1,1,'Salur'),(668,1,27,'Nanpara'),(669,1,27,'Sardhana'),(670,1,15,'Vita'),(671,1,10,'Gumia'),(672,1,12,'Puttur'),(673,1,21,'Jalandhar Cantt.'),(674,1,27,'Nehtaur'),(675,1,13,'Changanassery'),(676,1,1,'Mandapeta'),(677,1,10,'Dumka'),(678,1,27,'Seohara'),(679,1,15,'Umarkhed'),(680,1,10,'Madhupur'),(681,1,24,'Vikramasingapuram'),(682,1,13,'Punalur'),(683,1,20,'Kendrapara'),(684,1,7,'Sihor'),(685,1,24,'Nellikuppam'),(686,1,21,'Samana'),(687,1,15,'Warora'),(688,1,13,'Nilambur'),(689,1,24,'Rasipuram'),(690,1,28,'Ramnagar'),(691,1,1,'Jammalamadugu'),(692,1,21,'Nawanshahr'),(693,1,16,'Thoubal'),(694,1,12,'Athni'),(695,1,13,'Cherthala'),(696,1,14,'Sidhi'),(697,1,25,'Farooqnagar'),(698,1,1,'Peddapuram'),(699,1,10,'Chirkunda'),(700,1,15,'Pachora'),(701,1,4,'Madhepura'),(702,1,28,'Pithoragarh'),(703,1,15,'Tumsar'),(704,1,22,'Phalodi'),(705,1,24,'Tiruttani'),(706,1,21,'Rampura Phul'),(707,1,13,'Perinthalmanna'),(708,1,27,'Padrauna'),(709,1,14,'Pipariya'),(710,1,5,'Dalli-Rajhara'),(711,1,1,'Punganur'),(712,1,13,'Mattannur'),(713,1,27,'Mathura'),(714,1,27,'Thakurdwara'),(715,1,24,'Nandivaram-Guduvancheri'),(716,1,12,'Mulbagal'),(717,1,15,'Manjlegaon'),(718,1,7,'Wankaner'),(719,1,15,'Sillod'),(720,1,1,'Nidadavole'),(721,1,12,'Surapura'),(722,1,20,'Rajagangapur'),(723,1,4,'Sheikhpura'),(724,1,20,'Parlakhemundi'),(725,1,29,'Kalimpong'),(726,1,12,'Siruguppa'),(727,1,15,'Arvi'),(728,1,7,'Limbdi'),(729,1,3,'Barpeta'),(730,1,28,'Manglaur'),(731,1,1,'Repalle'),(732,1,12,'Mudhol'),(733,1,14,'Shujalpur'),(734,1,7,'Mandvi'),(735,1,7,'Thangadh'),(736,1,14,'Sironj'),(737,1,15,'Nandura'),(738,1,13,'Shoranur'),(739,1,22,'Nathdwara'),(740,1,24,'Periyakulam'),(741,1,4,'Sultanganj'),(742,1,25,'Medak'),(743,1,25,'Narayanpet'),(744,1,4,'Raxaul Bazar'),(745,1,31,'Rajauri'),(746,1,24,'Pernampattu'),(747,1,28,'Nainital'),(748,1,1,'Ramachandrapuram'),(749,1,15,'Vaijapur'),(750,1,21,'Nangal'),(751,1,12,'Sidlaghatta'),(752,1,31,'Punch'),(753,1,14,'Pandhurna'),(754,1,15,'Wadgaon Road'),(755,1,20,'Talcher'),(756,1,13,'Varkala'),(757,1,22,'Pilani'),(758,1,14,'Nowgong'),(759,1,5,'Naila Janjgir'),(760,1,6,'Mapusa'),(761,1,24,'Vellakoil'),(762,1,22,'Merta City'),(763,1,24,'Sivaganga'),(764,1,14,'Mandideep'),(765,1,15,'Sailu'),(766,1,7,'Vyara'),(767,1,1,'Kovvur'),(768,1,24,'Vadalur'),(769,1,27,'Nawabganj'),(770,1,7,'Padra'),(771,1,29,'Sainthia'),(772,1,27,'Siana'),(773,1,12,'Shahpur'),(774,1,22,'Sojat'),(775,1,27,'Noorpur'),(776,1,13,'Paravoor'),(777,1,15,'Murtijapur'),(778,1,4,'Ramnagar'),(779,1,20,'Sundargarh'),(780,1,29,'Taki'),(781,1,12,'Saundatti-Yellamma'),(782,1,13,'Pathanamthitta'),(783,1,12,'Wadi'),(784,1,24,'Rameshwaram'),(785,1,15,'Tasgaon'),(786,1,27,'Sikandra Rao'),(787,1,14,'Sihora'),(788,1,24,'Tiruvethipuram'),(789,1,1,'Tiruvuru'),(790,1,15,'Mehkar'),(791,1,13,'Peringathur'),(792,1,24,'Perambalur'),(793,1,12,'Manvi'),(794,1,19,'Zunheboto'),(795,1,4,'Mahnar Bazar'),(796,1,13,'Attingal'),(797,1,8,'Shahbad'),(798,1,27,'Puranpur'),(799,1,12,'Nelamangala'),(800,1,21,'Nakodar'),(801,1,7,'Lunawada'),(802,1,29,'Murshidabad'),(803,1,33,'Mahe'),(804,1,3,'Lanka'),(805,1,27,'Rudauli'),(806,1,19,'Tuensang'),(807,1,12,'Lakshmeshwar'),(808,1,21,'Zira'),(809,1,15,'Yawal'),(810,1,27,'Thana Bhawan'),(811,1,12,'Ramdurg'),(812,1,15,'Pulgaon'),(813,1,25,'Sadasivpet'),(814,1,12,'Nargund'),(815,1,22,'Neem-Ka-Thana'),(816,1,29,'Memari'),(817,1,15,'Nilanga'),(818,1,2,'Naharlagun'),(819,1,10,'Pakaur'),(820,1,15,'Wai'),(821,1,12,'Tarikere'),(822,1,12,'Malavalli'),(823,1,14,'Raisen'),(824,1,14,'Lahar'),(825,1,1,'Uravakonda'),(826,1,12,'Savanur'),(827,1,22,'Sirohi'),(828,1,31,'Udhampur'),(829,1,15,'Umarga'),(830,1,22,'Pratapgarh'),(831,1,12,'Lingsugur'),(832,1,24,'Usilampatti'),(833,1,27,'Palia Kalan'),(834,1,19,'Wokha'),(835,1,7,'Rajpipla'),(836,1,12,'Vijayapura'),(837,1,22,'Rawatbhata'),(838,1,22,'Sangaria'),(839,1,15,'Paithan'),(840,1,15,'Rahuri'),(841,1,21,'Patti'),(842,1,27,'Zaidpur'),(843,1,22,'Lalsot'),(844,1,14,'Maihar'),(845,1,24,'Vedaranyam'),(846,1,15,'Nawapur'),(847,1,9,'Solan'),(848,1,7,'Vapi'),(849,1,14,'Sanawad'),(850,1,4,'Warisaliganj'),(851,1,4,'Revelganj'),(852,1,14,'Sabalgarh'),(853,1,15,'Tuljapur'),(854,1,10,'Simdega'),(855,1,10,'Musabani'),(856,1,13,'Kodungallur'),(857,1,20,'Phulabani'),(858,1,7,'Umreth'),(859,1,1,'Narsipatnam'),(860,1,27,'Nautanwa'),(861,1,4,'Rajgir'),(862,1,25,'Yellandu'),(863,1,24,'Sathyamangalam'),(864,1,22,'Pilibanga'),(865,1,15,'Morshi'),(866,1,8,'Pehowa'),(867,1,4,'Sonepur'),(868,1,13,'Pappinisseri'),(869,1,27,'Zamania'),(870,1,10,'Mihijam'),(871,1,15,'Purna'),(872,1,24,'Puliyankudi'),(873,1,27,'Shikarpur, Bulandshahr'),(874,1,14,'Umaria'),(875,1,14,'Porsa'),(876,1,27,'Naugawan Sadat'),(877,1,27,'Fatehpur Sikri'),(878,1,25,'Manuguru'),(879,1,26,'Udaipur'),(880,1,22,'Pipar City'),(881,1,20,'Pattamundai'),(882,1,24,'Nanjikottai'),(883,1,22,'Taranagar'),(884,1,1,'Yerraguntla'),(885,1,15,'Satana'),(886,1,4,'Sherghati'),(887,1,12,'Sankeshwara'),(888,1,12,'Madikeri'),(889,1,24,'Thuraiyur'),(890,1,7,'Sanand'),(891,1,7,'Rajula'),(892,1,25,'Kyathampalle'),(893,1,27,'Shahabad, Rampur'),(894,1,5,'Tilda Newra'),(895,1,14,'Narsinghgarh'),(896,1,13,'Chittur-Thathamangalam'),(897,1,14,'Malaj Khand'),(898,1,14,'Sarangpur'),(899,1,27,'Robertsganj'),(900,1,24,'Sirkali'),(901,1,7,'Radhanpur'),(902,1,24,'Tiruchendur'),(903,1,27,'Utraula'),(904,1,10,'Patratu'),(905,1,22,'Vijainagar, Ajmer'),(906,1,24,'Periyasemur'),(907,1,15,'Pathri'),(908,1,27,'Sadabad'),(909,1,12,'Talikota'),(910,1,15,'Sinnar'),(911,1,5,'Mungeli'),(912,1,12,'Sedam'),(913,1,12,'Shikaripur'),(914,1,22,'Sumerpur'),(915,1,24,'Sattur'),(916,1,4,'Sugauli'),(917,1,3,'Lumding'),(918,1,24,'Vandavasi'),(919,1,20,'Titlagarh'),(920,1,15,'Uchgaon'),(921,1,19,'Mokokchung'),(922,1,29,'Paschim Punropara'),(923,1,22,'Sagwara'),(924,1,22,'Ramganj Mandi'),(925,1,29,'Tarakeswar'),(926,1,12,'Mahalingapura'),(927,1,26,'Dharmanagar'),(928,1,7,'Mahemdabad'),(929,1,5,'Manendragarh'),(930,1,15,'Uran'),(931,1,24,'Tharamangalam'),(932,1,24,'Tirukkoyilur'),(933,1,15,'Pen'),(934,1,4,'Makhdumpur'),(935,1,4,'Maner'),(936,1,24,'Oddanchatram'),(937,1,24,'Palladam'),(938,1,14,'Mundi'),(939,1,20,'Nabarangapur'),(940,1,12,'Mudalagi'),(941,1,8,'Samalkha'),(942,1,14,'Nepanagar'),(943,1,15,'Karjat'),(944,1,7,'Ranavav'),(945,1,1,'Pedana'),(946,1,8,'Pinjore'),(947,1,22,'Lakheri'),(948,1,14,'Pasan'),(949,1,1,'Puttur'),(950,1,24,'Vadakkuvalliyur'),(951,1,24,'Tirukalukundram'),(952,1,14,'Mahidpur'),(953,1,28,'Mussoorie'),(954,1,13,'Muvattupuzha'),(955,1,27,'Rasra'),(956,1,22,'Udaipurwati'),(957,1,15,'Manwath'),(958,1,13,'Adoor'),(959,1,24,'Uthamapalayam'),(960,1,15,'Partur'),(961,1,9,'Nahan'),(962,1,8,'Ladwa'),(963,1,3,'Mankachar'),(964,1,17,'Nongstoin'),(965,1,22,'Losal'),(966,1,22,'Sri Madhopur'),(967,1,22,'Ramngarh'),(968,1,13,'Mavelikkara'),(969,1,22,'Rawatsar'),(970,1,22,'Rajakhera'),(971,1,27,'Lar'),(972,1,27,'Lal Gopalganj Nindaura'),(973,1,12,'Muddebihal'),(974,1,27,'Sirsaganj'),(975,1,22,'Shahpura'),(976,1,24,'Surandai'),(977,1,15,'Sangole'),(978,1,12,'Pavagada'),(979,1,7,'Tharad'),(980,1,7,'Mansa'),(981,1,7,'Umbergaon'),(982,1,13,'Mavoor'),(983,1,3,'Nalbari'),(984,1,7,'Talaja'),(985,1,12,'Malur'),(986,1,15,'Mangrulpir'),(987,1,20,'Soro'),(988,1,22,'Shahpura'),(989,1,7,'Vadnagar'),(990,1,22,'Raisinghnagar'),(991,1,12,'Sindhagi'),(992,1,12,'Sanduru'),(993,1,8,'Sohna'),(994,1,7,'Manavadar'),(995,1,27,'Pihani'),(996,1,8,'Safidon'),(997,1,15,'Risod'),(998,1,4,'Rosera'),(999,1,24,'Sankari'),(1000,1,22,'Malpura'),(1001,1,29,'Sonamukhi'),(1002,1,27,'Shamsabad, Agra'),(1003,1,4,'Nokha'),(1004,1,29,'PandUrban Agglomeration'),(1005,1,29,'Mainaguri'),(1006,1,12,'Afzalpur'),(1007,1,15,'Shirur'),(1008,1,7,'Salaya'),(1009,1,24,'Shenkottai'),(1010,1,26,'Pratapgarh'),(1011,1,24,'Vadipatti'),(1012,1,25,'Nagarkurnool'),(1013,1,15,'Savner'),(1014,1,15,'Sasvad'),(1015,1,27,'Rudrapur'),(1016,1,27,'Soron'),(1017,1,24,'Sholingur'),(1018,1,15,'Pandharkaoda'),(1019,1,13,'Perumbavoor'),(1020,1,12,'Maddur'),(1021,1,22,'Nadbai'),(1022,1,15,'Talode'),(1023,1,15,'Shrigonda'),(1024,1,12,'Madhugiri'),(1025,1,12,'Tekkalakote'),(1026,1,14,'Seoni-Malwa'),(1027,1,15,'Shirdi'),(1028,1,27,'SUrban Agglomerationr'),(1029,1,12,'Terdal'),(1030,1,15,'Raver'),(1031,1,24,'Tirupathur'),(1032,1,8,'Taraori'),(1033,1,15,'Mukhed'),(1034,1,24,'Manachanallur'),(1035,1,14,'Rehli'),(1036,1,22,'Sanchore'),(1037,1,15,'Rajura'),(1038,1,4,'Piro'),(1039,1,12,'Mudabidri'),(1040,1,15,'Vadgaon Kasba'),(1041,1,22,'Nagar'),(1042,1,7,'Vijapur'),(1043,1,24,'Viswanatham'),(1044,1,24,'Polur'),(1045,1,24,'Panagudi'),(1046,1,14,'Manawar'),(1047,1,28,'Tehri'),(1048,1,27,'Samdhan'),(1049,1,7,'Pardi'),(1050,1,14,'Rahatgarh'),(1051,1,14,'Panagar'),(1052,1,24,'Uthiramerur'),(1053,1,15,'Tirora'),(1054,1,3,'Rangia'),(1055,1,27,'Sahjanwa'),(1056,1,14,'Wara Seoni'),(1057,1,12,'Magadi'),(1058,1,22,'Rajgarh (Alwar)'),(1059,1,4,'Rafiganj'),(1060,1,14,'Tarana'),(1061,1,27,'Rampur Maniharan'),(1062,1,22,'Sheoganj'),(1063,1,21,'Raikot'),(1064,1,28,'Pauri'),(1065,1,27,'Sumerpur'),(1066,1,12,'Navalgund'),(1067,1,27,'Shahganj'),(1068,1,4,'Marhaura'),(1069,1,27,'Tulsipur'),(1070,1,22,'Sadri'),(1071,1,24,'Thiruthuraipoondi'),(1072,1,12,'Shiggaon'),(1073,1,24,'Pallapatti'),(1074,1,8,'Mahendragarh'),(1075,1,14,'Sausar'),(1076,1,24,'Ponneri'),(1077,1,15,'Mahad'),(1078,1,10,'Lohardaga'),(1079,1,27,'Tirwaganj'),(1080,1,3,'Margherita'),(1081,1,9,'Sundarnagar'),(1082,1,14,'Rajgarh'),(1083,1,3,'Mangaldoi'),(1084,1,1,'Renigunta'),(1085,1,21,'Longowal'),(1086,1,8,'Ratia'),(1087,1,24,'Lalgudi'),(1088,1,12,'Shrirangapattana'),(1089,1,14,'Niwari'),(1090,1,24,'Natham'),(1091,1,24,'Unnamalaikadai'),(1092,1,27,'PurqUrban Agglomerationzi'),(1093,1,27,'Shamsabad, Farrukhabad'),(1094,1,4,'Mirganj'),(1095,1,22,'Todaraisingh'),(1096,1,27,'Warhapur'),(1097,1,1,'Rajam'),(1098,1,21,'Urmar Tanda'),(1099,1,15,'Lonar'),(1100,1,27,'Powayan'),(1101,1,24,'P.N.Patti'),(1102,1,9,'Palampur'),(1103,1,1,'Srisailam Project (Right Flank Colony) Township'),(1104,1,12,'Sindagi'),(1105,1,27,'Sandi'),(1106,1,13,'Vaikom'),(1107,1,29,'Malda'),(1108,1,24,'Tharangambadi'),(1109,1,12,'Sakaleshapura'),(1110,1,4,'Lalganj'),(1111,1,20,'Malkangiri'),(1112,1,7,'Rapar'),(1113,1,14,'Mauganj'),(1114,1,22,'Todabhim'),(1115,1,12,'Srinivaspur'),(1116,1,4,'Murliganj'),(1117,1,22,'Reengus'),(1118,1,15,'Sawantwadi'),(1119,1,24,'Tittakudi'),(1120,1,16,'Lilong'),(1121,1,22,'Rajaldesar'),(1122,1,15,'Pathardi'),(1123,1,27,'Achhnera'),(1124,1,24,'Pacode'),(1125,1,27,'Naraura'),(1126,1,27,'Nakur'),(1127,1,13,'Palai'),(1128,1,21,'Morinda, India'),(1129,1,14,'Manasa'),(1130,1,14,'Nainpur'),(1131,1,27,'Sahaspur'),(1132,1,15,'Pauni'),(1133,1,14,'Prithvipur'),(1134,1,15,'Ramtek'),(1135,1,3,'Silapathar'),(1136,1,7,'Songadh'),(1137,1,27,'Safipur'),(1138,1,14,'Sohagpur'),(1139,1,15,'Mul'),(1140,1,22,'Sadulshahar'),(1141,1,21,'Phillaur'),(1142,1,22,'Sambhar'),(1143,1,22,'Prantij'),(1144,1,28,'Nagla'),(1145,1,21,'Pattran'),(1146,1,22,'Mount Abu'),(1147,1,27,'Reoti'),(1148,1,10,'Tenu dam-cum-Kathhara'),(1149,1,29,'Panchla'),(1150,1,28,'Sitarganj'),(1151,1,2,'Pasighat'),(1152,1,4,'Motipur'),(1153,1,24,'O\' Valley'),(1154,1,29,'Raghunathpur'),(1155,1,24,'Suriyampalayam'),(1156,1,21,'Qadian'),(1157,1,20,'Rairangpur'),(1158,1,35,'Silvassa'),(1159,1,14,'Nowrozabad (Khodargama)'),(1160,1,22,'Mangrol'),(1161,1,15,'Soyagaon'),(1162,1,21,'Sujanpur'),(1163,1,4,'Manihari'),(1164,1,27,'Sikanderpur'),(1165,1,15,'Mangalvedhe'),(1166,1,22,'Phulera'),(1167,1,12,'Ron'),(1168,1,24,'Sholavandan'),(1169,1,27,'Saidpur'),(1170,1,14,'Shamgarh'),(1171,1,24,'Thammampatti'),(1172,1,14,'Maharajpur'),(1173,1,14,'Multai'),(1174,1,21,'Mukerian'),(1175,1,27,'Sirsi'),(1176,1,27,'Purwa'),(1177,1,4,'Sheohar'),(1178,1,24,'Namagiripettai'),(1179,1,27,'Parasi'),(1180,1,7,'Lathi'),(1181,1,27,'Lalganj'),(1182,1,15,'Narkhed'),(1183,1,29,'Mathabhanga'),(1184,1,15,'Shendurjana'),(1185,1,24,'Peravurani'),(1186,1,3,'Mariani'),(1187,1,27,'Phulpur'),(1188,1,8,'Rania'),(1189,1,14,'Pali'),(1190,1,14,'Pachore'),(1191,1,24,'Parangipettai'),(1192,1,24,'Pudupattinam'),(1193,1,13,'Panniyannur'),(1194,1,4,'Maharajganj'),(1195,1,14,'Rau'),(1196,1,29,'Monoharpur'),(1197,1,22,'Mandawa'),(1198,1,3,'Marigaon'),(1199,1,24,'Pallikonda'),(1200,1,22,'Pindwara'),(1201,1,27,'Shishgarh'),(1202,1,15,'Patur'),(1203,1,16,'Mayang Imphal'),(1204,1,14,'Mhowgaon'),(1205,1,13,'Guruvayoor'),(1206,1,15,'Mhaswad'),(1207,1,27,'Sahawar'),(1208,1,24,'Sivagiri'),(1209,1,12,'Mundargi'),(1210,1,24,'Punjaipugalur'),(1211,1,26,'Kailasahar'),(1212,1,27,'Samthar'),(1213,1,5,'Sakti'),(1214,1,12,'Sadalagi'),(1215,1,4,'Silao'),(1216,1,22,'Mandalgarh'),(1217,1,15,'Loha'),(1218,1,27,'Pukhrayan'),(1219,1,24,'Padmanabhapuram'),(1220,1,26,'Belonia'),(1221,1,18,'Saiha'),(1222,1,29,'Srirampore'),(1223,1,21,'Talwara'),(1224,1,13,'Puthuppally'),(1225,1,26,'Khowai'),(1226,1,14,'Vijaypur'),(1227,1,22,'Takhatgarh'),(1228,1,24,'Thirupuvanam'),(1229,1,29,'Adra'),(1230,1,12,'Piriyapatna'),(1231,1,27,'Obra'),(1232,1,7,'Adalaj'),(1233,1,15,'Nandgaon'),(1234,1,4,'Barh'),(1235,1,7,'Chhapra'),(1236,1,13,'Panamattom'),(1237,1,27,'Niwai'),(1238,1,28,'Bageshwar'),(1239,1,20,'Tarbha'),(1240,1,12,'Adyar'),(1241,1,14,'Narsinghgarh'),(1242,1,15,'Warud'),(1243,1,4,'Asarganj'),(1244,1,8,'Sarsod'),(1245,1,23,'Gangtok'),(1246,1,23,'Gyalshing'),(1247,1,23,'Jorethang'),(1248,1,23,'Mangan'),(1249,1,36,'Kavaratti'),(1250,1,36,'Andrott'),(1251,1,36,'Minicoy'),(1252,1,37,'Leh'),(1253,1,37,'Kargil');
	/*!40000 ALTER TABLE `locationsmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `maritalstatusmaster`
	--

	DROP TABLE IF EXISTS `maritalstatusmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `maritalstatusmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `maritalstatus` varchar(32) NOT NULL,
	  `status` varchar(32) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `maritalstatusmaster`
	--

	LOCK TABLES `maritalstatusmaster` WRITE;
	/*!40000 ALTER TABLE `maritalstatusmaster` DISABLE KEYS */;
	INSERT INTO `maritalstatusmaster` VALUES (1,'Single','1'),(2,'Married','1'),(3,'Others','1');
	/*!40000 ALTER TABLE `maritalstatusmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `modulesmaster`
	--

	DROP TABLE IF EXISTS `modulesmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `modulesmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `modulename` varchar(64) DEFAULT NULL,
	  `effectivestartdate` datetime DEFAULT NULL,
	  `effectiveenddate` datetime DEFAULT NULL,
	  `dashboard_order` int(11) DEFAULT NULL,
	  `iconpath` varchar(255) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `modulesmaster`
	--

	LOCK TABLES `modulesmaster` WRITE;
	/*!40000 ALTER TABLE `modulesmaster` DISABLE KEYS */;
	INSERT INTO `modulesmaster` VALUES (1,'Employee Management',null,NULL,1,'assets\\img\\menu-ems.png'),
    (2,'Leave Management',null,NULL,3,'assets\\img\\menu-leaves.png'),(3,'Timesheet Management',null,NULL,5,'assets\\img\\menu-timesheet.png'),
    (4,'Attendance Management',null,NULL,2,'assets\\img\\menu-attendance.png'),(5,'Payroll Management',null,NULL,4,'assets\\img\\menu-payroll.png'),
    (6,'Assets Management',NULL,NULL,6,'assets\\img\\menu-asset.png'),
    (7,'Recruitment Management',NULL,NULL,7,'assets\\img\\menu-recruitment.png'),
    (8,'Employee Self Service',NULL,NULL,8,'assets\\img\\menu-ess.png '),
    (9,'Claims Management',NULL,NULL,9,'assets\\img\\menu-claims.png'),
    (10,'Subscription',null,null,10,	'assets\\img\\subscription.png'),
    (11,'Exit Management',null,null,11,'assets\\img\\exit-management.png');
	/*!40000 ALTER TABLE `modulesmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `notifications`
	--

	DROP TABLE IF EXISTS `notifications`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `notifications` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `message` varchar(1024) DEFAULT NULL,
	  `fromdate` datetime DEFAULT NULL,
	  `todate` datetime DEFAULT NULL,
	  `role` int(11) DEFAULT NULL,
	  `status` varchar(32) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `notifications`
	--

	LOCK TABLES `notifications` WRITE;
	/*!40000 ALTER TABLE `notifications` DISABLE KEYS */;
	/*!40000 ALTER TABLE `notifications` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_client_component_configuration_details`
	--

	DROP TABLE IF EXISTS `payroll_client_component_configuration_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_client_component_configuration_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `rule_id` int(11) DEFAULT NULL,
	  `value` varchar(64) DEFAULT NULL,
	  `effective_from_date` datetime DEFAULT NULL,
	  `effective_to_date` datetime DEFAULT NULL,
	  `status` int(2) DEFAULT NULL,
	  `created_on` datetime DEFAULT NULL,
	  `created_by` int(11) DEFAULT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_client_component_configuration_details_ridfk` (`rule_id`),
	  CONSTRAINT `payroll_client_component_configuration_details_ridfk` FOREIGN KEY (`rule_id`) REFERENCES `payroll_client_component_configuration_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_client_component_configuration_details`
	--

	LOCK TABLES `payroll_client_component_configuration_details` WRITE;
	/*!40000 ALTER TABLE `payroll_client_component_configuration_details` DISABLE KEYS */;
	INSERT INTO `payroll_client_component_configuration_details` VALUES (1,1,'1',current_timestamp(),NULL,NULL,current_timestamp(),1,NULL,NULL),
    (2,2,'0',current_timestamp(),NULL,NULL,current_timestamp(),1,NULL,NULL),
    (3,3,'0',current_timestamp(),NULL,NULL,current_timestamp(),1,NULL,NULL),
    (4,4,'ACTUAL',current_timestamp(),NULL,NULL,current_timestamp(),1,NULL,NULL),
    (5,5,'ACTUAL',current_timestamp(),NULL,NULL,current_timestamp(),1,NULL,NULL),
    (6,6,'1',current_timestamp(),NULL,NULL,current_timestamp(),1,NULL,NULL),
    (7,7,'0',NULL,NULL,NULL,current_timestamp(),1,NULL,NULL),
    (8,8,'WORKING',current_timestamp(),NULL,NULL,current_timestamp(),1,NULL,NULL),
    (9,9,'LAST_WORKING_DAY',current_timestamp(),NULL,NULL,current_timestamp(),1,NULL,NULL),
    (10,10,'1',current_timestamp(),NULL,NULL,current_timestamp(),1,NULL,NULL),
    (11,11,'LAST_DAY_OF_PRESENT_MONTH',current_timestamp(),NULL,NULL,current_timestamp(),1,NULL,NULL),
    (12,12,'1',current_timestamp(),null,NULL,current_timestamp(),1,NULL,NULL),
    (13,13,'LAST_DAY_OF_PRESENT_MONTH',current_timestamp(),null,NULL,current_timestamp(),1,NULL,NULL),
    (14,14,'April-March',current_timestamp(),NULL,NULL,current_timestamp(),1,NULL,NULL),
    (15,15,'PREVIOUS_DAY',current_timestamp(),NULL,NULL,current_timestamp(),1,NULL,NULL),
    (16,16,'0',current_timestamp(),null,NULL,current_timestamp(),1,NULL,NULL);
	/*!40000 ALTER TABLE `payroll_client_component_configuration_details` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_client_component_configuration_master`
	--

	DROP TABLE IF EXISTS `payroll_client_component_configuration_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_client_component_configuration_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `component_id` int(11) DEFAULT NULL,
	  `rule_name` varchar(255) NOT NULL,
	  `description` varchar(2048) DEFAULT NULL,
	  `additional_information` varchar(1000) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_client_component_configuration_master_cidfk` (`component_id`),
	  CONSTRAINT `payroll_client_component_configuration_master_cidfk` FOREIGN KEY (`component_id`) REFERENCES `payroll_salary_components_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_client_component_configuration_master`
	--

	LOCK TABLES `payroll_client_component_configuration_master` WRITE;
	/*!40000 ALTER TABLE `payroll_client_component_configuration_master` DISABLE KEYS */;
	INSERT INTO `payroll_client_component_configuration_master` VALUES (1,12,'EMPLOYER_CONTRIBUTION_TO_BE_INCLUDED_IN_CTC','Should employer EPF contribution be included in CTC?',NULL),(2,12,'EMPLOYER_EDLI_CONTRIBUTION_TO_BE_INCLUDED_IN_CTC','Should employer EDLI contribution be included in CTC?',NULL),(3,12,'ADMIN_CHARGES_INCLUDED_IN_CTC','Should the admin charges be included in CTC?',NULL),(4,12,'ACTUAL_PF_WAGE_OR_RESTRICTED_PF_WAGE_FOR_EMPLOYER_CONTRIBUTION','Should actual PF wage or restricted PF wage be considered for employer contribution?','Restricted PF wage is the maximum statutory PF wage'),(5,12,'ACTUAL_PF_WAGE_OR_RESTRICTED_PF_WAGE_FOR_EMPLOYEE_CONTRIBUTION','Should actual PF wage or restricted PF wage be considered for employee contribution?','Restricted PF wage is the maximum statutory PF wage'),(6,12,'CONSIDER_ALL_COMP_IF_PF_WAGE_IS_LESS_THAN_STATUTORY_VALUE_AFTER_LOP','Should all applicable salary components be considered if PF wage is less than statutory value after LoP?',NULL),(7,12,'OVERRIDE_PF_CONTRIBUTION_RATE_AT_EMPLOYEE_LEVEL','Should the PF contribution rate be overridden at employee level?',NULL),(8,15,'CALCULATE_SALARY_BASED_ON_WORKING_DAYS_OR_CALENDAR_DAYS','Should the salary be calculated based on working days or calendar days?',NULL),(9,NULL,'SALARY_PAY_DAY_OF_MONTH','The date of month on which the salary will be paid to employees',NULL),(10,NULL,'PAYROLL_WINDOW_FROM_DATE','The start date of the month to be considered for payroll processing',NULL),(11,NULL,'PAYROLL_WINDOW_TO_DATE','The end date of the month to be considered for payroll processing',NULL),(12,NULL,'LEAVE_WINDOW_START_DATE','The start date in previous month to be considered as  leave window start',NULL),(13,NULL,'LEAVE_WINDOW_END_DATE','The end date in current month to be considered as leave window end',NULL),(14,NULL,'COMPANY_PAYROLL_CYCLE','Company payroll cycle',NULL),(15,NULL,'NON_WORKING_DAY_PAYMENT_OPTION','If pay day falls on non-working day, whether to pay on previous working day or next working day',NULL),(16,11,'EMPLOYER_CONTRIBUTION_TO_BE_INCLUDED_IN_CTC','Should employer ESI contribution be included in CTC?	','0 implies not included and 1 implies included');
	/*!40000 ALTER TABLE `payroll_client_component_configuration_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_earning_components_epf_configs_details`
	--

	DROP TABLE IF EXISTS `payroll_earning_components_epf_configs_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_earning_components_epf_configs_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `pigcm_id` int(11) NOT NULL,
	  `epf_always` int(1) DEFAULT NULL,
	  `epf_only_when_pf_wage_is_less_than_standard_pf_wage` int(1) DEFAULT NULL,
	  `effective_from_date` date NOT NULL,
	  `effective_to_date` date DEFAULT NULL,
	  `created_on` datetime DEFAULT NULL,
	  `created_by` int(11) DEFAULT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_earning_components_epf_configs_details_cid_fk` (`pigcm_id`),
	  CONSTRAINT `payroll_earning_components_epf_configs_details_pigcmid_fk` FOREIGN KEY (`pigcm_id`) REFERENCES `payroll_income_group_components_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `payroll_earning_components_formula_details`
	--

	DROP TABLE IF EXISTS `payroll_earning_components_formula_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_earning_components_formula_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `pigcm_id` int(11) NOT NULL,
	  `is_percentage_or_flat_amount` int(1) NOT NULL,
	  `component_value` float NOT NULL,
	  `parent_component_id` varchar(32) DEFAULT NULL,
	  `effective_from_date` date DEFAULT NULL,
	  `effective_to_date` date DEFAULT NULL,
	  `created_on` datetime DEFAULT NULL,
	  `created_by` int(11) DEFAULT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_earning_components_formula_details_cid_fk` (`pigcm_id`),
	  CONSTRAINT `payroll_earning_components_formula_details_pigcmid_fk` FOREIGN KEY (`pigcm_id`) REFERENCES `payroll_income_group_components_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `payroll_employee_esi_status_details`
	--

	DROP TABLE IF EXISTS `payroll_employee_esi_status_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_employee_esi_status_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `is_gross_sal_ltoet_esi_cutoff` int(1) DEFAULT NULL,
	  `last_contribution_month` int(2) DEFAULT NULL,
	  `last_contribution_year` int(4) DEFAULT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `empid` (`empid`),
	  CONSTRAINT `payroll_employee_esi_status_details_idfk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;


	--
	-- Table structure for table `payroll_employee_investments`
	--

	DROP TABLE IF EXISTS `payroll_employee_investments`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_employee_investments` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) DEFAULT NULL,
	  `investment_id` int(11) DEFAULT NULL,
	  `declared_amount` decimal(15,2) DEFAULT NULL,
	  `submitted_amount` decimal(15,2) DEFAULT NULL,
	  `verified_amount` decimal(15,2) DEFAULT NULL,
	  `receipt_number` varchar(32) DEFAULT NULL,
	  `disability_percentage` decimal(5,2) DEFAULT NULL,
	  `action_date` datetime DEFAULT NULL,
	  `financial_year` varchar(16) NOT NULL,
	  `assessment_year` varchar(16) NOT NULL,
	  `status` int(11) DEFAULT NULL,
	  `status_reason` varchar(512) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_product_investments_master_idfk` (`investment_id`),
	  KEY `employee_idfk` (`empid`),
	  KEY `statusmaster_idfk` (`status`),
	  CONSTRAINT `employee_idfk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `payroll_product_investments_master_idfk` FOREIGN KEY (`investment_id`) REFERENCES `payroll_product_investments_master` (`id`),
	  CONSTRAINT `statusmaster_idfk` FOREIGN KEY (`status`) REFERENCES `statusmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `payroll_employee_pay_group_mapping_master`
	--

	DROP TABLE IF EXISTS `payroll_employee_pay_group_mapping_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_employee_pay_group_mapping_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `income_group_id` int(11) NOT NULL,
	  `effective_from_date` date NOT NULL,
	  `effective_to_date` date DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_employee_pay_group_mapping_master_empid_fk` (`empid`),
	  KEY `payroll_employee_pay_group_mapping_master_igid_fk` (`income_group_id`),
	  CONSTRAINT `payroll_employee_pay_group_mapping_master_empid_fk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `payroll_employee_pay_group_mapping_master_igid_fk` FOREIGN KEY (`income_group_id`) REFERENCES `payroll_income_groups_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;


	--
	-- Table structure for table `payroll_employee_perk_details`
	--

	DROP TABLE IF EXISTS `payroll_employee_perk_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_employee_perk_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `event_date` date DEFAULT NULL,
	  `perk_id` int(11) NOT NULL,
	  `units_count` float DEFAULT NULL,
	  `value` float DEFAULT NULL,
	  `createdon` date DEFAULT NULL,
	  `updatedon` date DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_employee_perk_details_empidfk` (`empid`),
	  KEY `payroll_employee_perk_details_perkidfk` (`perk_id`),
	  CONSTRAINT `payroll_employee_perk_details_empidfk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`),
	  CONSTRAINT `payroll_employee_perk_details_perkidfk` FOREIGN KEY (`perk_id`) REFERENCES `payroll_perks_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `payroll_employee_professional_tax_details`
	--

	DROP TABLE IF EXISTS `payroll_employee_professional_tax_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_employee_professional_tax_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `year` int(4) NOT NULL,
	  `month` int(4) NOT NULL,
	  `professional_tax_value` decimal(15,2) NOT NULL,
	  `financial_year` varchar(16) DEFAULT NULL,
	  `assessment_year` varchar(16) DEFAULT NULL,
	  `created_on` datetime DEFAULT NULL,
	  `created_by` int(11) DEFAULT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_employee_professional_tax_details_employee_idfk` (`empid`),
	  CONSTRAINT `payroll_employee_professional_tax_details_employee_idfk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;


	--
	-- Table structure for table `payroll_employee_professional_tax_master`
	--

	DROP TABLE IF EXISTS `payroll_employee_professional_tax_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_employee_professional_tax_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `country_id` int(11) NOT NULL,
	  `state_id` int(11) NOT NULL,
	  `remittance_frequency` int(2) NOT NULL,
	  `gender_dependant` int(1) DEFAULT NULL,
	  `gender_value` varchar(32) DEFAULT NULL,
	  `month_dependant` int(1) DEFAULT NULL,
	  `month_value` int(2) DEFAULT NULL,
	  `salary_from_value` float DEFAULT NULL,
	  `salary_to_value` float DEFAULT NULL,
	  `tax_value` float DEFAULT NULL,
	  `effective_from_date` date DEFAULT NULL,
	  `effective_to_date` date DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_professional_tax_master_cidfk` (`country_id`),
	  KEY `payroll_professional_tax_master_sidfk` (`state_id`),
	  CONSTRAINT `payroll_professional_tax_master_cidfk` FOREIGN KEY (`country_id`) REFERENCES `countrymaster` (`id`),
	  CONSTRAINT `payroll_professional_tax_master_sidfk` FOREIGN KEY (`state_id`) REFERENCES `statesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_employee_professional_tax_master`
	--

	LOCK TABLES `payroll_employee_professional_tax_master` WRITE;
	/*!40000 ALTER TABLE `payroll_employee_professional_tax_master` DISABLE KEYS */;
	INSERT INTO `payroll_employee_professional_tax_master` VALUES (1,1,1,1,0,NULL,0,NULL,0,15000,0,curdate(),NULL),(2,1,1,1,0,NULL,0,NULL,15001,20000,150,curdate(),NULL),(3,1,1,1,0,NULL,0,NULL,20001,NULL,200,curdate(),NULL),(4,1,3,1,0,NULL,0,NULL,0,10000,0,curdate(),NULL),(5,1,3,1,0,NULL,0,NULL,10001,15000,150,curdate(),NULL),(6,1,3,1,0,NULL,0,NULL,15001,25000,180,curdate(),NULL),(7,1,3,1,0,NULL,0,NULL,25001,NULL,208,curdate(),NULL),(8,1,4,12,0,NULL,0,NULL,0,300000,0,curdate(),NULL),(9,1,4,12,0,NULL,0,NULL,300001,500000,1000,curdate(),NULL),(10,1,4,12,0,NULL,0,NULL,500000,1000000,2000,curdate(),NULL),(11,1,4,12,0,NULL,0,NULL,1000000,NULL,2500,curdate(),NULL),
    (12,1,7,1,0,NULL,0,NULL,0,5999,0,curdate(),NULL),(13,1,7,1,0,NULL,0,NULL,6000,8999,0,curdate(),NULL),(14,1,7,1,0,NULL,0,NULL,9000,12000,0,curdate(),NULL),(15,1,7,1,0,NULL,0,NULL,12001,NULL,200,curdate(),NULL),(16,1,10,4,0,NULL,0,NULL,0,300000,0,curdate(),NULL),(17,1,10,4,0,NULL,0,NULL,300001,500000,1200,curdate(),NULL),(18,1,10,4,0,NULL,0,NULL,500001,800000,1800,curdate(),NULL),(19,1,10,4,0,NULL,0,NULL,800001,1000000,2100,curdate(),NULL),(20,1,10,4,0,NULL,0,NULL,1000000,NULL,2500,curdate(),NULL),(21,1,12,1,0,NULL,0,NULL,0,10000,0,curdate(),NULL),(22,1,12,1,0,NULL,0,NULL,10001,15000,0,curdate(),NULL),(23,1,12,1,0,NULL,0,NULL,15001,NULL,200,curdate(),NULL),(24,1,13,6,0,NULL,0,NULL,0,11999,0,curdate(),NULL),(25,1,13,6,0,NULL,0,NULL,12000,17999,120,curdate(),NULL),(26,1,13,6,0,NULL,0,NULL,18000,29999,180,curdate(),NULL),(27,1,13,6,0,NULL,0,NULL,30000,44999,300,curdate(),NULL),(28,1,13,6,0,NULL,0,NULL,45000,59999,450,curdate(),NULL),(29,1,13,6,0,NULL,0,NULL,60000,74999,600,curdate(),NULL),(30,1,13,6,0,NULL,0,NULL,75000,99999,750,curdate(),NULL),(31,1,13,6,0,NULL,0,NULL,100000,124999,1000,curdate(),NULL),(32,1,13,6,0,NULL,0,NULL,125000,NULL,1250,curdate(),NULL),(33,1,14,1,0,NULL,0,NULL,0,18750,0,curdate(),NULL),(34,1,14,1,0,NULL,0,NULL,18751,25000,125,curdate(),NULL),(35,1,14,1,0,NULL,1,NULL,25001,33333,165,curdate(),NULL),(36,1,14,1,0,NULL,1,3,25001,33333,174,curdate(),NULL),(37,1,14,1,0,NULL,1,NULL,33334,NULL,208,curdate(),NULL),(38,1,14,1,0,NULL,1,3,33334,NULL,212,curdate(),NULL),(39,1,15,1,1,'Male',0,NULL,0,7500,0,curdate(),NULL),(40,1,15,1,1,'Male',0,NULL,7501,10000,175,curdate(),NULL),(41,1,15,1,1,'Male',1,NULL,10001,NULL,200,curdate(),NULL),(42,1,15,1,1,'Male',1,2,10001,NULL,300,curdate(),NULL),(43,1,16,12,0,NULL,0,NULL,0,50000,0,curdate(),NULL),(44,1,16,12,0,NULL,0,NULL,50001,75000,1200,curdate(),NULL),(45,1,16,12,0,NULL,0,NULL,75001,100000,2000,curdate(),NULL),(46,1,16,12,0,NULL,0,NULL,100001,125000,2400,curdate(),NULL),(47,1,16,12,0,NULL,0,NULL,125001,NULL,2500,curdate(),NULL),(48,1,17,1,0,NULL,0,NULL,0,4167,0,curdate(),NULL),(49,1,17,1,0,NULL,0,NULL,4168,6250,200,curdate(),NULL),(50,1,17,1,0,NULL,0,NULL,6251,8333,300,curdate(),NULL),(51,1,17,1,0,NULL,0,NULL,8334,12500,500,curdate(),NULL),(52,1,17,1,0,NULL,0,NULL,12501,16666,750,curdate(),NULL),(53,1,17,1,0,NULL,0,NULL,16667,20833,1000,curdate(),NULL),(54,1,17,1,0,NULL,0,NULL,20834,25000,1250,curdate(),NULL),(55,1,17,1,0,NULL,0,NULL,25001,29167,1500,curdate(),NULL),(56,1,17,1,0,NULL,0,NULL,29168,33333,1800,curdate(),NULL),(57,1,17,1,0,NULL,0,NULL,33334,37500,2100,curdate(),NULL),(58,1,17,1,0,NULL,0,NULL,37501,41667,2400,curdate(),NULL),(59,1,17,1,0,NULL,0,NULL,41668,NULL,2500,curdate(),NULL),(60,1,18,12,0,NULL,0,NULL,0,60000,0,curdate(),NULL),(61,1,18,12,0,NULL,0,NULL,60001,96000,900,curdate(),NULL),(62,1,18,12,0,NULL,0,NULL,96001,120000,1440,curdate(),NULL),(63,1,18,12,0,NULL,0,NULL,120001,144000,1800,curdate(),NULL),(64,1,18,12,0,NULL,0,NULL,144001,180000,2160,curdate(),NULL),(65,1,18,12,0,NULL,0,NULL,180001,NULL,2496,curdate(),NULL),(66,1,20,1,0,NULL,0,NULL,0,13333,0,curdate(),NULL),(67,1,20,1,0,NULL,0,NULL,13334,25000,125,curdate(),NULL),(68,1,20,1,0,NULL,1,NULL,25001,NULL,200,curdate(),NULL),(69,1,20,1,0,NULL,1,3,25001,NULL,300,curdate(),NULL),(70,1,33,6,0,NULL,0,NULL,0,100000,0,curdate(),NULL),(71,1,33,6,0,NULL,0,NULL,100001,200000,250,curdate(),NULL),(72,1,33,6,0,NULL,0,NULL,200001,300000,500,curdate(),NULL),(73,1,33,6,0,NULL,0,NULL,300001,400000,750,curdate(),NULL),(74,1,33,6,0,NULL,0,NULL,400001,500000,1000,curdate(),NULL),(75,1,33,6,0,NULL,0,NULL,500001,NULL,1250,curdate(),NULL),(76,1,21,1,0,NULL,0,NULL,0,20833,0,curdate(),NULL),(77,1,21,1,0,NULL,0,NULL,20834,NULL,200,curdate(),NULL),(78,1,24,6,0,NULL,0,NULL,0,12000,0,curdate(),NULL),(79,1,24,6,0,NULL,0,NULL,12001,30000,135,curdate(),NULL),(80,1,24,6,0,NULL,0,NULL,30001,45000,315,curdate(),NULL),(81,1,24,6,0,NULL,0,NULL,45001,60000,690,curdate(),NULL),(82,1,24,6,0,NULL,0,NULL,60001,75000,1025,curdate(),NULL),(83,1,24,6,0,NULL,0,NULL,75001,NULL,1250,curdate(),NULL),(84,1,25,1,0,NULL,0,NULL,0,15000,0,curdate(),NULL),(85,1,25,1,0,NULL,0,NULL,15001,20000,150,curdate(),NULL),(86,1,25,1,0,NULL,0,NULL,20001,NULL,200,curdate(),NULL),(87,1,26,1,0,NULL,0,NULL,0,7500,0,curdate(),NULL),(88,1,26,1,0,NULL,0,NULL,7501,15000,150,curdate(),NULL),(89,1,26,1,0,NULL,0,NULL,15001,NULL,208,curdate(),NULL),(90,1,29,1,0,NULL,0,NULL,0,10000,0,curdate(),NULL),(91,1,29,1,0,NULL,0,NULL,10001,15000,110,curdate(),NULL),(92,1,29,1,0,NULL,0,NULL,15001,25000,130,curdate(),NULL),(93,1,29,1,0,NULL,0,NULL,25001,40000,150,curdate(),NULL),(94,1,29,1,0,NULL,0,NULL,40001,NULL,200,curdate(),NULL);
	/*!40000 ALTER TABLE `payroll_employee_professional_tax_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_employee_vpf_master`
	--

	DROP TABLE IF EXISTS `payroll_employee_vpf_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_employee_vpf_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `vpf_value` decimal(15,2) NOT NULL,
	  `effective_from_date` date NOT NULL,
	  `effective_to_date` date DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_employee_vpf_master_eidfk` (`empid`),
	  CONSTRAINT `payroll_employee_vpf_master_eidfk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_employee_vpf_master`
	--

	LOCK TABLES `payroll_employee_vpf_master` WRITE;
	/*!40000 ALTER TABLE `payroll_employee_vpf_master` DISABLE KEYS */;
	/*!40000 ALTER TABLE `payroll_employee_vpf_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_employer_professional_tax_details`
	--

	DROP TABLE IF EXISTS `payroll_employer_professional_tax_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_employer_professional_tax_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `state_id` int(11) DEFAULT NULL,
	  `year` int(4) NOT NULL,
	  `month` int(4) NOT NULL,
	  `professional_tax_value` decimal(15,2) NOT NULL,
	  `financial_year` varchar(16) DEFAULT NULL,
	  `assessment_year` varchar(16) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_employer_professional_tax_details_sidfk` (`state_id`),
	  CONSTRAINT `payroll_employer_professional_tax_details_sidfk` FOREIGN KEY (`state_id`) REFERENCES `companyworklocationsmaster` (`state`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_employer_professional_tax_details`
	--

	LOCK TABLES `payroll_employer_professional_tax_details` WRITE;
	/*!40000 ALTER TABLE `payroll_employer_professional_tax_details` DISABLE KEYS */;
	/*!40000 ALTER TABLE `payroll_employer_professional_tax_details` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_employer_professional_tax_master`
	--

	DROP TABLE IF EXISTS `payroll_employer_professional_tax_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_employer_professional_tax_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `country_id` int(11) NOT NULL,
	  `state_id` int(11) NOT NULL,
	  `remittance_frequency` int(2) DEFAULT NULL,
	  `employee_count_dependant` int(1) DEFAULT NULL,
	  `employee_count_from_value` int(11) DEFAULT NULL,
	  `employee_count_to_value` int(11) DEFAULT NULL,
	  `establishment_dependant` int(1) DEFAULT NULL,
	  `establishment_type` varchar(32) DEFAULT NULL,
	  `tax_value` float DEFAULT NULL,
	  `effective_from_date` date DEFAULT NULL,
	  `effective_to_date` date DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_employer_professional_tax_master_cidfk` (`country_id`),
	  KEY `payroll_employer_professional_tax_master_sidfk` (`state_id`),
	  CONSTRAINT `payroll_employer_professional_tax_master_cidfk` FOREIGN KEY (`country_id`) REFERENCES `countrymaster` (`id`),
	  CONSTRAINT `payroll_employer_professional_tax_master_sidfk` FOREIGN KEY (`state_id`) REFERENCES `statesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_employer_professional_tax_master`
	--

	LOCK TABLES `payroll_employer_professional_tax_master` WRITE;
	/*!40000 ALTER TABLE `payroll_employer_professional_tax_master` DISABLE KEYS */;
	INSERT INTO `payroll_employer_professional_tax_master` VALUES (1,1,1,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(2,1,3,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(3,1,4,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(4,1,7,12,0,NULL,NULL,1,'Panchayat',500,curdate(),NULL),(5,1,7,12,0,NULL,NULL,1,'Municipality',1000,curdate(),NULL),(6,1,7,12,0,NULL,NULL,1,'Corporation',2000,curdate(),NULL),(7,1,10,12,1,0,5,0,NULL,500,curdate(),NULL),(8,1,10,12,1,6,10,0,NULL,1000,curdate(),NULL),(9,1,10,12,1,11,20,0,NULL,2000,curdate(),NULL),(10,1,10,12,1,21,NULL,0,NULL,2500,curdate(),NULL),(11,1,12,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(12,1,13,6,0,NULL,NULL,0,NULL,1250,curdate(),NULL),(13,1,14,12,1,0,10,0,NULL,1000,curdate(),NULL),(14,1,14,12,1,11,NULL,0,NULL,2500,curdate(),NULL),(15,1,15,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(16,1,16,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(17,1,17,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(18,1,18,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(19,1,20,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(20,1,33,6,0,NULL,NULL,0,NULL,1250,curdate(),NULL),(21,1,24,6,0,NULL,NULL,0,NULL,1250,curdate(),NULL),(22,1,18,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(23,1,18,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(24,1,25,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(25,1,26,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL),(26,1,29,12,0,NULL,NULL,0,NULL,2500,curdate(),NULL);
	/*!40000 ALTER TABLE `payroll_employer_professional_tax_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_employer_ptax_duedate_master`
	--

	DROP TABLE IF EXISTS `payroll_employer_ptax_duedate_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_employer_ptax_duedate_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `country_id` int(11) NOT NULL,
	  `state_id` int(11) NOT NULL,
	  `duedate_month` int(2) NOT NULL,
	  `duedate_day` int(2) NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_employer_pt_duedate_master_cidfk` (`country_id`),
	  KEY `payroll_employer_pt_duedate_master_sidfk` (`state_id`),
	  CONSTRAINT `payroll_employer_pt_duedate_master_cidfk` FOREIGN KEY (`country_id`) REFERENCES `countrymaster` (`id`),
	  CONSTRAINT `payroll_employer_pt_duedate_master_sidfk` FOREIGN KEY (`state_id`) REFERENCES `statesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_employer_ptax_duedate_master`
	--

	LOCK TABLES `payroll_employer_ptax_duedate_master` WRITE;
	/*!40000 ALTER TABLE `payroll_employer_ptax_duedate_master` DISABLE KEYS */;
	INSERT INTO `payroll_employer_ptax_duedate_master` VALUES (1,1,1,6,30),(2,1,3,9,30),(3,1,4,11,30),(4,1,7,9,30),(5,1,10,6,30),(6,1,12,4,30),(7,1,13,9,30),(8,1,13,3,31),(9,1,14,9,30),(10,1,15,6,30),(11,1,16,3,30),(12,1,17,3,31),(13,1,18,6,30),(14,1,20,3,30),(15,1,33,6,30),(16,1,33,12,31),(17,1,24,9,30),(18,1,24,3,31),(19,1,25,6,30),(20,1,26,4,30),(21,1,29,7,31);
	/*!40000 ALTER TABLE `payroll_employer_ptax_duedate_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_epf_details`
	--

	DROP TABLE IF EXISTS `payroll_epf_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_epf_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `year` int(4) NOT NULL,
	  `month` int(4) NOT NULL,
	  `employee_epf_wage` decimal(15,2) NOT NULL,
	  `employer_epf_wage` decimal(15,2) DEFAULT NULL,
	  `employee_epf_value` decimal(15,2) NOT NULL,
	  `employer_eps_value` decimal(15,2) NOT NULL,
	  `employer_epf_value` decimal(15,2) NOT NULL,
	  `employer_edli_value` decimal(15,2) NOT NULL,
	  `employer_admin_charges_value` decimal(15,2) NOT NULL,
	  `financial_year` varchar(16) DEFAULT NULL,
	  `assessment_year` varchar(16) DEFAULT NULL,
	  `created_on` datetime DEFAULT NULL,
	  `created_by` int(11) DEFAULT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_epf_details_eidfk` (`empid`),
	  CONSTRAINT `payroll_epf_details_eidfk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `payroll_esi_details`
	--

	DROP TABLE IF EXISTS `payroll_esi_details`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_esi_details` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` int(11) NOT NULL,
	  `year` int(4) NOT NULL,
	  `month` int(4) NOT NULL,
	  `employee_esi_value` decimal(15,2) NOT NULL,
	  `employer_esi_value` decimal(15,2) NOT NULL,
	  `financial_year` varchar(16) DEFAULT NULL,
	  `assessment_year` varchar(16) DEFAULT NULL,
	  `created_on` datetime DEFAULT NULL,
	  `created_by` int(11) DEFAULT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_esi_details_eidfk` (`empid`),
	  CONSTRAINT `payroll_esi_details_eidfk` FOREIGN KEY (`empid`) REFERENCES `employee` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `payroll_income_group_components_master`
	--

	DROP TABLE IF EXISTS `payroll_income_group_components_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_income_group_components_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `group_id` int(11) DEFAULT NULL,
	  `component_id` int(11) DEFAULT NULL,
	  `display_name` varchar(255) NOT NULL,
	  `is_this_component_a_part_of_employee_salary_structure` int(1) DEFAULT NULL,
	  `calculate_on_pro_rata_basis` int(1) DEFAULT NULL,
	  `is_this_component_taxable` int(1) DEFAULT NULL,
	  `consider_for_esi_contribution` int(1) DEFAULT NULL,
	  `consider_for_epf_contribution` int(1) DEFAULT NULL,
	  `show_this_component_in_payslip` int(1) DEFAULT NULL,
	  `effective_from_date` date DEFAULT NULL,
	  `effective_to_date` date DEFAULT NULL,
	  `status` varchar(64) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `income_group_components_master_gidfk` (`group_id`),
	  KEY `income_group_components_master_cidfk` (`component_id`),
	  CONSTRAINT `income_group_components_master_cidfk` FOREIGN KEY (`component_id`) REFERENCES `payroll_salary_components_master` (`id`),
	  CONSTRAINT `income_group_components_master_gidfk` FOREIGN KEY (`group_id`) REFERENCES `payroll_income_groups_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `payroll_income_groups_master`
	--

	DROP TABLE IF EXISTS `payroll_income_groups_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_income_groups_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `group_name` varchar(255) DEFAULT NULL,
	  `income_from_value` decimal(15,2) NOT NULL,
	  `income_to_value` decimal(15,2) NOT NULL,
	  `status` varchar(64) DEFAULT NULL,
	  `description` varchar(1000) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `payroll_income_tax_category_master`
	--

	DROP TABLE IF EXISTS `payroll_income_tax_category_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_income_tax_category_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `category_name` varchar(255) DEFAULT NULL,
	  `lower_age_limit` float NOT NULL,
	  `upper_age_limit` float DEFAULT NULL,
	  `effective_from_date` date DEFAULT NULL,
	  `effective_to_date` date DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_income_tax_category_master`
	--

	LOCK TABLES `payroll_income_tax_category_master` WRITE;
	/*!40000 ALTER TABLE `payroll_income_tax_category_master` DISABLE KEYS */;
	INSERT INTO `payroll_income_tax_category_master` VALUES (1,'Individual',0,59.999,curdate(),NULL),(2,'Resident Senior Citizen',60,80,curdate(),NULL),(3,'Resident Super Senior Citizen',80.001,NULL,curdate(),NULL);
	/*!40000 ALTER TABLE `payroll_income_tax_category_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_income_tax_slabs_master`
	--

	DROP TABLE IF EXISTS `payroll_income_tax_slabs_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_income_tax_slabs_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `financial_year` int(4) DEFAULT NULL,
	  `category_id` int(11) DEFAULT NULL,
	  `slab_from_value` float DEFAULT NULL,
	  `slab_to_value` float DEFAULT NULL,
	  `tax_percentage` decimal(4,2) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_income_tax_slabs_master_categoryidfk` (`category_id`),
	  CONSTRAINT `payroll_income_tax_slabs_master_categoryidfk` FOREIGN KEY (`category_id`) REFERENCES `payroll_income_tax_category_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_income_tax_slabs_master`
	--

	LOCK TABLES `payroll_income_tax_slabs_master` WRITE;
	/*!40000 ALTER TABLE `payroll_income_tax_slabs_master` DISABLE KEYS */;
	/*!40000 ALTER TABLE `payroll_income_tax_slabs_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_messages`
	--

	DROP TABLE IF EXISTS `payroll_messages`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_messages` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `code` varchar(255) DEFAULT NULL,
	  `screenname` varchar(255) DEFAULT NULL,
	  `message` varchar(2048) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_messages`
	--

	LOCK TABLES `payroll_messages` WRITE;
	/*!40000 ALTER TABLE `payroll_messages` DISABLE KEYS */;
	INSERT INTO `payroll_messages` VALUES (1,'PR1','Common','This field is required',current_timestamp(),1,null,null),(2,'PR2',NULL,'Income group added successfully.',current_timestamp(),1,null,null),(3,'PR3',NULL,'Unable to add Income group.Please try again.',current_timestamp(),1,NULL,NULL),(4,'PR4',NULL,'The selected component is successfully Updated.',current_timestamp(),1,NULL,NULL),(5,'PR5',NULL,'Unable to update the selected component.Please try again.',current_timestamp(),1,NULL,NULL),(6,'PR6',NULL,'Please select atleast one earning and deduction component.',current_timestamp(),1,NULL,NULL),(7,'PR7',NULL,'Unable to update pay schedule. Please try again.',current_timestamp(),1,NULL,NULL),(8,'PR8',NULL,'Pay schedule updated successfully.',current_timestamp(),1,NULL,NULL),(9,'PR9',NULL,'The selected component is successfully configured.',current_timestamp(),1,NULL,NULL),(10,'PR10',NULL,'Unable to configure the selected component.Please try again.',current_timestamp(),1,NULL,NULL),(11,'PR11',NULL,'Unable to approve investment. Please try again.',current_timestamp(),1,NULL,NULL),(12,'PR12',NULL,'Investment aprroved successfully.',current_timestamp(),1,NULL,NULL),(13,'PR13',NULL,'Investments Added successfully',current_timestamp(),1,NULL,NULL),(14,'PR14',NULL,'Please submit amount must less than declareamount',current_timestamp(),1,NULL,NULL),(15,'PR15',NULL,'Please Declare amount must less than Max limit',current_timestamp(),1,NULL,NULL),(16,'PR16',NULL,'Please enter data.',current_timestamp(),1,NULL,NULL),(17,'PR17',NULL,'Deleted employee investments.',current_timestamp(),1,NULL,NULL),(18,'PR18',NULL,'Unable to delete employee investment.',current_timestamp(),1,null,null),(19,'PR19',NULL,'Unable to add IT Declarations. Please try again.',current_timestamp(),1,NULL,NULL),(20,'PR20',NULL,'File size exceeds 2 MB. Please reduce file size. Allowed files are PNG, JPG, JPEG, PDF.',current_timestamp(),1,NULL,NULL),(21,'PR21',NULL,'Deleted file',current_timestamp(),1,null,null),(22,'PR22',NULL,'Unable to delete file.',current_timestamp(),1,NULL,NULL),(23,'PR23',NULL,'The selected component group name already existed.Please change paygroup name.',current_timestamp(),1,NULL,NULL),(24,'PR24',NULL,'Start Range Must less than End Range',current_timestamp(),1,NULL,NULL),(25,'PR25',NULL,'EPF configuration values updated successfully.',current_timestamp(),1,NULL,NULL),(26,'PR26',NULL,'Could not update.Please try again later.',current_timestamp(),1,NULL,NULL),(27,'PR27',NULL,'Salary sheet for the selected employees is generated successfully.',current_timestamp(),1,NULL,NULL),(28,'PR28',NULL,'Error please try again.',current_timestamp(),1,NULL,NULL),
    (29,'PR29',NULL,'Please check disablity percentage min and max value.',current_timestamp(),1,NULL,NULL),(30,'PR30',NULL,'Please select an option.',current_timestamp(),1,NULL,NULL),(31,'PR31',NULL,'Paygroup Successfully assgined to employee.',current_timestamp(),1,NULL,NULL),(32,'PR32',NULL,'Unable to assign paygrup to employee.Please try again later.',current_timestamp(),1,NULL,NULL),(33,'PR33',NULL,'Pay group component Startrange must lessthan end range.',current_timestamp(),1,NULL,NULL),(34,'PR34',NULL,'Approved amount must less than submitted amount',current_timestamp(),1,NULL,NULL),(35,'PR35',NULL,'The employee is assigned to the selected pay group successfully.',current_timestamp(),1,NULL,NULL),(36,'PR36',NULL,'Unable to assign pay group to employee.',current_timestamp(),1,NULL,NULL),(37,'PR37',NULL,'Configured company esi values.',current_timestamp(),1,NULL,NULL),(38,'PR38',NULL,'Unable to configure company esi values.',current_timestamp(),1,NULL,NULL),(39,'PR39',NULL,'Please enter valid ESI number(only numbers).',current_timestamp(),1,NULL,NULL),(40,'PR40',NULL,'Message updated successfully.',current_timestamp(),1,NULL,NULL),(41,'PR41',NULL,'Message already exists.',current_timestamp(),1,NULL,NULL),(42,'PR42',NULL,'Unable to update message.',current_timestamp(),1,NULL,NULL),(43,'PR43',NULL,'Please Select valid Paygroup',current_timestamp(),1,NULL,NULL),(44,'PR44',NULL,'Pay Group not availabe in this range.Please add paygroup.',current_timestamp(),1,NULL,NULL),(45,'PR45',NULL,'Please enter a valid value that satisfies the condition given in the information pane.',current_timestamp(),1,NULL,NULL),(46,'PR46',NULL,'Please select atleast one employee',current_timestamp(),1,NULL,NULL),(47,'PR47',NULL,'Set Income group updated sccessfully',current_timestamp(),1,NULL,NULL),(48,'PR48',NULL,'Unable to update Set Income group.',current_timestamp(),1,NULL,NULL);
	/*!40000 ALTER TABLE `payroll_messages` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_perks_master`
	--

	DROP TABLE IF EXISTS `payroll_perks_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_perks_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `perk_units` varchar(32) NOT NULL,
	  `category` varchar(32) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_perks_master`
	--

	LOCK TABLES `payroll_perks_master` WRITE;
	/*!40000 ALTER TABLE `payroll_perks_master` DISABLE KEYS */;
	INSERT INTO `payroll_perks_master` VALUES (1,'Fixed','Night Shift'),(2,'Day','CompOff'),(3,'Hour','Over Time');
	/*!40000 ALTER TABLE `payroll_perks_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_product_component_formula_master`
	--

	DROP TABLE IF EXISTS `payroll_product_component_formula_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_product_component_formula_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `component_id` int(11) NOT NULL,
	  `is_percentage_or_flat_amount` int(1) DEFAULT NULL,
	  `parent_component_id` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_component_formula_master_cidfk` (`component_id`),
	  KEY `payroll_component_formula_master_pcidfk` (`parent_component_id`),
	  CONSTRAINT `payroll_component_formula_master_cidfk` FOREIGN KEY (`component_id`) REFERENCES `payroll_salary_components_master` (`id`),
	  CONSTRAINT `payroll_component_formula_master_pcidfk` FOREIGN KEY (`parent_component_id`) REFERENCES `payroll_salary_components_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_product_component_formula_master`
	--

	LOCK TABLES `payroll_product_component_formula_master` WRITE;
	/*!40000 ALTER TABLE `payroll_product_component_formula_master` DISABLE KEYS */;
	INSERT INTO `payroll_product_component_formula_master` VALUES (1,1,1,15),(2,2,0,NULL),(3,3,1,1),(4,4,0,NULL),(5,5,0,NULL),(6,6,0,NULL),(7,7,NULL,NULL),(8,8,NULL,NULL),(9,9,NULL,NULL);
	/*!40000 ALTER TABLE `payroll_product_component_formula_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_product_component_rulemaster`
	--

	DROP TABLE IF EXISTS `payroll_product_component_rulemaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_product_component_rulemaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `component_id` int(11) DEFAULT NULL,
	  `rule_name` varchar(255) NOT NULL,
	  `description` varchar(2048) DEFAULT NULL,
	  `additional_information` varchar(1000) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_component_rulemaster_cidfk` (`component_id`),
	  CONSTRAINT `payroll_component_rulemaster_cidfk` FOREIGN KEY (`component_id`) REFERENCES `payroll_salary_components_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_product_component_rulemaster`
	--

	LOCK TABLES `payroll_product_component_rulemaster` WRITE;
	/*!40000 ALTER TABLE `payroll_product_component_rulemaster` DISABLE KEYS */;
	INSERT INTO `payroll_product_component_rulemaster` VALUES (1,11,'MINIMUM_NUMBER_OF_EMPLOYEES_REQUIRED','Minimum number of employees required to implement ESI',NULL),(2,11,'MAXIMUM_GROSS_SALARY_PERMITTED_TO_RECEIVE_ESI','Maximum gross salary an employee is permitted to receive to be eligible for ESI',NULL),(3,11,'CONTRIBUTION_RATE_OF_EMPLOYEE','Percentage of wages of employee to be contributed from the employee salary for ESI',NULL),(4,11,'CONTRIBUTION_RATE_OF_EMPLOYER','Percentage of wages of employee to be contributed by the employer for ESI',NULL),(5,12,'MINIMUM_NUMBER_OF_EMPLOYEES_REQUIRED','Minimum number of employees required to implement EPF',NULL),(6,12,'MAXIMUM_SALARY_CONSIDERED_FOR_EMPLOYER_CONTRIBUTION','Maximum salary to be considered for employer contribution towards EPF',NULL),(7,12,'TOTAL_PERCENTAGE_CONTRIBUTION_BY_EMPLOYER','Total salary percentage contribution done by employer towards EPF',NULL),(8,12,'TOTAL_PERCENTAGE_CONTRIBUTION_BY_EMPLOYEE','Total salary percentage contribution done by employee towards EPF',NULL),(9,12,'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_EPS','Percentage contribution done by employer towards EPS',NULL),(10,12,'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_EPF','Percentage contribution done by employer towards EPF',NULL),(11,12,'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_EDLI','Percentage contribution done by employer towards Employees Deposit Linked Insurance',NULL),(12,12,'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_ADMIN_CHARGES','Percentage contribution done by employer towards admin charges',NULL),(13,NULL,'PAYROLL_PAY_DAY','Day of the month on which salaries will be paid to employees.',NULL),(14,11,'MAXIMUM_DAILY_WAGE_FOR_EMPLOYEE_CONTRIBUTION_EXEMPTION','Maximum daily wage of an employee up to which employee contribution is exempted',NULL),(15,11,'CONTRIBUTION_PERIOD_1_START_DATE','ESI first contribution period starts from this date every year.',NULL),(16,11,'CONTRIBUTION_PERIOD_1_END_DATE','ESI first contribution period ends on this date every year.',NULL),(17,11,'CONTRIBUTION_PERIOD_2_START_DATE','ESI second contribution period starts from this date every year.',NULL),(18,11,'CONTRIBUTION_PERIOD_2_END_DATE','ESI second contribution period ends on this date every year.',NULL),(19,11,'WAGE_DAYS_PER_MONTH','Number of wage days in a month.',NULL);
	/*!40000 ALTER TABLE `payroll_product_component_rulemaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_product_component_rulevalues`
	--

	DROP TABLE IF EXISTS `payroll_product_component_rulevalues`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_product_component_rulevalues` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `rule_id` int(11) DEFAULT NULL,
	  `value` varchar(64) DEFAULT NULL,
	  `effectivefromdate` datetime DEFAULT NULL,
	  `effectivetodate` datetime DEFAULT NULL,
	  `status` char(8) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_component_rulevalues_ridfk` (`rule_id`),
	  CONSTRAINT `payroll_component_rulevalues_ridfk` FOREIGN KEY (`rule_id`) REFERENCES `payroll_product_component_rulemaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_product_component_rulevalues`
	--

	LOCK TABLES `payroll_product_component_rulevalues` WRITE;
	/*!40000 ALTER TABLE `payroll_product_component_rulevalues` DISABLE KEYS */;
	INSERT INTO `payroll_product_component_rulevalues` VALUES (1,1,'10',current_timestamp(),NULL,'Active'),(2,2,'21000',current_timestamp(),NULL,'Active'),(3,3,'0.75',current_timestamp(),NULL,'Active'),(4,4,'3.25',current_timestamp(),NULL,'Active'),(5,5,'20',current_timestamp(),NULL,'Active'),(6,6,'15000',current_timestamp(),NULL,'Active'),(7,7,'12',current_timestamp(),NULL,'Active'),
    (8,8,'12',current_timestamp(),NULL,'Active'),(9,9,'8.33',current_timestamp(),NULL,'Active'),(10,10,'3.67',current_timestamp(),NULL,'Active'),(11,11,'0.50',current_timestamp(),NULL,'Active'),(12,12,'0.50',current_timestamp(),NULL,'Active'),(13,14,'176',current_timestamp(),NULL,'Active'),(14,15,'04-01',current_timestamp(),NULL,'Active'),(15,16,'09-30',current_timestamp(),NULL,'Active'),(16,17,'10-01',current_timestamp(),NULL,'Active'),(17,18,'03-31',current_timestamp(),NULL,'Active'),(18,19,'26',current_timestamp(),NULL,'Active');
	/*!40000 ALTER TABLE `payroll_product_component_rulevalues` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_product_earning_comp_configs_editable_master`
	--

	DROP TABLE IF EXISTS `payroll_product_earning_comp_configs_editable_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_product_earning_comp_configs_editable_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `component_id` int(11) NOT NULL,
	  `is_this_component_a_part_of_employee_salary_structure` int(1) DEFAULT NULL,
	  `calculate_on_pro_rata_basis` int(1) DEFAULT NULL,
	  `is_this_component_taxable` int(1) DEFAULT NULL,
	  `consider_for_esi_contribution` int(1) DEFAULT NULL,
	  `consider_for_epf_contribution` int(1) DEFAULT NULL,
	  `show_this_component_in_payslip` int(1) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_earning_comp_configs_editable_master_cid_fk` (`component_id`),
	  CONSTRAINT `payroll_earning_comp_configs_editable_master_cid_fk` FOREIGN KEY (`component_id`) REFERENCES `payroll_salary_components_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_product_earning_comp_configs_editable_master`
	--

	LOCK TABLES `payroll_product_earning_comp_configs_editable_master` WRITE;
	/*!40000 ALTER TABLE `payroll_product_earning_comp_configs_editable_master` DISABLE KEYS */;
	INSERT INTO `payroll_product_earning_comp_configs_editable_master` VALUES (1,1,0,0,0,0,0,0),(2,2,0,1,0,1,0,0),(3,3,0,0,0,0,0,0),(4,4,0,1,0,1,1,0),(5,5,0,1,0,1,1,0),(6,6,0,1,0,1,1,0),(7,7,1,0,0,1,0,0),(8,8,1,0,0,1,0,0),(9,9,0,0,0,0,0,0),(10,13,0,0,0,0,0,0),(11,14,0,0,0,0,0,0),(12,16,0,1,0,1,1,0),(13,17,0,1,0,1,1,0),(14,18,0,1,0,1,1,0),(15,19,0,1,0,1,1,0),(16,20,0,1,0,1,1,0),(17,21,0,1,0,1,1,0),(18,22,1,0,0,1,0,0),(19,23,0,1,0,1,1,0),(20,24,0,1,0,1,1,0),(21,25,0,1,0,1,1,0),(22,26,0,1,0,1,1,0),(23,27,0,1,0,1,1,0),(24,28,0,1,0,1,1,0),(25,29,0,1,0,1,1,0),(26,30,0,1,0,1,1,0),(27,31,1,0,0,1,0,0),(28,32,0,1,0,1,1,0),(29,33,0,1,0,1,1,0),(30,34,0,1,0,1,1,0),(31,35,0,1,0,1,1,0),(32,36,0,1,0,0,1,0),(33,37,0,1,0,1,1,0),(34,38,0,1,0,1,1,0),(35,39,0,0,0,1,1,0);
	/*!40000 ALTER TABLE `payroll_product_earning_comp_configs_editable_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_product_earning_components_configurations_master`
	--

	DROP TABLE IF EXISTS `payroll_product_earning_components_configurations_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_product_earning_components_configurations_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `component_id` int(11) NOT NULL,
	  `display_name` varchar(255) NOT NULL,
	  `is_this_component_a_part_of_employee_salary_structure` int(1) DEFAULT NULL,
	  `calculate_on_pro_rata_basis` int(1) DEFAULT NULL,
	  `is_this_component_taxable` int(1) DEFAULT NULL,
	  `consider_for_esi_contribution` int(1) DEFAULT NULL,
	  `consider_for_epf_contribution` int(1) DEFAULT NULL,
	  `show_this_component_in_payslip` int(1) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_earning_components_configurations_master_cid_fk` (`component_id`),
	  CONSTRAINT `payroll_earning_components_configurations_master_cid_fk` FOREIGN KEY (`component_id`) REFERENCES `payroll_salary_components_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_product_earning_components_configurations_master`
	--

	LOCK TABLES `payroll_product_earning_components_configurations_master` WRITE;
	/*!40000 ALTER TABLE `payroll_product_earning_components_configurations_master` DISABLE KEYS */;
	INSERT INTO `payroll_product_earning_components_configurations_master` VALUES (1,1,'Basic Salary',1,1,1,1,1,1),(2,2,'Dearness Allowance',1,1,1,1,1,1),(3,3,'House Rent Allowance',1,1,1,1,0,1),(4,4,'Conveyance Allowance',1,1,1,0,1,1),(5,5,'Travelling Allowance',1,1,1,0,1,1),(6,6,'Transport Allowance',1,1,1,1,1,1),(7,7,'Commission',0,0,1,1,0,1),(8,8,'Bonus',1,0,1,0,0,1),(9,9,'Gratuity',0,0,1,0,0,1),(10,13,'Leave Encashment',0,0,1,0,0,1),(11,14,'Fixed Allowance',1,1,1,1,1,1),(12,16,'Children Education Allowance',1,1,1,1,1,1),(13,17,'Hostel Expenditure Allowance',1,1,1,1,1,1),(14,18,'Helper Allowance',1,1,1,1,1,1),(15,19,'Uniform Allowance',1,1,1,1,1,1),(16,20,'Daily Allowance',1,1,1,1,1,1),(17,21,'City Compensatory Allowance',1,1,1,1,1,1),(18,22,'Overtime Allowance',1,0,1,1,0,1),(19,23,'Telephone Allowance',1,1,1,1,1,1),(20,24,'Fixed Medical Allowance',1,1,1,1,1,1),(21,25,'Project Allowance',1,1,1,1,1,1),(22,26,'Food Allowance',1,1,1,1,1,1),(23,27,'Holiday Allowance',1,1,1,1,1,1),(24,28,'Entertainment Allowance',1,1,1,0,1,1),(25,29,'Custom Allowance',1,1,1,1,1,1),(26,30,'Food Coupon',1,1,1,1,1,1),(27,31,'Gift Coupon',0,0,1,0,0,1),(28,32,'Research Allowance',1,1,1,1,1,1),(29,33,'Books and Periodicals Allowance',1,1,1,1,1,1),(30,34,'Fuel Allowance',1,1,1,1,1,1),(31,35,'Driver Allowance',1,1,1,1,1,1),(32,36,'Leave Travel Allowance',1,1,1,0,1,1),(33,37,'Vehicle Maintenance Allowance',1,1,1,1,1,1),(34,38,'Telephone and Internet Allowance',1,1,1,1,1,1),(35,39,'Other Allowance',1,1,1,1,1,1),(36,10,'Professional Tax',1,1,0,0,0,1),(37,11,'ESIC',1,1,0,0,0,1),(38,12,'Employee Provident Fund',1,1,0,0,0,1);
	/*!40000 ALTER TABLE `payroll_product_earning_components_configurations_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_product_earning_components_epf_configs_master`
	--

	DROP TABLE IF EXISTS `payroll_product_earning_components_epf_configs_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_product_earning_components_epf_configs_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `component_id` int(11) NOT NULL,
	  `epf_always` int(1) DEFAULT NULL,
	  `epf_only_when_pf_wage_is_less_than_standard_pf_wage` int(1) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `payroll_earning_components_epf_configs_master_cid_fk` (`component_id`),
	  CONSTRAINT `payroll_earning_components_epf_configs_master_cid_fk` FOREIGN KEY (`component_id`) REFERENCES `payroll_salary_components_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_product_earning_components_epf_configs_master`
	--

	LOCK TABLES `payroll_product_earning_components_epf_configs_master` WRITE;
	/*!40000 ALTER TABLE `payroll_product_earning_components_epf_configs_master` DISABLE KEYS */;
	INSERT INTO `payroll_product_earning_components_epf_configs_master` VALUES (1,1,1,0),(2,2,1,0),(3,3,0,0),(4,4,0,1),(5,5,0,1),(6,6,0,1),(7,7,0,0),(8,8,0,0),(9,9,0,0),(10,10,0,0),(11,13,0,0),(12,14,0,1),(13,16,0,1),(14,17,0,1),(15,18,0,1),(16,19,0,1),(17,20,0,1),(18,21,0,1),(19,22,0,0),(20,23,0,1),(21,24,0,1),(22,25,0,1),(23,26,0,1),(24,27,0,1),(25,28,0,1),(26,29,0,1),(27,30,0,1),(28,31,0,0),(29,32,0,1),(30,33,0,1),(31,34,0,1),(32,35,0,1),(33,36,0,1),(34,37,0,1),(35,38,0,1),(36,39,0,1);
	/*!40000 ALTER TABLE `payroll_product_earning_components_epf_configs_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_product_investments_master`
	--

	DROP TABLE IF EXISTS `payroll_product_investments_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_product_investments_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `incometax_section` varchar(16) DEFAULT NULL,
	  `incometax_section_description` varchar(256) DEFAULT NULL,
	  `investment_description` varchar(255) NOT NULL,
	  `investment_maxvalue` decimal(15,2) DEFAULT NULL,
	  `investment_min_age_limit` int(11) DEFAULT NULL,
	  `investment_max_age_limit` int(11) DEFAULT NULL,
	  `disability_min_percentage` int(11) DEFAULT NULL,
	  `disability_max_percentage` int(11) DEFAULT NULL,
	  `effective_from_date` date DEFAULT NULL,
	  `effective_to_date` date DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_product_investments_master`
	--

	LOCK TABLES `payroll_product_investments_master` WRITE;
	/*!40000 ALTER TABLE `payroll_product_investments_master` DISABLE KEYS */;
	INSERT INTO `payroll_product_investments_master` VALUES (1,'80C','Life Insurance','Life insurance Premium slips (in the name of self/spouse/children)',150000.00,NULL,NULL,NULL,NULL,curdate(),null),(2,'80C','ELSS/Mutual Fund (Tax Saving)','ELSS/Mutual Fund Statement',150000.00,NULL,NULL,NULL,NULL,curdate(),null),(3,'80C','PPF','Copy of PPF Passbook (Self, Spouse, any child)',150000.00,NULL,NULL,NULL,NULL,curdate(),null),(4,'80C','Principal Repayment of Housing Loan','Home loan Statement mentioning principal amount repayment / Certificate from Bank',150000.00,NULL,NULL,NULL,NULL,curdate(),null),(5,'80C','Children Tuition Fees (up to 2 children)','Children Education fee receipts',150000.00,NULL,NULL,NULL,NULL,curdate(),null),(6,'80C','Fixed Deposits (Tax Savings)','Copy of Tax saving FD receipt',150000.00,NULL,NULL,NULL,NULL,curdate(),null),(7,'80C','Unit linked Insurance Scheme / Plan','Receipts /Certificate / Statement of Account / Copy of passbook of the current financial year (Self, Spouse, any child)',150000.00,NULL,NULL,NULL,NULL,curdate(),null),(8,'80C','NSC','NSC certificate, Interest statements on NSC purchased',150000.00,NULL,NULL,NULL,NULL,curdate(),null),(9,'80C','Sukanya Samriddhi Account','Sukanya Samriddhi Account passbook',150000.00,NULL,NULL,NULL,NULL,curdate(),null),(10,'80C','Deferred Annuity Plan','Proof for the payment made for a non-commutable deferred annuity on the life of the individual himself or spouse or any child',150000.00,NULL,NULL,NULL,NULL,curdate(),null),(11,'80C','Subscription to any deposit scheme/pension fund set up by the National Housing Bank (NHB)','Subscription proof of deposit scheme or any pension fund or home loan account scheme of National Housing Bank',150000.00,NULL,NULL,NULL,NULL,curdate(),null),(12,'80CCC','Pension Plan','Receipts /Certificate / Statement of Accounts / Copy of passbook of current financial year',150000.00,NULL,NULL,NULL,NULL,curdate(),null),(13,'80D',' ','Medical Health Insurance for self, spouse, and children',25000.00,0,60,NULL,NULL,curdate(),null),(14,'80D',' ','Medical Health Insurance for self, spouse, and children',50000.00,60,100,NULL,NULL,curdate(),null),(15,'80D',' ','Medical Health Insurance for parents',25000.00,0,60,NULL,NULL,curdate(),null),(16,'80D',' ','Medical Health Insurance for parents',50000.00,60,100,NULL,NULL,curdate(),null),(17,'80DD',' ','Expenditure on Dependents with Disability u/s 80DD',75000.00,NULL,NULL,40,79,curdate(),null),(18,'80DD',' ','Expenditure on Dependents with Disability u/s 80DD',125000.00,NULL,NULL,80,100,curdate(),null),
    (19,'80U',' ','Expenditure on own Disability u/s 80U',75000.00,NULL,NULL,40,79,curdate(),null),(20,'80U',' ','Expenditure on own Disability u/s 80U',125000.00,NULL,NULL,80,100,curdate(),null),(21,'80DDB',' ','Treatment of Specified Diseases u/s 80DDB',40000.00,NULL,NULL,40,79,curdate(),null),(22,'80DDB',' ','Treatment of Specified Diseases u/s 80DDB',100000.00,NULL,NULL,80,100,curdate(),null),(23,'80G',' ','Donations to specified trust u/s 80G',NULL,NULL,NULL,NULL,NULL,curdate(),null),(24,'80E',' ','Deduction of education loan interest u/s 80E',NULL,NULL,NULL,NULL,NULL,curdate(),null),(25,'24(b)',' ','Interest on Housing Loan',NULL,NULL,NULL,NULL,NULL,curdate(),null),(26,'10(5)',' ','Leave Travel Allowance',NULL,NULL,NULL,NULL,NULL,curdate(),null),(27,'17(2)',' ','Medical Reimbursement',15000.00,NULL,NULL,NULL,NULL,curdate(),null);
	/*!40000 ALTER TABLE `payroll_product_investments_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_salary_components_master`
	--

	DROP TABLE IF EXISTS `payroll_salary_components_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_salary_components_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `component` varchar(255) NOT NULL,
	  `component_short_name` varchar(64) DEFAULT NULL,
	  `lower_limit` decimal(5,2) DEFAULT NULL,
	  `upper_limit` decimal(5,2) DEFAULT NULL,
	  `component_description` varchar(1000) DEFAULT NULL,
	  `applicable_frequency` int(3) DEFAULT NULL,
	  `section_id` int(1) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  UNIQUE KEY `payroll_salary_components_master_sn` (`component_short_name`),
	  KEY `payroll_salary_components_master_sid_fk` (`section_id`),
	  CONSTRAINT `payroll_salary_components_master_sid_fk` FOREIGN KEY (`section_id`) REFERENCES `payroll_sections_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_salary_components_master`
	--

	LOCK TABLES `payroll_salary_components_master` WRITE;
	/*!40000 ALTER TABLE `payroll_salary_components_master` DISABLE KEYS */;
	INSERT INTO `payroll_salary_components_master` VALUES (1,'Basic Salary','basic_salary',NULL,NULL,'Basic salary of an employee',1,1),(2,'Dearness Allowance','dearness_allowance',NULL,NULL,'Dearness allowance given to an employee by the organization',1,1),(3,'House Rent Allowance','house_rent_allowance',NULL,NULL,'House rent allowance given to an employee',1,1),(4,'Conveyance Allowance','conveyance_allowance',NULL,NULL,'Conveyance allowance given to an employee',1,1),(5,'Travelling Allowance','travelling_allowance',NULL,NULL,'Travelling allowance given to an employee',1,1),(6,'Transport Allowance','transport_allowance',NULL,NULL,'Transport allowance given to an employee',1,1),(7,'Commission','commission',NULL,NULL,'Commission given to an employee',1,1),(8,'Bonus','bonus',NULL,NULL,'Bonus given to an employee',1,1),(9,'Gratuity','gratuity',NULL,NULL,'Gratuity given to an employee',NULL,1),(10,'Professional Tax','professional_tax',NULL,NULL,'Professional Tax paid by an employee',1,2),(11,'ESIC','esi',NULL,NULL,'ESIC',1,2),(12,'Employee Provident Fund','employee_provident_fund',NULL,NULL,'Employee provident fund of an employe',1,2),(13,'Leave Encashment','leave_encashment',NULL,NULL,'Value of encashed leaves of an employee',12,1),(14,'Fixed Allowance','fixed_allowance',NULL,NULL,'Fixed allowance given to an employee',1,1),(15,'CTC','cost_to_company',NULL,NULL,'Cost to Company amount',NULL,NULL),(16,'Children Education Allowance','children_education_allowance',NULL,NULL,'Allowance given for the education of a child of an employee',1,1),(17,'Hostel Expenditure Allowance','hostel_expenditure_allowance',NULL,NULL,'Allowance given for the hostel expenditure of an employee',1,1),(18,'Helper Allowance','helper_allowance',NULL,NULL,'Allowance given to an employee for helper expenditure',1,1),(19,'Uniform Allowance','uniform_allowance',NULL,NULL,'Allowance given for the uniform of an employee',1,1),(20,'Daily Allowance','daily_allowance',NULL,NULL,'Allowance given to an employee for daily expenses',1,1),(21,'City Compensatory Allowance','city_compensatory_allowance',NULL,NULL,'Allowance given to an employee who stays in a city',1,1),(22,'Overtime Allowance','overtime_allowance',NULL,NULL,'Allowance given to an employee for working overtime',1,1),(23,'Telephone Allowance','telephone_allowance',NULL,NULL,'Allowance given to an employee for telephone expenditure',1,1),(24,'Fixed Medical Allowance','fixed_medical_allowance',NULL,NULL,'Fixed allowance given to an employee for medical expenditure',1,1),(25,'Project Allowance','project_allowance',NULL,NULL,'Allowance given to an employee',1,1),(26,'Food Allowance','food_allowance',NULL,NULL,'Allowance given to an employee for food expenditure',1,1),(27,'Holiday Allowance','holiday_allowance',NULL,NULL,'Allowance given to an employee for holidays expenditure',1,1),(28,'Entertainment Allowance','entertainment_allowance',NULL,NULL,'Allowance given to an employee for entertainment expenditure',1,1),(29,'Custom Allowance','custom_allowance',NULL,NULL,NULL,1,1),(30,'Food Coupon','food_coupon',NULL,NULL,'Food coupons given to an employee',1,1),(31,'Gift Coupon','gift_coupon',NULL,NULL,'Gift coupons given to an employee',1,1),(32,'Research Allowance','research_allowance',NULL,NULL,'Allowance given to an employee for research',1,1),(33,'Books and Periodicals Allowance','books_and_periodicals_allowance',NULL,NULL,'Allowance given to an employee for books and periodicals',1,1),(34,'Fuel Allowance','fuel_allowance',NULL,NULL,'Allowance given to an employee for fuel',1,1),(35,'Driver Allowance','driver_allowance',NULL,NULL,'Allowance given to an employee for driver expenditure',1,1),(36,'Leave Travel Allowance','leave_travel_allowance',NULL,NULL,'Allowance given to an employee for leave travel expenditure',6,1),(37,'Vehicle Maintenance Allowance','vehicle_maintenance_allowance',NULL,NULL,'Allowance given to an employee for vehicle maintenance expenditure',1,1),(38,'Telephone and Internet Allowance','telephone_and_internet_allowance',NULL,NULL,'Allowance given to an employee for telephone and internet expenditure',1,1),(39,'Other Allowance','other_allowance',NULL,NULL,'Balance payable amount in the CTC excluding configured components',1,1);
	/*!40000 ALTER TABLE `payroll_salary_components_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_sections_master`
	--

	DROP TABLE IF EXISTS `payroll_sections_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_sections_master` (
	  `id` int(1) NOT NULL AUTO_INCREMENT,
	  `section` varchar(32) NOT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_sections_master`
	--

	LOCK TABLES `payroll_sections_master` WRITE;
	/*!40000 ALTER TABLE `payroll_sections_master` DISABLE KEYS */;
	INSERT INTO `payroll_sections_master` VALUES (1,'Earnings'),(2,'Deductions'),(3,'Loans');
	/*!40000 ALTER TABLE `payroll_sections_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `payroll_statusmaster`
	--

	DROP TABLE IF EXISTS `payroll_statusmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `payroll_statusmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `name` varchar(64) DEFAULT NULL,
	  `display_name` varchar(64) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `payroll_statusmaster`
	--

	LOCK TABLES `payroll_statusmaster` WRITE;
	/*!40000 ALTER TABLE `payroll_statusmaster` DISABLE KEYS */;
	/*!40000 ALTER TABLE `payroll_statusmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `perks`
	--

	DROP TABLE IF EXISTS `perks`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `perks` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `empid` varchar(20) NOT NULL,
	  `perkunits` int(11) DEFAULT NULL,
	  `category` varchar(32) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `perks`
	--

	LOCK TABLES `perks` WRITE;
	/*!40000 ALTER TABLE `perks` DISABLE KEYS */;
	/*!40000 ALTER TABLE `perks` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `recognition_message_master`
	--

	DROP TABLE IF EXISTS `recognition_message_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `recognition_message_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `recognition_type_id` int(11) NOT NULL,
	  `message` varchar(255) NOT NULL,
	  `status` varchar(32) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `recognition_message_master_rtidfk` (`recognition_type_id`),
	  CONSTRAINT `recognition_message_master_ibfk_1` FOREIGN KEY (`recognition_type_id`) REFERENCES `recognition_type_master` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `recognition_message_master`
	--

	LOCK TABLES `recognition_message_master` WRITE;
	/*!40000 ALTER TABLE `recognition_message_master` DISABLE KEYS */;
	INSERT INTO `recognition_message_master` VALUES (1,1,'Wishing you the best on your birthday and everything good in the year ahead.','Active'),(2,1,'Wishing you a happy birthday and a wonderful year.','Active'),(3,1,'Our whole team is wishing you the happiest of birthdays.','Active'),(4,1,'Happy Birthday and all the best to you in the year to come!','Active'),(5,1,'Wishing you a relaxing birthday and joy and happiness in the year to come.','Active'),(6,1,'The whole team wishes you the happiest of birthdays and a great year.','Active'),(7,1,'Wishing you a great birthday and a memorable year. From all of us.','Active'),(8,1,'Wishing you much happiness on your special day. Have an unforgettable birthday.','Active'),(9,1,'May your birthday be the start of a year filled with good luck, good health and much happiness.','Active'),(10,1,'Wishing you much happiness on your special day. Have an unforgettable birthday.','Active'),(11,2,'Today marks the day you joined the company– and that is worth celebrating!','Active'),(12,2,'Happy work anniversary. We are so glad you chose to join us and that you choose to stay with us.','Active'),(13,2,'Happy work anniversary to a colleague who makes work fun!','Active'),(14,2,'Here’s to another year of having you here!','Active'),(15,2,'If every colleague were as wonderful as you, then the work world would be a much better place. Happy work anniversary!','Active'),(16,2,'Happy work anniversary to the hardest working person I know!','Active'),(17,2,'We are so happy every year you are here! Happy work anniversary!','Active'),(18,2,'You may know more than you did when you started working here, but you are just as curious as you were on day one. Thankful to have an employee who is excited to always be learning. Happy work anniversary!','Active'),(19,2,'You could go anywhere, yet choose to stay here – a fact we are grateful for every day! Happy work anniversary.','Active'),(20,2,'Wishing the best work anniversary to the best coworker around!','Active'),(21,3,'I appreciate the effort you put into your work.','Active'),(22,3,'Great work on that project.','Active'),(23,3,'You and your work always stood by the expectations and have a meaningful contribution to the company\'s success. We value your presence and are proud of you.','Active'),(24,3,'It’s your dedication that contributed to our success. Thank you for inspiring us!','Active'),(25,3,'You have shown us some commendable skills for which I can only put out the best appreciation words for you. Keep progressing, and keep up your great work!','Active'),(26,3,'Your contributions to this project have been invaluable. Thank you for all your hard work.','Active'),(27,3,'I truly appreciate the time and effort you have put into this project.','Active'),(28,3,'I appreciate your guidance and encouragement on our latest project. I would not have been able to do it without you.','Active'),(29,3,'Please allow me to express my gratitude for the extra time and effort you put into this project.','Active'),(30,3,'It was not easy, but I knew I could count on you.','Active'),(31,3,'Your work on this project is impressive.','Active'),(32,4,'Thank you for being an amazing coworker.','Active'),(33,4,'Thank you for continually raising the level of performance and achievement.','Active'),(34,4,'Thank you for your support.','Active'),(35,4,'Thank you for being not only a great coworker but a true friend.','Active'),(36,4,'Thank you for working as a team to accomplish this task.','Active'),(37,4,'Thank you so much for all your dedication towards the work!','Active'),(38,4,'Thank you for coming together as a team and making things possible! This deal was very important, I couldn’t have cracked it without this teamwork!','Active'),(39,4,'Thank you for all your effort in putting on a highly successful event. You dedicated yourself entirely to producing it perfectly, and you succeeded. Well done, and thank you.','Active'),(40,4,'This is a great job. Thank you for all your effort and positive thinking. You have made this organization be recognized.','Active'),(41,4,'Thank you for always being at your best and contributing to the work! The way we completed this project makes me proud of having you as a team.','Active'),(42,5,'I truly appreciate the time and effort you have put into this project.','Active'),(43,5,'I appreciate your perspective on this project.','Active'),(44,5,'We owe a lot of the success of this project to you. Thank you.','Active'),(45,5,'I appreciate your guidance and encouragement on our latest project. I would not have been able to do it without you.','Active'),(46,5,'You have made this project possible with your hard work.','Active'),(47,5,'I am always impressed by the superb work you do, and this time is no exception.','Active'),(48,5,'Please allow me to express my gratitude for the extra time and effort you put into this project.','Active'),(49,5,'It was not easy, but I knew I could count on you.','Active'),(50,5,'Your work on this project is impressive.','Active'),(51,5,'You have elevated this project with your hard work and great ideas. Thank you for your contributions.','Active'),(52,6,'Be proud of the fact that you have the power to rise above any situation and deliver the best results no matter the circumstances. Excellent work!','Active'),(53,6,'To be honest, I don’t know how you manage to do such a good job every single time. Very well done!','Active'),(54,6,'You continue to exceed every expectation that we set. Great job.','Active'),(55,6,'The way you handled the project showed resilience, experience, knowledge, and critical thinking. We would love to get your perspective on our next project.','Active'),(56,6,'Your work will bring a lot of insights into solving our next problem.','Active'),(57,6,'Your level of quality work remains unprecedented in our organization.','Active'),(58,6,'We are fortunate to be able to witness and work amongst an industry expert such as you.','Active'),(59,6,'Thank you for your tremendous help in our new project. Without your diligence, hard work, late nights, and early mornings we wouldn’t have been able to meet the deadline. Excellent work!','Active'),(60,6,'We are fortunate to have an innovator like you amongst us.','Active'),(61,6,'Great work on the recent project. Your brillant problem-solving skills helped us to reach our targets much more quickly.','Active'),(72,7,'So glad to have you onboard. We would be adrift without you!','Active'),(73,7,'Your unique perspective adds so much to our team. We are so grateful to have you with us!','Active'),(74,7,'You continue to exceed expectations. Cannot wait to see what’s next!','Active'),(75,7,'No one is irreplaceable, but some folks you never want to have to replace.','Active'),(76,7,'The ultimate work perk is having employees as great as you!','Active'),(77,8,'I\'m so thrilled to hear that you reached your goal. You inspire by having such ambitious dreams, then putting in the hard work to achieve them.','Active'),(78,8,'Congratulations on your incredible success! I always knew you could do it, and I\'m incredibly proud of you.','Active'),(79,8,'I saw you work so hard every day to achieve this accomplishment, and I can\'t think of anyone who deserves it more. You set an amazing example for everyone at the company.','Active'),(80,8,'Cheers to you for a job well done! No one can compare to your creativity and passion, and it\'s no surprise that you\'ve become so successful.','Active'),(81,8,'This amazing accomplishment is just one step on your journey. Your ability to relentlessly search for solutions to problems and find innovative ways to improve the world is the key to this success and many to come.','Active'),(82,9,'The time and efforts you had put into this work that is beyond excellence. Take my cordial thanks! You are really an efficient, organized and result-oriented man/woman.','Active'),(83,9,'Everything you’ve done in your career due to your resilience, hard work and persistence. Thank you for your will to persist and persevere.','Active'),(84,9,'May you get everything that you could demand. I was always confident in your abilities to shoulder your responsibilities. Thank you so much for your effort.','Active'),(85,9,'You make the team grow every day with your meticulous management! Keep up the good work!','Active'),(86,9,'Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. Thanks!','Active');
	/*!40000 ALTER TABLE `recognition_message_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `recognition_type_master`
	--

	DROP TABLE IF EXISTS `recognition_type_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `recognition_type_master` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `recognition_type` varchar(32) NOT NULL,
	  `status` varchar(32) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `recognition_type_master`
	--

	LOCK TABLES `recognition_type_master` WRITE;
	/*!40000 ALTER TABLE `recognition_type_master` DISABLE KEYS */;
	INSERT INTO `recognition_type_master` VALUES (1,'Birthday','Active'),(2,'Anniversary','Active'),(3,'Congratulations','Active'),(4,'Thank you','Active'),(5,'Job Well Done','Active'),(6,'Outstanding','Active'),(7,'Performance based recognition','Active'),(8,'Appreciate work achievements','Active'),(9,'Appreciate non-work achievements','Active');
	/*!40000 ALTER TABLE `recognition_type_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `relationshipmaster`
	--

	DROP TABLE IF EXISTS `relationshipmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `relationshipmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `relationship` varchar(32) NOT NULL,
	  `status` varchar(32) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  UNIQUE KEY `relationship_unique` (`relationship`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `relationshipmaster`
	--

	LOCK TABLES `relationshipmaster` WRITE;
	/*!40000 ALTER TABLE `relationshipmaster` DISABLE KEYS */;
	INSERT INTO `relationshipmaster` VALUES (1,'Father','Active'),(2,'Mother','Active'),(3,'Brother','Active'),(4,'Sister','Active'),(5,'Spouse','Active'),(6,'Daughter','Active'),(7,'Son','Active');
	/*!40000 ALTER TABLE `relationshipmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `rolescreenaccess`
	--

	DROP TABLE IF EXISTS `rolescreenaccess`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `rolescreenaccess` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `roleid` int(11) DEFAULT NULL,
	  `screenfunctionalityid` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `roleid` (`roleid`),
	  KEY `screenfunctionalityid` (`screenfunctionalityid`),
	  CONSTRAINT `rolescreenaccess_ibfk_1` FOREIGN KEY (`roleid`) REFERENCES `rolesmaster` (`id`),
	  CONSTRAINT `rolescreenaccess_ibfk_2` FOREIGN KEY (`screenfunctionalityid`) REFERENCES `screenfunctionalitiesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `rolescreenaccess`
	--

	LOCK TABLES `rolescreenaccess` WRITE;
	/*!40000 ALTER TABLE `rolescreenaccess` DISABLE KEYS */;
	INSERT INTO `rolescreenaccess` VALUES (109,2,105),(110,2,106),(111,2,107),(112,2,108),(113,2,109),(114,2,110),(115,2,111),(116,2,112),(117,2,113),(118,2,114),(119,2,115),(120,2,116),(121,2,124),(122,2,125),(123,2,126),(124,2,127),(125,2,128),(126,2,129),(127,2,130),(128,2,131),(129,2,132),(130,2,133),(131,2,134),(132,2,135),(133,2,136),(134,2,137),(135,2,138),(136,2,139),(137,2,140),(138,3,9),(139,3,10),(140,3,11),(141,3,12),(142,3,13),(143,3,14),(144,3,15),(145,3,16),(146,3,17),(147,3,18),(148,3,19),(149,3,20),(150,3,21),(151,3,22),(152,3,23),(153,3,24),(154,3,25),(155,3,26),(156,3,27),(157,3,28),(158,3,29),(159,3,30),(160,3,31),(161,3,32),(162,3,33),(163,3,34),(164,3,35),(165,3,36),(166,3,37),(167,3,38),(168,3,39),(169,3,40),(170,3,41),(171,3,42),(172,3,43),(173,3,44),(174,3,45),(175,3,46),(176,3,47),(177,3,48),(178,3,49),(179,3,50),(180,3,51),(181,3,52),(182,3,53),(183,3,54),(184,3,55),(185,3,56),(186,3,57),(187,3,58),(188,3,59),(189,3,60),(190,3,61),(191,3,100),(192,3,101),(193,3,102),(194,3,103),(195,3,104),(196,3,141),(197,3,142),(198,3,144),(199,6,62),(200,6,63),(201,6,64),(202,6,65),(203,6,66),(204,6,67),(205,6,68),(206,6,69),(207,6,70),(208,6,71),(209,6,72),(210,6,73),(211,6,74),(212,6,75),(213,6,76),(214,6,77),(215,6,78),(216,6,79),(217,6,80),(218,6,81),(219,6,82),(220,6,83),(221,6,84),(222,6,85),(223,6,86),(224,6,87),(227,3,146),(228,3,147),(229,3,148),(230,9,149),(231,10,149),(232,10,150),(233,10,151),(234,9,151),(235,8,151),(236,10,152),(237,10,153),(238,9,153),(239,8,153),(240,10,154),(241,10,155),(242,10,156),(243,9,156),(244,8,156),(245,9,157),(246,10,158),(247,10,159),(248,9,159),(249,8,159),(250,10,160),(251,9,160),(252,8,160),(253,10,161),(254,10,162),(255,9,162),(256,8,162),(257,9,163),(258,9,164),(259,8,164),(264,9,172),(266,8,172),(267,10,174),(268,4,175),(269,4,176),(270,4,177);
	/*!40000 ALTER TABLE `rolescreenaccess` ENABLE KEYS */;
	UNLOCK TABLES;
	--
	-- Table structure for table `rolescreenaccess_backup`
	--

	DROP TABLE IF EXISTS `rolescreenaccess_backup`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `rolescreenaccess_backup` (
	  `id` int(11) NOT NULL DEFAULT '0',
	  `roleid` int(11) DEFAULT NULL,
	  `screenfunctionalityid` int(11) DEFAULT NULL
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `rolescreenaccess_backup`
	--

	LOCK TABLES `rolescreenaccess_backup` WRITE;
	/*!40000 ALTER TABLE `rolescreenaccess_backup` DISABLE KEYS */;
	INSERT INTO `rolescreenaccess_backup` VALUES (2,1,2),(3,1,3),(4,1,4),(5,1,5),(6,1,6),(7,1,7),(8,1,8),(9,1,88),(10,1,89),(11,1,90),(12,1,91),(13,1,92),(14,1,93),(15,1,94),(16,1,95),(17,1,96),(18,1,97),(19,1,98),(20,1,99),(21,1,117),(22,1,118),(23,1,119),(24,1,120),(25,1,121),(26,1,122),(27,1,123),(29,2,2),(30,2,3),(31,2,4),(32,2,5),(33,2,6),(34,2,7),(35,2,8),(36,2,88),(37,2,89),(38,2,90),(39,2,91),(40,2,92),(41,2,93),(42,2,94),(43,2,95),(44,2,96),(45,2,97),(46,2,98),(47,2,99),(48,2,117),(49,2,118),(50,2,119),(51,2,120),(52,2,121),(53,2,122),(54,2,123),(56,3,2),(57,3,3),(58,3,4),(59,3,5),(60,3,6),(61,3,7),(62,3,8),(63,3,88),(64,3,89),(65,3,90),(66,3,91),(67,3,92),(68,3,93),(69,3,94),(70,3,95),(71,3,96),(72,3,97),(73,3,98),(74,3,99),(75,3,117),(76,3,118),(77,3,119),(78,3,120),(79,3,121),(80,3,122),(81,3,123),(83,6,2),(84,6,3),(85,6,4),(86,6,5),(87,6,6),(88,6,7),(89,6,8),(90,6,88),(91,6,89),(92,6,90),(93,6,91),(94,6,92),(95,6,93),(96,6,94),(97,6,95),(98,6,96),(99,6,97),(100,6,98),(101,6,99),(102,6,117),(103,6,118),(104,6,119),(105,6,120),(106,6,121),(107,6,122),(108,6,123),(109,2,105),(110,2,106),(111,2,107),(112,2,108),(113,2,109),(114,2,110),(115,2,111),(116,2,112),(117,2,113),(118,2,114),(119,2,115),(120,2,116),(121,2,124),(122,2,125),(123,2,126),(124,2,127),(125,2,128),(126,2,129),(127,2,130),(128,2,131),(129,2,132),(130,2,133),(131,2,134),(132,2,135),(133,2,136),(134,2,137),(135,2,138),(136,2,139),(137,2,140),(138,3,9),(139,3,10),(140,3,11),(141,3,12),(142,3,13),(143,3,14),(144,3,15),(145,3,16),(146,3,17),(147,3,18),(148,3,19),(149,3,20),(150,3,21),(151,3,22),(152,3,23),(153,3,24),(154,3,25),(155,3,26),(156,3,27),(157,3,28),(158,3,29),(159,3,30),(160,3,31),(161,3,32),(162,3,33),(163,3,34),(164,3,35),(165,3,36),(166,3,37),(167,3,38),(168,3,39),(169,3,40),(170,3,41),(171,3,42),(172,3,43),(173,3,44),(174,3,45),(175,3,46),(176,3,47),(177,3,48),(178,3,49),(179,3,50),(180,3,51),(181,3,52),(182,3,53),(183,3,54),(184,3,55),(185,3,56),(186,3,57),(187,3,58),(188,3,59),(189,3,60),(190,3,61),(191,3,100),(192,3,101),(193,3,102),(194,3,103),(195,3,104),(196,3,141),(197,3,142),(198,3,144),(199,6,62),(200,6,63),(201,6,64),(202,6,65),(203,6,66),(204,6,67),(205,6,68),(206,6,69),(207,6,70),(208,6,71),(209,6,72),(210,6,73),(211,6,74),(212,6,75),(213,6,76),(214,6,77),(215,6,78),(216,6,79),(217,6,80),(218,6,81),(219,6,82),(220,6,83),(221,6,84),(222,6,85),(223,6,86),(224,6,87),(225,10,118),(226,6,145),(227,3,146),(228,3,147),(229,3,148),(230,9,149),(231,10,149),(232,10,150),(233,10,151),(234,9,151),(235,8,151),(236,10,152),(237,10,153),(238,9,153),(239,8,153),(240,10,154),(241,10,155),(242,10,156),(243,9,156),(244,8,156),(245,9,157),(246,10,158),(247,10,159),(248,9,159),(249,8,159),(250,10,160),(251,9,160),(252,8,160),(253,10,161),(254,10,162),(255,9,162),(256,8,162),(257,9,163),(258,9,164),(259,8,164),(260,1,165),(261,1,166),(262,1,167),(263,9,170),(264,9,172),(265,8,170),(266,8,172),(267,1,168),(268,1,169),(269,1,170),(270,1,171),(271,1,173);
	/*!40000 ALTER TABLE `rolescreenaccess_backup` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `rolescreenaccess_common`
	--

	DROP TABLE IF EXISTS `rolescreenaccess_common`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `rolescreenaccess_common` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `screenfunctionalityid` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `screenfunctionalityid` (`screenfunctionalityid`),
	  CONSTRAINT `rolescreenaccess_common_ibfk_1` FOREIGN KEY (`screenfunctionalityid`) REFERENCES `screenfunctionalitiesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `rolescreenaccess_common`
	--

	LOCK TABLES `rolescreenaccess_common` WRITE;
	/*!40000 ALTER TABLE `rolescreenaccess_common` DISABLE KEYS */;
	INSERT INTO `rolescreenaccess_common` VALUES (35,1),(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,88),(9,89),(10,90),(11,91),(12,92),(13,93),(14,94),(15,95),(16,96),(17,97),(18,98),(19,99),(20,117),(21,118),(22,119),(23,120),(24,121),(25,122),(26,123),(27,165),(28,166),(29,167),(30,168),(31,169),(32,170),(33,171),(34,173);
	/*!40000 ALTER TABLE `rolescreenaccess_common` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `rolescreenaccess_new`
	--

	DROP TABLE IF EXISTS `rolescreenaccess_new`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `rolescreenaccess_new` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `roleid` int(11) DEFAULT NULL,
	  `screenfunctionalityid` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `rolescreenaccess_new`
	--

	LOCK TABLES `rolescreenaccess_new` WRITE;
	/*!40000 ALTER TABLE `rolescreenaccess_new` DISABLE KEYS */;
	/*!40000 ALTER TABLE `rolescreenaccess_new` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `rolesmaster`
	--

	DROP TABLE IF EXISTS `rolesmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `rolesmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `name` varchar(128) DEFAULT NULL,
	  `isEditable` int(11) DEFAULT '1',
	  PRIMARY KEY (`id`),
	  UNIQUE KEY `rolesmaster_unique` (`name`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `rolesmaster`
	--

	LOCK TABLES `rolesmaster` WRITE;
	/*!40000 ALTER TABLE `rolesmaster` DISABLE KEYS */;
	INSERT INTO `rolesmaster` VALUES (1,'Employee',0),(2,'Manager',0),(3,'Admin',0),(4,'SuperAdmin',0),(5,'HR Executive',0),(6,'HR Manager',0),(7,'HR Admin',0),(8,'Finance Executive',0),(9,'Finance Manager',0),(10,'Finance Admin',0);
	/*!40000 ALTER TABLE `rolesmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `rulecategorymaster`
	--

	DROP TABLE IF EXISTS `rulecategorymaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `rulecategorymaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `subcategory` varchar(64) DEFAULT NULL,
	  `module` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `rulecategorymaster`
	--

	LOCK TABLES `rulecategorymaster` WRITE;
	/*!40000 ALTER TABLE `rulecategorymaster` DISABLE KEYS */;
	/*!40000 ALTER TABLE `rulecategorymaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `rulemaster`
	--

	DROP TABLE IF EXISTS `rulemaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `rulemaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `rulename` varchar(255) DEFAULT NULL,
	  `description` varchar(2048) DEFAULT NULL,
	  `categoryid` int(11) NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `categoryid` (`categoryid`),
	  CONSTRAINT `rulemaster_ibfk_1` FOREIGN KEY (`categoryid`) REFERENCES `rulecategorymaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `rulemaster`
	--

	LOCK TABLES `rulemaster` WRITE;
	/*!40000 ALTER TABLE `rulemaster` DISABLE KEYS */;
	/*!40000 ALTER TABLE `rulemaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `rulevalues`
	--

	DROP TABLE IF EXISTS `rulevalues`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `rulevalues` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `ruleid` int(11) NOT NULL,
	  `value` varchar(64) DEFAULT NULL,
	  `effectivefromdate` datetime DEFAULT NULL,
	  `effectivetodate` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `ruleid` (`ruleid`),
	  CONSTRAINT `rulevalues_ibfk_1` FOREIGN KEY (`ruleid`) REFERENCES `rulemaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `rulevalues`
	--

	LOCK TABLES `rulevalues` WRITE;
	/*!40000 ALTER TABLE `rulevalues` DISABLE KEYS */;
	/*!40000 ALTER TABLE `rulevalues` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `screenfunctionalitiesmaster`
	--

	DROP TABLE IF EXISTS `screenfunctionalitiesmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `screenfunctionalitiesmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `screenid` int(11) DEFAULT NULL,
	  `functionalityid` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  UNIQUE KEY `sfm_unique` (`screenid`,`functionalityid`),
	  KEY `functionalityid` (`functionalityid`),
	  CONSTRAINT `screenfunctionalitiesmaster_ibfk_1` FOREIGN KEY (`screenid`) REFERENCES `screensmaster` (`id`),
	  CONSTRAINT `screenfunctionalitiesmaster_ibfk_2` FOREIGN KEY (`functionalityid`) REFERENCES `functionalitiesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `screenfunctionalitiesmaster`
	--

	LOCK TABLES `screenfunctionalitiesmaster` WRITE;
	/*!40000 ALTER TABLE `screenfunctionalitiesmaster` DISABLE KEYS */;
	INSERT INTO `screenfunctionalitiesmaster` VALUES (1,1,3),(2,2,2),(3,2,3),(4,3,3),(5,4,1),(6,4,2),(7,4,3),(8,4,4),(145,4,6),(9,5,1),(10,5,2),(11,5,3),(12,6,1),(13,6,2),(14,6,3),(15,7,1),(16,7,2),(17,7,3),(18,8,1),(19,8,2),(20,8,3),(21,9,1),(22,9,2),(23,9,3),(24,9,4),(25,10,1),(26,10,2),(27,10,3),(28,11,1),(29,11,2),(30,11,3),(31,11,5),(32,12,1),(33,12,2),(34,12,3),(35,13,1),(36,13,2),(37,13,3),(38,14,1),(39,14,2),(40,14,3),(41,15,1),(42,15,2),(43,15,3),(44,15,4),(45,16,2),(46,16,3),(47,17,2),(48,17,3),(49,18,1),(50,18,2),(51,18,3),(52,19,2),(53,19,3),(54,20,2),(55,20,3),(56,21,1),(57,21,2),(58,21,3),(59,22,1),(60,22,2),(61,22,3),(62,23,1),(63,23,2),(64,23,3),(65,24,1),(66,24,2),(67,24,3),(68,25,1),(69,25,2),(70,25,3),(71,26,3),(72,26,4),(73,26,6),(74,27,1),(75,27,2),(76,27,3),(77,28,2),(78,28,3),(79,29,1),(80,29,3),(81,30,2),(82,30,3),(83,31,3),(85,31,4),(84,31,6),(86,32,2),(87,32,3),(88,33,3),(89,34,1),(90,34,2),(91,34,3),(92,35,2),(93,35,3),(94,35,4),(95,35,5),(96,36,3),(97,37,1),(98,37,2),(99,37,3),(100,38,1),(101,38,2),(102,38,3),(103,39,2),(104,39,3),(105,40,3),(106,40,4),(107,40,6),(108,41,3),(109,41,4),(110,41,6),(111,42,3),(112,42,4),(113,42,6),(114,43,3),(115,44,3),(116,45,3),(117,46,1),(118,46,3),(119,47,1),(120,47,2),(121,47,3),(122,47,5),(123,48,3),(124,49,1),(125,49,3),(126,49,6),(127,50,1),(128,50,3),(129,50,6),(130,51,3),(131,51,4),(132,51,6),(133,52,1),(134,52,3),(135,53,3),(136,54,3),(137,55,1),(138,55,3),(139,56,3),(140,57,3),(141,58,1),(142,58,3),(143,59,2),(144,59,3),(146,60,1),(147,60,2),(148,60,3),(149,61,3),(174,62,1),(150,62,2),(151,62,3),(152,63,2),(153,63,3),(154,64,1),(155,64,2),(156,64,3),(157,65,1),(158,66,2),(159,66,3),(160,67,3),(161,68,2),(162,68,3),(163,69,1),(164,70,6),(165,71,3),(166,72,3),(167,73,3),(168,74,1),(169,74,2),(170,74,3),(171,74,5),(172,74,6),(173,75,3),(175,76,3),(176,77,3),(177,78,3);
	/*!40000 ALTER TABLE `screenfunctionalitiesmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `screenfunctionalitiesmaster_new`
	--

	DROP TABLE IF EXISTS `screenfunctionalitiesmaster_new`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `screenfunctionalitiesmaster_new` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `screenid` int(11) DEFAULT NULL,
	  `functionalityid` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  UNIQUE KEY `sfm_unique` (`screenid`,`functionalityid`),
	  KEY `functionalityid` (`functionalityid`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `screenfunctionalitiesmaster_new`
	--

	LOCK TABLES `screenfunctionalitiesmaster_new` WRITE;
	/*!40000 ALTER TABLE `screenfunctionalitiesmaster_new` DISABLE KEYS */;
	/*!40000 ALTER TABLE `screenfunctionalitiesmaster_new` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `screensmaster`
	--

	DROP TABLE IF EXISTS `screensmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `screensmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `screenid` varchar(32) DEFAULT NULL,
	  `name` varchar(128) DEFAULT NULL,
	  `routename` varchar(64) DEFAULT NULL,
	  `moduleid` int(11) DEFAULT NULL,
	  `parentrole` int(11) DEFAULT NULL,
	  `menu_order` int(2) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `moduleid` (`moduleid`),
	  KEY `screensmaster_fk` (`parentrole`),
	  CONSTRAINT `screensmaster_fk` FOREIGN KEY (`parentrole`) REFERENCES `rolesmaster` (`id`),
	  CONSTRAINT `screensmaster_ibfk_1` FOREIGN KEY (`moduleid`) REFERENCES `modulesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `screensmaster`
	--

	LOCK TABLES `screensmaster` WRITE;
	/*!40000 ALTER TABLE `screensmaster` DISABLE KEYS */;
INSERT INTO `screensmaster` VALUES (1,NULL,'Employee Dashboard','/ems/employeeDashboard',1,1,1),(2,NULL,'My Profile','/ems/employee-profile',1,1,2),(3,NULL,'Onboarding Checklist','/ems/employee-checklist',1,1,3),(4,NULL,'Separation','/ems/resignation',11,1,1),(5,NULL,'Company Information','/Admin/CompanyInformation',1,3,1),(6,NULL,'Department','/Admin/Department',1,3,2),(7,NULL,'Designation','/Admin/Designation',1,3,3),(8,NULL,'Work Location','/Admin/Worklocation',1,3,4),(9,NULL,'Company Logo','/Admin/CompanyLogo',1,3,5),(10,NULL,'Shift','/Admin/Shift',1,3,6),(11,NULL,'Holidays','/Admin/Holidays',1,3,7),(12,NULL,'Checklist','/Admin/settings-checklist',1,3,8),(13,NULL,'Induction','/Admin/induction',1,3,9),(14,NULL,'Document','/Admin/configure-documents',8,3,9),(15,NULL,'Announcements','/Admin/announcement',1,3,10),(16,NULL,'Messages Master','/Admin/EMS-MessageMaster',1,3,11),(17,NULL,'Users Login','/Admin/users-login',1,3,12),(18,NULL,'Roles & Permissions','/Admin/RolesPermissions',1,3,13),(19,NULL,'Onboarding settings','/Admin/settings-onBoarding',1,3,14),(20,NULL,'Offboarding settings','/Admin/settings-offBoarding',11,3,1),(21,NULL,'Termination Category','/Admin/Termination-Category',11,3,2),(22,NULL,'Reason for Separation','/Admin/Reason',11,3,3),(23,NULL,'Employee Directory','/ems/employeeDirectory',1,2,2),(24,NULL,'Employee Reports','/ems/emloyee-report',1,2,6),(25,NULL,'New Hires','/ems/new-hired-list',1,2,1),(26,NULL,'Document Approvals','/ems/hr-document-approval',1,2,3),(27,NULL,'Induction Program','/ems/induction-program',1,2,4),(28,NULL,'Onboarding Pending Checklist','/ems/hr-onboarding',1,2,5),(29,NULL,'Termination','/ems/terminate',11,2,3),(30,NULL,'Separation Pending Checklist','/ems/hr-resignation',11,2,2),(31,NULL,'Separation Pending Approvals','/ems/hr-pending-approval',11,2,1),(32,NULL,'Termination Pending Checklist','/ems/termination-pendinging-checklist',11,2,4),(33,NULL,'Employee Dashboard','/LeaveManagement/UserDashboard',2,1,1),(34,NULL,'Leave Request','/LeaveManagement/LeaveRequest',2,1,2),(35,NULL,'Leave History','/LeaveManagement/UserLeaveHistory',2,1,3),(36,NULL,'Leave Balance','/LeaveManagement/UserLeaveBalance',2,1,4),(37,NULL,'Comp Off','/LeaveManagement/UserCompOff',2,1,5),(38,NULL,'Leave Policies','/Admin/Leavepolicies',2,3,1),(39,NULL,'Messages Master','/Admin/LM-MessageMaster',2,3,2),(40,NULL,'Dashboard','/LeaveManagement/ManagerDashboard',2,2,1),(41,NULL,'Leave History','/LeaveManagement/LeaveHistory',2,2,2),(42,NULL,'Comp off History','/LeaveManagement/CompOffHistory',2,2,3),(43,NULL,'Detailed Report','/LeaveManagement/DetailedReport',2,2,4),(44,NULL,'Summary Report','/LeaveManagement/SummaryReport',2,2,5),(45,NULL,'Payroll Report','/LeaveManagement/payrollreport',2,2,6),(46,NULL,'Employee Dashboard','/Attendance/EmployeeDashboard',4,1,1),(47,NULL,'Attendance Request','/Attendance/Request',4,1,2),(48,NULL,'Monthly Detail Report','/Reports/MonthlyDetailReport',4,1,3),(49,NULL,'Dashboard','/Attendance/ManagerDashboard',4,2,1),(50,NULL,'Request on Behalf of Employee','/Attendance/RequestofEmployee',4,2,2),(51,NULL,'Pending Approvals','/Attendance/ApprovalList',4,2,3),(52,NULL,'Excel Upload','/Attendance/uploadExcel',4,2,4),(53,NULL,'Summary Report','/Reports/SummaryReport',4,2,7),(54,NULL,'Detailed Report','/Reports/DetailReport',4,2,8),(55,NULL,'Configure Shift','/Attendance/ShiftConfigure',4,2,5),(56,NULL,'Late Attendance Report','/Reports/LateAttendanceReport',4,2,9),(57,NULL,'Approval History','/Attendance/ApprovedHistory',4,2,6),(58,NULL,'Mapping IDs','/Admin/MappingIds',4,3,1),(59,NULL,'Messages Master','/Admin/MessageMaster',4,3,2),(60,NULL,'Induction Conducted By','/Admin/Induction-ConductedBy',1,3,15),(61,NULL,'Dashboard','/Payroll/FinanceDashboard',5,3,1),(62,NULL,'ESI','/Payroll/ESI',5,3,2),(63,NULL,'EPF','/Payroll/EPF',5,3,3),(64,NULL,'Pay Group','/Payroll/PayGroup',5,3,4),(65,NULL,'Assign Pay Group','/Payroll/AssignPayGroup',5,3,5),(66,NULL,'Pay Schedule','/Payroll/PaySchedule',5,3,6),(67,NULL,'Professional Tax','/Payroll/ProfessionalTax',5,3,7),(68,NULL,'Messages Master','/Admin/Payroll_Messages',5,3,8),(69,NULL,'Monthly Payroll','/Payroll/MonthlyPayroll',5,2,1),(70,NULL,'Approve Investments','/Payroll/InvestmentProof',5,2,2),(71,NULL,'Employee Dashboard','/Payroll/EmployeeDashboard',5,1,1),(72,NULL,'CTC History','/Payroll/SalaryMaster',5,1,2),(73,NULL,'Pay Slips','/Payroll/PaySlips',5,1,3),(74,NULL,'IT Declaration','/Payroll/EmployeeITDeclaration',5,1,4),(75,NULL,'Form 16','/Payroll/EmployeeForm16',5,1,5),(76,NULL,'Subscription','/Admin/Subscription',10,4,2),(77,NULL,'Employee Dashboard','/Admin/client-superadmin-dashboard',10,4,1),(78,NULL,'Invoice History','/Admin/InvoiceHistory',10,4,3);
	/*!40000 ALTER TABLE `screensmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `screensmaster_new`
	--

	DROP TABLE IF EXISTS `screensmaster_new`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `screensmaster_new` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `screenid` varchar(32) DEFAULT NULL,
	  `name` varchar(128) DEFAULT NULL,
	  `routename` varchar(64) DEFAULT NULL,
	  `moduleid` int(11) DEFAULT NULL,
	  `parentrole` int(11) DEFAULT NULL,
	  `menu_order` int(2) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `moduleid` (`moduleid`),
	  KEY `screensmaster_fk` (`parentrole`),
	  CONSTRAINT `screensmaster_new_ibfk_1` FOREIGN KEY (`parentrole`) REFERENCES `rolesmaster` (`id`),
	  CONSTRAINT `screensmaster_new_ibfk_2` FOREIGN KEY (`moduleid`) REFERENCES `modulesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `screensmaster_new`
	--

	LOCK TABLES `screensmaster_new` WRITE;
	/*!40000 ALTER TABLE `screensmaster_new` DISABLE KEYS */;
	/*!40000 ALTER TABLE `screensmaster_new` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `shiftsmaster`
	--

	DROP TABLE IF EXISTS `shiftsmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `shiftsmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `shiftname` varchar(255) NOT NULL,
	  `fromtime` time NOT NULL,
	  `totime` time NOT NULL,
	  `status` varchar(32) NOT NULL,
	  `totalhours` time NOT NULL,
	  `graceperiod_intime` time DEFAULT NULL,
	  `graceperiod_outtime` time DEFAULT NULL,
	  `max_lates_count_per_month` int(11) DEFAULT NULL,
	  `leave_deduction_amount_post_lates_limit` float DEFAULT NULL,
	  `leavetype_for_deduction_post_lates_limit` varchar(64) DEFAULT NULL,
	  `shift_description` varchar(128) DEFAULT NULL,
	  `min_duration_for_overtime` time DEFAULT NULL,
	  `created_on` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `shiftsmaster_idx` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Table structure for table `statesmaster`
	--

	DROP TABLE IF EXISTS `statesmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `statesmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `countryid` int(11) DEFAULT NULL,
	  `state` varchar(128) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `countryid` (`countryid`),
	  KEY `statesmaster_idx` (`id`,`countryid`),
	  CONSTRAINT `statesmaster_ibfk_1` FOREIGN KEY (`countryid`) REFERENCES `countrymaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `statesmaster`
	--

	LOCK TABLES `statesmaster` WRITE;
	/*!40000 ALTER TABLE `statesmaster` DISABLE KEYS */;
	INSERT INTO `statesmaster` VALUES (1,1,'Andhra Pradesh'),(2,1,'Arunachal Pradesh'),(3,1,'Assam'),(4,1,'Bihar'),(5,1,'Chhattisgarh'),(6,1,'Goa'),(7,1,'Gujarat'),(8,1,'Haryana'),(9,1,'Himachal Pradesh'),(10,1,'Jharkhand'),(12,1,'Karnataka'),(13,1,'Kerala'),(14,1,'Madhya Pradesh'),(15,1,'Maharashtra'),(16,1,'Manipur'),(17,1,'Meghalaya'),(18,1,'Mizoram'),(19,1,'Nagaland'),(20,1,'Odisha'),(21,1,'Punjab'),(22,1,'Rajasthan'),(23,1,'Sikkim'),(24,1,'Tamil Nadu'),(25,1,'Telangana'),(26,1,'Tripura'),(27,1,'Uttar Pradesh'),(28,1,'Uttarakhand'),(29,1,'West Bengal'),(30,1,'Delhi'),(31,1,'Jammu and Kashmir'),(32,1,'Chandigarh'),(33,1,'Puducherry'),(34,1,'Andaman and Nicobar Islands'),(35,1,'Dadra and Nagar Haveli'),(36,1,'Lakshadweep'),(37,1,'Ladakh');
	/*!40000 ALTER TABLE `statesmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `statusmaster`
	--

	DROP TABLE IF EXISTS `statusmaster`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `statusmaster` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `name` varchar(64) DEFAULT NULL,
	  `moduleid` int(11) DEFAULT NULL,
	  `created_on` datetime NOT NULL,
	  `created_by` int(11) NOT NULL,
	  `updated_on` datetime DEFAULT NULL,
	  `updated_by` int(11) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  KEY `statusmaster_moduleid` (`moduleid`),
	  CONSTRAINT `statusmaster_moduleid` FOREIGN KEY (`moduleid`) REFERENCES `modulesmaster` (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `statusmaster`
	--

	LOCK TABLES `statusmaster` WRITE;
	/*!40000 ALTER TABLE `statusmaster` DISABLE KEYS */;
	INSERT INTO `statusmaster` VALUES (1,'Active',NULL,current_timestamp(),1,NULL,NULL),(2,'Inactive',NULL,current_timestamp(),1,NULL,NULL),(3,'Hired',1,current_timestamp(),1,NULL,NULL),(4,'Joined',1,current_timestamp(),1,NULL,NULL),(5,'Reject',1,current_timestamp(),1,NULL,NULL),(6,'Not Reported',1,current_timestamp(),1,NULL,NULL),(7,'Submitted',5,current_timestamp(),1,NULL,NULL),(8,'Verified',5,current_timestamp(),1,NULL,NULL),(9,'Approved',5,current_timestamp(),1,NULL,NULL),(10,'Rejected',5,current_timestamp(),1,NULL,NULL);
	/*!40000 ALTER TABLE `statusmaster` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Table structure for table `week_master`
	--

	DROP TABLE IF EXISTS `week_master`;
	/*!40101 SET @saved_cs_client     = @@character_set_client */;
	/*!50503 SET character_set_client = utf8mb4 */;
	CREATE TABLE `week_master` (
	  `id` int(1) NOT NULL AUTO_INCREMENT,
	  `week_name` varchar(16) NOT NULL,
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	/*!40101 SET character_set_client = @saved_cs_client */;

	--
	-- Dumping data for table `week_master`
	--

	LOCK TABLES `week_master` WRITE;
	/*!40000 ALTER TABLE `week_master` DISABLE KEYS */;
	INSERT INTO `week_master` VALUES (1,'Sunday'),(2,'Monday'),(3,'Tuesday'),(4,'Wednesday'),(5,'Thursday'),(6,'Friday'),(7,'Saturday');
	/*!40000 ALTER TABLE `week_master` ENABLE KEYS */;
	UNLOCK TABLES;

	--
	-- Dumping events for database 'spryple'
	--
	/*!50106 SET @save_time_zone= @@TIME_ZONE */ ;
	/*!50106 DROP EVENT IF EXISTS `attendance_summarycronjob` */;
	DELIMITER ;;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;;
	/*!50003 SET character_set_client  = utf8mb4 */ ;;
	/*!50003 SET character_set_results = utf8mb4 */ ;;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;;
	/*!50003 SET @saved_time_zone      = @@time_zone */ ;;
	/*!50003 SET time_zone             = 'SYSTEM' */ ;;
	/*!50106 CREATE*/ /*!50117 */ /*!50106 EVENT `attendance_summarycronjob` ON SCHEDULE EVERY 4 HOUR STARTS current_timestamp() ON COMPLETION NOT PRESERVE ENABLE DO begin
	call set_employee_attendance_summary_cron;
	insert into cron_job_logs(job_name,createdat) values
	('attendance_summarycronjob',current_timestamp());
	end */ ;;
	/*!50003 SET time_zone             = @saved_time_zone */ ;;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;;
	/*!50003 SET character_set_results = @saved_cs_results */ ;;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;;
	/*!50106 DROP EVENT IF EXISTS `credit_employee_leave_cron_event` */;;
	DELIMITER ;;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;;
	/*!50003 SET character_set_client  = utf8mb4 */ ;;
	/*!50003 SET character_set_results = utf8mb4 */ ;;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;;
	/*!50003 SET @saved_time_zone      = @@time_zone */ ;;
	/*!50003 SET time_zone             = 'SYSTEM' */ ;;
	/*!50106 CREATE*/ /*!50117 */ /*!50106 EVENT `credit_employee_leave_cron_event` ON SCHEDULE EVERY 1 MONTH STARTS current_timestamp() ON COMPLETION NOT PRESERVE ENABLE DO begin

	call credit_employee_leave_cron;
	insert into cron_job_logs(job_name,createdat) values 
	('credit_employee_leave_cron_event',current_timestamp());
	end */ ;;
	/*!50003 SET time_zone             = @saved_time_zone */ ;;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;;
	/*!50003 SET character_set_results = @saved_cs_results */ ;;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;;
	/*!50106 DROP EVENT IF EXISTS `make_mysql_do_not_stop` */;;
	DELIMITER ;;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;;
	/*!50003 SET character_set_client  = utf8mb4 */ ;;
	/*!50003 SET character_set_results = utf8mb4 */ ;;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;;
	/*!50003 SET @saved_time_zone      = @@time_zone */ ;;
	/*!50003 SET time_zone             = 'SYSTEM' */ ;;
	/*!50106 CREATE*/ /*!50117 */ /*!50106 EVENT `make_mysql_do_not_stop` ON SCHEDULE EVERY 1 DAY STARTS current_timestamp() ON COMPLETION NOT PRESERVE ENABLE DO select sleep(240) */ ;;
	/*!50003 SET time_zone             = @saved_time_zone */ ;;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;;
	/*!50003 SET character_set_results = @saved_cs_results */ ;;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;;
	/*!50106 DROP EVENT IF EXISTS `separation_employee_cron_event` */;;
	DELIMITER ;;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;;
	/*!50003 SET character_set_client  = utf8mb4 */ ;;
	/*!50003 SET character_set_results = utf8mb4 */ ;;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;;
	/*!50003 SET @saved_time_zone      = @@time_zone */ ;;
	/*!50003 SET time_zone             = 'SYSTEM' */ ;;
	/*!50106 CREATE*/ /*!50117 */ /*!50106 EVENT `separation_employee_cron_event` ON SCHEDULE EVERY 1 DAY STARTS current_timestamp() ON COMPLETION NOT PRESERVE ENABLE DO begin
	call separation_employee_cron();
	insert into cron_job_logs(job_name,createdat) values 
	('separation_employee_cron_event',current_timestamp());
	end */ ;;
	/*!50003 SET time_zone             = @saved_time_zone */ ;;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;;
	/*!50003 SET character_set_results = @saved_cs_results */ ;;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;;
	/*!50106 DROP EVENT IF EXISTS `update_employee_compoff_validity_status_cron_event` */;;
	DELIMITER ;;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;;
	/*!50003 SET character_set_client  = utf8mb4 */ ;;
	/*!50003 SET character_set_results = utf8mb4 */ ;;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;;
	/*!50003 SET @saved_time_zone      = @@time_zone */ ;;
	/*!50003 SET time_zone             = 'SYSTEM' */ ;;
	/*!50106 CREATE*/ /*!50117 */ /*!50106 EVENT `update_employee_compoff_validity_status_cron_event` ON SCHEDULE EVERY 1 DAY STARTS current_timestamp() ON COMPLETION NOT PRESERVE ENABLE DO begin
	set @pdate = (select curdate());
	call update_employee_compoff_validity_status_cron(@pdate);
	insert into cron_job_logs(job_name,createdat) values 
	('update_employee_compoff_validity_status_cron_event',current_timestamp());
	end */ ;;
	/*!50003 SET time_zone             = @saved_time_zone */ ;;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;;
	/*!50003 SET character_set_results = @saved_cs_results */ ;;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;;
	/*!50106 DROP EVENT IF EXISTS `update_employee_compoff_validity_status_cron_event_temp` */;;
	DELIMITER ;;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;;
	/*!50003 SET character_set_client  = utf8mb4 */ ;;
	/*!50003 SET character_set_results = utf8mb4 */ ;;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;;
	/*!50003 SET @saved_time_zone      = @@time_zone */ ;;
	/*!50003 SET time_zone             = 'SYSTEM' */ ;;
	/*!50106 CREATE*/ /*!50117 */ /*!50106 EVENT `update_employee_compoff_validity_status_cron_event_temp` ON SCHEDULE EVERY 1 HOUR STARTS current_timestamp() ON COMPLETION NOT PRESERVE ENABLE DO begin
	set @pdate = (select curdate());
	call update_employee_compoff_validity_status_cron(@pdate);
	insert into cron_job_logs(job_name,createdat) values 
	('update_employee_compoff_validity_status_cron_event_temp',current_timestamp());
	end */ ;;
	/*!50003 SET time_zone             = @saved_time_zone */ ;;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;;
	/*!50003 SET character_set_results = @saved_cs_results */ ;;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;;
	/*!50106 DROP EVENT IF EXISTS `update_employee_leave_summary_cron_event` */;;
	DELIMITER ;;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;;
	/*!50003 SET character_set_client  = utf8mb4 */ ;;
	/*!50003 SET character_set_results = utf8mb4 */ ;;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;;
	/*!50003 SET @saved_time_zone      = @@time_zone */ ;;
	/*!50003 SET time_zone             = 'SYSTEM' */ ;;
	/*!50106 CREATE*/ /*!50117 */ /*!50106 EVENT `update_employee_leave_summary_cron_event` ON SCHEDULE EVERY 1 DAY STARTS current_timestamp() ON COMPLETION NOT PRESERVE ENABLE DO begin
	call update_employee_leave_summary_cron(null);
	insert into cron_job_logs(job_name,createdat) values 
	('update_employee_leave_summary_cron_event',current_timestamp());
	end */ ;;
	/*!50003 SET time_zone             = @saved_time_zone */ ;;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;;
	/*!50003 SET character_set_results = @saved_cs_results */ ;;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;;
	/*!50106 DROP EVENT IF EXISTS `update_employee_leave_summary_cron_event_temp` */;;
	DELIMITER ;;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;;
	/*!50003 SET character_set_client  = utf8mb4 */ ;;
	/*!50003 SET character_set_results = utf8mb4 */ ;;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;;
	/*!50003 SET @saved_time_zone      = @@time_zone */ ;;
	/*!50003 SET time_zone             = 'SYSTEM' */ ;;
	/*!50106 CREATE*/ /*!50117 */ /*!50106 EVENT `update_employee_leave_summary_cron_event_temp` ON SCHEDULE EVERY 1 HOUR STARTS current_timestamp() ON COMPLETION NOT PRESERVE ENABLE DO begin
	call update_employee_leave_summary_cron(null);
	insert into cron_job_logs(job_name,createdat) values 
	('update_employee_leave_summary_cron_event_temp',current_timestamp());
	end */ ;;
	/*!50003 SET time_zone             = @saved_time_zone */ ;;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;;
	/*!50003 SET character_set_results = @saved_cs_results */ ;;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;;
	/*!50106 DROP EVENT IF EXISTS `update_employee_working_days_cron_event` */;;
	DELIMITER ;;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;;
	/*!50003 SET character_set_client  = utf8mb4 */ ;;
	/*!50003 SET character_set_results = utf8mb4 */ ;;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;;
	/*!50003 SET @saved_time_zone      = @@time_zone */ ;;
	/*!50003 SET time_zone             = 'SYSTEM' */ ;;
	/*!50106 CREATE*/ /*!50117 */ /*!50106 EVENT `update_employee_working_days_cron_event` ON SCHEDULE EVERY 1 MONTH STARTS current_timestamp() ON COMPLETION NOT PRESERVE ENABLE DO begin

	call update_employee_working_days_cron(null);
	insert into cron_job_logs(job_name,createdat) values 
	('update_employee_working_days_cron_event',current_timestamp());
	end */ ;;
	/*!50003 SET time_zone             = @saved_time_zone */ ;;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;;
	/*!50003 SET character_set_results = @saved_cs_results */ ;;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;;
	/*!50106 DROP EVENT IF EXISTS `update_employee_working_days_cron_event_temp` */;;
	DELIMITER ;;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;;
	/*!50003 SET character_set_client  = utf8mb4 */ ;;
	/*!50003 SET character_set_results = utf8mb4 */ ;;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;;
	/*!50003 SET @saved_time_zone      = @@time_zone */ ;;
	/*!50003 SET time_zone             = 'SYSTEM' */ ;;
	/*!50106 CREATE*/ /*!50117 */ /*!50106 EVENT `update_employee_working_days_cron_event_temp` ON SCHEDULE EVERY 1 HOUR STARTS current_timestamp() ON COMPLETION NOT PRESERVE ENABLE DO begin

	call update_employee_working_days_cron;
	insert into cron_job_logs(job_name,createdat) values 
	('update_employee_working_days_cron_event_temp',current_timestamp());
	end */ ;;
	/*!50003 SET time_zone             = @saved_time_zone */ ;;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;;
	/*!50003 SET character_set_results = @saved_cs_results */ ;;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;;
	DELIMITER ;
	/*!50106 SET TIME_ZONE= @save_time_zone */ ;

	--
	-- Dumping routines for database 'spryple'
	--
	/*!50003 DROP FUNCTION IF EXISTS `fn_get_assessment_year` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  FUNCTION `fn_get_assessment_year`() RETURNS varchar(10) CHARSET latin1
	begin
		set @fn_year = '';
		set @start_month = 4;
		set @current_year = year(current_timestamp());                   
		set @current_month = month(current_timestamp());
			if(@start_month = 1) then
				set @current_year = @current_year;
			elseif ((@start_month <> 1) and (@start_month <= @current_month)) then
				set @current_year = @current_year;
			elseif ((@start_month <> 1) and (@start_month > @current_month)) then
				set @current_year = @current_year - 1;
			end if;
		set @fn_year =  concat(@current_year+1,'-',@current_year+2);
		return @fn_year;    
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP FUNCTION IF EXISTS `fn_get_financial_year` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  FUNCTION `fn_get_financial_year`() RETURNS varchar(10) CHARSET latin1
	begin
		set @fn_year = '';
		set @start_month = 4;
		set @current_year = year(current_timestamp());                   
		set @current_month = month(current_timestamp());
			if(@start_month = 1) then
				set @current_year = @current_year;
			elseif ((@start_month <> 1) and (@start_month <= @current_month)) then
				set @current_year = @current_year;
			elseif ((@start_month <> 1) and (@start_month > @current_month)) then
				set @current_year = @current_year - 1;
			end if;
		set @fn_year =  concat(@current_year,'-',@current_year+1);
		return @fn_year;    
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP FUNCTION IF EXISTS `fn_get_financial_year_value` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  FUNCTION `fn_get_financial_year_value`() RETURNS int(4)
	begin
		set @fn_year = '';
		set @start_month = 4;
		set @current_year = year(current_timestamp());                   
		set @current_month = month(current_timestamp());
			if(@start_month = 1) then
				set @current_year = @current_year;
			elseif ((@start_month <> 1) and (@start_month <= @current_month)) then
				set @current_year = @current_year;
			elseif ((@start_month <> 1) and (@start_month > @current_month)) then
				set @current_year = @current_year - 1;
			end if;
		set @fn_year = @current_year;
		return @fn_year;    
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP FUNCTION IF EXISTS `fn_get_leave_cycle_year` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE FUNCTION `fn_get_leave_cycle_year`() RETURNS int(11)
	begin
	set @start_month = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
					   select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
					   lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));
	set @current_year = year(current_timestamp());                   
	set @current_month = month(current_timestamp());
		if(@start_month = 1) then
			set @current_year = @current_year;
		elseif ((@start_month <> 1) and (@start_month <= @current_month)) then
			set @current_year = @current_year;
		elseif ((@start_month <> 1) and (@start_month > @current_month)) then
			set @current_year = @current_year - 1;
		end if;
	return @current_year;    
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP FUNCTION IF EXISTS `fn_get_min_days_prior_value_for_leave_type` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE FUNCTION `fn_get_min_days_prior_value_for_leave_type`(
	leavetype_id int
	) RETURNS int(2)
	begin
		if exists (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = 
				   (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_MIN_DAYS_PRIOR_APPLICATION')
					and lm_rulevalues.leavetypeid = `leavetype_id`
					and lm_rulevalues.effectivetodate is null) then
			set @value = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = 
						  (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_MIN_DAYS_PRIOR_APPLICATION')
						  and lm_rulevalues.leavetypeid = `leavetype_id`
						  order by lm_rulevalues.id desc limit 1);
			return ifnull(@value,0);              
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP FUNCTION IF EXISTS `fn_get_month_name` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  FUNCTION `fn_get_month_name`( 
	 month_value integer(11)
	 ) RETURNS varchar(10) CHARSET latin1
	begin
	declare month_name varchar(10);
	   set month_name = (SELECT MONTHNAME(STR_TO_DATE(month_value,'%m')));
	   return month_name;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP FUNCTION IF EXISTS `get_employee_name` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE FUNCTION `get_employee_name`(emp_id int) RETURNS varchar(800) CHARSET latin1
	begin
		return (select concat(firstname,if(middlename is not null,' ',''),ifnull(middlename,''),' ',ifnull(lastname,'')) as empname from employee where id=emp_id);
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP FUNCTION IF EXISTS `initcap` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE FUNCTION `initcap`(x char(200)) RETURNS char(200) CHARSET utf8
		READS SQL DATA
		DETERMINISTIC
	BEGIN
		SET @str='';
		SET @l_str='';
		WHILE x REGEXP ' ' DO
		SELECT SUBSTRING_INDEX(x, ' ', 1) INTO @l_str;
		SELECT SUBSTRING(x, LOCATE(' ', x)+1) INTO x;
		SELECT CONCAT(@str, ' ', CONCAT(UPPER(SUBSTRING(@l_str,1,1)),LOWER(SUBSTRING(@l_str,2)))) INTO @str;
		END WHILE;
		RETURN LTRIM(CONCAT(@str, ' ', CONCAT(UPPER(SUBSTRING(x,1,1)),LOWER(SUBSTRING(x,2)))));
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `authenticateuser` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `authenticateuser`(in `login` varchar(255),in `pwd` varchar(1024))
	begin
		if (select status from employee where id=(select distinct employee_login.id from employee_login where employee_login.login=`login`))!=1 then
		select 0 as id, null as firstlogin; -- employee is inactive case
	else 
		if exists(select * from employee_login where employee_login.login = `login` order by lastpasswordchangedate desc limit 1)
		then 
			set @pw = (select employee_login.password from employee_login where employee_login.login = `login` order by lastpasswordchangedate desc limit 1);
			if @pw = md5(`pwd`) then 
				select id,firstlogin from employee_login where employee_login.login = `login` and employee_login.password = md5(`pwd`)   order by lastpasswordchangedate desc limit 1;
			else select 0 as id, null as firstlogin;
			end if;
		else select 0 as id, null as firstlogin;
		end if;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `bkp_26oct2022_get_report_for_payroll_processing` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `bkp_26oct2022_get_report_for_payroll_processing`(employeeid int,chosendate date)
	begin

		set @monthstartdate = last_day(chosendate) + interval 1 day - interval 1 month;
		set @monthenddate = last_day(chosendate);
		if  (current_date() < @monthenddate) then
			set @monthenddate = current_date();
		end if;
		/*select 	empid,
				get_employee_name(empid) as empname,
				count(*)  as loss_of_pay_count
		from lm_employeeleaves
		where ((fromdate between @monthstartdate and @monthenddate or todate between @monthstartdate and @monthenddate) or (fromdate > @monthstartdate and todate < @monthenddate))
		and leavetype = (select id from lm_leavesmaster where leavename like '%loss of pay%' and status='Active')
		group by empid*/
		set @temp = 0;
		create temporary table emp_temp (id int(11) auto_increment not null,emp_id int(11), key(id));
		insert into emp_temp(emp_id)
		select id from employee where status = 1; -- 'Active';
		
		create temporary table emp_balance_totals (emp_id int(11),balance decimal(5,2),absentcount decimal(5,2));

		set @monthdayscnt = case when month(chosendate)<>month(current_date()) then (SELECT DAYOFMONTH(LAST_DAY(@monthstartdate))) else (select datediff(@monthenddate,@monthstartdate)+1) end;
		if employeeid is null then
			set @cnt = (select count(*) from employee where status = 1); -- 'Active');
			set @tot = @cnt;
			while (@tot>=0) do
				set @temp = 0.00;
				set @eid = (select emp_id from emp_temp where id=((@cnt-@tot)+1));
				set @empattdaycount = (select count(*) from employee_attendance where empid=@eid and attendancedate between @monthstartdate and  @monthenddate);
				set @empabsentcnt = (@monthdayscnt - @empattdaycount);
				
				-- weekoffs 
				set @weekoffscount = 0;
				set @monthstarttemp = @monthstartdate;
				while (@monthstarttemp<=@monthenddate) do
					set @weekoffscount = @weekoffscount + (case when exists(select * from employee_weekoffs v
															where ( @monthstarttemp between v.effectivefromdate and v.effectivetodate)
															and dayofweek(@monthstarttemp) in (ifnull(v.weekoffday1,0),ifnull(v.weekoffday2,0),ifnull(v.weekoffday3,0))
															and empid = @eid order by empid desc) then 1 else 0 end) ; 	
					set @monthstarttemp = @monthstarttemp + interval 1 day;
				end while;
				
				-- holidays
				set @holidaystotal = 0;
				select count(*) into @holidaystotal
				from (select m.date as date_value,m.description as description
				FROM holidaysmaster m, companyworklocationsmaster v  
				WHERE m.location = v.city 
				and v.id =(select s.locationid from employee_worklocations s where empid = @eid order by id desc limit 1)
				and m.leave_cycle_year = (select fn_get_leave_cycle_year())) v
				where v.date_value between @monthstartdate and @monthenddate;
				
				call get_employee_leave_balance_for_payroll(@eid,@temp);
				insert into emp_balance_totals
				select @eid,@temp,(@empabsentcnt - @holidaystotal - @weekoffscount);

				set @tot = @tot - 1;
			end while;
		else
			-- weekoffs 
			set @weekoffscount = 0;
			set @monthstarttemp = @monthstartdate;
			while (@monthstarttemp<=@monthenddate) do
				set @weekoffscount = @weekoffscount + (case when exists(select * from employee_weekoffs v
														where ( @monthstarttemp between v.effectivefromdate and v.effectivetodate)
														and dayofweek(@monthstarttemp) in (ifnull(v.weekoffday1,0),ifnull(v.weekoffday2,0),ifnull(v.weekoffday3,0))
														and empid = employeeid order by empid desc) then 1 else 0 end) ; 	
				set @monthstarttemp = @monthstarttemp + interval 1 day;
			end while;
			
			-- holidays
			set @holidaystotal = 0;
			select count(*) into @holidaystotal
			from (select m.date as date_value,m.description as description
			FROM holidaysmaster m, companyworklocationsmaster v  
			WHERE m.location = v.city 
			and v.id =(select s.locationid from employee_worklocations s where empid = employeeid order by id desc limit 1)
			and m.leave_cycle_year = (select fn_get_leave_cycle_year())) v
			where v.date_value between @monthstartdate and @monthenddate;
			
			set @empattdaycount = (select count(*) from employee_attendance where empid=employeeid and attendancedate between @monthstartdate and  @monthenddate);
			set @empabsentcnt = (@monthdayscnt - @empattdaycount );
				
			call get_employee_leave_balance_for_payroll(employeeid,@temp);
			insert into emp_balance_totals values(employeeid,@temp,@empabsentcnt - @holidaystotal - @weekoffscount);
		end if;
		select  distinct e.id,e.empid,get_employee_name(e.id) as empname,(case when (select count(*) from lm_employeeleaves where empid = ifnull(employeeid,e.id) and leavetype = (select id from lm_leavesmaster where leavename like '%loss of pay%' and status='Active') and ((fromdate between @monthstartdate and @monthenddate
		or todate between @monthstartdate and  @monthenddate) or (fromdate > @monthstartdate and todate < @monthenddate)))>0 then (select sum(leavecount) from lm_employeeleaves where empid = ifnull(employeeid,e.id) and leavetype = (select id from lm_leavesmaster where leavename like '%loss of pay%' and status='Active') and ((fromdate between @monthstartdate and  @monthenddate
		or todate between @monthstartdate and  @monthenddate) or (fromdate > @monthstartdate and todate < @monthenddate))) else 0 end) as lopcount,
		t.absentcount as total_absents,
		t.balance as total_leaves_balance
		
		from employee e,emp_balance_totals t
		where e.id = ifnull(employeeid,e.id)
		and e.id = t.emp_id
		group by e.id -- ,l.leavetype
		order by e.id;
		
		drop temporary table emp_balance_totals;
		drop temporary table emp_temp;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `carryforward_employee_leave_cron` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `carryforward_employee_leave_cron`(
	)
	BEGIN
	DECLARE vempid int(11);
	DECLARE empid_cursor cursor for select employee.id from employee where employee.status = 1;              
	set @present_year = (select fn_get_leave_cycle_year());

	CREATE temporary TABLE `lm_leavescarryforward_temp` (
	  `id` int(11),
	  `empid` int(11) NOT NULL,
	  `leavetype_id` int(11),
	  `leave_cycle_year` varchar(4) NOT NULL,
	  `opening_balance` int(11) NOT NULL,
	  `leaves_assigned` int(11) NOT NULL,
	  `leaves_availed` int(11) NOT NULL,
	  `closing_balance` int(11) NOT NULL,
	  `total_carryforwarded` int(11) NOT NULL
	  );
	  
	insert into lm_leavescarryforward_temp select * from lm_leavescarryforward 
	where lm_leavescarryforward.leave_cycle_year = cast(@present_year as char(4));  
	  
	  



	set @leavetype_id = 0;
	set @leavetype_id = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster 
						 where lm_rulemaster.rulename = 'LEAVETYPE_FOR_WHICH_BALANCE_IS_TO_BE_CARRIED_FORWARD') 
						 order by lm_rulevalues.id desc limit 1);




	set @cm = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id =
			   (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster 
			   where lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));




	drop temporary table lm_leavescarryforward_temp;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `checkrecord` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `checkrecord`(in `tablename` varchar(255),in `columnname` varchar(64),in `columnvalue` varchar(2048))
	begin
			set @val='';
	set @sql1 = concat('select @val=count(*) from information_schema.columns where table_name=''',`tablename`,''' and column_name=','''status''');
    prepare stmt from @sql1;
	execute stmt;
    
	set @sqltext = concat('select (case when (select count(*) from ',`tablename`,' where ',`columnname`,' = ''',`columnvalue`,' ''and effectiveenddate is null ');
    set @sqltext = concat(@sqltext,(case when @val>0 then ', and status=1 ' else '' end),' )>0 then 1 else 0 end)  as isexists');
	prepare stmt1 from @sqltext;
	execute stmt1;
	deallocate prepare stmt1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `checkrecord_V2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `checkrecord_V2`(in `tablename` varchar(255),in `columnname` varchar(64),in `columnvalue` varchar(2048))
	begin
		set @val='';
		set @sql1 = concat('select @val=count(*) from information_schema.columns where table_name=''',`tablename`,''' and column_name=','''status''');
		prepare stmt from @sql1;
		execute stmt;
		
		set @sqltext = concat('select (case when (select count(*) from ',`tablename`,' where ',`columnname`,' = ''',`columnvalue`,'''');
		set @sqltext = concat(@sqltext,(case when @val>0 then ', and status=''Active''' else '' end),' )>0 then 1 else 0 end)  as isexists');
		prepare stmt1 from @sqltext;
		execute stmt1;
		deallocate prepare stmt1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `configure_pay_group_component` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `configure_pay_group_component`(
		pigcm_id_value int,
		is_percentage_or_flat_amount_value int,
		input_value float,
		parent_component_id_value varchar(32),
		display_name_value varchar(255),
		is_this_component_a_part_of_employee_salary_structure_value int(1),
		calculate_on_pro_rata_basis_value int(1),
		is_this_component_taxable_value int(1),
		consider_for_esi_contribution_value int(1),
		consider_for_epf_contribution_value int(1),
		epf_always_value int(1),
		epf_only_when_pf_wage_is_less_than_standard_pf_wage_value int(1),
		show_this_component_in_payslip_value int(1),
		`status` varchar(64)
	)
	begin
	if (pigcm_id_value is not null) then
		if (is_percentage_or_flat_amount_value = 0) then
			set @group_id = (select payroll_income_group_components_master.group_id from payroll_income_group_components_master 
							where payroll_income_group_components_master.id = pigcm_id_value);
			set @component_id = (select payroll_salary_components_master.id from payroll_salary_components_master where 
								payroll_salary_components_master.component = 'Other Allowance');                 
			if not exists (select payroll_income_group_components_master.id from payroll_income_group_components_master where payroll_income_group_components_master.group_id = @group_id
						   and payroll_income_group_components_master.component_id = @component_id) then
			select is_this_component_a_part_of_employee_salary_structure,
					calculate_on_pro_rata_basis,
					is_this_component_taxable,
					consider_for_esi_contribution,
					consider_for_epf_contribution,
					show_this_component_in_payslip
					into @z1,@z2,@z3,@z4,@z5,@z6
					from payroll_product_earning_components_configurations_master where component_id = @component_id;
			INSERT INTO payroll_income_group_components_master(group_id,component_id,display_name,
					is_this_component_a_part_of_employee_salary_structure,
					calculate_on_pro_rata_basis,
					is_this_component_taxable,
					consider_for_esi_contribution,
					consider_for_epf_contribution,
					show_this_component_in_payslip,
					effective_from_date,
					status
					)
					values (@group_id,@component_id,
					(select payroll_salary_components_master.component from payroll_salary_components_master 
					where payroll_salary_components_master.id = @component_id),
					@z1,@z2,@z3,@z4,@z5,@z6,curdate(),'Active');    
					set @lid = (select last_insert_id()); 
				if (@lid is not null) then
					select epf_always,epf_only_when_pf_wage_is_less_than_standard_pf_wage
						into @epf1,@epf2
						from payroll_product_earning_components_epf_configs_master
						where component_id = @component_id;
					insert into payroll_earning_components_epf_configs_details
						(pigcm_id,epf_always,epf_only_when_pf_wage_is_less_than_standard_pf_wage,effective_from_date) values
						(@lid,@epf1,@epf2,curdate());
					insert into payroll_earning_components_formula_details(pigcm_id,is_percentage_or_flat_amount,component_value,parent_component_id,effective_from_date)    
					values (@lid,0,0,null,curdate());
				end if;
			end if;
		end if;
		if not exists(select id from payroll_earning_components_formula_details 
					where payroll_earning_components_formula_details.pigcm_id = pigcm_id_value) then
			insert into payroll_earning_components_formula_details(pigcm_id,is_percentage_or_flat_amount,component_value,parent_component_id,effective_from_date)
			values (pigcm_id_value,is_percentage_or_flat_amount_value,input_value,parent_component_id_value,curdate());
		end if;
		update payroll_income_group_components_master v
		set v.display_name 						= display_name_value,
			v.is_this_component_a_part_of_employee_salary_structure = is_this_component_a_part_of_employee_salary_structure_value,
			v.calculate_on_pro_rata_basis       = calculate_on_pro_rata_basis_value,
			v.is_this_component_taxable         = is_this_component_taxable_value,
			v.consider_for_esi_contribution 	= consider_for_esi_contribution_value,
			v.consider_for_epf_contribution 	= consider_for_epf_contribution_value,
			v.show_this_component_in_payslip 	= show_this_component_in_payslip_value,
			v.status                            = `status`
		where v.id = pigcm_id_value;  
		if (consider_for_epf_contribution_value = 1) then
			update payroll_earning_components_epf_configs_details v
			set v.epf_always = epf_always_value,
				v.epf_only_when_pf_wage_is_less_than_standard_pf_wage = epf_only_when_pf_wage_is_less_than_standard_pf_wage_value,
				v.effective_from_date = curdate()
			where v.pigcm_id = pigcm_id_value;    
		end if;
		select payroll_income_group_components_master.group_id into @g1
		from payroll_income_group_components_master where payroll_income_group_components_master.id = pigcm_id_value;
		select payroll_income_groups_master.status into @s1
		from payroll_income_groups_master where payroll_income_groups_master.id = @g1;
		if (@s1 = 'To Be Configured') then
			if exists(select payroll_income_group_components_master.id from payroll_income_group_components_master
					  where payroll_income_group_components_master.status = 'To Be Configured'
					  and payroll_income_group_components_master.group_id = @g1) then
			update payroll_income_groups_master
				set payroll_income_groups_master.status = 'Configuration In Progress'
				where payroll_income_groups_master.id = @g1;
			else
			update payroll_income_groups_master
				set payroll_income_groups_master.status = 'Active'
				where payroll_income_groups_master.id = @g1;
			end if;
		elseif (@s1 = 'Configuration In Progress') then    
			if not exists(select payroll_income_group_components_master.id from payroll_income_group_components_master
						  where payroll_income_group_components_master.status = 'To Be Configured'
						  and payroll_income_group_components_master.group_id = @g1) then
			update payroll_income_groups_master
				set payroll_income_groups_master.status = 'Active'
				where payroll_income_groups_master.id = @g1;
			end if;    
		end if;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `credit_employee_event_leave` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `credit_employee_event_leave`(
		in employee_id int(11)
	)
	BEGIN
	DECLARE vid int(11);
	-- get all leavetypes which are credited only once
	DECLARE temp_cursor cursor for select id from leavesmaster;

	CREATE TEMPORARY TABLE leavesmaster(
		id int(11)
	);    
	INSERT INTO leavesmaster(id) 
	select lm_leavesmaster.id from lm_leavesmaster where lm_leavesmaster.status = 'Active' and lm_leavesmaster.id not in
	(select lm_rulevalues.leavetypeid from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_CREDIT_FREQUENCY'))
	and lm_leavesmaster.id not in (1,9,10); -- comp-off, lop 
	OPEN temp_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
			set vid = 0;
			fetch temp_cursor into vid;
			set @max_avail_count = 0;
			set @max_count = 0;
			set @max_avail_count = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id 
									from lm_rulemaster where lm_rulemaster.rulename = 'MAX_AVAIL_COUNT')
									and lm_rulevalues.leavetypeid = vid order by lm_rulevalues.id desc limit 1);
			-- select @max_avail_count;  
			set @max_count = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id 
									from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_MAX_COUNT_PER_TERM')
									and lm_rulevalues.leavetypeid = vid order by lm_rulevalues.id desc limit 1);
			-- select @max_count;                        
			-- insert balance record for this leavetype 
			if not exists(select * from lm_employeeleavebalance where lm_employeeleavebalance.empid = employee_id and lm_employeeleavebalance.leavetypeid = vid) then
				insert into lm_leavecreditsmaster(empid,leavetypeid,leavecount,crediteddate,leave_cycle_year) values
				(employee_id,vid,(@max_avail_count * @max_count),curdate(),null);
				insert into lm_employeeleavebalance(empid,leavetypeid,balance,lastupdatedat) values
				(employee_id,vid,(@max_avail_count * @max_count),current_timestamp());
			else 
				if not exists(select lm_leavecreditsmaster.id from lm_leavecreditsmaster where lm_leavecreditsmaster.leavetypeid = vid and 
				lm_leavecreditsmaster.empid = employee_id) then
				insert into lm_leavecreditsmaster(empid,leavetypeid,leavecount,crediteddate,leave_cycle_year) values
				(employee_id,vid,(@max_avail_count * @max_count),current_date(),null);
				update lm_employeeleavebalance
				set lm_employeeleavebalance.balance = lm_employeeleavebalance.balance + (@max_avail_count * @max_count),
				lm_employeeleavebalance.lastupdatedat = current_timestamp()
				where lm_employeeleavebalance.empid = employee_id
				and lm_employeeleavebalance.leavetypeid = vid; 
				end if;
			end if;
			set @j = @j + 1;
		end while;

	CLOSE temp_cursor;

	drop temporary table leavesmaster;                               
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `credit_employee_leave_cron` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `credit_employee_leave_cron`(
	)
	BEGIN DECLARE vid int(11); DECLARE vcredit_frequency int(11); DECLARE vempid int(11); declare vdoj date; declare min_service int(11); declare vtotal_count decimal; declare vvalue decimal(5, 2); declare vvalue2 decimal(5, 2);
-- get all leavetypes which are credited on regular basis 
DECLARE temp_cursor cursor for
SELECT  id
       ,credit_frequency
FROM leavesmaster
WHERE credit_frequency is not null; DECLARE empid_cursor cursor for

SELECT  employee.id
       ,employee.dateofjoin
FROM employee
WHERE employee.status = 1;

DROP TEMPORARY TABLE IF EXISTS leavesmaster;
CREATE TEMPORARY TABLE leavesmaster( id int(11), credit_frequency int(11) );
INSERT INTO leavesmaster(id)
SELECT  lm_leavesmaster.id
FROM lm_leavesmaster
WHERE lm_leavesmaster.status = 'Active'; update leavesmaster
INNER JOIN
(
	SELECT  lm_rulevalues.leavetypeid AS leavetypeid
	       ,lm_rulevalues.value       AS value
	FROM lm_rulevalues,
	(
		SELECT  lm_rulevalues.leavetypeid AS leavetypeid
		       ,MAX(lm_rulevalues.id)     AS id
		FROM lm_rulevalues
		WHERE lm_rulevalues.ruleid = (
		SELECT  lm_rulemaster.id
		FROM lm_rulemaster
		WHERE lm_rulemaster.rulename = 'LEAVES_CREDIT_FREQUENCY')
		GROUP BY  lm_rulevalues.leavetypeid
	) ids
	WHERE lm_rulevalues.ruleid = (
	SELECT  lm_rulemaster.id
	FROM lm_rulemaster
	WHERE lm_rulemaster.rulename = 'LEAVES_CREDIT_FREQUENCY') AND lm_rulevalues.leavetypeid = ids.leavetypeid AND lm_rulevalues.id = ids.id 
) AS table2
ON leavesmaster.id = table2.leavetypeid

SET leavesmaster.credit_frequency = table2.value;
-- SELECT * FROM leavesmaster;

SET @leave_cycle_year = (
SELECT  fn_get_leave_cycle_year());

DROP temporary TABLE IF EXISTS leavecreditsmaster;
CREATE temporary TABLE `leavecreditsmaster` ( `id` int(11) NOT NULL, `empid` int(11) NOT NULL, `leavetypeid` int(11) NOT NULL, `leavecount` decimal(5, 2) NOT NULL, `crediteddate` date NOT NULL, `leave_cycle_year` int(4) DEFAULT NULL );
INSERT INTO leavecreditsmaster
SELECT  *
FROM lm_leavecreditsmaster
WHERE lm_leavecreditsmaster.leave_cycle_year = cast(@leave_cycle_year AS unsigned);

SET @cm = (
SELECT  leave_cycle_year_master.cycle_commencement_month
FROM leave_cycle_year_master
WHERE leave_cycle_year_master.id = (
SELECT  lm_rulevalues.value
FROM lm_rulevalues
WHERE lm_rulevalues.ruleid = (
SELECT  lm_rulemaster.id
FROM lm_rulemaster
WHERE lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR')
ORDER BY lm_rulevalues.id desc
LIMIT 1)); OPEN temp_cursor;

SET @i = 0;
SET @i = found_rows();
SET @j = 0;
SET @v = 0;
SET @pm = (
SELECT  month(current_date())); WHILE @j < @i do

SET vid = 0;
SET vcredit_frequency = 0; fetch temp_cursor into vid, vcredit_frequency;
SET vtotal_count = (
SELECT  lm_rulevalues.value
FROM lm_rulevalues
WHERE lm_rulevalues.ruleid = (
SELECT  lm_rulemaster.id
FROM lm_rulemaster
WHERE lm_rulemaster.rulename = 'LEAVES_MAX_COUNT_PER_YEAR') AND lm_rulevalues.leavetypeid = vid
ORDER BY lm_rulevalues.id desc
LIMIT 1);

SET vvalue = ((
SELECT  cast((vtotal_count/12) AS decimal(5,2)))*vcredit_frequency);
-- SELECT vvalue;

SET @v = mod((@pm - @cm), vcredit_frequency); if (@v = 0) THEN OPEN empid_cursor;
SET @empid_count = 0;
SET @empid_count = found_rows();
SET @e = 0; while @e < @empid_count do fetch empid_cursor into vempid, vdoj; if not exists (

SELECT  leavecreditsmaster.id
FROM leavecreditsmaster
WHERE leavecreditsmaster.empid = vempid
AND leavecreditsmaster.leave_cycle_year = cast(@leave_cycle_year AS unsigned)
AND leavecreditsmaster.leavetypeid = vid
AND cast(month(leavecreditsmaster.crediteddate) AS unsigned) = cast(@pm AS unsigned)) THEN
INSERT INTO lm_leavecreditsmaster(empid, leavetypeid, leavecount, crediteddate, leave_cycle_year) values (vempid, vid, vvalue, current_date(), @leave_cycle_year); if not exists(

SELECT  *
FROM lm_employeeleavebalance
WHERE lm_employeeleavebalance.empid = vempid
AND lm_employeeleavebalance.leavetypeid = vid
AND lm_employeeleavebalance.leave_cycle_year = cast(@leave_cycle_year AS unsigned)) THEN
INSERT INTO lm_employeeleavebalance(empid, leavetypeid, balance, lastupdatedat, leave_cycle_year) values (vempid, vid, vvalue, current_timestamp(), cast(@leave_cycle_year AS unsigned)); else update lm_employeeleavebalance

SET lm_employeeleavebalance.balance = lm_employeeleavebalance.balance + vvalue, lm_employeeleavebalance.lastupdatedat = current_timestamp()
WHERE lm_employeeleavebalance.empid = vempid
AND lm_employeeleavebalance.leavetypeid = vid
AND lm_employeeleavebalance.leave_cycle_year = cast(@leave_cycle_year AS unsigned); end if; end if;

SET @e = @e + 1; end while; CLOSE empid_cursor; elseif (@v <> 0) THEN OPEN empid_cursor;
SET @empid_count = 0;
SET @empid_count = found_rows();
SET @e = 0; while @e < @empid_count do fetch empid_cursor into vempid, vdoj; if ((cast(@leave_cycle_year AS unsigned) = (

SELECT  year(vdoj))) or ((@pm < @cm) AND (cast(@leave_cycle_year AS unsigned) + 1 = (
SELECT  year(vdoj))))) THEN

SET @month_count = (
SELECT  timestampdiff(month,vdoj,curdate()));

SET @credit_count = (
SELECT  @month_count div vcredit_frequency) + 1; if ((

SELECT  COUNT(id)
FROM leavecreditsmaster
WHERE leavecreditsmaster.empid = vempid
AND leavecreditsmaster.leavetypeid = vid
AND leavecreditsmaster.crediteddate > vdoj
AND leavecreditsmaster.leave_cycle_year = cast(@leave_cycle_year AS unsigned)) < @credit_count) THEN IF((cast(@leave_cycle_year AS unsigned) = (
SELECT  year(vdoj)))) THEN

SET @diff = mod((@pm - @cm), vcredit_frequency); elseif ((@pm < @cm) AND (cast(@leave_cycle_year AS unsigned) + 1 = (

SELECT  year(vdoj)))) THEN

SET @diff = mod((12 + @pm - @cm), vcredit_frequency); end if;
SET vvalue2 = vvalue * ((vcredit_frequency - @diff)/(vcredit_frequency * 1.0));
INSERT INTO lm_leavecreditsmaster(empid, leavetypeid, leavecount, crediteddate, leave_cycle_year) values (vempid, vid, vvalue2, current_date(), cast(@leave_cycle_year AS unsigned)); if not exists(

SELECT  *
FROM lm_employeeleavebalance
WHERE lm_employeeleavebalance.empid = vempid
AND lm_employeeleavebalance.leavetypeid = vid
AND lm_employeeleavebalance.leave_cycle_year = cast(@leave_cycle_year AS unsigned)) THEN
INSERT INTO lm_employeeleavebalance(empid, leavetypeid, balance, lastupdatedat, leave_cycle_year) values (vempid, vid, vvalue2, current_timestamp(), cast(@leave_cycle_year AS unsigned)); else update lm_employeeleavebalance

SET lm_employeeleavebalance.balance = lm_employeeleavebalance.balance + vvalue2, lm_employeeleavebalance.lastupdatedat = current_timestamp()
WHERE lm_employeeleavebalance.empid = vempid
AND lm_employeeleavebalance.leavetypeid = vid
AND lm_employeeleavebalance.leave_cycle_year = cast(@leave_cycle_year AS unsigned); end if; end if; end if;

SET @e = @e + 1; end while; CLOSE empid_cursor; end if;
SET @j = @j + 1; end while; CLOSE temp_cursor;

DROP temporary TABLE leavesmaster;

DROP temporary TABLE leavecreditsmaster;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `credit_employee_leave_cronV2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `credit_employee_leave_cronV2`(
	)
	BEGIN

	DECLARE vid int(11);
	DECLARE vcredit_frequency int(11);
	DECLARE vempid int(11);
	declare vdoj date;
	declare min_service int(11);
	declare vtotal_count decimal;
	declare vvalue decimal(5,2);
	declare vvalue2 decimal(5,2);
	-- get all leavetypes which are credited on regular basis
	DECLARE temp_cursor cursor for select id,credit_frequency from leavesmaster
								   where credit_frequency is not null; 
	DECLARE empid_cursor cursor for select employee.id, employee.dateofjoin from employee where employee.status =1;              

	CREATE TEMPORARY TABLE leavesmaster(
		id int(11),
		credit_frequency int(11)
	);

	INSERT INTO leavesmaster(id) 
	select lm_leavesmaster.id from lm_leavesmaster where lm_leavesmaster.status = 'Active';

	update leavesmaster
	inner join
	(select lm_rulevalues.leavetypeid as leavetypeid,lm_rulevalues.value as value from lm_rulevalues,
	 (select lm_rulevalues.leavetypeid as leavetypeid,max(lm_rulevalues.id) as id from lm_rulevalues 
	  where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_CREDIT_FREQUENCY')
	  group by lm_rulevalues.leavetypeid) ids
	where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_CREDIT_FREQUENCY')
	and lm_rulevalues.leavetypeid = ids.leavetypeid
	and lm_rulevalues.id = ids.id) as table2
	on leavesmaster.id = table2.leavetypeid
	SET leavesmaster.credit_frequency = table2.value;
	-- select * from leavesmaster;

	set @leave_cycle_year = (select fn_get_leave_cycle_year());

	CREATE temporary TABLE `leavecreditsmaster` (
	  `id` int(11) NOT NULL,
	  `empid` int(11) NOT NULL,
	  `leavetypeid` int(11) NOT NULL,
	  `leavecount` decimal(5,2) NOT NULL,
	  `crediteddate` date NOT NULL,
	  `leave_cycle_year` int(4) DEFAULT NULL
	  );
	insert into leavecreditsmaster 
	select * from lm_leavecreditsmaster where lm_leavecreditsmaster.leave_cycle_year = cast(@leave_cycle_year as unsigned);  

	set @cm = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id =
			   (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster 
				where lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));



	OPEN temp_cursor;
	set @i = 0;
		set @i = found_rows();
		set @j = 0;
		set @v = 0;
		set @pm = (select month(current_date()));
		WHILE @j < @i do
		set vid = 0;
		set vcredit_frequency = 0;
		fetch temp_cursor into vid,vcredit_frequency;
		if (vid = 4) then
			set min_service = (select lm_rulevalues.value from lm_rulevalues 
							where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
							lm_rulemaster.rulename = 'LEAVES_MIN_SERVICE_ELIGIBILITY') 
							and lm_rulevalues.leavetypeid = vid order by lm_rulevalues.id desc limit 1);
		end if;
		set vtotal_count = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster 
							where lm_rulemaster.rulename = 'LEAVES_MAX_COUNT_PER_YEAR') 
							and lm_rulevalues.leavetypeid = vid
							order by lm_rulevalues.id desc limit 1);
		set vvalue = ((select cast((vtotal_count/12) as decimal(5,2)))*vcredit_frequency);
		-- select vvalue; 
		set @v = mod((@pm - @cm),vcredit_frequency);
		if (@v = 0) then
		OPEN empid_cursor;
			set @empid_count = 0;
			set @empid_count = found_rows();
			set @e = 0;
			while @e < @empid_count do
			 fetch empid_cursor into vempid,vdoj;
			 if (vid <> 4) then -- leavetypes other than earned leave
				insert into lm_leavecreditsmaster(empid,leavetypeid,leavecount,crediteddate,leave_cycle_year) values
				(vempid,vid,vvalue,current_date(),@leave_cycle_year);
				if not exists(select * from lm_employeeleavebalance where lm_employeeleavebalance.empid = vempid 
					and lm_employeeleavebalance.leavetypeid = vid) then
					insert into lm_employeeleavebalance(empid,leavetypeid,balance,lastupdatedat,leave_cycle_year) values
					(vempid,vid,vvalue,current_timestamp(),@leave_cycle_year);
				else
					update lm_employeeleavebalance
					set lm_employeeleavebalance.balance = lm_employeeleavebalance.balance + vvalue,
					lm_employeeleavebalance.lastupdatedat = current_timestamp()
					where lm_employeeleavebalance.empid = vempid
					and lm_employeeleavebalance.leavetypeid = vid; 
				end if;
			 elseif (vid = 4 and (min_service <= (select timestampdiff(month,vdoj,curdate())))) then -- earned leave
				insert into lm_leavecreditsmaster(empid,leavetypeid,leavecount,crediteddate,leave_cycle_year) values
				(vempid,vid,vvalue,current_date(),@leave_cycle_year);
				if not exists(select * from lm_employeeleavebalance where lm_employeeleavebalance.empid = vempid 
					and lm_employeeleavebalance.leavetypeid = vid) then
					insert into lm_employeeleavebalance(empid,leavetypeid,balance,lastupdatedat,leave_cycle_year) values
					(vempid,vid,vvalue,current_timestamp(),@leave_cycle_year);
				else
					update lm_employeeleavebalance
					set lm_employeeleavebalance.balance = lm_employeeleavebalance.balance + vvalue,
					lm_employeeleavebalance.lastupdatedat = current_timestamp()
					where lm_employeeleavebalance.empid = vempid
					and lm_employeeleavebalance.leavetypeid = vid; 
				end if;
			 end if;
			 set @e = @e + 1;
			end while;
		CLOSE empid_cursor;
		elseif (@v <> 0) then
		set @startdate = concat(@leave_cycle_year,'-',@cm,'-','01');
		OPEN empid_cursor;
			set @empid_count = 0;
			set @empid_count = found_rows();
			set @e = 0;
			while @e < @empid_count do
			 fetch empid_cursor into vempid,vdoj;
			 if (vid <> 4) then -- leavetypes other than earned leave
				if ((select count(id) from leavecreditsmaster where leavecreditsmaster.empid = vempid and leavecreditsmaster.leavetypeid = vid
				and leavecreditsmaster.crediteddate > vdoj and leavecreditsmaster.leave_cycle_year = @leave_cycle_year) < (
					(vcredit_frequency + (case when @pm >= @cm then @pm else (12 + @pm) end) - @cm) div vcredit_frequency)) then 
					set vvalue2 = cast((cast((vvalue * (vcredit_frequency - mod((@pm - @cm), vcredit_frequency))) as decimal(5,2))/vcredit_frequency) as decimal(5,2));
					insert into lm_leavecreditsmaster(empid,leavetypeid,leavecount,crediteddate,leave_cycle_year) values
					(vempid,vid,vvalue2,current_date(),@leave_cycle_year); 
					if not exists(select * from lm_employeeleavebalance where lm_employeeleavebalance.empid = vempid 
						and lm_employeeleavebalance.leavetypeid = vid) then
						insert into lm_employeeleavebalance(empid,leavetypeid,balance,lastupdatedat,leave_cycle_year) values
						(vempid,vid,vvalue2,current_timestamp(),@leave_cycle_year);
					else
						update lm_employeeleavebalance
						set lm_employeeleavebalance.balance = lm_employeeleavebalance.balance + vvalue2,
						lm_employeeleavebalance.lastupdatedat = current_timestamp()
						where lm_employeeleavebalance.empid = vempid
						and lm_employeeleavebalance.leavetypeid = vid; 
					end if;   
				end if;
			 elseif (vid = 4 and (min_service <= (select timestampdiff(month,vdoj,curdate())))) then -- earned leave
				if ((select count(id) from leavecreditsmaster where leavecreditsmaster.empid = vempid and leavecreditsmaster.leavetypeid = vid
				and leavecreditsmaster.crediteddate > vdoj and leavecreditsmaster.leave_cycle_year = @leave_cycle_year) < (
					(vcredit_frequency + (case when @pm >= @cm then @pm else (12 + @pm) end) - @cm) div vcredit_frequency)) then 
					set vvalue2 = cast((cast((vvalue * (vcredit_frequency - mod((@pm - @cm), vcredit_frequency))) as decimal(5,2))/vcredit_frequency) as decimal(5,2));
					insert into lm_leavecreditsmaster(empid,leavetypeid,leavecount,crediteddate,leave_cycle_year) values
					(vempid,vid,vvalue2,current_date(),@leave_cycle_year); 
					if not exists(select * from lm_employeeleavebalance where lm_employeeleavebalance.empid = vempid 
						and lm_employeeleavebalance.leavetypeid = vid) then
						insert into lm_employeeleavebalance(empid,leavetypeid,balance,lastupdatedat,leave_cycle_year) values
						(vempid,vid,vvalue2,current_timestamp(),@leave_cycle_year);
					else
						update lm_employeeleavebalance
						set lm_employeeleavebalance.balance = lm_employeeleavebalance.balance + vvalue2,
						lm_employeeleavebalance.lastupdatedat = current_timestamp()
						where lm_employeeleavebalance.empid = vempid
						and lm_employeeleavebalance.leavetypeid = vid; 
					end if;   
				end if;
			 end if;
			 set @e = @e + 1;
			end while; 
		CLOSE empid_cursor;
		end if; 
	set @j = @j + 1;
		end while;

	CLOSE temp_cursor;

	drop temporary table leavesmaster;
	drop temporary table leavecreditsmaster;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `deleteholidays` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `deleteholidays`(
		in locationid int(11)
	)
	begin
		delete from holidaysmaster where id = locationid; 

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `delete_employee_attendance_regularization` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `delete_employee_attendance_regularization`(
	  `id` int(11)
	)
	begin
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			SELECT -1 AS successState;
		END;
		update employee_attendance_regularization set status = 'Deleted'
		where employee_attendance_regularization.id=`id`;
		
		select 0 as successState;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `delete_employee_investments` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `delete_employee_investments`(
		`iid` int(11)
	)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			-- SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
			select -1 as successstate;
		END; 
		delete from payroll_employee_investments where id=`iid`;
		select 0 as successstate;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `delete_files_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `delete_files_master`(
	`fid` int
	)
	begin
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			-- SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
			select -1 as successstate;
		END; 
		set @successstate = 0;
		Delete from files_master where id=`fid`;
		   
		select @successstate;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `edit_pay_group_component` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `edit_pay_group_component`(
		pigcm_id_value int,
		is_percentage_or_flat_amount_value int,
		input_value decimal(15,2),
		parent_component_id_value varchar(32),
		display_name_value varchar(255),
		is_this_component_a_part_of_employee_salary_structure_value int(1),
		calculate_on_pro_rata_basis_value int(1),
		is_this_component_taxable_value int(1),
		consider_for_esi_contribution_value int(1),
		consider_for_epf_contribution_value int(1),
		epf_always_value int(1),
		epf_only_when_pf_wage_is_less_than_standard_pf_wage_value int(1),
		show_this_component_in_payslip_value int(1),
		`status` varchar(64)
	)
	begin
	if ((pigcm_id_value is not null) and (`status` = 'Active')) then
	select payroll_income_group_components_master.group_id, payroll_income_group_components_master.component_id
		into @gp_id, @c_id
		from payroll_income_group_components_master where payroll_income_group_components_master.id = pigcm_id_value;
	SELECT `payroll_earning_components_formula_details`.`is_percentage_or_flat_amount`,
		ifnull(payroll_earning_components_formula_details.component_value,0),
		ifnull(payroll_earning_components_formula_details.parent_component_id,0)
		into @g1,@g2,@g3    
		FROM `payroll_earning_components_formula_details`
		where payroll_earning_components_formula_details.pigcm_id = pigcm_id_value;
	select is_this_component_a_part_of_employee_salary_structure,calculate_on_pro_rata_basis,is_this_component_taxable,
		consider_for_esi_contribution,consider_for_epf_contribution,show_this_component_in_payslip,display_name
		into @p1,@p2,@p3,@p4,@p5,@p6,@p7
		from payroll_income_group_components_master where payroll_income_group_components_master.id = pigcm_id_value;    
	select payroll_earning_components_epf_configs_details.epf_always, epf_only_when_pf_wage_is_less_than_standard_pf_wage
		into @e1,@e2
		from payroll_earning_components_epf_configs_details where payroll_earning_components_epf_configs_details.pigcm_id = pigcm_id_value;   
		if ((is_percentage_or_flat_amount_value <> @g1) 	or (input_value <> @g2) or
			(ifnull(parent_component_id_value,0) <> @g3) 	or (is_this_component_a_part_of_employee_salary_structure_value <> @p1) or
			(calculate_on_pro_rata_basis_value <> @p2) 		or (is_this_component_taxable_value <> @p3) or
			(consider_for_esi_contribution_value <> @p4) 	or (consider_for_epf_contribution_value <> @p5) or
			(show_this_component_in_payslip_value <> @p6)   or (epf_always_value <> @e1) or
			(epf_only_when_pf_wage_is_less_than_standard_pf_wage_value <> @e2)) then
		update payroll_income_group_components_master
			set payroll_income_group_components_master.effective_to_date = curdate(),
			payroll_income_group_components_master.status = 'Inactive'
			where payroll_income_group_components_master.id = pigcm_id_value;
		update payroll_earning_components_epf_configs_details v
			set v.effective_to_date = curdate()
			where v.pigcm_id = pigcm_id_value;
		insert into payroll_income_group_components_master(group_id,component_id,display_name,
		is_this_component_a_part_of_employee_salary_structure,calculate_on_pro_rata_basis,is_this_component_taxable,
		consider_for_esi_contribution,consider_for_epf_contribution,show_this_component_in_payslip,effective_from_date,status) values
		(@gp_id,@c_id,display_name_value,is_this_component_a_part_of_employee_salary_structure_value,calculate_on_pro_rata_basis_value,
		 is_this_component_taxable_value,consider_for_esi_contribution_value,consider_for_epf_contribution_value,
		 show_this_component_in_payslip_value,curdate(),`status`);
		set @last_insert_id = (select last_insert_id()); 
			if (@last_insert_id is not null) then
			update payroll_earning_components_formula_details
				set payroll_earning_components_formula_details.effective_to_date = curdate()
				where payroll_earning_components_formula_details.pigcm_id = pigcm_id_value;
			insert into payroll_earning_components_formula_details(pigcm_id,is_percentage_or_flat_amount,component_value,
				parent_component_id,effective_from_date) values
				(@last_insert_id,is_percentage_or_flat_amount_value,ifnull(input_value,0),ifnull(parent_component_id_value,0),curdate());
			insert into payroll_earning_components_epf_configs_details
						(pigcm_id,epf_always,epf_only_when_pf_wage_is_less_than_standard_pf_wage,effective_from_date) values
				(@last_insert_id,epf_always_value,epf_only_when_pf_wage_is_less_than_standard_pf_wage_value,curdate());        
			end if;
		elseif (display_name_value <> @p7) then  
		update payroll_income_group_components_master
		set payroll_income_group_components_master.display_name = display_name_value
		where payroll_income_group_components_master.id = pigcm_id_value;
		end if;
	elseif ((pigcm_id_value is not null) and (`status` = 'Inactive')) then    
		update payroll_income_group_components_master
			set payroll_income_group_components_master.effective_to_date = curdate(),
			payroll_income_group_components_master.status = 'Inactive'
			where payroll_income_group_components_master.id = pigcm_id_value;	
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `edit_profile` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `edit_profile`(
	employee_id int(11),
	firstname varchar(255),
	middlename varchar(255),
	lastname varchar(255),
	email varchar(255),
	contact_number varchar(15),
	address varchar(255),
	city varchar(255),
	state varchar(255),
	pincode varchar(255),
	country varchar(32)
	)
	begin
		UPDATE employee
		SET employee.firstname = case when firstname is not null then firstname else employee.firstname end,
		employee.middlename = case when middlename is not null then middlename else employee.middlename end,
		employee.lastname = case when lastname is not null then lastname else employee.lastname end,
		employee.personalemail = case when email is not null then email else employee.personalemail end,
		employee.contactnumber = case when contact_number is not null then contact_number else employee.contactnumber end,
		employee.address = case when address is not null then address else employee.address end,
		employee.city = case when city is not null then city else employee.city end,
		employee.state = case when state is not null then state else employee.state end,
		employee.pincode = case when pincode is not null then pincode else employee.pincode end,
		employee.country = case when country is not null then country else employee.country end
		where employee.id = employee_id;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `forgotpasswordcheck` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `forgotpasswordcheck`(in `phonenumber` varchar(20),in `email` varchar(1024))
	begin
		if exists(select * from employee where contactnumber=`phonenumber` and officeemail=`email`) then select 1;
		else select 0;
		end if;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getcitiesforstate` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getcitiesforstate`(in `stateid` varchar(255))
	begin
		select l.id,l.location from locationsmaster l where l.stateid=`stateid` order by l.location;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getcompanyworklocation` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getcompanyworklocation`(
	in `locationid` int(11)
	)
	begin
	/*
	set @city = '';
	set @city = (select location from locationsmaster where `locationsmaster`.`id` = (select city from companyworklocationsmaster 
																  where `companyworklocationsmaster`.`id` = id));

	set @state = (select state from statesmaster where `statesmaster`.`id` = (select state from companyworklocationsmaster
															 where `companyworklocationsmaster`.`id` = id));
															 
	set @country = (select country from countrymaster where `countrymaster`.`id` = (select country from companyworklocationsmaster
																  where `companyworklocationsmaster`.`id` = id));  
												*/            
	if (`locationid`is not null) then               
	begin                             
	select json_arrayagg(json_object(
	'id',           m.`id`,             
	'branchcode',   m.`branchcode`,
	'address1',     m.`address1`, 
	'address2',     m.`address2`, 
	'location',     m.`location`, 
	'city',         m.`city`,
	'cityname',		l.`location`,
	'state',        m.`state`, 
	'pincode',      m.`pincode`,
	'country',      m.`country`,
	'status',		m.`status`,
	'prefix',		e.`prefix`,
	'seed',			e.`seed`,
	'currentvalue',	e.`currentvalue`
	)) as json
	from companyworklocationsmaster m
	inner join employee_idgenerator e on m.id = e.companylocation
	inner join locationsmaster l on m.city = l.id
	where m.`id` = locationid;
	end;
	else
	begin
	select json_arrayagg(json_object(
	'id',           m.`id`,             
	'branchcode',   m.`branchcode`,
	'address1',     m.`address1`, 
	'address2',     m.`address2`, 
	'location',     m.`location`, 
	'city',         m.`city`,
	'cityname',		l.`location`,
	'state',        m.`state`, 
	'pincode',      m.`pincode`,
	'country',      m.`country`,
	'status',		m.`status`,
	'prefix',		e.`prefix`,
	'seed',			e.`seed`,
	'currentvalue',	e.`currentvalue`
	)) as json
	from companyworklocationsmaster m
	inner join employee_idgenerator e on m.id = e.companylocation
	inner join locationsmaster l on m.city = l.id;
	end;         
	end if;                                               
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getcompoff_calendar` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getcompoff_calendar`(
	IN `employee_id` INT(11)
	)
	BEGIN
	drop temporary table if exists leavecalendar;
	create temporary table leavecalendar (
		edate date
	);

	drop temporary table if exists holidays;
	create temporary table holidays (
		date_value date
	);

	drop temporary table if exists approved_compoffs;
	create temporary table approved_compoffs (
		codate date
	);

	drop temporary table if exists weekoffs_table;
	create temporary table weekoffs_table (
		weekoff1 int(11),
		weekoff2 int(11),
		weekoff3 int(11),
		effective_fromdate date,
		effective_todate date
	);

	set @days = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
				lm_rulemaster.rulename = 'COMPOFF_MAX_BACKDATED_DAYS_PERMITTED_FOR_SUBMISSION') order by lm_rulevalues.id desc limit 1); 

	INSERT INTO approved_compoffs(codate)
	select comp_off_date from lm_register_comp_off where status in ('Approved','Submitted','Utilized')
	and lm_register_comp_off.empid = `employee_id` 
	and lm_register_comp_off.comp_off_date >= date_sub(curdate(), interval @days day);

	insert into holidays(date_value)
	select m.date
		FROM holidaysmaster m, companyworklocationsmaster v  
		WHERE m.location = v.city 
		and v.id =(select s.locationid from employee_worklocations s where empid = `employee_id` order by id desc limit 1)
		and m.date >= date_sub(curdate(), interval @days day);
		
		insert into weekoffs_table(weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
		select weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
		from employee_weekoffs
		where employee_weekoffs.empid = employee_id; 
		
		-- assign weekoffdays to variables
		-- select weekoffday1, weekoffday2, weekoffday3 into @w1, @w2, @w3 from employee_weekoffs 
		-- where employee_weekoffs.empid = `employee_id` order by id desc limit 1;
		
		set @startdate = (select date_sub(curdate(), interval @days day));
		set @enddate = (select curdate());
		
		set @off = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_ELIGIBLE_ON_WEEKOFFS') 
					and lm_rulevalues.leavetypeid = (select lm_leavesmaster.id from lm_leavesmaster where lm_leavesmaster.leavename = 'Comp Off Leave') 
					order by lm_rulevalues.id desc limit 1);
					-- select @off;
		set @v = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_ELIGIBLE_ON_COMPANY_HOLIDAYS') 
				  and lm_rulevalues.leavetypeid = (select lm_leavesmaster.id from lm_leavesmaster where lm_leavesmaster.leavename = 'Comp Off Leave') 
					 order by lm_rulevalues.id desc limit 1);             
		while @startdate <= @enddate do
		if(@off = 1) then
			IF exists (select * from weekoffs_table where  (dayofweek(cast(@startdate as date)) IN 
					(ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))) 
					and ((weekoffs_table.effective_fromdate <= cast(@startdate as date) and cast(@startdate as date) <= weekoffs_table.effective_todate)
						or (cast(@startdate as date) >= effective_fromdate and effective_todate is null))  AND (@startdate not in (SELECT * FROM approved_compoffs))) then
			insert into leavecalendar(edate) values (@startdate);
			END IF;
		end if;
		if(@v = 1) then
			IF ((@startdate in (select * from holidays)) AND @startdate NOT IN (select * from approved_compoffs)) then
			insert into leavecalendar(edate) values (@startdate);
			end if;
		end if;    

		set @startdate = date_add(@startdate, interval 1 day);
		end while;
	select * from leavecalendar;

	drop temporary table approved_compoffs;
	drop temporary table leavecalendar;
	drop temporary table holidays;
	drop temporary table weekoffs_table;

	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getdays_to_be_disabled_for_from_date` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getdays_to_be_disabled_for_from_date`(
	IN `employee_id` INT(11),
	in `leave_id` int(11)
	)
	begin
	declare vleavetype varchar(255);
	declare vfromdate date;
	declare vtodate date;
	declare vfromhalfdayleave varchar(1);
	declare vtohalfdayleave varchar(1);    

	DECLARE temp_cursor CURSOR FOR select leavetype,date(fromdate),date(todate),fromhalfdayleave,tohalfdayleave  from lm_employeeleaves 
			where lm_employeeleaves.empid = `employee_id` 
			and case when ifnull(lm_employeeleaves.leave_cycle_year,0) <> cast('0' as unsigned) then (lm_employeeleaves.leave_cycle_year = cast(@display_year as unsigned))
				else ifnull(lm_employeeleaves.leave_cycle_year,0) = ifnull(lm_employeeleaves.leave_cycle_year,0)
			end
			and lm_employeeleaves.leavestatus in ('Submitted','Approved');

	DECLARE edit_temp_cursor CURSOR FOR select leavetype,date(fromdate),date(todate),fromhalfdayleave,tohalfdayleave  from lm_employeeleaves 
			where lm_employeeleaves.empid = `employee_id` 
			and case when ifnull(lm_employeeleaves.leave_cycle_year,0) <> cast('0' as unsigned) then (lm_employeeleaves.leave_cycle_year = cast(@display_year as unsigned))
					 else ifnull(lm_employeeleaves.leave_cycle_year,0) = ifnull(lm_employeeleaves.leave_cycle_year,0)
				end
			and lm_employeeleaves.leavestatus in ('Submitted','Approved')
			and lm_employeeleaves.id <> `leave_id`;

	set @display_year = (select fn_get_leave_cycle_year());        

	create temporary table leavecalendar (
		edate date,
		daytype varchar(32),
		first_half int(1),
		second_half int(1)
	);
	create temporary table holidays (
		date_value date
	);
	insert into holidays(date_value)
	select m.date
		FROM holidaysmaster m, companyworklocationsmaster v  
		WHERE m.location = v.city 
		and v.id =(select s.locationid from employee_worklocations s where empid = `employee_id` order by id desc limit 1)
		and m.leave_cycle_year = @display_year;
		
	create temporary table weekoffs_table (
		weekoff1 int(11),
		weekoff2 int(11),
		weekoff3 int(11),
		effective_fromdate date,
		effective_todate date
	);

	insert into weekoffs_table(weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
	select weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
	from employee_weekoffs
	where employee_weekoffs.empid = employee_id; 

	set @present_date = (select curdate());

	set @pcount = 0;

	set @pcount = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
						  lm_rulemaster.rulename = 'LEAVES_DURATION_FOR_BACKDATED_LEAVES') order by lm_rulevalues.id desc limit 1);

	set @previous_date = date_sub(@present_date, interval @pcount day);

	create temporary table attendance_table(
		attendance_date date
	);

	while @previous_date <= @present_date do
		if exists(select employee_attendance.id from employee_attendance where employee_attendance.empid = `employee_id`
				and employee_attendance.attendancedate = @previous_date) then
		insert into attendance_table(attendance_date) values(@previous_date);
		elseif exists(select employee_attendance_regularization.id from employee_attendance_regularization 
					where employee_attendance_regularization.empid = `employee_id`
					and @previous_date between fromdate and todate
					and employee_attendance_regularization.status = 'Submitted') then
		insert into attendance_table(attendance_date) values(@previous_date);
		end if;              
		set @previous_date = date_add(@previous_date, interval 1 day);
	end while;
		
	set @start_month = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
					   select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
					   lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));
	set @startdate = concat(@display_year,'-',@start_month,'-01');
	if(@start_month = 1) then
		set @end_month = 12;
		set @enddate = concat(@display_year,'-',@end_month,'-01');
		set @enddate = (select last_day(@enddate));
		elseif (@start_month <> 1) then
		set @end_month = @start_month - 1;
		set @enddate = concat((@display_year + 1),'-',@end_month,'-01');
		set @enddate = (select last_day(@enddate));
		end if;

	while @startdate <= @enddate do
		IF exists (select * from weekoffs_table where  (dayofweek(cast(@startdate as date)) IN 
					(ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))) 
					and ((weekoffs_table.effective_fromdate <= cast(@startdate as date) and cast(@startdate as date) <= weekoffs_table.effective_todate)
						or (cast(@startdate as date) >= effective_fromdate and effective_todate is null)) ) then
		insert into leavecalendar(edate,daytype,first_half,second_half) values (@startdate,'weekoff',1,1);
		END IF;
		IF @startdate in (select * from holidays) then
		insert into leavecalendar(edate,daytype,first_half,second_half) values (@startdate,'holiday',1,1);
		end if;
		if @startdate in (select * from attendance_table) then
		insert into leavecalendar(edate,daytype,first_half,second_half) values (@startdate,'Present',1,1);
		end if;
		/*if (@startdate in (select lm_employeeleaves.todate from lm_employeeleaves where lm_employeeleaves.empid = `employee_id` and year(lm_employeeleaves.todate) = `display_year`
		and lm_employeeleaves.tohalfdayleave = 1 and lm_employeeleaves.leavestatus in ('submitted','approved'))) then
		insert into leavecalendar(edate,half) values (@startdate,1);
		end if;*/
		IF(`leave_id` is null) then
		OPEN temp_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		SET vleavetype = '';
		SET vfromhalfdayleave = '';
		set vtohalfdayleave = '';
		fetch temp_cursor into vleavetype,vfromdate,vtodate,vfromhalfdayleave,vtohalfdayleave;
		if (vfromdate <> vtodate) then
			if (@startdate = vfromdate) then
				if (vfromhalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',0,vfromhalfdayleave);
					else 
						update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vfromhalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			elseif ((@startdate > vfromdate) and (@startdate < vtodate)) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vtodate) then
				if (vtohalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',vtohalfdayleave,0);
					else
						update leavecalendar set leavecalendar.first_half = vtohalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vtohalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			end if;
		elseif (vfromdate = vtodate) then
			if (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 0) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 1) and (vfromhalfdayleave = 0) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,0);
				else
					update leavecalendar set leavecalendar.first_half = vtohalfdayleave
					where leavecalendar.edate = @startdate;
				end if;        
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 1) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',0,1);
				else 
					update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
					where leavecalendar.edate = @startdate;
				end if;    
			elseif (@startdate = vfromdate) and (vfromhalfdayleave = 1) and (vtohalfdayleave = 1) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			end if;
		end if;
		
		set @j = @j + 1;
		end while;
		close temp_cursor;
		elseif (`leave_id` is not null) then -- for edit (the days of leave edited are not included in the table)
		OPEN edit_temp_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		SET vleavetype = '';
		SET vfromhalfdayleave = '';
		set vtohalfdayleave = '';
		fetch edit_temp_cursor into vleavetype,vfromdate,vtodate,vfromhalfdayleave,vtohalfdayleave;
		if (vfromdate <> vtodate) then
			if (@startdate = vfromdate) then
				if (vfromhalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',0,vfromhalfdayleave);
					else 
						update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vfromhalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			elseif ((@startdate > vfromdate) and (@startdate < vtodate)) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vtodate) then
				if (vtohalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',vtohalfdayleave,0);
					else
						update leavecalendar set leavecalendar.first_half = vtohalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vtohalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			end if;
		elseif (vfromdate = vtodate) then
			if (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 0) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 1) and (vfromhalfdayleave = 0) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,0);
				else
					update leavecalendar set leavecalendar.first_half = vtohalfdayleave
					where leavecalendar.edate = @startdate;
				end if;        
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 1) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',0,1);
				else 
					update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
					where leavecalendar.edate = @startdate;
				end if;    
			elseif (@startdate = vfromdate) and (vfromhalfdayleave = 1) and (vtohalfdayleave = 1) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			end if;
		end if;
		
		set @j = @j + 1;
		end while;
		close edit_temp_cursor;
		end if;

	set @startdate = date_add(@startdate, interval 1 day);
	end while;
	select * from leavecalendar;

	drop temporary table leavecalendar;
	drop temporary table holidays;
	drop temporary table weekoffs_table;
	drop temporary table attendance_table;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getdays_to_be_disabled_for_from_date_comp_off` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `getdays_to_be_disabled_for_from_date_comp_off`(
	IN `employee_id` INT(11),
	in `leave_id` int(11),
	in `worked_date_value` date
	)
	begin
	declare vleavetype varchar(255);
	declare vfromdate date;
	declare vtodate date;
	declare vfromhalfdayleave varchar(1);
	declare vtohalfdayleave varchar(1);    

	DECLARE temp_cursor CURSOR FOR select leavetype,date(fromdate),date(todate),fromhalfdayleave,tohalfdayleave  from lm_employeeleaves 
			where lm_employeeleaves.empid = `employee_id` 
			and (lm_employeeleaves.fromdate between @startdate and @enddate or
				 lm_employeeleaves.todate between @startdate and @enddate or
				 @startdate between lm_employeeleaves.fromdate and lm_employeeleaves.todate)
			and lm_employeeleaves.leavestatus in ('Submitted','Approved');

	DECLARE edit_temp_cursor CURSOR FOR select leavetype,date(fromdate),date(todate),fromhalfdayleave,tohalfdayleave  from lm_employeeleaves 
			where lm_employeeleaves.empid = `employee_id` 
			and (lm_employeeleaves.fromdate between @startdate and @enddate or
				 lm_employeeleaves.todate between @startdate and @enddate or
				 @startdate between lm_employeeleaves.fromdate and lm_employeeleaves.todate)
			and lm_employeeleaves.leavestatus in ('Submitted','Approved')
			and lm_employeeleaves.id <> `leave_id`;

	set @days = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
			   lm_rulemaster.rulename = 'COMPOFF_THRESHOLD_DAYS_TO_LAPSE_OR_CONVERT_LEAVES_TO_PERKS') order by lm_rulevalues.id desc limit 1);
	set @days = @days + 1; -- (+1)to exclude date on which employee worked           
			   
	set @vdate = date_add(`worked_date_value`, interval @days day);           

	drop temporary table if exists leavecalendar;
	create temporary table leavecalendar (
		edate date,
		daytype varchar(32),
		first_half int(1),
		second_half int(1)
	);
	drop temporary table if exists holidays;
	create temporary table holidays (
		date_value date
	);
	insert into holidays(date_value)
	select m.date
		FROM holidaysmaster m, companyworklocationsmaster v  
		WHERE m.location = v.city 
		and v.id =(select s.locationid from employee_worklocations s where empid = `employee_id` order by id desc limit 1)
		and m.date between @startdate and @enddate;

	drop temporary table if exists weekoffs_table;    
	create temporary table weekoffs_table (
		weekoff1 int(11),
		weekoff2 int(11),
		weekoff3 int(11),
		effective_fromdate date,
		effective_todate date
	);

	insert into weekoffs_table(weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
	select weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
	from employee_weekoffs
	where employee_weekoffs.empid = employee_id; 

	set @present_date = (select curdate());

	set @pcount = 0;

	set @pcount = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
						  lm_rulemaster.rulename = 'LEAVES_DURATION_FOR_BACKDATED_LEAVES') order by lm_rulevalues.id desc limit 1);

	set @previous_date = date_sub(@present_date, interval @pcount day);

	drop temporary table if exists attendance_table;
	create temporary table attendance_table(
		attendance_date date
	);

	while @previous_date <= @present_date do
		if exists(select employee_attendance.id from employee_attendance where employee_attendance.empid = `employee_id`
				and employee_attendance.attendancedate = @previous_date) then
		insert into attendance_table(attendance_date) values(@previous_date);
		elseif exists(select employee_attendance_regularization.id from employee_attendance_regularization 
					where employee_attendance_regularization.empid = `employee_id`
					and @previous_date between fromdate and todate
					and employee_attendance_regularization.status = 'Submitted') then
		insert into attendance_table(attendance_date) values(@previous_date);
		end if;              
		set @previous_date = date_add(@previous_date, interval 1 day);
	end while;
		
	set @startdate = date_add(`worked_date_value`, interval 1 day);
	set @enddate = @vdate;

	while @startdate <= @enddate do
		IF exists (select * from weekoffs_table where  (dayofweek(cast(@startdate as date)) IN 
					(ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))) 
					and ((weekoffs_table.effective_fromdate <= cast(@startdate as date) and cast(@startdate as date) <= weekoffs_table.effective_todate)
						or (cast(@startdate as date) >= effective_fromdate and effective_todate is null)) ) then
		insert into leavecalendar(edate,daytype,first_half,second_half) values (@startdate,'weekoff',1,1);
		END IF;
		IF @startdate in (select * from holidays) then
		insert into leavecalendar(edate,daytype,first_half,second_half) values (@startdate,'holiday',1,1);
		end if;
		if @startdate in (select * from attendance_table) then
		insert into leavecalendar(edate,daytype,first_half,second_half) values (@startdate,'Present',1,1);
		end if;
		/*if (@startdate in (select lm_employeeleaves.todate from lm_employeeleaves where lm_employeeleaves.empid = `employee_id` and year(lm_employeeleaves.todate) = `display_year`
		and lm_employeeleaves.tohalfdayleave = 1 and lm_employeeleaves.leavestatus in ('submitted','approved'))) then
		insert into leavecalendar(edate,half) values (@startdate,1);
		end if;*/
		IF(`leave_id` is null) then
		OPEN temp_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		SET vleavetype = '';
		SET vfromhalfdayleave = '';
		set vtohalfdayleave = '';
		fetch temp_cursor into vleavetype,vfromdate,vtodate,vfromhalfdayleave,vtohalfdayleave;
		if (vfromdate <> vtodate) then
			if (@startdate = vfromdate) then
				if (vfromhalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',0,vfromhalfdayleave);
					else 
						update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vfromhalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			elseif ((@startdate > vfromdate) and (@startdate < vtodate)) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vtodate) then
				if (vtohalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',vtohalfdayleave,0);
					else
						update leavecalendar set leavecalendar.first_half = vtohalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vtohalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			end if;
		elseif (vfromdate = vtodate) then
			if (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 0) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 1) and (vfromhalfdayleave = 0) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,0);
				else
					update leavecalendar set leavecalendar.first_half = vtohalfdayleave
					where leavecalendar.edate = @startdate;
				end if;        
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 1) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',0,1);
				else 
					update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
					where leavecalendar.edate = @startdate;
				end if;    
			elseif (@startdate = vfromdate) and (vfromhalfdayleave = 1) and (vtohalfdayleave = 1) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			end if;
		end if;
		
		set @j = @j + 1;
		end while;
		close temp_cursor;
		elseif (`leave_id` is not null) then -- for edit (the days of leave edited are not included in the table)
		OPEN edit_temp_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		SET vleavetype = '';
		SET vfromhalfdayleave = '';
		set vtohalfdayleave = '';
		fetch edit_temp_cursor into vleavetype,vfromdate,vtodate,vfromhalfdayleave,vtohalfdayleave;
		if (vfromdate <> vtodate) then
			if (@startdate = vfromdate) then
				if (vfromhalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',0,vfromhalfdayleave);
					else 
						update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vfromhalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			elseif ((@startdate > vfromdate) and (@startdate < vtodate)) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vtodate) then
				if (vtohalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',vtohalfdayleave,0);
					else
						update leavecalendar set leavecalendar.first_half = vtohalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vtohalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			end if;
		elseif (vfromdate = vtodate) then
			if (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 0) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 1) and (vfromhalfdayleave = 0) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,0);
				else
					update leavecalendar set leavecalendar.first_half = vtohalfdayleave
					where leavecalendar.edate = @startdate;
				end if;        
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 1) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',0,1);
				else 
					update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
					where leavecalendar.edate = @startdate;
				end if;    
			elseif (@startdate = vfromdate) and (vfromhalfdayleave = 1) and (vtohalfdayleave = 1) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			end if;
		end if;
		
		set @j = @j + 1;
		end while;
		close edit_temp_cursor;
		end if;

	set @startdate = date_add(@startdate, interval 1 day);
	end while;

	select * from leavecalendar;

	drop temporary table leavecalendar;
	drop temporary table holidays;
	drop temporary table weekoffs_table;
	drop temporary table attendance_table;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getdays_to_be_disabled_for_to_date` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getdays_to_be_disabled_for_to_date`(
	IN `employee_id` INT(11),
	in `leave_id` int(11)
	)
	begin
	declare vleavetype varchar(255);
	declare vfromdate date;
	declare vtodate date;
	declare vfromhalfdayleave varchar(1);
	declare vtohalfdayleave varchar(1);    

	DECLARE temp_cursor CURSOR FOR select leavetype,date(fromdate),date(todate),fromhalfdayleave,tohalfdayleave  from lm_employeeleaves 
			where lm_employeeleaves.empid = `employee_id` 
			and case when ifnull(lm_employeeleaves.leave_cycle_year,0) <> cast('0' as unsigned) then (lm_employeeleaves.leave_cycle_year = cast(@display_year as unsigned))
				else ifnull(lm_employeeleaves.leave_cycle_year,0) = ifnull(lm_employeeleaves.leave_cycle_year,0)
			end
			and lm_employeeleaves.leavestatus in ('Submitted','Approved');

	DECLARE edit_temp_cursor CURSOR FOR select leavetype,date(fromdate),date(todate),fromhalfdayleave,tohalfdayleave  from lm_employeeleaves 
			where lm_employeeleaves.empid = `employee_id` 
			and case when ifnull(lm_employeeleaves.leave_cycle_year,0) <> cast('0' as unsigned) then (lm_employeeleaves.leave_cycle_year = cast(@display_year as unsigned))
					 else ifnull(lm_employeeleaves.leave_cycle_year,0) = ifnull(lm_employeeleaves.leave_cycle_year,0)
				end
			and lm_employeeleaves.leavestatus in ('Submitted','Approved')
			and lm_employeeleaves.id <> `leave_id`;

	set @display_year = (select fn_get_leave_cycle_year());        

	create temporary table leavecalendar (
		edate date,
		daytype varchar(32),
		first_half int(1),
		second_half int(1)
	);
	create temporary table holidays (
		date_value date
	);
	insert into holidays(date_value)
	select m.date
		FROM holidaysmaster m, companyworklocationsmaster v  
		WHERE m.location = v.city 
		and v.id =(select s.locationid from employee_worklocations s where empid = `employee_id` order by id desc limit 1)
		and m.leave_cycle_year = @display_year;
		
	create temporary table weekoffs_table (
		weekoff1 int(11),
		weekoff2 int(11),
		weekoff3 int(11),
		effective_fromdate date,
		effective_todate date
	);

	insert into weekoffs_table(weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
	select weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
	from employee_weekoffs
	where employee_weekoffs.empid = employee_id; 

	set @present_date = (select curdate());

	set @pcount = 0;

	set @pcount = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
						  lm_rulemaster.rulename = 'LEAVES_DURATION_FOR_BACKDATED_LEAVES') order by lm_rulevalues.id desc limit 1);

	set @previous_date = date_sub(@present_date, interval @pcount day);

	create temporary table attendance_table(
		attendance_date date
	);

	while @previous_date <= @present_date do
		if exists(select employee_attendance.id from employee_attendance where employee_attendance.empid = `employee_id`
				and employee_attendance.attendancedate = @previous_date) then
		insert into attendance_table(attendance_date) values(@previous_date);
		elseif exists(select employee_attendance_regularization.id from employee_attendance_regularization 
					where employee_attendance_regularization.empid = `employee_id`
					and @previous_date between fromdate and todate
					and employee_attendance_regularization.status = 'Submitted') then
		insert into attendance_table(attendance_date) values(@previous_date);
		end if;              
		set @previous_date = date_add(@previous_date, interval 1 day);
	end while;
		
	set @start_month = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
					   select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
					   lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));
	set @startdate = concat(@display_year,'-',@start_month,'-01');
	if(@start_month = 1) then
		set @end_month = 12;
		set @enddate = concat(@display_year,'-',@end_month,'-01');
		set @enddate = (select last_day(@enddate));
		elseif (@start_month <> 1) then
		set @end_month = @start_month - 1;
		set @enddate = concat((@display_year + 1),'-',@end_month,'-01');
		set @enddate = (select last_day(@enddate));
		end if;

	while @startdate <= @enddate do
		IF exists (select * from weekoffs_table where  (dayofweek(cast(@startdate as date)) IN 
					(ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))) 
					and ((weekoffs_table.effective_fromdate <= cast(@startdate as date) and cast(@startdate as date) <= weekoffs_table.effective_todate)
						or (cast(@startdate as date) >= effective_fromdate and effective_todate is null)) ) then
		insert into leavecalendar(edate,daytype,first_half,second_half) values (@startdate,'weekoff',1,1);
		END IF;
		IF @startdate in (select * from holidays) then
		insert into leavecalendar(edate,daytype,first_half,second_half) values (@startdate,'holiday',1,1);
		end if;
		if @startdate in (select * from attendance_table) then
		insert into leavecalendar(edate,daytype,first_half,second_half) values (@startdate,'Present',1,1);
		end if;
		/*if (@startdate in (select lm_employeeleaves.todate from lm_employeeleaves where lm_employeeleaves.empid = `employee_id` and year(lm_employeeleaves.todate) = `display_year`
		and lm_employeeleaves.tohalfdayleave = 1 and lm_employeeleaves.leavestatus in ('submitted','approved'))) then
		insert into leavecalendar(edate,half) values (@startdate,1);
		end if;*/
		IF(`leave_id` is null) then
		OPEN temp_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		SET vleavetype = '';
		SET vfromhalfdayleave = '';
		set vtohalfdayleave = '';
		fetch temp_cursor into vleavetype,vfromdate,vtodate,vfromhalfdayleave,vtohalfdayleave;
		if (vfromdate <> vtodate) then
			if (@startdate = vfromdate) then
				if (vfromhalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',0,vfromhalfdayleave);
					else 
						update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vfromhalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			elseif ((@startdate > vfromdate) and (@startdate < vtodate)) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vtodate) then
				if (vtohalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',vtohalfdayleave,0);
					else
						update leavecalendar set leavecalendar.first_half = vtohalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vtohalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			end if;
		elseif (vfromdate = vtodate) then
			if (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 0) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 1) and (vfromhalfdayleave = 0) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,0);
				else
					update leavecalendar set leavecalendar.first_half = vtohalfdayleave
					where leavecalendar.edate = @startdate;
				end if;        
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 1) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',0,1);
				else 
					update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
					where leavecalendar.edate = @startdate;
				end if;    
			elseif (@startdate = vfromdate) and (vfromhalfdayleave = 1) and (vtohalfdayleave = 1) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			end if;
		end if;
		
		set @j = @j + 1;
		end while;
		close temp_cursor;
		elseif (`leave_id` is not null) then -- for edit (the days of leave edited are not included in the table)
		OPEN edit_temp_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		SET vleavetype = '';
		SET vfromhalfdayleave = '';
		set vtohalfdayleave = '';
		fetch edit_temp_cursor into vleavetype,vfromdate,vtodate,vfromhalfdayleave,vtohalfdayleave;
		if (vfromdate <> vtodate) then
			if (@startdate = vfromdate) then
				if (vfromhalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',0,vfromhalfdayleave);
					else 
						update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vfromhalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			elseif ((@startdate > vfromdate) and (@startdate < vtodate)) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vtodate) then
				if (vtohalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',vtohalfdayleave,0);
					else
						update leavecalendar set leavecalendar.first_half = vtohalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vtohalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			end if;
		elseif (vfromdate = vtodate) then
			if (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 0) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 1) and (vfromhalfdayleave = 0) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,0);
				else
					update leavecalendar set leavecalendar.first_half = vtohalfdayleave
					where leavecalendar.edate = @startdate;
				end if;        
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 1) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',0,1);
				else 
					update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
					where leavecalendar.edate = @startdate;
				end if;    
			elseif (@startdate = vfromdate) and (vfromhalfdayleave = 1) and (vtohalfdayleave = 1) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			end if;
		end if;
		
		set @j = @j + 1;
		end while;
		close edit_temp_cursor;
		end if;

	set @startdate = date_add(@startdate, interval 1 day);
	end while;
	select * from leavecalendar;

	drop temporary table leavecalendar;
	drop temporary table holidays;
	drop temporary table weekoffs_table;
	drop temporary table attendance_table;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getdays_to_be_disabled_for_to_date_comp_off` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `getdays_to_be_disabled_for_to_date_comp_off`(
	IN `employee_id` INT(11),
	in `leave_id` int(11),
	in `worked_date_value` date
	)
	begin
	declare vleavetype varchar(255);
	declare vfromdate date;
	declare vtodate date;
	declare vfromhalfdayleave varchar(1);
	declare vtohalfdayleave varchar(1);    

	DECLARE temp_cursor CURSOR FOR select leavetype,date(fromdate),date(todate),fromhalfdayleave,tohalfdayleave  from lm_employeeleaves 
			where lm_employeeleaves.empid = `employee_id` 
			and (lm_employeeleaves.fromdate between @startdate and @enddate or
				 lm_employeeleaves.todate between @startdate and @enddate or
				 @startdate between lm_employeeleaves.fromdate and lm_employeeleaves.todate)
			and lm_employeeleaves.leavestatus in ('Submitted','Approved');

	DECLARE edit_temp_cursor CURSOR FOR select leavetype,date(fromdate),date(todate),fromhalfdayleave,tohalfdayleave  from lm_employeeleaves 
			where lm_employeeleaves.empid = `employee_id` 
			and (lm_employeeleaves.fromdate between @startdate and @enddate or
				 lm_employeeleaves.todate between @startdate and @enddate or
				 @startdate between lm_employeeleaves.fromdate and lm_employeeleaves.todate)
			and lm_employeeleaves.leavestatus in ('Submitted','Approved')
			and lm_employeeleaves.id <> `leave_id`;

	set @days = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
			   lm_rulemaster.rulename = 'COMPOFF_THRESHOLD_DAYS_TO_LAPSE_OR_CONVERT_LEAVES_TO_PERKS') order by lm_rulevalues.id desc limit 1);
	set @days = @days + 1; -- (+1)to exclude date on which employee worked           
			   
	set @vdate = date_add(`worked_date_value`, interval @days day);           

	drop temporary table if exists leavecalendar;
	create temporary table leavecalendar (
		edate date,
		daytype varchar(32),
		first_half int(1),
		second_half int(1)
	);
	drop temporary table if exists holidays;
	create temporary table holidays (
		date_value date
	);
	insert into holidays(date_value)
	select m.date
		FROM holidaysmaster m, companyworklocationsmaster v  
		WHERE m.location = v.city 
		and v.id =(select s.locationid from employee_worklocations s where empid = `employee_id` order by id desc limit 1)
		and m.date between @startdate and @enddate;

	drop temporary table if exists weekoffs_table;    
	create temporary table weekoffs_table (
		weekoff1 int(11),
		weekoff2 int(11),
		weekoff3 int(11),
		effective_fromdate date,
		effective_todate date
	);

	insert into weekoffs_table(weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
	select weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
	from employee_weekoffs
	where employee_weekoffs.empid = employee_id; 

	set @present_date = (select curdate());

	set @pcount = 0;

	set @pcount = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
						  lm_rulemaster.rulename = 'LEAVES_DURATION_FOR_BACKDATED_LEAVES') order by lm_rulevalues.id desc limit 1);

	set @previous_date = date_sub(@present_date, interval @pcount day);

	drop temporary table if exists attendance_table;
	create temporary table attendance_table(
		attendance_date date
	);

	while @previous_date <= @present_date do
		if exists(select employee_attendance.id from employee_attendance where employee_attendance.empid = `employee_id`
				and employee_attendance.attendancedate = @previous_date) then
		insert into attendance_table(attendance_date) values(@previous_date);
		elseif exists(select employee_attendance_regularization.id from employee_attendance_regularization 
					where employee_attendance_regularization.empid = `employee_id`
					and @previous_date between fromdate and todate
					and employee_attendance_regularization.status = 'Submitted') then
		insert into attendance_table(attendance_date) values(@previous_date);
		end if;              
		set @previous_date = date_add(@previous_date, interval 1 day);
	end while;
		
	set @startdate = date_add(`worked_date_value`, interval 1 day);
	set @enddate = @vdate;

	while @startdate <= @enddate do
		IF exists (select * from weekoffs_table where  (dayofweek(cast(@startdate as date)) IN 
					(ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))) 
					and ((weekoffs_table.effective_fromdate <= cast(@startdate as date) and cast(@startdate as date) <= weekoffs_table.effective_todate)
						or (cast(@startdate as date) >= effective_fromdate and effective_todate is null)) ) then
		insert into leavecalendar(edate,daytype,first_half,second_half) values (@startdate,'weekoff',1,1);
		END IF;
		IF @startdate in (select * from holidays) then
		insert into leavecalendar(edate,daytype,first_half,second_half) values (@startdate,'holiday',1,1);
		end if;
		if @startdate in (select * from attendance_table) then
		insert into leavecalendar(edate,daytype,first_half,second_half) values (@startdate,'Present',1,1);
		end if;
		/*if (@startdate in (select lm_employeeleaves.todate from lm_employeeleaves where lm_employeeleaves.empid = `employee_id` and year(lm_employeeleaves.todate) = `display_year`
		and lm_employeeleaves.tohalfdayleave = 1 and lm_employeeleaves.leavestatus in ('submitted','approved'))) then
		insert into leavecalendar(edate,half) values (@startdate,1);
		end if;*/
		IF(`leave_id` is null) then
		OPEN temp_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		SET vleavetype = '';
		SET vfromhalfdayleave = '';
		set vtohalfdayleave = '';
		fetch temp_cursor into vleavetype,vfromdate,vtodate,vfromhalfdayleave,vtohalfdayleave;
		if (vfromdate <> vtodate) then
			if (@startdate = vfromdate) then
				if (vfromhalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',0,vfromhalfdayleave);
					else 
						update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vfromhalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			elseif ((@startdate > vfromdate) and (@startdate < vtodate)) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vtodate) then
				if (vtohalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',vtohalfdayleave,0);
					else
						update leavecalendar set leavecalendar.first_half = vtohalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vtohalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			end if;
		elseif (vfromdate = vtodate) then
			if (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 0) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 1) and (vfromhalfdayleave = 0) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,0);
				else
					update leavecalendar set leavecalendar.first_half = vtohalfdayleave
					where leavecalendar.edate = @startdate;
				end if;        
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 1) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',0,1);
				else 
					update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
					where leavecalendar.edate = @startdate;
				end if;    
			elseif (@startdate = vfromdate) and (vfromhalfdayleave = 1) and (vtohalfdayleave = 1) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			end if;
		end if;
		
		set @j = @j + 1;
		end while;
		close temp_cursor;
		elseif (`leave_id` is not null) then -- for edit (the days of leave edited are not included in the table)
		OPEN edit_temp_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		SET vleavetype = '';
		SET vfromhalfdayleave = '';
		set vtohalfdayleave = '';
		fetch edit_temp_cursor into vleavetype,vfromdate,vtodate,vfromhalfdayleave,vtohalfdayleave;
		if (vfromdate <> vtodate) then
			if (@startdate = vfromdate) then
				if (vfromhalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',0,vfromhalfdayleave);
					else 
						update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vfromhalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			elseif ((@startdate > vfromdate) and (@startdate < vtodate)) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vtodate) then
				if (vtohalfdayleave = 1) then
					if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
						insert into leavecalendar(edate,daytype,first_half,second_half) values
						(@startdate,'leave',vtohalfdayleave,0);
					else
						update leavecalendar set leavecalendar.first_half = vtohalfdayleave
						where leavecalendar.edate = @startdate;
					end if;
				elseif (vtohalfdayleave = 0) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,1);
				end if;
			end if;
		elseif (vfromdate = vtodate) then
			if (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 0) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 1) and (vfromhalfdayleave = 0) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',1,0);
				else
					update leavecalendar set leavecalendar.first_half = vtohalfdayleave
					where leavecalendar.edate = @startdate;
				end if;        
			elseif (@startdate = vfromdate) and (vtohalfdayleave = 0) and (vfromhalfdayleave = 1) then
				if not exists(select leavecalendar.edate from leavecalendar where leavecalendar.edate = @startdate) then
					insert into leavecalendar(edate,daytype,first_half,second_half) values
					(@startdate,'leave',0,1);
				else 
					update leavecalendar set leavecalendar.second_half = vfromhalfdayleave
					where leavecalendar.edate = @startdate;
				end if;    
			elseif (@startdate = vfromdate) and (vfromhalfdayleave = 1) and (vtohalfdayleave = 1) then
				insert into leavecalendar(edate,daytype,first_half,second_half) values
				(@startdate,'leave',1,1);
			end if;
		end if;
		
		set @j = @j + 1;
		end while;
		close edit_temp_cursor;
		end if;

	set @startdate = date_add(@startdate, interval 1 day);
	end while;

	select * from leavecalendar;

	drop temporary table leavecalendar;
	drop temporary table holidays;
	drop temporary table weekoffs_table;
	drop temporary table attendance_table;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getdurationforbackdatedleave` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getdurationforbackdatedleave`()
	begin
	SELECT lm_rulevalues.value
	FROM lm_rulemaster, lm_rulevalues
	where lm_rulemaster.id = lm_rulevalues.ruleid
	and lm_rulemaster.rulename = ('LEAVES_DURATION_FOR_BACKDATED_LEAVES') order by lm_rulevalues.id desc limit 1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getemployeeholidays` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getemployeeholidays`(
	in `employee_id` int(11)
	)
	BEGIN
		SELECT m.date,m.day,m.description,v.id
		FROM holidaysmaster m, companyworklocationsmaster v  
		WHERE m.location = v.city 
		and v.id =(select s.locationid from employee_worklocations s where empid = `employee_id` order by id desc limit 1)
		and m.leave_cycle_year = (select fn_get_leave_cycle_year())
		and m.date >= (select curdate())
		order by m.date limit 5;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getemployeeinformation` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `getemployeeinformation`(in eid int(11))
	begin

SET @eid = eid; -- (select id from employee where officeemail=`email`);

set @rmid = (select reportingmanagerid from employee_reportingmanagers where empid=@eid and effectiveenddate is null);
set @is_super_admin=false;
if exists(select er.employee_id from employee_roles er where er.role_id in (4) and er.employee_id=@eid)then
set @is_super_admin=true;
end if;
SET @roles_json = (select json_arrayagg(json_object(
'id',				`employee_roles`.`id`,
'employee_id',		`employee_roles`.`employee_id`,
'role_id',			`employee_roles`.`role_id`,
'role_name', 		`rolesmaster`.`name`,
-- 'rmid',				`employee_roles`.`rmid`,
'rmid',				@rmid,
-- `employee_reportingmanagers`.`reportingmanagerid`,
'rm_name',			(select concat(firstname, ' ',lastname) from employee where id=@rmid)
))
FROM employee_roles, employee, rolesmaster
WHERE -- employee_roles.rmid = employee.id and
rolesmaster.id = employee_roles.role_id
and employee_roles.employee_id = @eid);
/*
SET @rm = (select concat(s.firstname,' ',s.lastname) as manager_name 
		  from employee s, employee_reportingmanagers m 
          where s.id = m.reportingmanagerid
          and m.effectivestartdate = (select max(effectivestartdate) from employee_reportingmanagers where empid = @eid));
set @rm_id = (select s.id   
		     from employee s, employee_reportingmanagers m 
             where s.id = m.reportingmanagerid
             and m.effectivestartdate = (select max(effectivestartdate) from employee_reportingmanagers where empid = @eid));     */     

set @firstlogin = (select firstlogin from employee_login where id=@eid order by lastpasswordchangedate desc limit 1);
set @deptid = (select departmentid from employee_departments where empid=@eid and effectiveenddate is null);
set @deptname = (select deptname from departmentsmaster where id=@deptid);

SELECT convert(replace(replace(replace(replace(json_arrayagg(json_object(
'id',				e.id,
'empid',			e.empid,
'firstname', 		e.firstname, 
'middlename', 		e.middlename, 
'lastname',			e.lastname,
'contactnumber',	e.contactnumber,
'personalemail',	e.personalemail,
'officeemail', 		e.officeemail, 
'userid',           (select l.login from employee_login l  where l.id=@eid order by l.lastpasswordchangedate desc limit 1),
'firstlogin',		@firstlogin,
'maritalstatus',	(select maritalstatus from maritalstatusmaster where id=e.maritalstatus),
'gender',			(select gender from gendermaster where id=e.gender),
'deptid',			@deptid,
'deptname',			@deptname,
'worklocation',		(select city from companyworklocationsmaster where id =(select locationid from employee_worklocations where empid=e.id order by effectivefromdate desc limit 1)),
'dateofjoin',		date(e.dateofjoin),
'is_super_admin', @is_super_admin,
'roles',			@roles_json 
)),'"[','['),']"',']'),'\\\"','"'),'\"','"') using utf8) as result
FROM employee e
WHERE e.id = @eid and status=1;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getemployeemaster` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getemployeemaster`(
	in `id` int(11)
	)
	begin
		set @financials_id = 		(select employee_financials_master.id from employee_financials_master where employee_financials_master.empid = id);
		set @bankname = 			(select `employee_financials_master`.`bankname` from employee_financials_master where employee_financials_master.empid = id);
		set @ifsccode = 			(select `employee_financials_master`.`ifsccode` from employee_financials_master where employee_financials_master.empid = id);
		set @nameasperbankaccount = (select `employee_financials_master`.`nameasperbankaccount` from employee_financials_master where employee_financials_master.empid = id);
		set @branchname = 			(select `employee_financials_master`.`branchname` from employee_financials_master where employee_financials_master.empid = id);
		set @bankaccountnumber = 	(select `employee_financials_master`.`bankaccountnumber` from employee_financials_master where employee_financials_master.empid = id);
		set @uanumber = (select `employee_financials_master`.`uanumber` from employee_financials_master where employee_financials_master.empid = id);
		set @pfaccountnumber = (select `employee_financials_master`.`pfaccountnumber` from employee_financials_master where employee_financials_master.empid = id);
		set @pan = (select `employee_financials_master`.`pan` from employee_financials_master where employee_financials_master.empid = id);	
		set @esi = (select `employee_financials_master`.`esi` from employee_financials_master where employee_financials_master.empid = id);
		set @dept = (select departmentid from employee_departments where effectiveenddate is null and empid= id);
		set @p_date = (select current_timestamp());
		set @shift = (select shiftid from employee_shift_details where employee_shift_details.empid = id and
					  cast(@p_date as datetime) between employee_shift_details.fromdate and employee_shift_details.todate  );
					  
		set @worklocation = (select locationid from employee_worklocations where empid = `id` order by effectivefromdate desc limit 1);   
		SET @role = (select (select json_arrayagg(json_object('id',role_id,'name', rm.name)) from employee_roles er
         inner join rolesmaster rm on rm.id=er.role_id where 
          er.employee_id =`id` and er.effective_to_date is null and
   				 role_id in (select rolesmaster.id from rolesmaster where rolesmaster.isEditable=0)));
					 
		SET @rm = (SELECT reportingmanagerid FROM employee_reportingmanagers WHERE empid = `id` order by employee_reportingmanagers.id desc limit 1);             
		
		set @d = (select employee_designations.designationid from employee_designations where employee_designations.empid = `id` order by employee_designations.id desc limit 1);
		
		set @experience_json = (select json_arrayagg(json_object(
		'id',          `id`,
		'empid',       `empid`,
		'companyname', `companyname`,
		'skills',      `skills`,
		'fromdate',    `fromdate`,
		'todate',      `todate`           
		))
		from employee_experience_details
		where employee_experience_details.empid = id);
		
		set @relations_json = (select json_arrayagg(json_object(
		'id',              				`id`,
		'empid',           				`empid`,
		'firstname',       				`firstname`,
		'lastname',        				`lastname`,
		'gender',          				`gender`,
		'contactnumber',   				`contactnumber`,
		'dateofbirth',     				`dateofbirth`,
		'relationship',    				`relationship`,
		'status',          				`status`,
		'bereavement_leave_utilized',	`bereavement_leave_utilized`,
		'utilized_leave_id',			`utilized_leave_id`
		))
		from employee_relations
		where employee_relations.empid = id
		);
		
		set @education_json = (select json_arrayagg(json_object(
		'id',            `id`,
		'empid',         `empid`,
		'course', 		 `course`,
		'institutename', `institutename`,
		'fromdate',      `fromdate`,
		'todate',        `todate`      
		))
		from employee_education_details
		where employee_education_details.empid = id
		);
		
		select json_arrayagg(json_object(
		'id',                           `id`,
		'empid',                        `empid`,
		'firstname',					`firstname`,
		'middlename',                   `middlename`,
		'lastname',						`lastname`,
		'personalemail',                `personalemail`,
		'officeemail',					`officeemail`,
		'dateofbirth',					`dateofbirth`,
		'gender',						`gender`,
		'maritalstatus',				`maritalstatus`,
		'usertype',                     @role,
		'designation',                  @d,
		'employmenttype',				`employmenttype`,
		'dateofjoin',					`dateofjoin`,
		'reportingmanager',             @rm,
		'bloodgroup',                   `bloodgroup`,
		'contactnumber',                `contactnumber`,
		'emergencycontactnumber',       `emergencycontactnumber`,
		'emergencycontactrelation',     `emergencycontactrelation`,
		'emergencycontactname',         `emergencycontactname`,
		'address',                      `address`,
		'city',                         `city`,
		'state',                        `state`,
		'pincode',                      `pincode`,
		'country',                      `country`,
		'paddress',                     `paddress`,  
		'pcity',                        `pcity`,
		'pstate',                       `pstate`,
		'ppincode',                     `ppincode`,
		'pcountry',                     `pcountry`,
		'aadharnumber',					`aadharnumber`,
		'passport',						`passport`,
		'financials_id',				@financials_id,
		'bankname',						@bankname,  		
		'ifsccode',						@ifsccode,  		
		'nameasperbankaccount',			@nameasperbankaccount,
		'branchname',					@branchname,
		'bankaccountnumber',			@bankaccountnumber,
		'uanumber',						@uanumber,
		'pfaccountnumber',		        @pfaccountnumber,
		'pan',							@pan,
		'esi',							@esi,
		'worklocation',					@worklocation,
		'shift', 						@shift,
		'status',						`status`,
		'department',					@dept,
		'relations',					@relations_json,
		'education',					@education_json,
		'experience',					@experience_json
		)) as json
	from `employee`
	where `employee`.`id` = id;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getemployeemasterforsearch` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getemployeemasterforsearch`(
	in `employee_id` varchar(20),
	in `empname` varchar(255),
	in `pagenumber` int,
	in `pagesize` int
	)
	begin
	set @varstring = concat('%',employee_id,'%');
	set @namestring = concat('%',empname,'%');
	set @pgsize = pagesize;
		if (pagesize!=0 and pagenumber!=0) then
			set @offset1 = pagesize*(pagenumber-1);
		end if;
	if (`employee_id` is not null and `empname` is null) then
		set @sqltext = '';
		set @totalrows = 0;
		set @totalrows = (select count(e.id) from employee e where e.empid like concat('%',employee_id,'%'));
	if (pagesize=0 or pagenumber=0) then
			set @pgsize = @totalrows;
			set @offset1 = 1;
		  end if;
	set @sqltext = concat('select e.id,e.empid,e.firstname,e.middlename,e.lastname,e.officeemail,e.status, ',@totalrows,' as total from employee e
			where e.empid like ''',@varstring,''' limit ',@offset1,', ',@pgsize);
	-- select @sqltext;
	prepare stmt from @sqltext;
		execute stmt;
		deallocate prepare stmt;
	elseif (`employee_id` is null and `empname` is not null) then
		set @sqltext = '';
		set @totalrows = 0;
		set @totalrows = (select count(e.id) from employee e where concat(e.firstname, ' ',e.middlename, case when e.middlename = '' then '' else ' ' end,e.lastname) like concat('%',empname,'%') 
						  or e.firstname like concat('%',empname,'%') 
						  or e.middlename like concat('%',empname,'%') or e.lastname like concat('%',empname,'%'));
	if (pagesize=0 or pagenumber=0) then
			set @pgsize = @totalrows;
			set @offset1 = 1;
		  end if;
	set @sqltext = concat('select e.id,e.empid,e.firstname,e.middlename,e.lastname,e.officeemail,e.status, ',@totalrows,' as total from employee e
	where concat(e.firstname,''',' ',''' ,e.middlename, case when e.middlename = '''' then '''' else ''',' ',''' end ,e.lastname) like ''',@namestring,''' or e.firstname like ''',@namestring,''' or e.middlename like ''',@namestring,''' or e.lastname like ''',@namestring,''' limit ',@offset1,', ',@pgsize);
	-- select @sqltext;
	prepare stmt from @sqltext;
		execute stmt;
		deallocate prepare stmt;    
	elseif (`employee_id` is not null and `empname` is not null) then
	-- select 'xyz';
		set @sqltext = '';
		set @totalrows = 0;
		set @totalrows = (select count(e.id) from employee e where (e.empid like concat('%',employee_id,'%')) and 
						  (concat(e.firstname, ' ', case when e.middlename = '' then '' else ' ' end,e.lastname) like concat('%',empname,'%') or
						  e.firstname like concat('%',empname,'%') or e.middlename like concat('%',empname,'%') or  
						  e.lastname like concat('%',empname,'%')));
	if (pagesize=0 or pagenumber=0) then
			set @pgsize = @totalrows;
			set @offset1 = 1;
		  end if;
	set @sqltext = concat('select e.id,e.empid,e.firstname,e.middlename,e.lastname,e.officeemail,e.status, ',@totalrows,' as total from employee e
	where (e.empid like ''%',employee_id,'%'') and ( (concat(e.firstname,''',' ',''' ,e.middlename, case when e.middlename = '''' then '''' else ''',' ',''' end ,e.lastname) like ''',@namestring,''') or
	(e.firstname like ''%',empname,'%'') or (e.middlename like ''%',empname,'%'') or (e.lastname like ''%',empname,'%'')) limit ',@offset1,', ',@pgsize);
	--  @sqltext;
	prepare stmt from @sqltext;
		execute stmt;
		deallocate prepare stmt;        
	elseif (`employee_id` is null and `empname` is null) then
		set @sqltext = '';
		set @totalrows = 0;
		set @totalrows = (select count(*) from employee);
	if (pagesize=0 or pagenumber=0) then
			set @pgsize = @totalrows;
			set @offset1 = 1;
		  end if;
	set @sqltext = concat('select e.id,e.empid,e.firstname,e.middlename,e.lastname,e.officeemail,e.status, ',@totalrows,' as total from employee e limit ',@offset1,', ',@pgsize);
	-- select @sqltext;
	prepare stmt from @sqltext;
		execute stmt;
		deallocate prepare stmt;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getemployeeroles` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getemployeeroles`(
	in `employee_id` varchar(20)
	)
	begin
	SELECT r.id,r.name, e.rmid
	FROM employee_roles e,rolesmaster r
	WHERE e.role_id = r.id
	and e.employee_id = `employee_id`
	order by r.name;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getemployeestatus` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `getemployeestatus`(in `email` varchar(128))
	begin

		select e.id,e.status,(select login from employee_login where id=e.id order by lastpasswordchangedate desc limit 1) as 
        login from employee e where e.officeemail=`email`;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `geterrormessages` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `geterrormessages`(in `errorcode` varchar(255),in `pagenumber` int,in `pagesize` int)
	begin
		if `errorcode` is not null and `errorcode`!='' then
			set @sql = concat('select *,(select count(*) from lm_errormessages where errorcode = ''',`errorcode`,''') as total from lm_errormessages where errorcode = ''',`errorcode`,'''');
			prepare stmt from @sql;
			execute stmt;
			deallocate prepare stmt;
		else
			set @offset1 = pagesize*(pagenumber-1);
			set @count = (select count(*) from lm_errormessages);
			set @sqltext = concat('select *,@count as total from lm_errormessages ',' limit ',@offset1,',',pagesize);
			prepare stmt from @sqltext;
			execute stmt;
			deallocate prepare stmt;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getfunctionalitiesmaster` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getfunctionalitiesmaster`()
	begin

		select id,functionalityname from functionalitiesmaster;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getholidaysbyfilter` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `getholidaysbyfilter`(in `year_value` int(4),in `location_value` int(11),in `pagenumber` int,in `pagesize` int)
	begin
		set @pgsize = pagesize;
		if (pagesize!=0 and pagenumber!=0) then
			set @offset1 = pagesize*(pagenumber-1);
		end if;

		set @totalrows = 0;

		if (`year_value` is null) then 
			if (`location_value` is null) then
				set @totalrows = (select count(*) from holidaysmaster);
				if (pagesize=0 or pagenumber=0) then
					set @pgsize = @totalrows;
					set @offset1 = 1;
				end if;
				set @sqlquery = concat('select id,year,description,date,day,location as city,(select location from locationsmaster where id=h.location) as cityname, created_on ,created_by,',@totalrows,' as total from holidaysmaster h limit ',@offset1,', ',@pgsize);
			else
				set @totalrows = (select count(*) from holidaysmaster where location=`location_value`);
				if (pagesize=0 or pagenumber=0) then
					set @pgsize = @totalrows;
					set @offset1 = 1;
				end if;
				set @sqlquery = concat('select id,year,description,date,day,location as city,(select location from locationsmaster where id=h.location) as cityname,created_on ,created_by,',@totalrows,' as total from holidaysmaster h where h.location=',`location_value`,' limit ',@offset1,', ',@pgsize);            
			end if;
		elseif (`location_value` is null) then
				if (`year_value` is null) then 
					set @totalrows = (select count(*) from holidaysmaster);
					if (pagesize=0 or pagenumber=0) then
						set @pgsize = @totalrows;
						set @offset1 = 1;
					end if;
					set @sqlquery = concat('select id,year,description,date,day,location as city,(select location from locationsmaster where id=h.location) as cityname,created_on ,created_by,',@totalrows,' as total from holidaysmaster h limit ',@offset1,', ',@pgsize);                
				else
					set @totalrows = (select count(*) from holidaysmaster where year=`year_value`);
					if (pagesize=0 or pagenumber=0) then
						set @pgsize = @totalrows;
						set @offset1 = 1;
					end if;
					set @sqlquery = concat('select id,year,description,date,day,location as city,(select location from locationsmaster where id=h.location) as cityname,created_on ,created_by,',@totalrows,' as total from holidaysmaster h where h.year=',`year_value`,' limit ',@offset1,', ',@pgsize);                
				end if;
		else
			set @totalrows = (select count(*) from holidaysmaster where year=`year_value` and location=`location_value`);
			if (pagesize=0 or pagenumber=0) then
				set @pgsize = @totalrows;
				set @offset1 = 1;
			end if;
			set @sqlquery = concat('select id,year,description,date,day,location as city,(select location from locationsmaster where id=h.location) as cityname,created_on ,created_by,',@totalrows,' as total from holidaysmaster h where h.year=',`year_value`,' and h.location=',`location_value`,' limit ',@offset1,', ',@pgsize);        
		end if;
		prepare stmt from @sqlquery;
		execute stmt;
		deallocate prepare stmt;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getholidaysbyfilter_V2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `getholidaysbyfilter_V2`(in `year_value` int(4),in `location_value` int(11),in `pagenumber` int,in `pagesize` int)
	begin
		set @pgsize = pagesize;
		if (pagesize!=0 and pagenumber!=0) then
			set @offset1 = pagesize*(pagenumber-1);
		end if;

		set @totalrows = 0;

		if (`year_value` is null) then 
			if (`location_value` is null) then
				set @totalrows = (select count(*) from holidaysmaster);
				if (pagesize=0 or pagenumber=0) then
					set @pgsize = @totalrows;
					set @offset1 = 1;
				end if;
				set @sqlquery = concat('select id,year,description,date,day,location as city,(select location from locationsmaster where id=h.location) as cityname,',@totalrows,' as total from holidaysmaster h limit ',@offset1,', ',@pgsize);
			else
				set @totalrows = (select count(*) from holidaysmaster where location=`location_value`);
				if (pagesize=0 or pagenumber=0) then
					set @pgsize = @totalrows;
					set @offset1 = 1;
				end if;
				set @sqlquery = concat('select id,year,description,date,day,location as city,(select location from locationsmaster where id=h.location) as cityname,',@totalrows,' as total from holidaysmaster h where h.location=',`location_value`,' limit ',@offset1,', ',@pgsize);            
			end if;
		elseif (`location_value` is null) then
				if (`year_value` is null) then 
					set @totalrows = (select count(*) from holidaysmaster);
					if (pagesize=0 or pagenumber=0) then
						set @pgsize = @totalrows;
						set @offset1 = 1;
					end if;
					set @sqlquery = concat('select id,year,description,date,day,location as city,(select location from locationsmaster where id=h.location) as cityname,',@totalrows,' as total from holidaysmaster h limit ',@offset1,', ',@pgsize);                
				else
					set @totalrows = (select count(*) from holidaysmaster where year=`year_value`);
					if (pagesize=0 or pagenumber=0) then
						set @pgsize = @totalrows;
						set @offset1 = 1;
					end if;
					set @sqlquery = concat('select id,year,description,date,day,location as city,(select location from locationsmaster where id=h.location) as cityname,',@totalrows,' as total from holidaysmaster h where h.year=',`year_value`,' limit ',@offset1,', ',@pgsize);                
				end if;
		else
			set @totalrows = (select count(*) from holidaysmaster where year=`year_value` and location=`location_value`);
			if (pagesize=0 or pagenumber=0) then
				set @pgsize = @totalrows;
				set @offset1 = 1;
			end if;
			set @sqlquery = concat('select id,year,description,date,day,location as city,(select location from locationsmaster where id=h.location) as cityname,',@totalrows,' as total from holidaysmaster h where h.year=',`year_value`,' and h.location=',`location_value`,' limit ',@offset1,', ',@pgsize);        
		end if;
		prepare stmt from @sqlquery;
		execute stmt;
		deallocate prepare stmt;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getleavecalendar` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `getleavecalendar`(
	IN `employee_id` INT(11)
	)
	begin
	-- select 0;

	DECLARE vleavetype varchar(255);
	declare vfromdate date;
	declare vtodate date;
	declare vfromhalfdayleave varchar(1);
	declare vtohalfdayleave varchar(1);    
	DECLARE temp_cursor CURSOR FOR select leavename,date(fromdate),date(todate),fromhalfdayleave,tohalfdayleave  
			from lm_employeeleaves, lm_leavesmaster 
			where lm_employeeleaves.empid = `employee_id` and (lm_employeeleaves.leave_cycle_year = @display_year or lm_employeeleaves.leave_cycle_year is null)
			and lm_employeeleaves.leavetype = lm_leavesmaster.id and lm_employeeleaves.leavestatus in ('Submitted','Approved');
	drop temporary table if exists leavecalendar;    
	create temporary table leavecalendar (
		edate date,
		ltype varchar(64),
		firsthalf int(1),
		secondhalf int(1),
		color varchar(64)
	);
	drop temporary table if exists holidays;
	create temporary table holidays (
		date_value date,
		holiday_name varchar(255)
	);

	set @present_year = (select fn_get_leave_cycle_year());
	set @previous_year = (select fn_get_leave_cycle_year() - 1);

	insert into holidays(date_value,holiday_name)
	select m.date,m.description
		FROM holidaysmaster m, companyworklocationsmaster v  
		WHERE m.location = v.city 
		and v.id =(select s.locationid from employee_worklocations s where empid = `employee_id` order by id desc limit 1)
		and m.leave_cycle_year = @display_year;
		
	SET @leave_cycle_month = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
								  select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
								  lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));    
	drop temporary table if exists weekoffs_table;
	create temporary table weekoffs_table (
		weekoff1 int(11),
		weekoff2 int(11),
		weekoff3 int(11),
		effective_fromdate date,
		effective_todate date
	);

	insert into weekoffs_table(weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
	select weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
	from employee_weekoffs
	where employee_weekoffs.empid = employee_id; 

	-- select * from weekoffs_table;    
	set @startdate = concat(@previous_year,'-',@leave_cycle_month,'-01');
	set @joindate = (select employee.dateofjoin from employee where employee.id = employee_id);
	if (@joindate > @startdate) then
		set @startdate = @joindate;
	end if;
	set @current_month = month(current_timestamp());
	if(@leave_cycle_month = 1) then
			set @enddate = concat(@present_year,'-','12','-01');
		elseif ((@leave_cycle_month <> 1) and (@leave_cycle_month <= @current_month)) then
			set @enddate = concat((@present_year + 1),'-',(@leave_cycle_month - 1),'-01');
		elseif ((@leave_cycle_month <> 1) and (@leave_cycle_month > @current_month)) then
			set @enddate = concat((@present_year + 1),'-',(@leave_cycle_month - 1),'-01');
		end if;                          
		
		set @enddate = (select last_day(@enddate));

	while @enddate > @startdate do
		IF exists (select * from weekoffs_table where  (dayofweek(cast(@startdate as date)) IN 
					(ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))) 
					and ((weekoffs_table.effective_fromdate <= cast(@startdate as date) and cast(@startdate as date) <= weekoffs_table.effective_todate)
						or (cast(@startdate as date) >= effective_fromdate and effective_todate is null)) ) then
		insert into leavecalendar(edate,ltype,firsthalf,secondhalf) values (@startdate,'weekoff',0,0);
		END IF;
		IF cast(@startdate as date) in (select date_value from holidays) then
		insert into leavecalendar(edate,firsthalf,secondhalf) values (@startdate,0,0);
		end if;
		OPEN temp_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		SET vleavetype = '';
		SET vfromhalfdayleave = '';
		set vtohalfdayleave = '';
		fetch temp_cursor into vleavetype,vfromdate,vtodate,vfromhalfdayleave,vtohalfdayleave;
		if @startdate = vfromdate then
			insert into leavecalendar(edate,ltype,firsthalf,secondhalf,color) values
			(@startdate,vleavetype,vfromhalfdayleave,0,(select leavecolor from lm_leavesmaster where lm_leavesmaster.leavename = vleavetype));
		elseif ((@startdate > vfromdate) and (@startdate < vtodate)) then
			insert into leavecalendar(edate,ltype,firsthalf,secondhalf,color) values
			(@startdate,vleavetype,1,1,(select leavecolor from lm_leavesmaster where lm_leavesmaster.leavename = vleavetype));
		elseif @startdate = vtodate then
			insert into leavecalendar(edate,ltype,firsthalf,secondhalf,color) values
			(@startdate,vleavetype,0,vtohalfdayleave,(select leavecolor from lm_leavesmaster where lm_leavesmaster.leavename = vleavetype));
		end if;
		
		set @j = @j + 1;
		end while;
		close temp_cursor;

	set @startdate = date_add(@startdate, interval 1 day);
	end while;
	update leavecalendar join holidays on (leavecalendar.edate = holidays.date_value)
		set leavecalendar.ltype = holidays.holiday_name
		where leavecalendar.ltype is null;
	   
	select * from leavecalendar;

	drop temporary table leavecalendar;
	drop temporary table holidays;
	drop temporary table weekoffs_table;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getleavepolicies` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getleavepolicies`(in `leaveid` int,in `iscommonrule` bit)
	begin
	   IF(`leaveid` IS NOT NULL and `iscommonrule` is null) THEN
	   select distinct json_arrayagg(json_object(
	   'leavetype_id', 		lm_leavesmaster.id,
	   'leavename',			lm_leavesmaster.leavename,
	   'leavecolor',		lm_leavesmaster.leavecolor,
	   'ruleid',			lm_rulemaster.id, 
	   'rulename',			lm_rulemaster.rulename,
	   'ruledescription',	lm_rulemaster.description,
	   'rule_additional_info', lm_rulemaster.additional_information,
	   'rulevalue_id',		lm_rulevalues.id,
	   'value',				lm_rulevalues.value,
	   'effectivefromdate',	lm_rulevalues.effectivefromdate,
	   'effectivetodate',	lm_rulevalues.effectivetodate, 
	   'status',			lm_rulevalues.status 
	   )) as json
	   from lm_leavesmaster, lm_rulemaster,lm_rulevalues,
	   (select max(id) as id, ruleid from lm_rulevalues
	   where lm_rulevalues.leavetypeid = leaveid group by ruleid order by ruleid) ids
	   where lm_rulemaster.id=lm_rulevalues.ruleid
	   and lm_rulemaster.id = ids.ruleid
	   and lm_leavesmaster.id = lm_rulevalues.leavetypeid
	   and ids.id = lm_rulevalues.id
	   and lm_leavesmaster.id=`leaveid`;
	   ELSEIF (`leaveid` is null and `iscommonrule` is not null) then
	   select distinct json_arrayagg(json_object(
	   'ruleid',			lm_rulemaster.id, 
	   'rulename',			lm_rulemaster.rulename,
	   'ruledescription',	lm_rulemaster.description,
	   'rule_additional_info', lm_rulemaster.additional_information,
	   'rulevalue_id',		lm_rulevalues.id,
	   'value',				lm_rulevalues.value,
	   'effectivefromdate',	lm_rulevalues.effectivefromdate,
	   'effectivetodate',	lm_rulevalues.effectivetodate, 
	   'status',			lm_rulevalues.status 
	   )) as json
	   from lm_rulemaster,lm_rulevalues,
	   (select max(id) as id, ruleid from lm_rulevalues
	   where lm_rulevalues.leavetypeid is null group by ruleid order by ruleid) ids
	   where lm_rulemaster.id=lm_rulevalues.ruleid
	   and lm_rulemaster.id = ids.ruleid
	   and ids.id = lm_rulevalues.id
	   and lm_rulemaster.iscommonrule= 'y';
	   end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getleavetypesforadvancedleave` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getleavetypesforadvancedleave`()
	begin
	 select distinct lm_leavesmaster.id,lm_leavesmaster.leavename from lm_rulevalues, lm_leavesmaster 
	 where lm_rulevalues.leavetypeid = lm_leavesmaster.id
	 and lm_rulevalues.ruleid = (SELECT lm_rulemaster.id FROM lm_rulemaster WHERE lm_rulemaster.rulename = 'LEAVES_MAX_COUNT_PER_YEAR')
	 and lm_rulevalues.leavetypeid in
	 (select lm_rulevalues.leavetypeid from lm_rulevalues
	  where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_CREDIT_FREQUENCY')
	  and cast(lm_rulevalues.value as unsigned) < 12
	  and lm_rulevalues.status = 'Active'  and lm_rulevalues.effectivefromdate is not null)
	 and lm_rulevalues.status = 'Active'
	 and lm_leavesmaster.status = 'Active'
	 and lm_rulevalues.effectivefromdate is not null
	 order by lm_leavesmaster.leavename; 
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getmastertable` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `getmastertable`(in `tablename` varchar(255),in `status_value` varchar(32),in `pagenumber` int,in `pagesize` int)
	begin	
		set @pgsize = pagesize;	
		if (pagesize!=0 and pagenumber!=0) then	
			set @offset1 = pagesize*(pagenumber-1);	
		end if;	
		set @sqltext = '';	
		set @totalrows = 0;	
		if (tablename = 'statesmaster') then	
		  set @totalrows = (select count(s.id) from statesmaster s,countrymaster c where c.id=s.countryid order by c.id,s.id);	
		  if (pagesize=0 or pagenumber=0) then	
			set @pgsize = @totalrows;	
			set @offset1 = 0;	
		  end if;	
		  set @sqltext = concat('select s.id as stateid,s.state,c.id as countryid,c.country, ',@totalrows,' as total from statesmaster s,countrymaster c where c.id=s.countryid order by c.id,s.id limit ',@offset1,', ',@pgsize) ;	
		elseif (tablename = 'locationsmaster') then	
		  set @totalrows = (select count(l.id) from statesmaster s,countrymaster c,locationsmaster l where c.id=s.countryid and l.countryid=c.id and l.stateid=s.id order by c.id,s.id);	
		  if (pagesize=0 or pagenumber=0) then	
			set @pgsize = @totalrows;	
			set @offset1 = 0;	
		  end if;	
		  set @sqltext = concat('select s.id as stateid,s.state,c.id as countryid,c.country,l.id as cityid, l.location as city, ',@totalrows,' as total from statesmaster s,countrymaster c,locationsmaster l where c.id=s.countryid and l.countryid=c.id and l.stateid=s.id order by c.id,s.id limit ',@offset1,', ',@pgsize) ;	
		elseif (tablename = 'holidaysmaster') then	
		  set @totalrows = (select count(distinct h.id) from holidaysmaster h,companyworklocationsmaster l where l.city=h.location);	
		  if (pagesize=0 or pagenumber=0) then	
			set @pgsize = @totalrows;	
			set @offset1 = 0;	
		  end if;      	
		  set @sqltext = concat('select distinct h.id,h.year,h.description,h.date,h.day,m.location as city, ', @totalrows,' as total from holidaysmaster h,companyworklocationsmaster l, locationsmaster m where l.city=h.location and l.city = m.id order by h.id  limit ',@offset1,', ',@pgsize) ;	
	/*	elseif (tablename = 'companyworklocationsmaster') then	
		  set @totalrows = (select count(distinct l.location) from companyworklocationsmaster m, locationsmaster l where m.city = l.id);	
		  if (pagesize=0 or pagenumber=0) then	
			set @pgsize = @totalrows;	
			set @offset1 = 1;	
		  end if;      	
		  set @sqltext = concat('select distinct m.city, l.location, ', @totalrows,' as total from companyworklocationsmaster m, locationsmaster l where m.city = l.id order by l.location  limit ',@offset1,', ',@pgsize) ;	
	*/	elseif (tablename = 'companyinformation') then	
		  set @totalrows = (select count(c.id) from companyinformation c,locationsmaster l,statesmaster s,countrymaster ct where ct.id=c.country and c.city=l.location and s.id=c.state);	
		  if (pagesize=0 or pagenumber=0) then	
			set @pgsize = @totalrows;	
			set @offset1 = 0;	
		  end if;      	
		  set @sqltext = concat('select c.id,c.companyname,c.companywebsite,c.cin,c.gstnumber,c.established_date ,c.secondarycontactnumber,c.primarycontactnumber,c.primarycontactemail,c.address1,c.address2,l.location as city,s.state,c.pincode,ct.country,ct.id as countryid,l.id as locationid,s.id as stateid, ',@totalrows,' as total from companyinformation c,locationsmaster l,statesmaster s,countrymaster ct where ct.id=c.country and c.city=l.id and s.id=c.state order by c.id  limit ',@offset1,', ',@pgsize) ;	
		elseif (tablename = 'modulesmaster') then	
			set @totalrows = (select count(id) from modulesmaster);	
			  if (pagesize=0 or pagenumber=0) then	
				set @pgsize = @totalrows;	
				set @offset1 = 0;	
			  end if;  	
			set @sqltext = concat('select * from modulesmaster order by dashboard_order limit ',@offset1,', ',@pgsize) ;	
		else	
			set @subquery = (case when `status_value` is not null then concat(' where status=''',`status_value`,'''') else '' end);	
			set @countquery = concat('select count(*) into @count from ',tablename ,@subquery);    	
			prepare stmt1 from @countquery;	
			execute stmt1;	
			deallocate prepare stmt1;	
				
			if (pagesize=0 or pagenumber=0) then	
				set @pgsize = @count;	
				set @offset1 = 0;	
			end if;   	
				
			set @sqltext = concat('select *, ',@count,' as total from ',tablename , @subquery,' limit ',@offset1,', ',@pgsize) ; 	
		end if;	
		-- select @sqltext;	
		prepare stmt from @sqltext;	
		execute stmt;	
		deallocate prepare stmt;	
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getmastertable_V2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `getmastertable_V2`(in `tablename` varchar(255),in `status_value` varchar(32),in `pagenumber` int,in `pagesize` int)
	begin
		set @pgsize = pagesize;
		if (pagesize!=0 and pagenumber!=0) then
			set @offset1 = pagesize*(pagenumber-1);
		end if;
		set @sqltext = '';
		set @totalrows = 0;
		if (tablename = 'statesmaster') then
		  set @totalrows = (select count(s.id) from statesmaster s,countrymaster c where c.id=s.countryid order by c.id,s.id);
		  if (pagesize=0 or pagenumber=0) then
			set @pgsize = @totalrows;
			set @offset1 = 1;
		  end if;
		  set @sqltext = concat('select s.id as stateid,s.state,c.id as countryid,c.country, ',@totalrows,' as total from statesmaster s,countrymaster c where c.id=s.countryid order by c.id,s.id limit ',@offset1,', ',@pgsize) ;
		elseif (tablename = 'locationsmaster') then
		  set @totalrows = (select count(l.id) from statesmaster s,countrymaster c,locationsmaster l where c.id=s.countryid and l.countryid=c.id and l.stateid=s.id order by c.id,s.id);
		  if (pagesize=0 or pagenumber=0) then
			set @pgsize = @totalrows;
			set @offset1 = 1;
		  end if;
		  set @sqltext = concat('select s.id as stateid,s.state,c.id as countryid,c.country,l.id as cityid, l.location as city, ',@totalrows,' as total from statesmaster s,countrymaster c,locationsmaster l where c.id=s.countryid and l.countryid=c.id and l.stateid=s.id order by c.id,s.id limit ',@offset1,', ',@pgsize) ;
		elseif (tablename = 'holidaysmaster') then
		  set @totalrows = (select count(distinct h.id) from holidaysmaster h,companyworklocationsmaster l where l.city=h.location);
		  if (pagesize=0 or pagenumber=0) then
			set @pgsize = @totalrows;
			set @offset1 = 1;
		  end if;      
		  set @sqltext = concat('select distinct h.id,h.year,h.description,h.date,h.day,m.location as city, ', @totalrows,' as total from holidaysmaster h,companyworklocationsmaster l, locationsmaster m where l.city=h.location and l.city = m.id order by h.id  limit ',@offset1,', ',@pgsize) ;
	/*	elseif (tablename = 'companyworklocationsmaster') then
		  set @totalrows = (select count(distinct l.location) from companyworklocationsmaster m, locationsmaster l where m.city = l.id);
		  if (pagesize=0 or pagenumber=0) then
			set @pgsize = @totalrows;
			set @offset1 = 1;
		  end if;      
		  set @sqltext = concat('select distinct m.city, l.location, ', @totalrows,' as total from companyworklocationsmaster m, locationsmaster l where m.city = l.id order by l.location  limit ',@offset1,', ',@pgsize) ;
	*/	elseif (tablename = 'companyinformation') then
		  set @totalrows = (select count(c.id) from companyinformation c,locationsmaster l,statesmaster s,countrymaster ct where ct.id=c.country and c.city=l.location and s.id=c.state);
		  if (pagesize=0 or pagenumber=0) then
			set @pgsize = @totalrows;
			set @offset1 = 1;
		  end if;      
		  set @sqltext = concat('select c.id,c.companyname,c.companywebsite,c.primarycontactnumber,c.primarycontactemail,c.address1,c.address2,l.location as city,s.state,c.pincode,ct.country,ct.id as countryid,l.id as locationid,s.id as stateid, ',@totalrows,' as total from companyinformation c,locationsmaster l,statesmaster s,countrymaster ct where ct.id=c.country and c.city=l.id and s.id=c.state order by c.id  limit ',@offset1,', ',@pgsize) ;
		else
			set @subquery = (case when `status_value` is not null then concat(' where status=''',`status_value`,'''') else '' end);
			set @countquery = concat('select count(*) into @count from ',tablename ,@subquery);    
			prepare stmt1 from @countquery;
			execute stmt1;
			deallocate prepare stmt1;
			
			if (pagesize=0 or pagenumber=0) then
				set @pgsize = @count;
				set @offset1 = 1;
			end if;   
			
			set @sqltext = concat('select *, ',@count,' as total from ',tablename , @subquery,' limit ',@offset1,', ',@pgsize) ; 
		end if;
		-- select @sqltext;
		prepare stmt from @sqltext;
		execute stmt;
		deallocate prepare stmt;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getoffdayscount` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getoffdayscount`(
	IN `employee_id` INT(11),
	IN `leavetype_id` INT(11),
	IN `fromdate` date,
	IN `todate` date,
	IN `fromdatehalfday` bit,
	IN `todatehalfday` bit
	)
	BEGIN
		DECLARE vrulename varchar(255);
		DECLARE vrulevalue varchar(255);
		DECLARE vdate date;
		DECLARE temp_cursor CURSOR FOR select rulename,rulevalue from rules;
		
		declare holidays_cursor cursor for select distinct v.date from holidaysmaster v 
				where v.location = (select city from companyworklocationsmaster where id =
									(SELECT employee_worklocations.locationid FROM employee_worklocations 
									 WHERE employee_worklocations.empid = `employee_id` order by id desc limit 1))
				and v.leave_cycle_year = (select fn_get_leave_cycle_year()); 
		
		CREATE TEMPORARY TABLE rules(
			rulename varchar(255),
			rulevalue varchar(64)
		);
		CREATE TEMPORARY TABLE em(
			message varchar(255)
		);
		create temporary table datetable(
			ldate date,
			weekday int(1),
			companyholiday int(1),
			dvalue varchar(8)
		);
		set @d = 0;
		while date_add(`fromdate`, interval @d day) <= `todate` do
		insert into datetable(ldate,weekday,companyholiday,dvalue) values(date_add(`fromdate`, interval @d day),dayofweek(date_add(`fromdate`, interval @d day)),0,1);
		
		set @d = @d + 1;
		end while;
		OPEN holidays_cursor;
			set @v = 0;
			set @v = found_rows();
			set @w = 0;
			WHILE @w < @v do
			set vdate = null;
			fetch holidays_cursor into vdate;
			if (vdate between `fromdate` and `todate`) then
				update datetable set datetable.companyholiday = case when datetable.ldate = vdate then 1
																	 else datetable.companyholiday end; 
			end if;
			SET @w = @w + 1;
			END WHILE;
		close holidays_cursor;
		-- select * from datetable;

		insert into rules(rulename,rulevalue)  
		SELECT lm_rulemaster.rulename,lm_rulevalues.value
		from lm_rulemaster,lm_rulevalues,
		(select max(id) as id, ruleid from lm_rulevalues
		where lm_rulevalues.leavetypeid = `leavetype_id` group by ruleid order by ruleid) ids
		where lm_rulemaster.id=lm_rulevalues.ruleid
		and lm_rulemaster.id = ids.ruleid
		and ids.id = lm_rulevalues.id
		and lm_rulevalues.status = 'active'
		and lm_rulevalues.leavetypeid= `leavetype_id`;
		
		set @leave_balance = (select balance from lm_employeeleavebalance where lm_employeeleavebalance.leavetypeid = `leavetype_id` and lm_employeeleavebalance.empid = `employee_id`
							  and lm_employeeleavebalance.leave_cycle_year	= fn_get_leave_cycle_year());
		
		set @w1 = (select weekoffday1 from employee_weekoffs where employee_weekoffs.empid = `employee_id` order by id desc limit 1);
		set @w2 = (select weekoffday2 from employee_weekoffs where employee_weekoffs.empid = `employee_id` order by id desc limit 1);
		set @w3 = (select weekoffday3 from employee_weekoffs where employee_weekoffs.empid = `employee_id` order by id desc limit 1);
		-- select @w1,@w2,@w3;
		set @hvalue = 0;
		set @wvalue = 0;
		
		OPEN temp_cursor;
			set @i = 0;
			set @i = found_rows();
			set @j = 0;
			WHILE @j < @i do
			set vrulename = '';
			set vrulevalue = '';
			fetch temp_cursor into vrulename,vrulevalue;
			
			if (vrulename = 'LEAVES_COMPANY_HOLIDAYS_INCLUDED') then
				SET @hvalue = vrulevalue;	
				if (@hvalue = 0) then
				update datetable set datetable.dvalue = 0 where datetable.weekday not in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0))
														  and companyholiday = 1;     
				end if; 
			end if;
			if (vrulename = 'LEAVES_WEEKENDS_INCLUDED') then
				set @wvalue = vrulevalue;
				if (@wvalue = 0) then
				update datetable set datetable.dvalue = 0 where datetable.weekday in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0));
				end if;
			end if;
			
			set @j = @j + 1;
			end while;
		close temp_cursor;
		
		OPEN temp_cursor;
			set @i = 0;
			set @i = found_rows();
			set @j = 0;
			WHILE @j < @i do
			set vrulename = '';
			set vrulevalue = '';
			fetch temp_cursor into vrulename,vrulevalue;
			
			if (`fromdate` < `todate`) then
				if (`fromdatehalfday` = 1) then
				update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
				end if;
				if (`todatehalfday` = 1) then
				update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
				end if;
			elseif (`fromdate` = `todate`) then
				if ((`fromdatehalfday` = 1) and (`todatehalfday` = 0)) then
				update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
				elseif ((`fromdatehalfday` = 0) and (`todatehalfday` = 1)) then
				update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
				end if;
			end if;
			
			set @leave_duration = 0;
			set @leave_duration = (select sum(datetable.dvalue) from datetable);
			
			if (vrulename = 'LEAVES_MIN_DAYS_FOR_DOCUMENT_UPLOAD' and vrulevalue <= @leave_duration) then
				insert into em(message) values('LM107');
			end if;
			
		set @j = @j + 1;
			end while;
		close temp_cursor;    
							
		
		-- select * from datetable;       
		if exists(select * from em) then
			select json_arrayagg(json_object(
			'leavecount',	(select sum(datetable.dvalue) from datetable),
			'message',		errormessage   
			)) as count_json
			from lm_errormessages where errorcode in(select message from em);
		else
			select json_arrayagg(json_object(
			'leavecount',	(select sum(datetable.dvalue) from datetable), 
			'message',		1  
			)) as count_json ;
		end if;                                          
		
	drop temporary table rules;
	drop temporary table em;
	drop temporary table datetable;

	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getreportingmanagers` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `getreportingmanagers`(
	in `dept_id` int(11)
	)
	BEGIN
		/*	SELECT id, concat(firstname,' ',middlename,' ',lastname) as employee_name, empid
			FROM employee WHERE id IN
			(SELECT employee_id FROM employee_roles where role_id = (SELECT rolesmaster.id FROM rolesmaster WHERE name = 'Manager'
			 and rolesmaster.department = dept_id))
			 and employee.status = 'Active';
		*/
		SELECT id, concat(firstname,' ',middlename,' ',lastname) as employee_name, empid
		FROM employee WHERE id IN (select employee_id from employee_roles where role_id = (SELECT rolesmaster.id FROM rolesmaster WHERE name = 'Manager'))
		and  employee.id in (select empid from employee_departments where departmentid = `dept_id` and effectiveenddate is null)
		 and employee.status = 1;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getrolemaster` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getrolemaster`(
	)
	begin

		select id,name,isEditable from rolesmaster
		-- where rolesmaster.department= department_id
		order by name;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getrolemaster_by_dept` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getrolemaster_by_dept`(
	department_id int(11)
	)
	begin

		select id,name,isEditable from rolesmaster
		where rolesmaster.department= department_id
		order by name;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getrolescreenfunctionalities` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `getrolescreenfunctionalities`(IN empid int,IN moduleid int)
	begin
		set @isEditable = (select rolesmaster.isEditable from rolesmaster where rolesmaster.id = (select employee_roles.role_id 
						from employee_roles where employee_roles.employee_id = `empid`));
						
		set @role = (select employee_roles.role_id from employee_roles where employee_roles.employee_id = empid);                   
						
		drop temporary table if exists ftable;                   
		create temporary table ftable(
			screenid int(11),
			fjson varchar(1000),
			isGeneric int(1)
		);
		insert into ftable(screenid,isGeneric) 
			select distinct sf.screenid,0
			from screenfunctionalitiesmaster sf,screensmaster s,functionalitiesmaster f,rolescreenaccess ra
			where ra.roleid in (select employee_roles.role_id from employee_roles where employee_roles.employee_id = `empid`) 
			and ra.screenfunctionalityid=sf.id and sf.screenid=s.id and sf.functionalityid=f.id and s.moduleid=`moduleid`;
		if (@isEditable = 0) then
			insert into ftable(screenid,isGeneric) 
			select distinct sf.screenid,1
			from screenfunctionalitiesmaster sf,screensmaster s,functionalitiesmaster f,rolescreenaccess_common ra
			where ra.screenfunctionalityid=sf.id and sf.screenid=s.id and sf.functionalityid=f.id and s.moduleid=`moduleid`;
		end if;
		update ftable 
		set fjson = (select json_unquote(json_arrayagg(json_object(
					'functionalityid',sf.functionalityid,
					'functionalityname',f.functionalityname 
					)))
					from screenfunctionalitiesmaster sf,screensmaster s,functionalitiesmaster f,rolescreenaccess ra
					where ra.roleid in (select employee_roles.role_id from employee_roles where employee_roles.employee_id = `empid`) 
					and ra.screenfunctionalityid=sf.id and sf.screenid=s.id and sf.functionalityid=f.id 
					and s.moduleid=`moduleid` and sf.screenid = ftable.screenid
					) where ftable.isGeneric = 0;
		update ftable 
		set fjson = (select json_unquote(json_arrayagg(json_object(
					'functionalityid',sf.functionalityid,
					'functionalityname',f.functionalityname 
					)))
					from screenfunctionalitiesmaster sf,screensmaster s,functionalitiesmaster f,rolescreenaccess_common ra
					where ra.screenfunctionalityid=sf.id and sf.screenid=s.id and sf.functionalityid=f.id 
					and s.moduleid=`moduleid` and sf.screenid = ftable.screenid
					) where ftable.isGeneric = 1;                
		select * from ftable;               
					
		select distinct ra.roleid, 
		r.name as role_name,
		sf.screenid,
		s.menu_order,
		s.name as screen_name,
		s.routename,
		s.parentrole,
		ft.fjson from ftable ft, screenfunctionalitiesmaster sf,screensmaster s,rolesmaster r,functionalitiesmaster f,
		(select id,roleid,screenfunctionalityid from rolescreenaccess
		union
		select id,@role as roleid,screenfunctionalityid from rolescreenaccess_common) ra
		where ft.screenid = s.id 
		and ra.roleid in (select employee_roles.role_id from employee_roles where employee_roles.employee_id = empid) 
		and ra.screenfunctionalityid=sf.id 
		and sf.screenid=s.id 
		and sf.functionalityid=f.id 
		and r.id = ra.roleid
		and s.moduleid=`moduleid`
		order by s.parentrole, s.menu_order;
		
		drop temporary table ftable;    
			
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getrolescreenfunctionalities_for_role` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getrolescreenfunctionalities_for_role`(IN roleid int,IN moduleid int)
	begin

	create temporary table ftable(
	screenid int(11),
	fjson varchar(1000)
	);
	insert into ftable(screenid) 
	select distinct sf.screenid
	from screenfunctionalitiesmaster sf,screensmaster s,functionalitiesmaster f,rolescreenaccess ra
	where ra.roleid = `roleid` and ra.screenfunctionalityid=sf.id and sf.screenid=s.id and sf.functionalityid=f.id and s.moduleid=`moduleid`;
	update ftable set fjson = (select json_unquote(json_arrayagg(json_object(
				   'functionalityid',sf.functionalityid,
				   'functionalityname',f.functionalityname 
				   )))
				   from screenfunctionalitiesmaster sf,screensmaster s,functionalitiesmaster f,rolescreenaccess ra
				   where ra.roleid = `roleid` and ra.screenfunctionalityid=sf.id and sf.screenid=s.id and sf.functionalityid=f.id 
				   and s.moduleid=`moduleid` and sf.screenid = ftable.screenid);
	-- select * from ftable;               
				   
		select distinct ra.roleid, 
		r.name as role_name,
		sf.screenid,
		s.menu_order,
		s.name as screen_name,
		s.routename,
		s.parentrole,
		ft.fjson from ftable ft, screenfunctionalitiesmaster sf,screensmaster s,rolesmaster r,functionalitiesmaster f,rolescreenaccess ra
		where ft.screenid = s.id 
		and ra.roleid = `roleid`
		and ra.screenfunctionalityid=sf.id 
		and sf.screenid=s.id 
		and sf.functionalityid=f.id 
		and r.id = ra.roleid
		and s.moduleid=`moduleid`
		order by s.menu_order;

		drop temporary table ftable;    
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getscreenfunctionalitiesmaster` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getscreenfunctionalitiesmaster`()
	begin

		select sf.id,sf.screenid,s.name as screenname,sf.functionalityid,f.functionalityname from screenfunctionalitiesmaster sf,screensmaster s,functionalitiesmaster f
		where sf.screenid=s.id and sf.functionalityid=f.id;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getscreensmaster` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getscreensmaster`(IN modid int)
	begin

		select id,name,routename from screensmaster where moduleid=`modid` order by name;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `getstatesforcountry` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `getstatesforcountry`(in `countryid` varchar(255))
	begin
		select s.id,s.state from statesmaster s where s.countryid=`countryid` order by s.id;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_active_announcements_topics` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_active_announcements_topics`()
	begin
		select r.id,r.topic from ems_announcements_topics_master r where r.status=1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_active_components_values_for_pay_group` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_active_components_values_for_pay_group`(
	paygroup_id integer(11)
	)
	begin
	if (paygroup_id is not null) then
		select g.group_name as group_name,
		psm.section,v.id as pigcm_id ,
		s.id as component_id,
		s.component as component_name,
		concat(pecfd.component_value,(case when pecfd.is_percentage_or_flat_amount=1 then concat('% of ', (case when s.component='Basic Salary' then ('CTC') else 'Basic' end)) else ' flat amount' end)) as calculation_type,
		v.consider_for_esi_contribution as esi,
		v.consider_for_epf_contribution as epf,
		v.status
		from payroll_salary_components_master s, 
		payroll_income_groups_master g, 
		payroll_income_group_components_master v,
		payroll_sections_master psm,
		payroll_earning_components_formula_details pecfd
		where s.id = v.component_id
		and v.group_id = g.id
		and g.id = paygroup_id
		and psm.id = s.section_id
		and pecfd.pigcm_id=v.id
		and v.effective_to_date is null
		and v.status='Active';
	end if;    
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_active_document_categorys` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_active_document_categorys`()
	begin
		select d.id,d.category from document_category_master d where d.status=1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_active_emps_list` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_active_emps_list`()
	begin
	 select  e.id,e.empid,CONCAT(firstname, " ", ifnull(middlename,''), " ", ifnull(lastname,'')) as ename
	 from employee e
	 -- join ems_employee_terminations et on et.empid <> e.id
	 where e.status=1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_active_reasons` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_active_reasons`()
	begin
		select r.id,reason from ems_reason_master r where r.status=1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_active_shift_ids` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_active_shift_ids`(
	)
	begin
		select id as shiftid,shiftname
		from shiftsmaster
		where status=1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_active_termination_categories` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_active_termination_categories`()
	begin
		select t.id,t.category from ems_termination_category_master t where t.status = 1 ;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_allemployees_program_schedules` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_allemployees_program_schedules`(in scheduleid int)
	begin
		select 	e.id,
				e.schedule_id,
				e.empid,
				get_employee_name(e.empid) as empname,
				(select officeemail from employee where id=e.empid) as officeemail, 
				(select dateofjoin from employee where id=e.empid) as dateofjoin,
				get_employee_name(s.conducted_by) as conductedby,
				s.schedule_date,
				s.schedule_starttime,
				e.status
				from 	ems_employee_program_schedule e, ems_program_schedules s
				where s.id = e.schedule_id
				and e.schedule_id =scheduleid;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_all_employees_list` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_all_employees_list`()
	begin
		select e.id,e.empid,concat(e.firstname,case when e.middlename is not null then concat(' ',e.middlename) end,
		 case when e.lastname is not null then concat(' ',e.lastname) end) as emp_name
		from employee e
		where e.status=1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_all_shifts` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_all_shifts`(
	)
	begin
		select id as shiftid,shiftname,fromtime,totime,totalhours,status 
		from shiftsmaster
		order by id;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_announcements` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	
    DELIMITER ;;
	CREATE  PROCEDURE `get_announcements`(in announceid int)
	begin
	select a.id,a.topicid,am.topic, a.title,a.fromdate,a.todate,a.description,
    -- if(date(a.todate)< date(current_date()) and a.status = 'Published','Completed',a.status) status
    (case when date(a.todate) < date(current_date()) then 'Completed'
		  when date(a.todate) > date(current_date()) then 'Pending'
          when date(a.fromdate) = date(current_date()) then 'Published'
	 end) as status
    from ems_announcements a 
    inner join ems_announcements_topics_master am on am.id=a.topicid
     where  a.status<>'Deleted' 
     and  a.id <=> ifnull(announceid,a.id) 
     order by a.fromdate desc; -- a.id desc;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_announcements_topics_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_announcements_topics_master`(in topicid int)
	begin
		select r.id,topic,r.status from ems_announcements_topics_master r where r.id <=> ifnull(topicid,id);
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_approved_compoffs` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_approved_compoffs`(
	in `employee_id` int(11),
	in `leave_id` int(11)
	)
	begin
	if(`leave_id` is null) then
		select `lm_register_comp_off`.`id`,
			`lm_register_comp_off`.`empid`,
			`lm_register_comp_off`.`comp_off_date`
		from lm_register_comp_off where lm_register_comp_off.empid = `employee_id`
		and `lm_register_comp_off`.`status` = 'Approved' order by lm_register_comp_off.comp_off_date desc;
	elseif(`leave_id` is not null) then
		set @comp_off_date = (select comp_off_date from lm_register_comp_off where cast(leave_id as char) in (lm_register_comp_off.utilized_leave_id));
		select `lm_register_comp_off`.`id`,
			`lm_register_comp_off`.`empid`,
			`lm_register_comp_off`.`comp_off_date`
		from lm_register_comp_off where lm_register_comp_off.empid = `employee_id`
		and (`lm_register_comp_off`.`status` = 'Approved' or lm_register_comp_off.comp_off_date = (select cast(@comp_off_date as date)))
		order by lm_register_comp_off.comp_off_date desc;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_approved_leaves_above_currentdate` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_approved_leaves_above_currentdate`(
	in `rm_id` int(11)
	)
	begin
	select concat(employee.firstname,case when employee.middlename is not null then concat(' ',employee.middlename) end,
		 case when employee.lastname is not null then concat(' ',employee.lastname) end) as emp_name,
		 employee.empid as employee_id,
		 `lm_employeeleaves`.`fromdate`,
		`lm_employeeleaves`.`todate`
		 from employee,lm_leaveapprovalstatustracker, lm_employeeleaves
		 where employee.id=lm_leaveapprovalstatustracker.empid
		 and lm_leaveapprovalstatustracker.leaveid=lm_employeeleaves.id
		 and lm_employeeleaves.todate>current_timestamp()
		 and lm_leaveapprovalstatustracker.status ='Approved'
		 and lm_leaveapprovalstatustracker.approverid = rm_id;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_attendance_counts_for_date` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_attendance_counts_for_date`(manager_id int,emp_id int,req_date date)
	begin

		if manager_id is null then -- i.e. employee self
			
			-- use temp tables for storing final results & for intermediate calculations
			drop temporary table if exists empstats;
			create temporary table empstats(id int(11) auto_increment, emp int(11),wfh_count float,wfo_count float,onduty_count float,wfrl_count float,absents_count float,wfh_details varchar(10000), wfo_details varchar(10000),onduty_details varchar(10000),wfrl_details varchar(10000),absents_details  varchar(10000), key(id));
			
			drop temporary table if exists monthdays;
			create temporary table monthdays(date_value date);

			drop temporary table if exists weekoffdays;
			create temporary table weekoffdays(date_value date);
			
			drop temporary table if exists holidays;
			create temporary table holidays(date_value date);
			
			set @monthstartdate = last_day(req_date) + interval 1 day - interval 1 month;
			if (@monthstartdate <= (select dateofjoin from employee where id=emp_id)) then
				set @monthstartdate = (select dateofjoin from employee where id=emp_id);
			end if;
			set @monthenddate = last_day(req_date);
			if  (current_date() <= @monthenddate) then
				set @monthenddate = current_date();
			end if;

			set @monthdayscount = datediff(@monthenddate,@monthstartdate)+1;
			
			-- weekoffs 
			set @weekoffscount = 0;
			set @weekoffdays = '';
			set @monthstarttemp = @monthstartdate;
			while (date(@monthstarttemp) <= @monthenddate) do
				set @weekoffscount = @weekoffscount + (case when exists(select * from employee_weekoffs v
														where ( @monthstarttemp between v.effectivefromdate and v.effectivetodate)
														and dayofweek(@monthstarttemp) in (ifnull(v.weekoffday1,0),ifnull(v.weekoffday2,0),ifnull(v.weekoffday3,0))
														and empid = emp_id order by empid desc) then 1 else 0 end) ; 
				insert into weekoffdays
				select (case when exists(select * from employee_weekoffs v
														where ( @monthstarttemp between v.effectivefromdate and v.effectivetodate)
														and dayofweek(@monthstarttemp) in (ifnull(v.weekoffday1,0),ifnull(v.weekoffday2,0),ifnull(v.weekoffday3,0))
														and empid = emp_id order by empid desc) then @monthstarttemp end) ;
				insert into monthdays
				select @monthstarttemp;

				set @monthstarttemp = @monthstarttemp + interval 1 day;
			end while;

			-- holidays
			set @holidaystotal = 0;
			select count(*) into @holidaystotal
			from (select m.date as date_value,m.description as description
			FROM holidaysmaster m, companyworklocationsmaster v  
			WHERE m.location = v.city 
			and v.id =(select s.locationid from employee_worklocations s where empid = emp_id order by id desc limit 1)
			and m.leave_cycle_year = (select fn_get_leave_cycle_year())) v
			where v.date_value between @monthstartdate and @monthenddate;
			
			insert into holidays
			select v.date_value
			from (select m.date as date_value,m.description as description
			FROM holidaysmaster m, companyworklocationsmaster v  
			WHERE m.location = v.city 
			and v.id =(select s.locationid from employee_worklocations s where empid = emp_id order by id desc limit 1)
			and m.leave_cycle_year = (select fn_get_leave_cycle_year())) v
			where v.date_value between @monthstartdate and @monthenddate;
			
			set @wfo_count = (select count(*) from employee_attendance where empid=emp_id and attendancedate between @monthstartdate and @monthenddate and attendancetype=1);
			set @wfh_count = (select count(*) from employee_attendance where empid=emp_id and attendancedate between @monthstartdate and @monthenddate and attendancetype=2);
			set @onduty_count = (select count(*) from employee_attendance where empid=emp_id and attendancedate between @monthstartdate and @monthenddate and attendancetype=3);
			set @wfrl_count = (select count(*) from employee_attendance where empid=emp_id and attendancedate between @monthstartdate and @monthenddate and attendancetype=4);
			set @absents_count = @monthdayscount - (@wfo_count + @wfh_count + @onduty_count + @wfrl_count) - @holidaystotal - @weekoffscount ;
			if @absents_count < 0 then set @absents_count = 0; end if;
			
			set @wfo_details = (select json_arrayagg(json_object('attendance_date',attendancedate)) from employee_attendance where empid=emp_id and attendancedate between @monthstartdate and @monthenddate and attendancetype=1);
			set @wfh_details = (select json_arrayagg(json_object('attendance_date',attendancedate)) from employee_attendance where empid=emp_id and attendancedate between @monthstartdate and @monthenddate and attendancetype=2);
			set @onduty_details = (select json_arrayagg(json_object('attendance_date',attendancedate)) from employee_attendance where empid=emp_id and attendancedate between @monthstartdate and @monthenddate and attendancetype=3);
			set @wfrl_details = (select json_arrayagg(json_object('attendance_date',attendancedate)) from employee_attendance where empid=emp_id and attendancedate between @monthstartdate and @monthenddate and attendancetype=4);
			set @absents_details = (select json_arrayagg(json_object('attendance_date',date_value)) from monthdays where date_value not in (select date_value from holidays  where date_value is not null) and date_value not in (select date_value from weekoffdays where date_value is not null) and date_value not in (select attendancedate from employee_attendance where empid=emp_id and attendancedate between @monthstartdate and @monthenddate));
			
			
			insert into empstats(emp,wfh_count,wfo_count,onduty_count,wfrl_count,absents_count,wfh_details,wfo_details,onduty_details,wfrl_details,absents_details)
			select emp_id,@wfh_count,@wfo_count,@onduty_count ,@wfrl_count, @absents_count,@wfh_details,@wfo_details,@onduty_details,@wfrl_details, @absents_details;
			
			select * from empstats;
			
			drop temporary table empstats;
			drop temporary table weekoffdays;
			drop temporary table holidays;
			drop temporary table monthdays;
		else -- manager
			set @empcount = ifnull((select count(rm.empid) from employee_reportingmanagers rm where rm.reportingmanagerid=manager_id and rm.effectiveenddate is null and date(rm.effectivestartdate) <= req_date and req_date >= (select dateofjoin from employee where id=rm.empid)),0);
			set @wfo_count = ifnull((select count(*) from employee_attendance ea where ea.attendancedate = req_date and ea.attendancetype=1 and ea.empid in (select empid from employee_reportingmanagers where reportingmanagerid=manager_id and effectiveenddate is null and date(effectivestartdate) <= req_date) and req_date >= (select dateofjoin from employee where id=ea.empid)),0);
			set @wfh_count = ifnull((select count(*) from employee_attendance ea where ea.attendancedate = req_date and ea.attendancetype=2 and ea.empid in (select empid from employee_reportingmanagers where reportingmanagerid=manager_id and effectiveenddate is null and date(effectivestartdate) <= req_date) and req_date >= (select dateofjoin from employee where id=ea.empid)),0);
			set @onduty_count = ifnull((select count(*) from employee_attendance ea where ea.attendancedate = req_date and ea.attendancetype=3 and ea.empid in (select empid from employee_reportingmanagers where reportingmanagerid=manager_id and effectiveenddate is null and date(effectivestartdate) <= req_date) and req_date >= (select dateofjoin from employee where id=ea.empid)),0);
			set @wfrl_count = ifnull((select count(*) from employee_attendance ea where ea.attendancedate = req_date and ea.attendancetype=4 and ea.empid in (select empid from employee_reportingmanagers where reportingmanagerid=manager_id and effectiveenddate is null and date(effectivestartdate) <= req_date) and req_date >= (select dateofjoin from employee where id=ea.empid)),0);
			set @absents_count = @empcount - (@wfo_count + @wfh_count + @onduty_count + @wfrl_count);

			set @wfo_details = (select json_arrayagg(json_object('empid',ea.empid,'empname',get_employee_name(ea.empid))) from employee_attendance ea where ea.attendancetype=1 and ea.attendancedate = req_date  and ea.empid in (select empid from employee_reportingmanagers where reportingmanagerid=manager_id and effectiveenddate is null and date(effectivestartdate) <= req_date) and req_date >= (select dateofjoin from employee where id=ea.empid));
			set @wfh_details = (select json_arrayagg(json_object('empid',ea.empid,'empname',get_employee_name(ea.empid))) from employee_attendance ea where ea.attendancetype=2 and ea.attendancedate = req_date  and ea.empid in (select empid from employee_reportingmanagers where reportingmanagerid=manager_id and effectiveenddate is null and date(effectivestartdate) <= req_date) and req_date >= (select dateofjoin from employee where id=ea.empid));
			set @onduty_details = (select json_arrayagg(json_object('empid',ea.empid,'empname',get_employee_name(ea.empid))) from employee_attendance ea where ea.attendancetype=3 and ea.attendancedate = req_date  and ea.empid in (select empid from employee_reportingmanagers where reportingmanagerid=manager_id and effectiveenddate is null and date(effectivestartdate) <= req_date) and req_date >= (select dateofjoin from employee where id=ea.empid));
			set @wfrl_details = (select json_arrayagg(json_object('empid',ea.empid,'empname',get_employee_name(ea.empid))) from employee_attendance ea where ea.attendancetype=4 and ea.attendancedate = req_date  and ea.empid in (select empid from employee_reportingmanagers where reportingmanagerid=manager_id and effectiveenddate is null and date(effectivestartdate) <= req_date) and req_date >= (select dateofjoin from employee where id=ea.empid));
			set @absents_details = (select json_arrayagg(json_object('empid',e.empid,'empname',get_employee_name(e.empid))) from (select empid from employee_reportingmanagers r where r.reportingmanagerid=manager_id and r.effectiveenddate is null and date(r.effectivestartdate) <= req_date and req_date >= (select dateofjoin from employee where id=r.empid)) e where not exists(select * from employee_attendance where attendancedate = req_date and empid = e.empid and req_date >= (select dateofjoin from employee where id=e.empid)));
			-- (select json_arrayagg(json_object('attendance_date',date_value)) from monthdays where date_value not in (select date_value from holidays  where date_value is not null) and date_value not in (select date_value from weekoffdays where date_value is not null) and date_value not in (select attendancedate from employee_attendance where empid=emp_id and attendancedate between @monthstartdate and @monthenddate));
			
			-- insert into empids(emp)
			select @wfo_count as wfo_count,@wfh_count as wfh_count,@onduty_count as onduty_count,@wfrl_count as wfrl_count, @absents_count as absents_count,@wfo_details as wfo_details,@wfh_details as wfh_details,@onduty_details as onduty_details,@wfrl_details as wfrl_details, @absents_details as absents_details;
		end if;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_attendance_details_report` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_attendance_details_report`(
		`attendanceid` int(11)
	)
	begin    
		 select distinct ea.empid, (select concat(employee.firstname,' ' ,employee.lastname) from employee where employee.id=ea.empid) as empname,ea.attendancedate, ea.firstlogintime,ea.lastlogouttime,ea.workedhours as totalhours,
		 (case when (select count(*) from employee_attendance_details where employee_attendance_details.attendanceid=ea.id )<=2 then null
		 else
			(select group_concat(convert(time(employee_attendance_details.punchtime),char(4000)) separator ',') from employee_attendance_details where employee_attendance_details.attendanceid=ea.id  order by punchtime)
			end) as breaks,
		 ea.breakhours as breaktime,
		 ea.productivehours,
		 (select shiftsmaster.shiftname from shiftsmaster where shiftsmaster.id=ea.shiftid) as shift
		 from employee_attendance ea, employee_attendance_details ead
		 where ea.id=`attendanceid`;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_attendance_messages` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_attendance_messages`(in `code` varchar(255),in `pagenumber` int,in `pagesize` int)
	begin
		if `code` is not null and `code`!='' then
			set @sql = concat('select *,(select count(*) from attendance_messages where code = ''',`code`,''') as total from attendance_messages where code = ''',`code`,'''');
			prepare stmt from @sql;
			execute stmt;
			deallocate prepare stmt;
		else
			set @offset1 = pagesize*(pagenumber-1);
			set @count = (select count(*) from attendance_messages);
			set @sqltext = concat('select *,@count as total from attendance_messages ',' limit ',@offset1,',',pagesize);
			prepare stmt from @sqltext;
			execute stmt;
			deallocate prepare stmt;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_attendance_monthly_report` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_attendance_monthly_report`(
		`manager_employee_id` int(11),
		`employee_id` int(11),
		`calendar_date` datetime
	)
	begin
	set @monthstartdate = `calendar_date`;
    set @monthstartdate = last_day(@monthstartdate) + interval 1 day - interval 1 month;
    
    set @totalmonthdays = (case when @monthstartdate=(last_day(current_date()) + interval 1 day - interval 1 month) then datediff(current_date(),@monthstartdate)+1 else day(last_day(`calendar_date`)) end);
    
    set @monthenddate = (case when @monthstartdate=(last_day(current_date()) + interval 1 day - interval 1 month) then current_date() else last_day(@monthstartdate) end);
	/*if (employee_id is not null) then
		set @doj = (select date(employee.dateofjoin) from employee where employee.id = employee_id);
		if (@monthstartdate <= @doj) then
			set @monthstartdate = @doj; 
		end if;
    end if;*/
    set @datestr = '[';
    set @datenamestr = '[';
    -- create temp table to hold empids under a manager if any
    drop temporary table if exists manageremployees;
    create temporary table manageremployees (
		sid int(11) auto_increment not null,
		mempid int(11),
        primary key (sid)
    );
    create temporary table weekoffs_table (
		empid int(11),
		weekoff1 int(11),
		weekoff2 int(11),
		weekoff3 int(11),
		effective_fromdate date,
		effective_todate date
	);
    
	drop temporary table if exists monthlyreport;
    create temporary table monthlyreport (
		attdate date,
		empid int(11),
        empname varchar(255),
        present_or_absent varchar(4000)
    );
    set @monthstarttemp = @monthstartdate;
    
    if (`manager_employee_id` is not null) then
		insert into manageremployees(mempid)
        SELECT e.id as id
		FROM employee e,employee_reportingmanagers rm
		WHERE e.id = rm.empid
		and rm.effectiveenddate  is null
		and rm.reportingmanagerid=`manager_employee_id`
		order by e.firstname, e.lastname; 
	else 
		insert into manageremployees(mempid) values(`employee_id`);
        
    end if;
    
	insert into weekoffs_table(empid,weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
	select empid,weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
	from employee_weekoffs
	where employee_weekoffs.empid in (select mempid from manageremployees);
    
    set  @isweekoff='';
    set  @holiday ='';
    set @leave = '';
    set @absentcnt = 0;
    set @monthdayscnt = (SELECT DAYOFMONTH(LAST_DAY(@monthstartdate)));
    set @cnt = (select count(*) from manageremployees);
     
    while (@monthstarttemp <= @monthenddate) do
        set @tot = @cnt;
        while (@tot>=0) do
			-- weekoffs 
			set @isweekoff = (case when exists (select * from weekoffs_table v
			where ( @monthstarttemp between v.effective_fromdate and v.effective_todate)
			and dayofweek(@monthstarttemp) in (ifnull(v.weekoff1,0),ifnull(v.weekoff2,0),ifnull(v.weekoff3,0))
            and empid = (select mempid from manageremployees where sid=(@cnt-@tot)+1) order by empid desc) then '"W"' else '' end) ;    
			
			-- holidays
			select concat('"H"') into @holiday -- ',v.description,'
			from (select m.date as date_value,m.description as description
			FROM holidaysmaster m, companyworklocationsmaster v  
			WHERE m.location = v.city 
			and v.id =(select s.locationid from employee_worklocations s where empid = (select mempid from manageremployees where sid=(@cnt-@tot)+1) order by id desc limit 1)
			and m.leave_cycle_year = (select fn_get_leave_cycle_year())) v
			where @monthstarttemp = v.date_value;
			
			 -- leaves
			if exists(select * from information_schema.columns where  table_schema=(select database()) and table_name='lm_employeeleaves') then
				if exists(select * from lm_employeeleaves where @monthstarttemp between fromdate and todate and empid= (select mempid from manageremployees where sid=(@cnt-@tot)+1) and leavestatus in ('Submitted','Approved')) then
					set @leave = '"A"';
				end if;
			end if;	
                
                
			if exists (select * from employee_attendance where attendancedate = @monthstarttemp and empid=(select mempid from manageremployees where sid=(@cnt-@tot)+1)) then
				insert into monthlyreport
                select distinct a.attendancedate,a.empid,(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
					 (case when (a.attendancedate >= date(e.dateofjoin)) then (case when a.attendancedate is not null then '"P"' 
																				   when @isweekoff <> '' then @isweekoff
																				   when @holiday <> '' then @holiday	
																				   when @leave <> '' then @leave	
																				   else '"A"' end) 
                                   else '" "' end) as present_or_absent
                       
				from employee_attendance a , employee e
				where a.attendancedate = @monthstarttemp
                and a.empid = e.id
                and a.empid=(select mempid from manageremployees where sid=(@cnt-@tot)+1);
			else 
				insert into monthlyreport
				select distinct @monthstarttemp,m.mempid,(select concat(employee.firstname,' ',employee.lastname) from employee 
                where employee.id=m.mempid) as empname,(case when @monthstarttemp >= date(t.dateofjoin) then 
																						(case when @isweekoff <> '' then @isweekoff
																							  when @holiday <> '' then @holiday	
																							  when @leave <> '' then @leave	
                                                                                              else '"A"' end)
                else '" "' end) as present_or_absent
				from manageremployees m, employee t
				where m.mempid = t.id
                and m.sid=(@cnt-@tot)+1;
			end if;
            set @tot = @tot -1;
            set  @isweekoff='';
			set  @holiday ='';
			set @leave = '';
		end while;
		set @datestr = concat(@datestr,'"',convert(date(@monthstarttemp),char(8000)), '"');
        set @datenamestr = concat(@datenamestr,'"',dayname(@monthstarttemp), '"');
        if (@monthstarttemp < @monthenddate) then set @datestr = concat(@datestr,','); set @datenamestr = concat(@datenamestr,','); end if;

		set  @isweekoff='';
        set  @holiday ='';
        set @leave = '';
		set @monthstarttemp = @monthstarttemp + interval 1 day;
 	end while;
    set @absentcnt = (select count(*) from monthlyreport where present_or_absent ='"A"');
    set @datestr = concat(@datestr,']');
    set @datenamestr = concat(@datenamestr,']');
    
    select @datestr as result
	union
	select @datenamestr as result
	union
    select concat('["',grp.empname,'",',group_concat(grp.present_or_absent separator ','),',"',
     concat(convert(
      -- (select count(*) from monthlyreport where present_or_absent ='"A"' and empid=grp.empid),char(10)),' of ',@totalmonthdays),
      (select (CHAR_LENGTH(grp.present_or_absent) - CHAR_LENGTH(REPLACE(grp.present_or_absent, '"A"', ''))) / CHAR_LENGTH('"A"')),unsigned),' of ',@totalmonthdays),
    -- (select count(distinct attendancedate) from employee_attendance where employee_attendance.empid=grp.empid and employee_attendance.lastlogouttime is not null and employee_attendance.attendancedate between @monthstartdate and @monthenddate),char(10)),
    '"]') as result 
    from (
			select empid,empname,group_concat(present_or_absent separator ',') as present_or_absent 
            from monthlyreport group by empid,empname
		) grp
	group by grp.empid,grp.empname;
	
    drop temporary table manageremployees;
    drop temporary table weekoffs_table;
    drop temporary table monthlyreport;
end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_attendance_monthly_report1` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_attendance_monthly_report1`(
		`manager_employee_id` int(11),
		`employee_id` int(11),
		`calendar_date` datetime
	)
	begin
		set @monthstartdate = `calendar_date`;
		set @monthstartdate = last_day(@monthstartdate) + interval 1 day - interval 1 month;
		set @monthenddate = (case when @monthstartdate=(last_day(current_date()) + interval 1 day - interval 1 month) then current_date() else last_day(@monthstartdate) end);
		
		set @datestr = '[';
		set @datenamestr = '[';
		-- create temp table to hold empids under a manager if any
		drop temporary table if exists manageremployees;
		create temporary table manageremployees (
			sid int(11) auto_increment not null,
			mempid int(11),
			primary key (sid)
		);
		drop temporary table if exists monthlyreport;
		create temporary table monthlyreport (
			attdate date,
			empid int(11),
			empname varchar(255),
			present_or_absent varchar(2000)
		);
		set @monthstarttemp = @monthstartdate;
		
		if (`manager_employee_id` is not null) then
			insert into manageremployees(mempid)
			SELECT e.id as id
			FROM employee e,employee_reportingmanagers rm
			WHERE e.id = rm.empid
			and rm.effectiveenddate  is null
			and rm.reportingmanagerid=`manager_employee_id`
			order by e.firstname, e.lastname; 
		else 
			insert into manageremployees(mempid) values(`employee_id`);
			
		end if;
		
		set @cnt = (select count(*) from manageremployees);
		 
		while (@monthstarttemp <= @monthenddate) do
			set @tot = @cnt;
			while (@tot>=0) do
					
				if exists (select * from employee_attendance where attendancedate = @monthstarttemp and empid=(select mempid from manageremployees where sid=(@cnt-@tot))) then
					insert into monthlyreport
					select distinct a.attendancedate,a.empid,(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
						 (case when (a.attendancedate >= date(e.dateofjoin)) then (case when a.attendancedate is not null then '"P"' else '"A"' end) 
									   else '" "' end) as present_or_absent
						   
					from employee_attendance a , employee e
					where a.attendancedate = @monthstarttemp
					and a.empid = e.id
					and a.empid=(select mempid from manageremployees where sid=(@cnt-@tot));
				else 
					insert into monthlyreport
					select distinct @monthstarttemp,m.mempid,(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=m.mempid) as empname,case when @monthstarttemp >= date(t.dateofjoin) then '"A"' else '" "' end as present_or_absent
					from manageremployees m, employee t
					where m.mempid = t.id
					and sid=(@cnt-@tot);
				end if;
				set @tot = @tot -1;
			end while;
			set @datestr = concat(@datestr,'"',convert(@monthstarttemp,char(4000)), '"');
			set @datenamestr = concat(@datenamestr,'"',dayname(@monthstarttemp), '"');
			if (@monthstarttemp < @monthenddate) then set @datestr = concat(@datestr,','); set @datenamestr = concat(@datenamestr,','); end if;

			set @monthstarttemp = @monthstarttemp + interval 1 day;
		end while;
		
		set @datestr = concat(@datestr,']');
		set @datenamestr = concat(@datenamestr,']');
		
		select @datestr as result
		union
		select @datenamestr as result
		union
		select concat('["',grp.empname,'",',group_concat(grp.present_or_absent separator ','),',"',
		convert((select count(*) from employee_attendance where employee_attendance.empid=grp.empid and employee_attendance.lastlogouttime is not null and employee_attendance.attendancedate between @monthstartdate and @monthenddate),char(10)),
		'"]') as result 
		from (
				select empid,empname,group_concat(present_or_absent separator ',') as present_or_absent 
				from monthlyreport group by empid,empname
			) grp
		group by grp.empid,grp.empname;
		
		drop temporary table manageremployees;
		drop temporary table monthlyreport;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_attendance_monthly_report2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_attendance_monthly_report2`(
		`manager_employee_id` int(11),
		`employee_id` int(11),
		`calendar_date` datetime
	)
	begin
		set @monthstartdate = `calendar_date`;
		set @monthstartdate = last_day(@monthstartdate) + interval 1 day - interval 1 month;
		set @monthenddate = (case when @monthstartdate=(last_day(current_date()) + interval 1 day - interval 1 month) then current_date() else last_day(@monthstartdate) end);
		if (employee_id is not null) then
			set @doj = (select employee.dateofjoin from employee where employee.id = employee_id);
			if (@monthstartdate < @doj) then
				set @monthstartdate = @doj; 
			end if;
		end if;
		set @datestr = '[';
		set @datenamestr = '[';
		-- create temp table to hold empids under a manager if any
		drop temporary table if exists manageremployees;
		create temporary table manageremployees (
			sid int(11) auto_increment not null,
			mempid int(11),
			primary key (sid)
		);
		create temporary table weekoffs_table (
			empid int(11),
			weekoff1 int(11),
			weekoff2 int(11),
			weekoff3 int(11),
			effective_fromdate date,
			effective_todate date
		);
		
		drop temporary table if exists monthlyreport;
		create temporary table monthlyreport (
			attdate date,
			empid int(11),
			empname varchar(255),
			present_or_absent varchar(2000)
		);
		set @monthstarttemp = @monthstartdate;
		
		if (`manager_employee_id` is not null) then
			insert into manageremployees(mempid)
			SELECT e.id as id
			FROM employee e,employee_reportingmanagers rm
			WHERE e.id = rm.empid
			and rm.effectiveenddate  is null
			and rm.reportingmanagerid=`manager_employee_id`
			order by e.firstname, e.lastname; 
		else 
			insert into manageremployees(mempid) values(`employee_id`);
			
		end if;
		
		insert into weekoffs_table(empid,weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
		select empid,weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
		from employee_weekoffs
		where employee_weekoffs.empid in (select mempid from manageremployees);
		
		set  @isweekoff='';
		set  @holiday ='';
		set @leave = '';
		
		set @cnt = (select count(*) from manageremployees);
		 
		while (@monthstarttemp <= @monthenddate) do
			set @tot = @cnt;
			while (@tot>=0) do
				-- weekoffs
				select 'W' into @isweekoff from weekoffs_table v
				where ( @monthstarttemp between v.effective_fromdate and v.effective_todate)
				and dayofweek(@monthstarttemp) in (ifnull(v.weekoff1,0),ifnull(v.weekoff2,0),ifnull(v.weekoff3,0))
				and empid = (select mempid from manageremployees where sid=(@cnt-@tot)) order by empid desc limit 1;    
				
				-- holidays
				select v.description into @holiday
				from (select m.date as date_value,m.description as description
				FROM holidaysmaster m, companyworklocationsmaster v  
				WHERE m.location = v.city 
				and v.id =(select s.locationid from employee_worklocations s where empid = (select mempid from manageremployees where sid=(@cnt-@tot)) order by id desc limit 1)
				and m.leave_cycle_year = (select fn_get_leave_cycle_year())  limit 1) v
				where @monthstarttemp = v.date_value;
				
				 -- leaves
				if exists(select * from information_schema.columns where  table_schema=(select database()) and table_name='lm_employeeleaves') then
					if exists(select * from lm_employeeleaves where @monthstarttemp between fromdate and todate and empid= (select mempid from manageremployees where sid=(@cnt-@tot)) and leavestatus in ('Submitted','Approved')) then
						set @leave = "L";
					end if;
				end if;	
					
					
				if exists (select * from employee_attendance where attendancedate = @monthstarttemp and empid=(select mempid from manageremployees where sid=(@cnt-@tot))) then
					insert into monthlyreport
					select distinct a.attendancedate,a.empid,(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
						 (case when (a.attendancedate >= date(e.dateofjoin)) then (case when a.attendancedate is not null then '"P"' 
																					   when @isweekoff <> '' then @isweekoff
																					   when @holiday <> '' then @holiday	
																					   when @leave <> '' then @leave	
																					   else '"A"' end) 
									   else '" "' end) as present_or_absent
						   
					from employee_attendance a , employee e
					where a.attendancedate = @monthstarttemp
					and a.empid = e.id
					and a.empid=(select mempid from manageremployees where sid=(@cnt-@tot));
				else 
					insert into monthlyreport
					select distinct @monthstarttemp,m.mempid,(select concat(employee.firstname,' ',employee.lastname) from employee 
					where employee.id=m.mempid) as empname,(case when @monthstarttemp >= date(t.dateofjoin) then 
																							(case when @isweekoff <> '' then @isweekoff
																								  when @holiday <> '' then @holiday	
																								  when @leave <> '' then @leave	
																								  else '"A"' end)
					else '" "' end) as present_or_absent
					from manageremployees m, employee t
					where m.mempid = t.id
					and sid=(@cnt-@tot);
				end if;
				set @tot = @tot -1;
			end while;
			set @datestr = concat(@datestr,'"',convert(@monthstarttemp,char(4000)), '"');
			set @datenamestr = concat(@datenamestr,'"',dayname(@monthstarttemp), '"');
			if (@monthstarttemp < @monthenddate) then set @datestr = concat(@datestr,','); set @datenamestr = concat(@datenamestr,','); end if;

			set  @isweekoff='';
			set  @holiday ='';
			set @leave = '';
			set @monthstarttemp = @monthstarttemp + interval 1 day;
		end while;
		
		set @datestr = concat(@datestr,']');
		set @datenamestr = concat(@datenamestr,']');
		
		select @datestr as result
		union
		select @datenamestr as result
		union
		select concat('["',grp.empname,'",',group_concat(grp.present_or_absent separator ','),',"',
		convert((select count(*) from employee_attendance where employee_attendance.empid=grp.empid and employee_attendance.lastlogouttime is not null and employee_attendance.attendancedate between @monthstartdate and @monthenddate),char(10)),
		'"]') as result 
		from (
				select empid,empname,group_concat(present_or_absent separator ',') as present_or_absent 
				from monthlyreport group by empid,empname
			) grp
		group by grp.empid,grp.empname;
		
		drop temporary table manageremployees;
		drop temporary table weekoffs_table;
		drop temporary table monthlyreport;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_attendance_monthly_report3` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_attendance_monthly_report3`(
		`manager_employee_id` int(11),
		`employee_id` int(11),
		`calendar_date` datetime
	)
	begin
		set @monthstartdate = `calendar_date`;
		set @totalmonthdays = (select day(last_day(`calendar_date`)));
		set @monthstartdate = last_day(@monthstartdate) + interval 1 day - interval 1 month;
		set @monthenddate = (case when @monthstartdate=(last_day(current_date()) + interval 1 day - interval 1 month) then current_date() else last_day(@monthstartdate) end);
		if (employee_id is not null) then
			set @doj = (select date(employee.dateofjoin) from employee where employee.id = employee_id);
			if (@monthstartdate <= @doj) then
				set @monthstartdate = @doj; 
			end if;
		end if;
		set @datestr = '[';
		set @datenamestr = '[';
		-- create temp table to hold empids under a manager if any
		drop temporary table if exists manageremployees;
		create temporary table manageremployees (
			sid int(11) auto_increment not null,
			mempid int(11),
			primary key (sid)
		);
		create temporary table weekoffs_table (
			empid int(11),
			weekoff1 int(11),
			weekoff2 int(11),
			weekoff3 int(11),
			effective_fromdate date,
			effective_todate date
		);
		
		drop temporary table if exists monthlyreport;
		create temporary table monthlyreport (
			attdate date,
			empid int(11),
			empname varchar(255),
			present_or_absent varchar(4000)
		);
		set @monthstarttemp = @monthstartdate;
		
		if (`manager_employee_id` is not null) then
			insert into manageremployees(mempid)
			SELECT e.id as id
			FROM employee e,employee_reportingmanagers rm
			WHERE e.id = rm.empid
			and rm.effectiveenddate  is null
			and rm.reportingmanagerid=`manager_employee_id`
			order by e.firstname, e.lastname; 
		else 
			insert into manageremployees(mempid) values(`employee_id`);
			
		end if;
		
		insert into weekoffs_table(empid,weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
		select empid,weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
		from employee_weekoffs
		where employee_weekoffs.empid in (select mempid from manageremployees);
		
		set  @isweekoff='';
		set  @holiday ='';
		set @leave = '';
		set @absentcnt = 0;
		set @monthdayscnt = (SELECT DAYOFMONTH(LAST_DAY(@monthstartdate)));
		set @cnt = (select count(*) from manageremployees);
		 
		while (@monthstarttemp <= @monthenddate) do
			set @tot = @cnt;
			while (@tot>=0) do
				-- weekoffs 
				set @isweekoff = (case when exists (select * from weekoffs_table v
				where ( @monthstarttemp between v.effective_fromdate and v.effective_todate)
				and dayofweek(@monthstarttemp) in (ifnull(v.weekoff1,0),ifnull(v.weekoff2,0),ifnull(v.weekoff3,0))
				and empid = (select mempid from manageremployees where sid=(@cnt-@tot)+1) order by empid desc) then '"W"' else '' end) ;    
				
				-- holidays
				select concat('"H"') into @holiday -- ',v.description,'
				from (select m.date as date_value,m.description as description
				FROM holidaysmaster m, companyworklocationsmaster v  
				WHERE m.location = v.city 
				and v.id =(select s.locationid from employee_worklocations s where empid = (select mempid from manageremployees where sid=(@cnt-@tot)+1) order by id desc limit 1)
				and m.leave_cycle_year = (select fn_get_leave_cycle_year())) v
				where @monthstarttemp = v.date_value;
				
				 -- leaves
				if exists(select * from information_schema.columns where  table_schema=(select database()) and table_name='lm_employeeleaves') then
					if exists(select * from lm_employeeleaves where @monthstarttemp between fromdate and todate and empid= (select mempid from manageremployees where sid=(@cnt-@tot)+1) and leavestatus in ('Submitted','Approved')) then
						set @leave = '"A"';
					end if;
				end if;	
					
					
				if exists (select * from employee_attendance where attendancedate = @monthstarttemp and empid=(select mempid from manageremployees where sid=(@cnt-@tot)+1)) then
					insert into monthlyreport
					select distinct a.attendancedate,a.empid,(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
						 (case when (a.attendancedate >= date(e.dateofjoin)) then (case when a.attendancedate is not null then '"P"' 
																					   when @isweekoff <> '' then @isweekoff
																					   when @holiday <> '' then @holiday	
																					   when @leave <> '' then @leave	
																					   else '"A"' end) 
									   else '" "' end) as present_or_absent
						   
					from employee_attendance a , employee e
					where a.attendancedate = @monthstarttemp
					and a.empid = e.id
					and a.empid=(select mempid from manageremployees where sid=(@cnt-@tot)+1);
				else 
					insert into monthlyreport
					select distinct @monthstarttemp,m.mempid,(select concat(employee.firstname,' ',employee.lastname) from employee 
					where employee.id=m.mempid) as empname,(case when @monthstarttemp >= date(t.dateofjoin) then 
																							(case when @isweekoff <> '' then @isweekoff
																								  when @holiday <> '' then @holiday	
																								  when @leave <> '' then @leave	
																								  else '"A"' end)
					else '" "' end) as present_or_absent
					from manageremployees m, employee t
					where m.mempid = t.id
					and m.sid=(@cnt-@tot)+1;
				end if;
				set @tot = @tot -1;
				set  @isweekoff='';
				set  @holiday ='';
				set @leave = '';
			end while;
			set @datestr = concat(@datestr,'"',convert(date(@monthstarttemp),char(8000)), '"');
			set @datenamestr = concat(@datenamestr,'"',dayname(@monthstarttemp), '"');
			if (@monthstarttemp < @monthenddate) then set @datestr = concat(@datestr,','); set @datenamestr = concat(@datenamestr,','); end if;

			set  @isweekoff='';
			set  @holiday ='';
			set @leave = '';
			set @monthstarttemp = @monthstarttemp + interval 1 day;
		end while;
		set @absentcnt = (select count(*) from monthlyreport where present_or_absent ='"A"');
		set @datestr = concat(@datestr,']');
		set @datenamestr = concat(@datenamestr,']');
		
		select @datestr as result
		union
		select @datenamestr as result
		union
		select concat('["',grp.empname,'",',group_concat(grp.present_or_absent separator ','),',"',
		 concat(convert(
		  -- (select count(*) from monthlyreport where present_or_absent ='"A"' and empid=grp.empid),char(10)),' of ',@totalmonthdays),
		  (select (CHAR_LENGTH(grp.present_or_absent) - CHAR_LENGTH(REPLACE(grp.present_or_absent, '"A"', ''))) / CHAR_LENGTH('"A"')),unsigned),' of ',@totalmonthdays),
		-- (select count(distinct attendancedate) from employee_attendance where employee_attendance.empid=grp.empid and employee_attendance.lastlogouttime is not null and employee_attendance.attendancedate between @monthstartdate and @monthenddate),char(10)),
		'"]') as result 
		from (
				select empid,empname,group_concat(present_or_absent separator ',') as present_or_absent 
				from monthlyreport group by empid,empname
			) grp
		group by grp.empid,grp.empname;
		
		drop temporary table manageremployees;
		drop temporary table weekoffs_table;
		drop temporary table monthlyreport;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_attendance_regularizations_history_for_manager` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_attendance_regularizations_history_for_manager`(
		manager_employee_id int(11)
	)
	begin

		select a.id,(select concat(firstname,' ',lastname) from employee where id=a.empid) as empname, a.applieddate,(select type from attendancetypesmaster where id=a.worktype) as worktype,(select shiftname from shiftsmaster where id=a.shiftid) as shift,a.fromdate, a.todate,a.reason,a.raisedby as raisedbyid,(select concat(firstname,' ',lastname) from employee where id=a.raisedby) as raisedbyname, a.approvercomments as comment,a.status 
		from employee_attendance_regularization a
		where  a.status in ('Approved','Rejected') and
		a.empid in (select empid from employee_reportingmanagers where reportingmanagerid=`manager_employee_id` and effectiveenddate is null)
		order by a.applieddate desc;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_attendance_summary_report` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_attendance_summary_report`(
		`manager_empid` int(11),
		`employee` int(11),
		`fromdate` datetime,
		`todate` datetime
	)
	begin
		select * from (
			select eas.id,eas.empid,(select concat(firstname,' ' ,lastname) from employee where id=eas.empid) as empname,eas.attendanceid,eas.attendancedate,eas.firstlogintime,eas.lastlogouttime,eas.totalhours,eas.breaks,eas.breaktime,eas.productivehours  
			from employee_attendance_summary eas,employee e
			where `employee` is not null and eas.empid = `employee`
			and eas.attendancedate between date(`fromdate`) and date(`todate`)
			
			union
			select eas.id,eas.empid,(select concat(firstname,' ' ,lastname) from employee where id=eas.empid) as empname,eas.attendanceid,eas.attendancedate,eas.firstlogintime,eas.lastlogouttime,eas.totalhours,eas.breaks,eas.breaktime,eas.productivehours  
			from employee_attendance_summary eas,employee e
			where `employee` is null and eas.empid in (select empid  from employee_reportingmanagers where reportingmanagerid=`manager_empid` 
								and effectiveenddate is null)
			and eas.attendancedate between date(`fromdate`) and date(`todate`)
		   
			union
			select eas.id,eas.empid,(select concat(firstname,' ' ,lastname) from employee where id=eas.empid) as empname,eas.attendanceid,eas.attendancedate,eas.firstlogintime,eas.lastlogouttime,eas.totalhours,eas.breaks,eas.breaktime,eas.productivehours  
			from employee_attendance_summary eas,employee e
			where `employee` is null and `manager_empid` is null and eas.empid = e.id
			and eas.attendancedate between date(`fromdate`) and date(`todate`)
		) a
		order by a.attendancedate;
	/*    case when `employee` is not null then  `employee` 
								 when `manager_empid` is not null then (select group_concat(empid separator ',') from employee_reportingmanagers where reportingmanagerid=`manager_empid` and effectiveenddate is null)
								 when (`manager_empid` is null and `employee` is null) then e.id
							end)
		and eas.empid=e.id
		and eas.attendancedate between date(`fromdate`) and date(`todate`)
		order by eas.attendancedate;*/
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_audit_log_details_for_employee` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_audit_log_details_for_employee`(
	IN action_id int
	)
	BEGIN
	select 'hi';





	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_candidate_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_candidate_details`(in candidate_id varchar(25))
	BEGIN
	set @cid = (select ems_new_hire.id  from ems_new_hire where ems_new_hire.candidate_id = candidate_id); 
	-- select @cid;    
		set @relations_json = (select json_arrayagg(json_object(
		'id',              				`id`,
		'candidateid',           		`candidateid`,
		'firstname',       				`firstname`,
		'lastname',        				`lastname`,
		'gender',          				`gender`,
		'contactnumber',   				`contactnumber`,
		'dateofbirth',     				`dateofbirth`,
		'relationship',    				`relationship`,
		'status',          				`status`
		))
		from ems_candidate_relations cr
		where cr.candidateid = @cid
		);
	  --  select @relations_json;
		set @experience_json = (select json_arrayagg(json_object(
		'id',          `id`,
		'candidateid', `candidateid`,
		'companyname', `companyname`,
		'designation', `designation`,
		'skills',      `skills`,
		'fromdate',    `fromdate`,
		'todate',      `todate`           
		))
		from ems_candidate_experience_details cx
		where cx.candidateid = @cid);
	   -- select @experience_json;
		
		set @education_json = (select json_arrayagg(json_object(
		'id',            `id`,
		'candidateid',   `candidateid`,
		'course', 		 `course`,
		'institutename', `institutename`,
		'fromdate',      `fromdate`,
		'todate',        `todate`      
		))
		from ems_candidate_education_details ce
		where ce.candidateid = @cid
		);
	   -- select @education_json;
		 if not exists (select * from ems_preonboard_candidate c where c.candidateid=@cid) then
		-- select 0 as newhire;
		  select json_arrayagg(json_object(
		'id',                           null,
		'candidateid',                  `id`,
		'firstname',					`firstname`,
		'middlename',                   `middlename`,
		'lastname',						`lastname`,
		'personal_email',               `personal_email`,
		'hired_date',					`hired_date`,
		'dateofbirth',					null,
		'gender',						null,
		'maritalstatus',				null,
		'designation',                  `designation`,
		'dateofjoin',					`dateofjoin`,
		'noticeperiod',                 null,
		'languages_spoken',             null,
		'bloodgroup',                   null,
		'contact_number',               `contact_number`,
		'emergencycontact_number',       `alternatecontact_number`,
		'emergencycontact_relation',     null,
		'emergencycontactname',          null,
		'address',                       null,
		'city',                          null,
		'state',                         null,
		'pincode',                       null,
		'country',                       null,
		'paddress',                      null,  
		'pcity',                         null,
		'pstate',                        null,
		'ppincode',                      null,
		'pcountry',                      null,
		'aadharnumber',					 null,
		'passport',						 null,
		'stepcompleted',				 null,
		'relations',					@relations_json,
		'education',					@education_json,
		'experience',					@experience_json
		)) as json
			from ems_new_hire as c 
			where c.id=@cid;        
		else
	   select json_arrayagg(json_object(
		'id',                           `id`,
		'candidateid',                  `candidateid`,
		'firstname',					`firstname`,
		'middlename',                   `middlename`,
		'lastname',						`lastname`,
		'personal_email',                `personal_email`,
		'hired_date',					`hired_date`,
		'dateofbirth',					`dateofbirth`,
		'gender',						`gender`,
		'maritalstatus',				`maritalstatus`,
		'designation',                  `designation`,
		'dateofjoin',					`dateofjoin`,
		'noticeperiod',                 `noticeperiod`,
		'languages_spoken',             `languages_spoken`,
		'bloodgroup',                   `bloodgroup`,
		'contact_number',               `contact_number`,
		'emergencycontact_number',      `emergencycontact_number`,
		'emergencycontact_relation',     `emergencycontact_relation`,
		'emergencycontactname',         `emergencycontactname`,
		'address',                      `address`,
		'city',                         `city`,
		'state',                        `state`,
		'pincode',                      `pincode`,
		'country',                      `country`,
		'paddress',                     `paddress`,  
		'pcity',                        `pcity`,
		'pstate',                       `pstate`,
		'ppincode',                     `ppincode`,
		'pcountry',                     `pcountry`,
		'aadharnumber',					`aadharnumber`,
		'passport',						`passport`,
		'stepcompleted',				`stepcompleted`,
		'relations',					@relations_json,
		'education',					@education_json,
		'experience',					@experience_json
		)) as json
	  from ems_preonboard_candidate pc
	  where pc.candidateid = @cid;
	 --   select @candidateDetails_json;
		end if;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_carryforwarded_leave_max_count` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_carryforwarded_leave_max_count`(
	)
	begin
		SET @ltype = 0;
		SET @ltype = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster 
					where lm_rulemaster.rulename = 'LEAVETYPE_FOR_WHICH_BALANCE_IS_TO_BE_CARRIED_FORWARD') 
					order by lm_rulevalues.id desc limit 1);
		
		set @max_count = 0;
		set @max_count = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster 
						where lm_rulemaster.rulename = 'LEAVES_MAX_COUNT_PER_YEAR') and lm_rulevalues.leavetypeid = cast(@ltype as unsigned)
						order by lm_rulevalues.id desc limit 1);
		
		if (coalesce(@ltype, 0) <> 0) then
			select @max_count as max_count;
		else
			select 0 as max_count;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_checklists_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_checklists_master`(cid int,deptid int,c_category varchar(25),c_status varchar(16))
	begin
		select ecm.id,
			ecm.name,
			ecm.description,
			ecm.department_id,
			(select deptname from departmentsmaster where id=ecm.department_id) as department_name,
			ecm.category,
			ecm.status 
		from ems_checklist_master ecm 
		where ecm.id <=> ifnull(cid,ecm.id) 
		and ecm.department_id <=> ifnull(deptid,ecm.department_id) 
		and ecm.category = c_category 
		and ecm.status <=> ifnull(c_status,ecm.status);
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_company_db_name` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_company_db_name`(shortcode varchar(32))
	begin
		select db_name from company_db_mapping where company_short_code=`shortcode` and enabled=1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_company_pay_schedule` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_company_pay_schedule`()
	begin	
		select m.id as rule_id,m.rule_name,m.description,m.additional_information,d.value as rule_value
		-- (case when d.value='LAST_DAY' then last_day(current_date()) when d.value='LAST_BUT_1_DAY' then date_add(last_day(current_date()), interval -1 day) when d.value='LAST_BUT_2_DAYS' then date_add(last_day(current_date()), interval -2 day) else d.value end) as rule_value
		from payroll_client_component_configuration_master m,payroll_client_component_configuration_details d
		where m.id = d.rule_id and current_timestamp() >= d.effective_from_date and d.effective_to_date is null
		and m.rule_name in ('CALCULATE_SALARY_BASED_ON_WORKING_DAYS_OR_CALENDAR_DAYS','SALARY_PAY_DAY_OF_MONTH','PAYROLL_WINDOW_FROM_DATE','PAYROLL_WINDOW_TO_DATE','LEAVE_WINDOW_START_DATE','LEAVE_WINDOW_END_DATE','COMPANY_PAYROLL_CYCLE','NON_WORKING_DAY_PAYMENT_OPTION');
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_compoffs` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_compoffs`(
	in `employee_id` int(11),
	in `rm_id` int(11)
	)
	begin
	set @days = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
				lm_rulemaster.rulename = 'COMPOFF_THRESHOLD_DAYS_TO_LAPSE_OR_CONVERT_LEAVES_TO_PERKS') order by lm_rulevalues.id desc limit 1); 
	set @days = @days + 30;
	if (employee_id is not null and rm_id is null) then
	select `lm_register_comp_off`.`id`,
		`lm_register_comp_off`.`empid`,
		`lm_register_comp_off`.`comp_off_date`,
		`lm_register_comp_off`.`applied_date`,
		`lm_register_comp_off`.`worked_hours`,
		`lm_register_comp_off`.`worked_minutes`,
		`lm_register_comp_off`.`reason`,
		`lm_register_comp_off`.`rmid`,
		(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id = `lm_register_comp_off`.`rmid`) as approvedby,
		`lm_register_comp_off`.`status`,
		`lm_register_comp_off`.`remarks`,
		`lm_register_comp_off`.`createddate`,
		`lm_register_comp_off`.`updateddate` 
	from lm_register_comp_off where lm_register_comp_off.empid = `employee_id`
	and lm_register_comp_off.comp_off_date >= date_sub(curdate(), interval @days day) order by id desc;
	elseif (rm_id is not null and employee_id is null) then
	select `lm_register_comp_off`.`id`,
		`lm_register_comp_off`.`empid`,
		 employee.empid as employee_id,
		 concat(employee.firstname,case when employee.middlename is not null then concat(' ',employee.middlename) end,
		 case when employee.lastname is not null then concat(' ',employee.lastname) end) as employee_name,
		`lm_register_comp_off`.`comp_off_date`,
		`lm_register_comp_off`.`applied_date`,
		`lm_register_comp_off`.`worked_hours`,
		`lm_register_comp_off`.`worked_minutes`,
		`lm_register_comp_off`.`reason`,
		`lm_register_comp_off`.`rmid`,
		`lm_register_comp_off`.`status`,
		`lm_register_comp_off`.`remarks`,
		`lm_register_comp_off`.`createddate`,
		`lm_register_comp_off`.`updateddate` 
	from lm_register_comp_off, employee
	where lm_register_comp_off.empid = employee.id
	and lm_register_comp_off.status <> 'Submitted'
	and lm_register_comp_off.empid in 
	(SELECT employee_reportingmanagers.empid from employee_reportingmanagers 
	 where reportingmanagerid = rm_id and effectiveenddate is null) 
	and lm_register_comp_off.comp_off_date >= date_sub(curdate(), interval @days day) order by id desc;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_compoffs_for_approval` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_compoffs_for_approval`(
	in `rm_id` int(11)
	)
	begin
	select `lm_register_comp_off`.`id`,
		`lm_register_comp_off`.`empid`,
		lm_register_comp_off.rmid,
		 concat(employee.firstname,case when employee.middlename is not null then concat(' ',employee.middlename) end,
		 case when employee.lastname is not null then concat(' ',employee.lastname) end) as employeename,
		 employee.empid as employee_id,
		`lm_register_comp_off`.`comp_off_date`,
		`lm_register_comp_off`.`applied_date`,
		`lm_register_comp_off`.`worked_hours`,
		`lm_register_comp_off`.`worked_minutes`,
		`lm_register_comp_off`.`reason`,
		`lm_register_comp_off`.`status`,
		`lm_register_comp_off`.`remarks`,
		`lm_register_comp_off`.`createddate`,
		`lm_register_comp_off`.`updateddate`,
		DATEDIFF(CURDATE(), date(`lm_register_comp_off`.`applied_date`)) as pendingSince
	from lm_register_comp_off, employee 
	where lm_register_comp_off.rmid = `rm_id` 
	and lm_register_comp_off.empid = employee.id
	and lm_register_comp_off.status = 'Submitted'
	order by id;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_compoff_leave_status` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_compoff_leave_status`(
	)
	begin
	select lm_leavesmaster.status into @leavestatus from lm_leavesmaster where leavename = 'Comp Off Leave';
	if (@leavestatus = 'Active') then
		select 1 as compoff_status;
	else
		select 0 as compoff_status;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_compoff_min_working_hours` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_compoff_min_working_hours`(
	)
	BEGIN
		select value from lm_rulevalues
		where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'COMPOFF_MIN_WORKING_HOURS_FOR_ELIGIBILITY')
		and lm_rulevalues.status = 'Active' order by id desc limit 1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_component_configured_values_for_pay_group` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_component_configured_values_for_pay_group`(
	pigcm_id_value int(11),
	percentage_or_flat_amount_value int(1)
	)
	begin
	declare vipofa int(1);
	declare vcomponent_value float;
	declare vparent_component_id varchar(32);
	declare ids_cursor cursor for select is_percentage_or_flat_amount,component_value,parent_component_id from percentages_table;
	set @pay_group_id = (select group_id from payroll_income_group_components_master where payroll_income_group_components_master.id = pigcm_id_value);
	set @lower_limit = (select payroll_income_groups_master.income_from_value from payroll_income_groups_master where payroll_income_groups_master.id = @pay_group_id);

	drop temporary table if exists percentages_table;
	create temporary table percentages_table(
		pigcm_id int(11),
		is_percentage_or_flat_amount int(1),
		component_value float,
		parent_component_id varchar(32)
	);
	insert into percentages_table 
	select pigcm_id,is_percentage_or_flat_amount,component_value,parent_component_id from payroll_earning_components_formula_details
		where payroll_earning_components_formula_details.pigcm_id in 
		(select payroll_income_group_components_master.id from payroll_income_group_components_master where payroll_income_group_components_master.group_id = @pay_group_id
		 and payroll_income_group_components_master.status = 'Active' and payroll_income_group_components_master.effective_to_date is null)
		 order by payroll_earning_components_formula_details.parent_component_id desc;
	-- select * from percentages_table;

	set @components_count = (select count(payroll_income_group_components_master.id) from payroll_income_group_components_master where payroll_income_group_components_master.group_id = @pay_group_id
	and payroll_income_group_components_master.status = 'Active' and payroll_income_group_components_master.effective_to_date is null);
		open ids_cursor;
			set @u1 = 0;
			set @u1 = found_rows();
			set @u2 = 0;
			set @sum = 0;
			set @sum = @lower_limit;
			set @basic = 0;
			WHILE @u2 < @u1 do
				set vipofa = 0;
				set vcomponent_value = 0;
				set vparent_component_id = 0;
				fetch ids_cursor into vipofa,vcomponent_value,vparent_component_id;
				if (vipofa = 1 and vparent_component_id = 15) then
					set @basic = (@sum * vcomponent_value/100.0);
					set @sum = (@sum - @basic);	
				elseif (vipofa = 1 and vparent_component_id = 1) then 
					set @sum = @sum - (@basic * vcomponent_value/100.0);
				elseif (vipofa = 0) then
					set @sum = @sum - ifnull(vcomponent_value,0);
				end if;
				set @u2 = @u2 + 1;
			end while;
		close ids_cursor; 
	if (percentage_or_flat_amount_value = 1) then
		set @percentage = 0;
		set @percentage = ((@sum/(@lower_limit * 1.0)) * 100);
		set @percentage_of_basic = 0;
		set @percentage_of_basic = ((@percentage * 100.0)/(select component_value from percentages_table where percentages_table.parent_component_id = '15'));
		set @id = (select component_id from payroll_income_group_components_master 
									where payroll_income_group_components_master.id = pigcm_id_value);
		if (@id = 1) then
		select concat('Available CTC percentage - ',@percentage,'%.') as message, @percentage as final_value;
		elseif (@id <> 1) then
		select concat('Available CTC percentage - ',@percentage,'%. Available CTC percentage as a percentage of Basic - ',@percentage_of_basic,'%.') as message,
		@percentage_of_basic as final_value;
		end if;
	elseif (percentage_or_flat_amount_value = 0) then
		set @percentage = 0;
		set @percentage = ((@sum/(@lower_limit * 1.0)) * 100);
		set @final_flat_value = (@percentage/100.0) * @lower_limit;
		select concat('Maximum configurable flat amount = ',@final_flat_value) as message, @final_flat_value as final_value;
	end if;
	drop temporary table percentages_table;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_component_editable_configurations` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_component_editable_configurations`(
	component_id int
	)
	begin
	if (component_id is not null) then
	SELECT `payroll_product_earning_comp_configs_editable_master`.`is_this_component_a_part_of_employee_salary_structure`,
		`payroll_product_earning_comp_configs_editable_master`.`calculate_on_pro_rata_basis`,
		`payroll_product_earning_comp_configs_editable_master`.`is_this_component_taxable`,
		`payroll_product_earning_comp_configs_editable_master`.`consider_for_esi_contribution`,
		`payroll_product_earning_comp_configs_editable_master`.`consider_for_epf_contribution`,
		`payroll_product_earning_comp_configs_editable_master`.`show_this_component_in_payslip`
	FROM `payroll_product_earning_comp_configs_editable_master`
	where payroll_product_earning_comp_configs_editable_master.component_id = component_id;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_component_wise_values_for_pay_group_assignment` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_component_wise_values_for_pay_group_assignment`(
	ctc_value float,
	pay_group_id_value int
	)
	begin
	declare ctc_amount decimal(15,2);
	declare v_id int(11);
	declare vcomponent_short_name varchar(64);
	declare vcomponent_name varchar(255);
	declare vesi int(1);
	declare vepf int(1); 
	declare vepf_always int(1);
	declare vepf_spf_wage int(1);
	declare vfrequency int(3);
	declare vsection varchar(64);
	declare vipofa int(1);
	declare vcomponent_value float;
	declare vparent_component_id int(11);
	declare vcm_id int(11);
	declare vshort_name varchar(64);
	declare vapplicable_frequency int(2);
	DECLARE pay_group_components_cursor cursor for select income_group_components_table.id,component_short_name,component_name,
	consider_for_esi_contribution,consider_for_epf_contribution,epf_always,epf_spf_wage,applicable_frequency,component_type 
	from income_group_components_table;

	declare earning_components_cursor cursor for select component_id,short_name,applicable_frequency from salary_components_table; 

	drop temporary table if exists income_group_components_table;
	create temporary table income_group_components_table (
		`id` int(11),
		`component_id` int(11),
		`component_short_name` varchar(64),
		`component_name` varchar(255),
		`consider_for_esi_contribution` int(1) DEFAULT NULL,
		`consider_for_epf_contribution` int(1) DEFAULT NULL,
		`epf_always` int(1),
		`epf_spf_wage` int(1),
		`applicable_frequency` int(3), 
		`component_type` varchar(64)
	);

	insert into income_group_components_table(id,component_id,component_short_name,component_name,consider_for_esi_contribution,consider_for_epf_contribution,
	epf_always,epf_spf_wage,applicable_frequency,component_type) 
	select payroll_income_group_components_master.id,component_id,component_short_name,component,consider_for_esi_contribution,
	consider_for_epf_contribution,payroll_earning_components_epf_configs_details.epf_always,
	payroll_earning_components_epf_configs_details.epf_only_when_pf_wage_is_less_than_standard_pf_wage,
	payroll_salary_components_master.applicable_frequency ,payroll_sections_master.section as section
	from payroll_income_group_components_master,payroll_salary_components_master, payroll_sections_master,payroll_earning_components_epf_configs_details
		where payroll_income_group_components_master.group_id = pay_group_id_value
		and payroll_salary_components_master.section_id = payroll_sections_master.id
		and payroll_salary_components_master.id = payroll_income_group_components_master.component_id
		and payroll_earning_components_epf_configs_details.pigcm_id = payroll_income_group_components_master.id
		and payroll_income_group_components_master.effective_to_date is null
		order by payroll_income_group_components_master.component_id;

	drop temporary table if exists earning_components_formula_table;
	create temporary table earning_components_formula_table (
		pigcm_id int(11),
		is_percentage_or_flat_amount int(1),
		component_value float, 
		parent_component_id varchar(32)
	);
	insert into earning_components_formula_table
	select pigcm_id,is_percentage_or_flat_amount,component_value,parent_component_id
	from payroll_earning_components_formula_details
	where payroll_earning_components_formula_details.pigcm_id in 
	(select income_group_components_table.id from income_group_components_table);

	drop temporary table if exists salary_components_table;
	create temporary table salary_components_table (
	component_id int(11),
	short_name varchar(64),
	applicable_frequency int(2)
	);

	insert into salary_components_table(component_id,short_name,applicable_frequency) select payroll_salary_components_master.id, 
	component_short_name, applicable_frequency from payroll_salary_components_master
	where section_id = 1 and applicable_frequency is not null and component_short_name is not null
	and payroll_salary_components_master.component_short_name in (select component_short_name from income_group_components_table);

	create index s_idx on salary_components_table(component_id,short_name,applicable_frequency);

	drop temporary table if exists frequency_table;
	create temporary table frequency_table (
		id int(3),
		frequency_name  varchar(64)
	);

	insert into frequency_table values
	(1,'Monthly'),
	(3,'Quarterly'),
	(6,'Once in 6 months'),
	(12,'Yearly');

	drop temporary table if exists final_table;
	create temporary table final_table (
		component_name varchar(255),
		component_short_name varchar(64),
		amount_value decimal(15,2),
		monthly_amount_value decimal(15,2),
		component_type varchar(64),
		frequency varchar(64),
		consider_for_esi_contribution int(1) DEFAULT NULL,
		consider_for_epf_contribution int(1) DEFAULT NULL
	);

	-- select * from income_group_components_table;
	-- calculate earnings
		open pay_group_components_cursor;
		set @u1 = 0;
			set @u1 = found_rows();
			set @u2 = 0;
			WHILE @u2 < @u1 do
			set v_id = 0;
			set vcomponent_short_name = 0;
			set vcomponent_name = 0;
			set vesi = 0;
			set vepf = 0;
			set vepf_always = 0;
			set vepf_spf_wage = 0;
			set vfrequency = 0;
			set vsection = 0;
			fetch pay_group_components_cursor into v_id,vcomponent_short_name,vcomponent_name,vesi,vepf,vepf_always,vepf_spf_wage,vfrequency,vsection;
			if ((vsection = 'Earnings') and (vcomponent_short_name <> 'other_allowance')) then
				set ctc_amount = ctc_value;
				select is_percentage_or_flat_amount,component_value,parent_component_id
				into vipofa,vcomponent_value,vparent_component_id
				from earning_components_formula_table where earning_components_formula_table.pigcm_id = v_id;
				if (vipofa = 1) then
					if (vparent_component_id = 15) then
						set @amount = 0;
						set @amount = (ctc_amount * (vcomponent_value/100.00));
						set @frequency_name = '';
						set @frequency_name = (select frequency_name from frequency_table where frequency_table.id = vfrequency);
						insert into final_table(component_short_name,component_name,amount_value,component_type,frequency,consider_for_esi_contribution,consider_for_epf_contribution) values
						(vcomponent_short_name,vcomponent_name,@amount,vsection,@frequency_name,vesi,vepf);
					elseif (vparent_component_id = 1) then    
						set @amount = (select amount_value from final_table where final_table.component_name = 'Basic Salary');
						set @amount = (@amount * (vcomponent_value/100.00));
						set @frequency_name = '';
						set @frequency_name = (select frequency_name from frequency_table where frequency_table.id = vfrequency);
						insert into final_table(component_short_name,component_name,amount_value,component_type,frequency,consider_for_esi_contribution,consider_for_epf_contribution) values
						(vcomponent_short_name,vcomponent_name,@amount,vsection,@frequency_name,vesi,vepf);
					end if;
				elseif (vipofa = 0) then    
					set @amount = 0;
					set @amount = vcomponent_value;
					set @frequency_name = '';
					set @frequency_name = (select frequency_name from frequency_table where frequency_table.id = vfrequency);
					insert into final_table(component_short_name,component_name,amount_value,component_type,frequency,consider_for_esi_contribution,consider_for_epf_contribution) values
					(vcomponent_short_name,vcomponent_name,@amount,vsection,@frequency_name,vesi,vepf);
				end if;
			elseif ((vsection = 'Earnings') and (vcomponent_short_name = 'other_allowance')) then    
				set ctc_amount = ctc_value;
				set @sum = (select sum(amount_value) from final_table where final_table.component_type = 'Earnings');
				set @amount = 0;
				set @amount = ctc_amount - @sum;
				set @frequency_name = '';
				set @frequency_name = (select frequency_name from frequency_table where frequency_table.id = vfrequency);
				insert into final_table(component_short_name,component_name,amount_value,component_type,frequency,consider_for_esi_contribution,consider_for_epf_contribution) values
					(vcomponent_short_name,vcomponent_name,@amount,vsection,@frequency_name,vesi,vepf);
			end if;

		set @u2 = @u2 + 1;
		end while;
		close pay_group_components_cursor;   
		
		drop temporary table if exists employee_ctc_table;
		create temporary table employee_ctc_table (
		empid int(11),
		month_id int(11), 
		`basic_salary` 		decimal(15,2) default 0,
		`dearness_allowance` 	decimal(15,2) default 0,
		`house_rent_allowance` 	decimal(15,2) default 0,
		`conveyance_allowance` 	decimal(15,2) default 0,
		`travelling_allowance` 	decimal(15,2) default 0,
		`transport_allowance` 	decimal(15,2) default 0,
		`commission` 					decimal(15,2) default 0,
		`bonus` 						decimal(15,2) default 0,
		`gratuity` 						decimal(15,2) default 0,
		`leave_encashment` 				decimal(15,2) default 0,
		`fixed_allowance` 				decimal(15,2) default 0,
		`children_education_allowance` 	decimal(15,2) default 0,
		`hostel_expenditure_allowance` 	decimal(15,2) default 0,
		`helper_allowance` 				decimal(15,2) default 0,
		`uniform_allowance` 			decimal(15,2) default 0,
		`daily_allowance` 				decimal(15,2) default 0,
		`city_compensatory_allowance` 	decimal(15,2) default 0,
		`overtime_allowance` 			decimal(15,2) default 0,
		`telephone_allowance` 			decimal(15,2) default 0,
		`fixed_medical_allowance` 		decimal(15,2) default 0,
		`project_allowance` 			decimal(15,2) default 0,
		`food_allowance` 				decimal(15,2) default 0,
		`holiday_allowance` 			decimal(15,2) default 0,
		`entertainment_allowance` 		decimal(15,2) default 0,
		`custom_allowance` 				decimal(15,2) default 0,
		`food_coupon` 					decimal(15,2) default 0,
		`gift_coupon` 					decimal(15,2) default 0,
		`research_allowance` 				decimal(15,2) default 0,
		`books_and_periodicals_allowance` 	decimal(15,2) default 0,
		`fuel_allowance` 					decimal(15,2) default 0,
		`driver_allowance` 					decimal(15,2) default 0,
		`leave_travel_allowance` 			decimal(15,2) default 0,
		`vehicle_maintenance_allowance` 	decimal(15,2) default 0,
		`telephone_and_internet_allowance` 	decimal(15,2) default 0,
		`other_allowance`                   decimal(15,2) default 0,
		`esi_wage`			      			decimal(15,2) default 0,
		`employee_esi_value` 				decimal(15,2) default 0,
		`employer_esi_value`				decimal(15,2) default 0,
		`total_esi_value`     				decimal(15,2) default 0,
		`employee_epf_wage` 				decimal(15,2) default 0,
		`employer_epf_wage`   		decimal(15,2) default 0,
		`employee_pf_value` 		decimal(15,2) default 0,
		`employer_pf_value` 		decimal(15,2) default 0,
		`employer_edli_charges` 	decimal(15,2) default 0,
		`employer_admin_charges` 	decimal(15,2) default 0,
		`professional_tax` 			decimal(15,2) default 0,
		`total_salary` 				decimal(15,2) default 0
		);
		
		insert into employee_ctc_table(month_id) values
		(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12);
		
		open earning_components_cursor; -- updating employee_ctc_table with component values for the whole year
			set @mu1 = 0;
			set @mu1 = found_rows();
			set @mu2 = 0;
			WHILE @mu2 < @mu1 do
			set vcm_id = 0;
			set vshort_name = 0;
			set vapplicable_frequency = 0;
			fetch earning_components_cursor into vcm_id,vshort_name, vapplicable_frequency;
				set @il = 1;
				set @il1 = 12;
				while @il <= @il1 do
					set @short_name_text = '';
					set @validity = 0;
					set @validity = mod((@il - 3),vapplicable_frequency);
					if (@validity = 0) then
						set @amount = (select amount_value from final_table where component_short_name = vshort_name);
						set @short_name_text = concat('update employee_ctc_table set ',vshort_name,' = ',@amount,' * ',vapplicable_frequency,' * (1/12.0) where employee_ctc_table.month_id = ',@il);
						prepare stmt from @short_name_text;
						execute stmt;
						deallocate prepare stmt;
					else
						set @short_name_text = concat('update employee_ctc_table set ',vshort_name,' = 0 where employee_ctc_table.month_id = ',@il);
						prepare stmt from @short_name_text;
						execute stmt;
						deallocate prepare stmt;
					end if;
				set @il = @il + 1;
				end while;
			
			set @mu2 = @mu2 + 1;
			end while;
		close earning_components_cursor;
		
		open pay_group_components_cursor;
		set @u1 = 0;
			set @u1 = found_rows();
			set @u2 = 0;
			WHILE @u2 < @u1 do
			set v_id = 0;
			set vcomponent_short_name = 0;
			set vcomponent_name = 0;
			set vesi = 0;
			set vepf = 0;
			set vfrequency = 0;
			set vsection = 0;
			fetch pay_group_components_cursor into v_id,vcomponent_short_name,vcomponent_name,vesi,vepf,vepf_always,vepf_spf_wage,vfrequency,vsection;
		
			if ((vsection = 'Deductions') and (vcomponent_name = 'ESIC')) then
			
			set @esi_pcbe = (select payroll_product_component_rulevalues.value 
							from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
							(select id from payroll_product_component_rulemaster 
							where payroll_product_component_rulemaster.rule_name = 'CONTRIBUTION_RATE_OF_EMPLOYEE')
							and effectivetodate is null);
					 
			set @esi_pcbemployer = (select payroll_product_component_rulevalues.value
									from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
									(select id from payroll_product_component_rulemaster
									where payroll_product_component_rulemaster.rule_name = 'CONTRIBUTION_RATE_OF_EMPLOYER')
									and effectivetodate is null);                 
			
			set @esi_er_in_ctc = (select payroll_client_component_configuration_details.value
								from payroll_client_component_configuration_details where payroll_client_component_configuration_details.rule_id =
								(select id from payroll_client_component_configuration_master 
								where payroll_client_component_configuration_master.rule_name = 'EMPLOYER_CONTRIBUTION_TO_BE_INCLUDED_IN_CTC'
								and payroll_client_component_configuration_master.component_id = 11)
								and effective_to_date is null);    
								
			set @max_gross_salary = (select payroll_product_component_rulevalues.value 
									from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
									(select id from payroll_product_component_rulemaster 
									where payroll_product_component_rulemaster.rule_name = 'MAXIMUM_GROSS_SALARY_PERMITTED_TO_RECEIVE_ESI'
									and payroll_product_component_rulemaster.component_id = 11)
									and effectivetodate is null);
							 
			set @max_exempt_wage = (select payroll_product_component_rulevalues.value 
									from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
									(select id from payroll_product_component_rulemaster 
									where payroll_product_component_rulemaster.rule_name = 'MAXIMUM_DAILY_WAGE_FOR_EMPLOYEE_CONTRIBUTION_EXEMPTION'
									and payroll_product_component_rulemaster.component_id = 11)
									and effectivetodate is null);   
									
			set @esi_wage_days = (select payroll_product_component_rulevalues.value 
								  from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
								  (select id from payroll_product_component_rulemaster 
								  where payroll_product_component_rulemaster.rule_name = 'WAGE_DAYS_PER_MONTH')
								  and effectivetodate is null);    
															 
			-- calculate esi 
			set @il = 1;
			set @il1 = 12;
			while @il <= @il1 do
				set @vesi_wage = 0;
				open earning_components_cursor;
				set @mu1 = 0;
				set @mu1 = found_rows();
				set @mu2 = 0;
				WHILE @mu2 < @mu1 do
				set vcm_id = 0;
				set vshort_name = 0;
				set vapplicable_frequency = 0;
				fetch earning_components_cursor into vcm_id,vshort_name, vapplicable_frequency;
					select consider_for_esi_contribution into @s1
					from income_group_components_table
					where income_group_components_table.component_short_name = vshort_name;
					if (@s1 = 1) then
						set @var = 0;
						set @short_name_text = '';
						set @short_name_text = concat('select ',vshort_name,' into @var from employee_ctc_table where employee_ctc_table.month_id = ',@il);
						-- select @short_name_text;
						prepare stmt from @short_name_text;
						execute stmt;
						deallocate prepare stmt;
						set @vesi_wage = @vesi_wage + @var;
					end if;
					
				set @mu2 = @mu2 + 1;
				end while;
				close earning_components_cursor;    
			update employee_ctc_table set employee_ctc_table.esi_wage = @vesi_wage where employee_ctc_table.month_id = @il;
			set @il = @il + 1;
			end while;  
			
			set @esi_amount = (select sum(esi_wage)/12.0 from employee_ctc_table);
							   
			if (@esi_amount <= @max_gross_salary) then                   
				set @employee_contribution = @esi_amount * (@esi_pcbe/100.0);
				set @employer_contribution = @esi_amount * (@esi_pcbemployer/100.0);
				set @total_esi = 0;
					if (@esi_er_in_ctc = 1) then
						set @total_esi = @employer_contribution;
					end if;
					if (@esi_amount/(@esi_wage_days * 1.0) > @max_exempt_wage) then
						set @total_esi = @total_esi + @employee_contribution;
					end if;
				set @frequency_name = (select frequency_name from frequency_table where frequency_table.id = vfrequency);
				insert into final_table(component_name,component_short_name,amount_value,component_type,frequency) values    
				('ESIC','esi',ROUND((@total_esi * 12),2),vsection,@frequency_name);
			elseif (@esi_amount > @max_gross_salary) then    
				delete from final_table;
				insert into final_table(component_name,component_short_name,amount_value,component_type,frequency) values    
				('This Pay Group cannot be selected as value of the sum of ESI contribution applicable components exceeds the maximum gross
				  monthly salary permitted to receive, to be eligible for ESI.','esi_error',0,'','');
			end if;
			end if;
		
			if ((vsection = 'Deductions') and (vcomponent_name = 'Employee Provident Fund')) then
			
			set @employer_pf_in_ctc = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
									  where payroll_client_component_configuration_details.rule_id = 
									  (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
									  where payroll_client_component_configuration_master.rule_name = 'EMPLOYER_CONTRIBUTION_TO_BE_INCLUDED_IN_CTC'
									  and payroll_client_component_configuration_master.component_id = 12)
									  order by id desc limit 1);
									  
			set @edli_in_ctc = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
								where payroll_client_component_configuration_details.rule_id = 
								(select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
								where payroll_client_component_configuration_master.rule_name = 'EMPLOYER_EDLI_CONTRIBUTION_TO_BE_INCLUDED_IN_CTC')
								order by id desc limit 1);          
									  
			set @admin_in_ctc = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
								 where payroll_client_component_configuration_details.rule_id = 
								 (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
								 where payroll_client_component_configuration_master.rule_name = 'ADMIN_CHARGES_INCLUDED_IN_CTC')
								 order by id desc limit 1);                          
			
			set @employee_epf_wage = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
									  where payroll_client_component_configuration_details.rule_id = 
									  (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
									  where payroll_client_component_configuration_master.rule_name = 'ACTUAL_PF_WAGE_OR_RESTRICTED_PF_WAGE_FOR_EMPLOYEE_CONTRIBUTION')
									  order by id desc limit 1);    

			set @employer_epf_wage = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
									  where payroll_client_component_configuration_details.rule_id = 
									  (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
									  where payroll_client_component_configuration_master.rule_name = 'ACTUAL_PF_WAGE_OR_RESTRICTED_PF_WAGE_FOR_EMPLOYER_CONTRIBUTION')
									  order by id desc limit 1); 
			
			set @tpcbe = (select payroll_product_component_rulevalues.value 
						  from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
						  (select id from payroll_product_component_rulemaster 
						  where payroll_product_component_rulemaster.rule_name = 'TOTAL_PERCENTAGE_CONTRIBUTION_BY_EMPLOYEE')
						  and effectivetodate is null);
							
			set @eepf = (select payroll_product_component_rulevalues.value 
						from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
						(select id from payroll_product_component_rulemaster 
						where payroll_product_component_rulemaster.rule_name = 'TOTAL_PERCENTAGE_CONTRIBUTION_BY_EMPLOYER')
						and effectivetodate is null);
									
			set @edli = (select payroll_product_component_rulevalues.value 
						from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
						(select id from payroll_product_component_rulemaster 
						where payroll_product_component_rulemaster.rule_name = 'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_EDLI')
						and effectivetodate is null);
									
			set @admin = (select payroll_product_component_rulevalues.value 
						  from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
						  (select id from payroll_product_component_rulemaster 
						  where payroll_product_component_rulemaster.rule_name = 'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_ADMIN_CHARGES')
						  and effectivetodate is null); 
			
			set @spf_wage = (select payroll_product_component_rulevalues.value 
					from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
					(select id from payroll_product_component_rulemaster 
					where payroll_product_component_rulemaster.rule_name = 'MAXIMUM_SALARY_CONSIDERED_FOR_EMPLOYER_CONTRIBUTION')
					and effectivetodate is null);
					
			set @max_edli_wage = (@edli/100.0) * @spf_wage;       
			
			set @il = 1;
			set @il1 = 12;
			while @il <= @il1 do
				set @vepf_always_wage = 0;
				set @vsp_wage = 0;
				open earning_components_cursor;
				set @mu1 = 0;
				set @mu1 = found_rows();
				set @mu2 = 0;
				WHILE @mu2 < @mu1 do
				set vcm_id = 0;
				set vshort_name = 0;
				set vapplicable_frequency = 0;
				fetch earning_components_cursor into vcm_id,vshort_name, vapplicable_frequency;
					select consider_for_epf_contribution,epf_always,epf_spf_wage into @v1,@v2,@v3
					from income_group_components_table
					where income_group_components_table.component_short_name = vshort_name;
					if (@v1 = 1) then
						if (@v2 = 1) then
							set @var = 0;
							set @short_name_text = '';
							set @short_name_text = concat('select ',vshort_name,' into @var from employee_ctc_table where employee_ctc_table.month_id = ',@il);
							-- select @short_name_text;
							prepare stmt from @short_name_text;
							execute stmt;
							deallocate prepare stmt;
							set @vepf_always_wage = @vepf_always_wage + @var;
						elseif (@v3 = 1) then
							set @short_name_text = '';
							set @short_name_text = concat('select ',vshort_name,' into @var from employee_ctc_table where employee_ctc_table.month_id = ',@il);
							-- select @short_name_text;
							prepare stmt from @short_name_text;
							execute stmt;
							deallocate prepare stmt;
							set @vsp_wage = @vsp_wage + @var;
						end if;
					end if;
					
				set @mu2 = @mu2 + 1;
				end while;
				close earning_components_cursor;
				if (@employee_epf_wage = 'ACTUAL') then
					if (@vepf_always_wage < @spf_wage) then
						set @epf_wage = 0;
						set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
						if (@epf_wage > @spf_wage) then
							set @epf_wage = @spf_wage;
						end if;
					elseif (@vepf_always_wage >= @spf_wage) then    
						set @epf_wage = 0;
						set @epf_wage = @epf_wage + @vepf_always_wage;
					end if;
					update employee_ctc_table set employee_ctc_table.employee_epf_wage = @epf_wage where employee_ctc_table.month_id =@il; 
				elseif (@employee_epf_wage = 'RESTRICTED') then	
					set @epf_wage = 0;
					set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
					if (@epf_wage > @spf_wage) then
						set @epf_wage = @spf_wage;
					end if;
					update employee_ctc_table set employee_ctc_table.employee_epf_wage = @epf_wage where employee_ctc_table.month_id = @il;
				end if;
				if (@employer_epf_wage = 'ACTUAL') then
					if (@vepf_always_wage < @spf_wage) then
						set @epf_wage = 0;
						set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
						if (@epf_wage > @spf_wage) then
							set @epf_wage = @spf_wage;
						end if;
					elseif (@vepf_always_wage >= @spf_wage) then    
						set @epf_wage = 0;
						set @epf_wage = @epf_wage + @vepf_always_wage;
					end if;
					update employee_ctc_table set employee_ctc_table.employer_epf_wage = @epf_wage where employee_ctc_table.month_id = @il; 
				elseif (@employer_epf_wage = 'RESTRICTED') then	
					set @epf_wage = 0;
					set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
					if (@epf_wage > @spf_wage) then
						set @epf_wage = @spf_wage;
					end if;
					update employee_ctc_table set employee_ctc_table.employer_epf_wage = @epf_wage where employee_ctc_table.month_id = @il;
				end if;
			set @il = @il + 1;
			end while;
			update employee_ctc_table   
			set employee_ctc_table.employee_pf_value      = employee_ctc_table.employee_epf_wage * (@tpcbe/100.0),
				employee_ctc_table.employer_pf_value      = employee_ctc_table.employer_epf_wage * (@eepf/100.0),
				employee_ctc_table.employer_edli_charges  = employee_ctc_table.employer_epf_wage * (@edli/100.0),
				employee_ctc_table.employer_admin_charges = employee_ctc_table.employer_epf_wage * (@admin/100.0);
			-- update employer eps value
			
			update employee_ctc_table 
			set employee_ctc_table.employer_edli_charges = case when (employee_ctc_table.employer_edli_charges > @max_edli_wage) then @max_edli_wage
																else employee_ctc_table.employer_edli_charges
																end;
			
			set @total_employer_epf = (select sum(employer_pf_value) from employee_ctc_table);
			set @total_employee_epf = (select sum(employee_pf_value) from employee_ctc_table);
			set @total_edli = (select sum(employer_edli_charges) from employee_ctc_table);
			set @total_admin = (select sum(employer_admin_charges) from employee_ctc_table);
			
			set @total_pf = 0;
			set @total_pf = @total_employee_epf;
			if (@employer_pf_in_ctc = 1) then
			set @total_pf = @total_pf + @total_employer_epf;
			end if;
			if (@edli_in_ctc = 1) then
			set @total_pf = @total_pf + @total_edli;
			end if;
			if (@admin_in_ctc = 1) then
			set @total_pf = @total_pf + @total_admin;
			end if;
			set @frequency_name = (select frequency_name from frequency_table where frequency_table.id = vfrequency);
			
			insert into final_table(component_name,component_short_name,amount_value,component_type,frequency) values
			('Employee Provident Fund','employee_provident_fund',@total_pf,vsection,@frequency_name);
					   
	--        select * from employee_ctc_table;

			
			end if;
			set @u2 = @u2 + 1;
			end while;
		close pay_group_components_cursor;   
		
		update final_table set final_table.monthly_amount_value = (final_table.amount_value/12.0)
		where final_table.component_type <> 'Deductions' and final_table.frequency = 'Monthly';
		
		select * from final_table;

	drop temporary table income_group_components_table;
	drop temporary table earning_components_formula_table;
	drop temporary table frequency_table;
	drop temporary table final_table;
	drop temporary table employee_ctc_table;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_comp_off_validity_duration` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_comp_off_validity_duration`()
	begin
		SELECT lm_rulevalues.value
		FROM lm_rulemaster, lm_rulevalues
		where lm_rulemaster.id = lm_rulevalues.ruleid
		and lm_rulemaster.rulename = ('COMPOFF_THRESHOLD_DAYS_TO_LAPSE_OR_CONVERT_LEAVES_TO_PERKS') order by lm_rulevalues.id desc limit 1;
	end ;;
    DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `create_client_credentials` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	delimiter ;;

create procedure create_client_credentials(
`short_code` varchar(255)
)
begin
if (short_code is not null) then
	set @plan_id = (select client_plan_details.plan_id from spryple_product_dev.client_plan_details where client_plan_details.client_id = 
					(select spryple_clients.id from spryple_product_dev.spryple_clients where spryple_clients.company_code = `short_code`) 
					and case when client_plan_details.valid_to is not null 
                             then (curdate() between client_plan_details.valid_from and client_plan_details.valid_to)
                             else (curdate() >= client_plan_details.valid_from) end
                             order by client_plan_details.id desc limit 1);

	UPDATE modulesmaster set effectivestartdate = current_timestamp()
	where modulesmaster.id in (select spryple_plan_module_details.module_id from spryple_product_dev.spryple_plan_module_details 
							   where spryple_plan_module_details.plan_id = @plan_id);   
	INSERT INTO `companyinformation`(`companyname`,`companywebsite`,`gstnumber`,`established_date`,`primarycontactnumber`,
		`secondarycontactnumber`,`primarycontactemail`,`address1`,`address2`,`city`,`state`,`pincode`,`country`,`created_on`,`created_by`,
		`updated_on`,`updated_by`)
	SELECT `spryple_clients`.`company_name`,null,`spryple_clients`.`gst_number`,null,`spryple_clients`.`mobile_number`,
		null,`spryple_clients`.`company_email`,`spryple_clients`.`company_address`,`spryple_clients`.`company_address2`,
		`spryple_clients`.`city_id`,`spryple_clients`.`state_id`,`spryple_clients`.`pincode`,`spryple_clients`.`country_id`,
		current_timestamp(),1,null,null FROM `spryple_product_dev`.`spryple_clients`
		where `spryple_product_dev`.`spryple_clients`.`company_code` = `short_code`;
	INSERT INTO `employee`
	(`empid`,`firstname`,`officeemail`,`contactnumber`,`address`,`city`,`state`,`pincode`,`country`,`status`,`created_on`,`created_by`,`dateofjoin`)
	SELECT '1',`spryple_clients`.`contact_name`, `spryple_clients`.`company_email`, `spryple_clients`.`mobile_number`,
		concat(`spryple_clients`.`company_address`, case when `spryple_clients`.`company_address2` is not null 
														then (concat(', ',`spryple_clients`.`company_address2`))
														else ''
														end),
		`spryple_clients`.`city_id`,
		`spryple_clients`.`state_id`,
		`spryple_clients`.`pincode`,
		`spryple_clients`.`country_id`,
		(select statusmaster.id from statusmaster where statusmaster.name = 'Active'),
		`spryple_clients`.`created_on`,
		1,
        current_date()
	FROM `spryple_product_dev`.`spryple_clients`
	where spryple_clients.company_code = `short_code`;
	set @lid = (select last_insert_id()); 
	if (@lid is not null) then
		insert into employee_roles(employee_id,role_id,rmid,effective_from_date)
		select @lid, rolesmaster.id,@lid, curdate()
		from rolesmaster where rolesmaster.name like '%Manager%'
		or rolesmaster.name like '%Admin%';
		INSERT INTO `employee_reportingmanagers`(`empid`,`reportingmanagerid`,`effectivestartdate`)
		VALUES (@lid,@lid,current_timestamp());
		set @password = (SELECT convert(concat(char(round(rand()*25)+65),char(round(rand()*25)+65),
						char(round(rand()*25)+65),char(round(rand()*25)+97),char(round(rand()*25)+97),char(round(rand()*25)+97),
						char(round(rand()*25)+97), char(round(rand()*25)+65), char(round(rand()*25)+65), char(round(rand()*25)+65)
						) using utf8));
		set @mail_id = (select employee.officeemail from employee where employee.id = @lid);                
		call setemployeelogin(@lid,@mail_id,@password,'Active','Y');     
        
        INSERT INTO `filepaths_master` VALUES (1,1,concat('D:\\Spryple\\',short_code),'CORE'),
        (4,2,concat('D:\\Spryple\\',short_code),'LEAVES'),(5,4,concat('D:\\Spryple\\',short_code),'ATTENDANCE'),
        (6,5,concat('D:\\Spryple\\',short_code),'PAYROLL'),(7,6,concat('D:\\Spryple\\',short_code),'ASSET'),
        (8,7,concat('D:\\Spryple\\',short_code),'RECRUITMENT');

        select 0 as result, @mail_id as login, @password as password_string;
	end if;
    else
    select 1 as result, null as login, null as password_string;
end if;       
end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_conducted_employees_for_department` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_conducted_employees_for_department`(
	in `program_id` int(11),
	in `department_id` int(11)
	)
	begin
		SELECT distinct eic.empid,
		(select employee.empid from employee where employee.id = eic.empid) as employee_code,
		(select concat(employee.firstname,' ',employee.lastname) as empname from employee where 
		employee.id = eic.empid and employee.status=1) as empname
		FROM ems_induction_conductedby eeic 
		inner join ems_employee_induction_conductedby eic on eic.induction_conductedby_id=eeic.id
		inner join employee on employee.id=eic.empid
		where eeic.department_id = `department_id` and eeic.program_id=`program_id` and employee.status=1 
		order by eic.empid;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_ctc_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_ctc_details`(
	employee_id integer(11),
	ctc_id integer(11)
	)
	begin
	declare cid int(11);
	declare cname varchar(255);
	declare temp_cursor cursor for select component_id,short_name from ctc_table;

	drop temporary table if exists ctc_table; 
	CREATE TEMPORARY TABLE ctc_table
	(
		component_id int(11),
		component_name varchar(255),
		short_name varchar(255),
		amount_value decimal(15,2)
	);

	set @fdate = (select employee_ctc_master.effective_from_date from employee_ctc_master where employee_ctc_master.id = ctc_id);
	set @tdate = (select employee_ctc_master.effective_to_date from employee_ctc_master where employee_ctc_master.id = ctc_id);

	set @group_id = 0;
	set @group_id = (select payroll_employee_pay_group_mapping_master.income_group_id from payroll_employee_pay_group_mapping_master 
					 where payroll_employee_pay_group_mapping_master.empid = `employee_id` 
					 and case when (@tdate is not null and payroll_employee_pay_group_mapping_master.effective_to_date is not null) then
							  (@fdate between payroll_employee_pay_group_mapping_master.effective_from_date 
							   and payroll_employee_pay_group_mapping_master.effective_to_date)
							  else (@fdate >= payroll_employee_pay_group_mapping_master.effective_from_date) 
							  end);
	   
	insert into ctc_table(component_id,component_name,short_name)   
		select id,component,component_short_name from payroll_salary_components_master
		where payroll_salary_components_master.id in (select component_id from payroll_income_group_components_master 
		where payroll_income_group_components_master.group_id = @group_id)
		and payroll_salary_components_master.section_id = 1
		order by payroll_salary_components_master.id; 
		
		open temp_cursor;
		set @comp_count = 0;
		set @comp_count = found_rows();
		set @e = 0;
		while @e < @comp_count do
			fetch temp_cursor into cid,cname;
			set @comp_value = 0;
			set @sqltext = '';
			if (cid between 1 and 39) then
			set @sqltext = concat('select ',cname, ' into @comp_value from employee_ctc_master where employee_ctc_master.empid = ',employee_id,' and employee_ctc_master.id = ',ctc_id);
			else
			set @sqltext = concat('select amount_value into @comp_value from employee_extended_ctc_master where employee_extended_ctc_master.empid = ',employee_id,' and employee_extended_ctc_master.component_id = ',cid,' and effective_from_date = ',@fdate,' and effective_to_date = ',@tdate);
			end if;
			prepare stmt from @sqltext;
			execute stmt;
			deallocate prepare stmt;
			update ctc_table set amount_value = @comp_value where ctc_table.short_name = cname;
			
			set @e = @e + 1;
		end while;
		close temp_cursor;    
		
		set @total = (select round(sum(amount_value),2) from ctc_table);
		insert into ctc_table(component_name,amount_value) values
		('Total', @total);

		select component_name as component_name, round((amount_value/12.0),2) as month_amount , amount_value as annual_amount
		from ctc_table;

	drop temporary table ctc_table;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_departmentss_for_program` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_departmentss_for_program`(
	in `program_id` int(11)
	)
	begin
		SELECT distinct d.id,d.deptname as department
		FROM ems_induction_conductedby eeic 
		inner join departmentsmaster d on d.id=eeic.department_id
		where  eeic.program_id=`program_id`  ;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_department_employees_by_designation` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_department_employees_by_designation`(department_id int,designation_id int)
	begin
		select e.id,concat(e.firstname,if(e.middlename is not null,' ',''),e.middlename,' ',e.lastname) as empname from employee e
		inner join employee_departments dept on dept.empid = e.id and dept.effectiveenddate is null
		inner join employee_designations des on des.empid = e.id and des.effectiveenddate is null
		where dept.departmentid = ifnull(department_id,dept.departmentid)
		and des.designationid = ifnull(designation_id,des.designationid)
		and e.status=1 
		and e.id not in (select empid from ems_employee_terminations et where et.empid= e.id);
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_documents_files` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
CREATE  PROCEDURE `get_department_wise_employee_count_by_location`(
location_id int(11))
begin
select  d.deptname,count(emp.id) as count from employee emp
inner join employee_departments ed on ed.empid=emp.id
inner join departmentsmaster d on d.id=ed.departmentid
inner join employee_worklocations ew on ew.empid=emp.id
where ew.locationid=location_id and emp.status=1 group by d.deptname;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_department_wise_employee_count_by_shift` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_department_wise_employee_count_by_shift`(
shiftid int(11))
begin
select  d.deptname,count(emp.id) as count 
from employee emp
inner join employee_departments ed on ed.empid=emp.id
inner join departmentsmaster d on d.id=ed.departmentid
inner join employee_shift_details esd on esd.empid=emp.id
where esd.shiftid=shiftid and  emp.status=1
and fromdate<=current_timestamp() and current_timestamp()<=todate 
group by d.deptname;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_department_wise_leaves_count_by_month` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_department_wise_leaves_count_by_month`(
month_value date
)
begin
 set @monthstartdate = DATE_FORMAT(month_value, '%Y-%m-01');
 set @monthenddate = DATE_FORMAT(LAST_DAY(month_value), '%Y-%m-%d');
select  d.deptname,count(emp.id) as count from employee emp
inner join employee_departments ed on ed.empid=emp.id
inner join departmentsmaster d on d.id=ed.departmentid
inner join lm_leaveapprovalstatustracker lla on lla.empid=emp.id
inner join lm_employeeleaves lel on lel.id=lla.leaveid
where DATE_FORMAT(lel.fromdate, '%Y-%m-%d')>=@monthstartdate and DATE_FORMAT(lel.fromdate, '%Y-%m-%d')<=@monthenddate
and DATE_FORMAT(lel.todate, '%Y-%m-%d')>=@monthstartdate and DATE_FORMAT(lel.todate, '%Y-%m-%d')<=@monthenddate
and lla.status ='Approved';
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_department_wise_monthly_salaries` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_department_wise_monthly_salaries`(
year_value date)
begin
set @date = year_value; --  (select cast(concat(year_value,'-',month_id,'-','15') as date));
select employee_gross_salary_details.year,monthname(str_to_date(employee_gross_salary_details.month,'%m')) as MonthName , departmentsmaster.deptname as deptname,sum(ifnull(total_gross_salary,0)) as sum
	from employee_gross_salary_details, employee_departments, departmentsmaster 
    where employee_gross_salary_details.empid in
	(select employee_ctc_master.empid  from employee_ctc_master, employee_departments
	where employee_ctc_master.empid = employee_departments.empid
    and case when employee_departments.effectiveenddate is null then
  		          (@date >= cast(employee_departments.effectivestartdate as date))
             when employee_departments.effectiveenddate is not null 
             then (@date between cast(employee_departments.effectivestartdate as date) 
             and cast(employee_departments.effectiveenddate as date))
             end
    and case when employee_ctc_master.effective_to_date is null then
  		          (cast(@date as date) >= cast(employee_ctc_master.effective_from_date as date))
             when employee_ctc_master.effective_to_date is not null 
             then (cast(@date as date) between cast(employee_ctc_master.effective_from_date as date)
             and cast(employee_ctc_master.effective_to_date as date))
             end)
	and employee_gross_salary_details.year = year(year_value)
	-- and employee_gross_salary_details.month = month_id
    and employee_gross_salary_details.empid = employee_departments.empid
    and employee_departments.departmentid = departmentsmaster.id
    and case when employee_departments.effectiveenddate is null then
  		          (@date >= cast(employee_departments.effectivestartdate as date))
             when employee_departments.effectiveenddate is not null 
             then (@date between cast(employee_departments.effectivestartdate as date) 
             and cast(employee_departments.effectiveenddate as date))
             end
    group by employee_gross_salary_details.month,departmentsmaster.deptname;

end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_documents_files` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_documents_files`(`employee_id` int,`candidate_id` int,`moduleid` int,`filecategory` varchar(64),`requestid` int,`status` varchar(32))
begin
	
	set @filepath=(select concat(root_folder,'\\',module_code)  from filepaths_master where module_id=`moduleid` limit 1);
    select 	id,
			document_number,
            (select description from filecategory_master where id=file_category and module_id=`moduleid`)as description,
            (select category from filecategory_master where id=file_category and module_id=`moduleid`)as file_category,
            @filepath as filepath,
            concat(
             (case when `candidate_id` is not null then concat('CAN',`candidate_id`) else 
            (case when (select id from ems_new_hire where empid=ifnull(`employee_id`,0) and `filecategory` not in ('PROFILE','DISABILITIES','INVESTMENTS')) then concat('CAN',(select id from ems_new_hire where empid=ifnull(`employee_id`,0)))
             else ifnull(`employee_id`,0) end) end),
           '_',(select category from filecategory_master where id=files_master.file_category and module_id=`moduleid`),
            '_',ifnull(`request_id`,''),'_',filename) as filename,
            file_status as status,
            filename as fname,
            upload_date  
	from files_master 
	where 
	(
	files_master.empid= `employee_id` 
	or files_master.candidate_id=(case when `candidate_id`is not null then `candidate_id` else (select id from ems_new_hire where empid=ifnull(`employee_id`,0)) end)
	) 
	and file_category <=>(case when `filecategory` is null then file_category else (select id from filecategory_master where category=`filecategory` and module_id=`moduleid`) end)
	and file_category not in (select id from filecategory_master where category in ('PROFILE','DISABILITIES','INVESTMENTS'))
    and request_id <=> ifnull(`requestid`,request_id)
	and file_status <=> ifnull(`status`,file_status)
	order by upload_date desc;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_document_category` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_document_category`(in docid int)
begin
	select d.id,d.category,d.status from document_category_master d where d.id <=> ifnull(docid,d.id);
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_duration_for_backdated_compoff_leave` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE PROCEDURE `get_duration_for_backdated_compoff_leave`()
begin
SELECT lm_rulevalues.value
FROM lm_rulemaster, lm_rulevalues
where lm_rulemaster.id = lm_rulevalues.ruleid
and lm_rulemaster.rulename = ('COMPOFF_MAX_BACKDATED_DAYS_PERMITTED_FOR_SUBMISSION') order by lm_rulevalues.id desc limit 1;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_emails_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_emails_by_empid`(in eid int(11))
begin

	
	SET @eid = eid; -- (select id from employee where officeemail=`email`);

set @rmid = (select reportingmanagerid from employee_reportingmanagers where empid=@eid and effectiveenddate is null);
set @rm_reporting_manager_id= (select reportingmanagerid from employee_reportingmanagers where empid=@rmid and reportingmanagerid<>@rmid and effectiveenddate is null);

SET @role = (select (select json_arrayagg(json_object('id',role_id,'name', rm.name)) from employee_roles er
         inner join rolesmaster rm on rm.id=er.role_id where 
          er.employee_id =@eid and er.effective_to_date is null and
   				 role_id in (select rolesmaster.id from rolesmaster where rolesmaster.isEditable=0)));
set @jsondata=(select distinct json_arrayagg(json_object(
'id',				`employee_roles`.`id`,
'employee_id',		`employee_roles`.`employee_id`,
'usertype',                     @role,
'rmid',				@rmid,
'rm_name',			(select concat(firstname, ' ',lastname) from employee where id=@rmid),
'companyname',     (select companyname from companyinformation where id=1 ),
'emp_email',       `employee`.`officeemail`,
'emp_name',			(select concat(`employee`.`firstname`, ' ',`employee`.`lastname`)),
'rm_email',(select officeemail from employee where id=@rmid),
'admin_name',(select concat(ifnull(firstname,''), ' ',ifnull(lastname,'')) from employee where id=1),
'admin_email',(select officeemail from  employee where id=1),
'rm_reporting_name',(select concat(firstname, ' ',lastname) from employee where id=ifnull(@rm_reporting_manager_id,0)),
'rm_reporting_email',(select officeemail from  employee where id=ifnull(@rm_reporting_manager_id,0))

))
FROM employee_roles, employee, rolesmaster
WHERE -- employee_roles.rmid = employee.id and
rolesmaster.id = employee_roles.role_id and
employee.id = employee_roles.employee_id
and employee_roles.employee_id = @eid);
select @jsondata as jsonvalu;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employees_emails_for_program_schedule` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employees_emails_for_program_schedule`(sid int)
	BEGIN

		select e.id,get_employee_name(e.id) as empname,e.dateofjoin,e.officeemail
		from employee e
		where e.id in (select empid from ems_employee_program_schedule where schedule_id =sid);

	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employees_for_assign_pay_group` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employees_for_assign_pay_group`()
	BEGIN
		select e.id,get_employee_name(e.id) as empname,e.dateofjoin,e.officeemail,d.deptname
		from employee e,employee_departments ed, departmentsmaster d
		where e.id not in (select empid from payroll_employee_pay_group_mapping_master pepgm where pepgm.effective_to_date is null)
		and e.id = ed.empid
		and ed.effectiveenddate is null
		and ed.departmentid = d.id
		and e.status = 1;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employees_for_department` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employees_for_department`(
	in `department_id` int(11)
	)
	begin
		SELECT employee_departments.empid,
		(select employee.empid from employee where employee.id = employee_departments.empid) as employee_code,
		(select concat(employee.firstname,' ',employee.lastname) as empname from employee where 
		employee.id = employee_departments.empid and employee.status=1) as empname
		FROM employee_departments
		inner join employee on employee.id=employee_departments.empid
		where employee_departments.departmentid = `department_id` and employee.status=1 
		order by employee_departments.empid;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employees_for_program_schedule` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employees_for_program_schedule`(sid int)
	BEGIN
		-- set @programid = (select program_id from ems_program_schedules where id = sid);
		
		select e.id,get_employee_name(e.id) as empname,e.dateofjoin,e.officeemail,'Pending' as status
		from employee e
		where status=1 and
		e.id not in (select conducted_by from ems_program_schedules where id=sid); -- in (select id from ems_program_schedules where program_id = @programid)
	   -- and status = 'Attended');
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employees_for_recognition_message` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employees_for_recognition_message`(in `empid` int(11))
	BEGIN
		select e.id,e.empid, get_employee_name(e.id) as empname,d.designation
    from employee e
    left join employee_designations ed on  e.id=ed.empid
    left join designationsmaster d on  ed.designationid=d.id
    where   e.id<>`empid` and e.status=1;
  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_employees_for_reporting_manager` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_employees_for_reporting_manager`(
in `employee_id` int(11),
in `designation_id` varchar(32)
)
begin
	SELECT employee_reportingmanagers.empid,
    (select employee.empid from employee where employee.id = employee_reportingmanagers.empid) as employee_code,
	(select concat(employee.firstname,' ',employee.lastname) as empname from employee where employee.id = employee_reportingmanagers.empid and employee.status=1) as empname
    FROM employee_reportingmanagers
    inner join employee on employee.id=employee_reportingmanagers.empid
	where employee_reportingmanagers.reportingmanagerid = `employee_id` and employee.status=1 and 
	employee_reportingmanagers.id in (select max(id) from employee_reportingmanagers m	group by m.empid)
    and case when `designation_id` = 'All' then (employee_reportingmanagers.empid = employee_reportingmanagers.empid) 
             else (employee_reportingmanagers.empid in (select employee_designations.empid from employee_designations where employee_designations.designationid = cast(`designation_id` as unsigned)
                                                        and employee_designations.effectiveenddate is null)) end
	order by employee_reportingmanagers.empid;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_employees_list` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_employees_list`()
begin
select  e.id,e.empid,CONCAT(firstname, " ", ifnull(middlename,''), " ", ifnull(lastname,'')) as ename,e.officeemail
 ,lm.location
 ,dm.designation
 from employee e
 left join employee_worklocations ewl on ewl.empid = e.id and ewl.effectivetodate is null
 left join companyworklocationsmaster cwl  on cwl.id=ewl.locationid
 left join locationsmaster lm on lm.id = cwl.city
 left join employee_designations ed on ed.empid = e.id
 left join designationsmaster dm on dm.id =ed.designationid
 where ed.effectiveenddate is null and e.status=1;
 end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employees_list_for_investments_approval` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employees_list_for_investments_approval`()
	begin
		/*select distinct 
		if((select distinct f.status FROM payroll_employee_investments f where f.empid  = i.empid and f.status != 9) not in (9,0,1) as flag, -- 1 for approve and 0 for except approve 
		i.empid,(select empid from employee where id=i.empid) as empcode,get_employee_name(i.empid) as empname
		from payroll_employee_investments i
		where financial_year=fn_get_financial_year() and assessment_year=fn_get_assessment_year();	
		 select distinct i.empid,(select empid from employee where id=i.empid) as empcode,get_employee_name(i.empid) as empname,
		 (case when (select distinct i.status from payroll_employee_investments where empid=i.empid) in (7) then 0  else 1 end) as flag -- 1 for approved , 0 for view
		 from payroll_employee_investments i
		 where financial_year=fn_get_financial_year() and assessment_year=fn_get_assessment_year();*/
		 select distinct i.empid,
						(select empid from employee where id=i.empid) as empcode,
						get_employee_name(i.empid) as empname,
						(case when (select count(*) from payroll_employee_investments where empid=i.empid and status=7)=0 then 1 else 0 end) as flag 
		from payroll_employee_investments i
		where i.financial_year=fn_get_financial_year() and i.assessment_year=fn_get_assessment_year();

		 -- empid=i.empid; -- take only other than 'Approved' status
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employees_of_manager` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employees_of_manager`(
	in `rm_id` int(11)
	)
	begin
		SELECT e.id,e.empid, 
		e.firstname,e.lastname
		/*
		 concat(e.firstname,case when e.middlename is not null then concat(' ',e.middlename) end as ,
		 case when e.lastname is not null then concat(' ',e.lastname) end) */
		FROM employee e,employee_reportingmanagers rm
		WHERE e.id = rm.empid
		and rm.effectiveenddate  is null
		and rm.reportingmanagerid=`rm_id`
		order by e.firstname, e.lastname;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employees_pending_checklists` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employees_pending_checklists`(search_str varchar(255),search_date date,employee_id int,dept_id int)
	begin
		select distinct eec.empid,
			get_employee_name(ifnull(employee_id,eec.empid)) as empname,e.empid employee_id,
			date(e.hiredon) as hiredon,date(e.dateofjoin) as dateofjoin,
			(select designation from designationsmaster where id = (select designationid from employee_designations where empid=ifnull(employee_id,e.id) and effectiveenddate is null)) as designation,
			-- eec.status,
			-- eec.final_status,
			if((select count(*) from ems_employee_checklist tmp where tmp.empid = ifnull(employee_id,eec.empid)   
			and tmp.department_id = ifnull(dept_id,eec.department_id) and tmp.final_status='Completed'),'Completed','Pending Checklist') as final_status,
			eec.department_id
		from ems_employee_checklist eec,employee e
		where eec.empid = e.id
		and e.id = ifnull(employee_id,e.id)
		and (case when search_str is not null then e.firstname like concat('%',search_str,'%') or e.middlename like concat('%',search_str,'%') or e.lastname like concat('%',search_str,'%') else 1=1 end)
		--  and (case when search_date is not null then search_date=date(e.hiredon) or search_date=date(e.dateofjoin) else 1=1 end)
		 and (case when search_date is not null then search_date=date(e.dateofjoin) else 1=1 end)
		and eec.department_id <=> (select distinct department_id from ems_employee_checklist where empid = eec.empid
		and (status='Pending' or final_status='Pending Checklist') and department_id <=> ifnull(dept_id,eec.department_id))
		-- and eec.status='Pending' or eec.final_status='Pending Checklist';
		order by eec.id desc;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employees_terminations` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employees_terminations`(in termid int, in manager_employee_id int(11))
	begin
	if (manager_employee_id is not null) then

			select term.id,CONCAT(e.firstname, " ", e.middlename, " ", e.lastname) as empname
		   ,(select CONCAT(x.firstname, " ", x.middlename, " ", x.lastname) 
		   from employee x where x.id=rm.reportingmanagerid ) as managername 
			, term.termination_date,cate.category,
			term.comment, term.status 
			from ems_employee_terminations term
			inner join ems_termination_category_master cate on cate.id=term.category_id
			inner join employee e on e.id=term.empid
			inner join employee_reportingmanagers rm on  e.id = rm.empid  
			and rm.effectiveenddate is null and rm.reportingmanagerid = manager_employee_id
			order by term.id desc;    
		else if (termid is not null) then
		
			select term.id,CONCAT(e.firstname, " ", e.middlename, " ", e.lastname) as empname
		   ,(select CONCAT(x.firstname, " ", x.middlename, " ", x.lastname) 
		   from employee x where x.id=rm.reportingmanagerid ) as managername 
			, term.termination_date,cate.category,
			term.comment, term.status 
			from ems_employee_terminations term
			inner join ems_termination_category_master cate on cate.id=term.category_id
			inner join employee e on e.id=term.empid
			inner join employee_reportingmanagers rm on  e.id = rm.empid  
			where term.id =termid
			order by term.id desc;
		else 
			select term.id,CONCAT(e.firstname, " ", e.middlename, " ", e.lastname) as empname
		   ,(select CONCAT(x.firstname, " ", x.middlename, " ", x.lastname) 
		   from employee x where x.id=rm.reportingmanagerid ) as managername 
			, term.termination_date,cate.category,
			term.comment, term.status 
			from ems_employee_terminations term
			inner join ems_termination_category_master cate on cate.id=term.category_id
			inner join employee e on e.id=term.empid
			inner join employee_reportingmanagers rm on  e.id = rm.empid  
			order by term.id desc;
		end if;
		end if;
		end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_attendance_dashboard` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_attendance_dashboard`(
		`manager_employee_id` int(11),
		`employee_id` int(11),
		`calendar_date` datetime
	)
	begin
		set @monthstartdate = `calendar_date`;
		set @monthstartdate = last_day(@monthstartdate) + interval 1 day - interval 1 month;
		set @monthenddate = (case when @monthstartdate=(last_day(current_date()) + interval 1 day - interval 1 month) then current_date() else last_day(@monthstartdate) end);
		if (employee_id is not null) then
			set @doj = date((select employee.dateofjoin from employee where employee.id = employee_id));
			if (@monthstartdate <= @doj) then
				set @monthstartdate = @doj; 
			end if;
		end if;
		-- create temp table to hold all dates in the given month
		create temporary table dashboard (
			attendanceid varchar(11),
			empid int(11),
			empname varchar(512),
			attendancedate date,
			present_or_absent varchar(32),
			attendancetype varchar(64),
			shift varchar(255), 
			firstlogintime varchar(32),
			lastlogouttime varchar(32),
			status varchar(32)
		);
		
		create temporary table weekoffs_table (
			empid int(11),
			weekoff1 int(11),
			weekoff2 int(11),
			weekoff3 int(11),
			effective_fromdate date,
			effective_todate date
		);
		
		-- create temp table to hold empids under a manager if any
		create temporary table manageremployees (
			sid int(11) auto_increment not null,
			mempid int(11),
			primary key (sid)
		);
		set @monthstarttemp = @monthstartdate;

		if (`manager_employee_id` is not null) then
			insert into manageremployees(mempid)
			SELECT e.id 
			FROM employee e,employee_reportingmanagers rm
			WHERE e.id = rm.empid
			and rm.effectiveenddate  is null
			and rm.reportingmanagerid=`manager_employee_id`
			order by e.firstname, e.lastname; 
		else 
			insert into manageremployees(mempid) values(`employee_id`);
			
		end if;
		
		insert into weekoffs_table(empid,weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
		select empid,weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
		from employee_weekoffs
		where employee_weekoffs.empid in (select mempid from manageremployees);
		
		set  @isweekoff='';
		set  @holiday ='';
		set @leave = '';
		set @cnt = (select count(*) from manageremployees);
		
		set @monthstarttemp = @monthstartdate;
		
		while (@monthstarttemp <= @monthenddate) do
			set @tot = @cnt;
			while (@tot>=0) do
				-- weekoffs
				set @isweekoff = (case when exists (select * from weekoffs_table v
				where ( @monthstarttemp between v.effective_fromdate and v.effective_todate)
				and dayofweek(@monthstarttemp) in (ifnull(v.weekoff1,0),ifnull(v.weekoff2,0),ifnull(v.weekoff3,0))
				and empid = (select mempid from manageremployees where sid=(@cnt-@tot)+1) order by empid desc) then 'W' else '' end) ;
				
				-- holidays
				select 'H' into @holiday -- v.description
				from (select m.date as date_value,m.description as description
				FROM holidaysmaster m, companyworklocationsmaster v  
				WHERE m.location = v.city 
				and v.id =(select s.locationid from employee_worklocations s where empid = (select mempid from manageremployees where sid=(@cnt-@tot)+1)  order by id desc limit 1)
				-- and m.leave_cycle_year = (select fn_get_leave_cycle_year())  ) s
				and m.year = year(`calendar_date`)  ) s
				where @monthstarttemp = s.date_value;
				
				 -- leaves
				if exists(select * from information_schema.columns where  table_schema=(select database()) and table_name='lm_employeeleaves') then
					if exists(select * from lm_employeeleaves where @monthstarttemp between fromdate and todate and empid=(select mempid from manageremployees where sid=(@cnt-@tot)+1) and leavestatus in ('Submitted','Approved')) then
						set @leave = 'L';
					end if;
				end if;
				
				-- now read the temp table data to iterate

				insert into dashboard
				select distinct (select b.id from employee_attendance b where b.empid=a.empid and b.attendancedate=a.attendancedate order by b.id desc limit 1) as attendanceid,a.empid,(select concat(firstname,' ',lastname) from employee where id=a.empid) as empname,a.attendancedate,
				(case when exists(select * from employee_attendance where attendancedate=a.attendancedate) then 'P' 
					  when @isweekoff <> '' then @isweekoff
					  when @holiday <> '' then @holiday	
					  when @leave <> '' then @leave	
					  else 'A' end) as present_or_absent,
				(select attendancetypesmaster.type from attendancetypesmaster where attendancetypesmaster.id=a.attendancetype) as attendancetype,
				(select shiftname from shiftsmaster where shiftsmaster.id=a.shiftid) as shift, (select firstlogintime from employee_attendance b where b.empid=a.empid and b.attendancedate=a.attendancedate order by b.id desc limit 1) as firstlogintime, (select lastlogouttime from employee_attendance b where b.empid=a.empid and b.attendancedate=a.attendancedate order by b.id desc limit 1) as lastlogouttime,a.status 
				from employee_attendance a,employee e
				where a.empid =(select mempid from manageremployees where sid=(@cnt-@tot)+1)
				and a.attendancedate = @monthstarttemp
				and a.empid = e.id
				and a.attendancedate >= date(e.dateofjoin);
			
				insert into dashboard
				select distinct '' as attendanceid,m.mempid as empid,(select concat(firstname,' ',lastname) from employee where id=m.mempid) as empname,
				@monthstarttemp as attendancedate, 
				(case when @isweekoff <> '' then @isweekoff
					  when @holiday <> '' then @holiday
					  when @leave <> '' then @leave	
					  else 'A' end) as present_or_absent,'' as attendancetype,'' as shift, '','',''
				from manageremployees m, employee z
				where @monthstarttemp not in (select attendancedate from employee_attendance where empid = m.mempid)
				and m.mempid = z.id
				and m.sid=(@cnt-@tot)+1
				and date(z.dateofjoin) <= @monthstarttemp;
				set @tot = @tot -1;
			end while;
			set  @isweekoff='';
			set  @holiday ='';
			set @leave = '';
			set @monthstarttemp = @monthstarttemp + interval 1 day;
		end while;
		select * from dashboard order by attendancedate,attendanceid;
		
		drop temporary table manageremployees;
		drop temporary table weekoffs_table;
		drop temporary table dashboard;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_attendance_dashboard1` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employee_attendance_dashboard1`(
		`manager_employee_id` int(11),
		`employee_id` int(11),
		`calendar_date` datetime
	)
	begin
		set @monthstartdate = `calendar_date`;
		set @monthstartdate = last_day(@monthstartdate) + interval 1 day - interval 1 month;
		set @monthenddate = (case when @monthstartdate=(last_day(current_date()) + interval 1 day - interval 1 month) then current_date() else last_day(@monthstartdate) end);
		if (employee_id is not null) then
			set @doj = (select employee.dateofjoin from employee where employee.id = employee_id);
			if (@monthstartdate < @doj) then
				set @monthstartdate = @doj; 
			end if;
		end if;
		-- create temp table to hold all dates in the given month
		create temporary table datelist (
			datevalue datetime not null,
			isweekoff varchar(1),
			holiday varchar(255)
		);
		create temporary table datelist2 (
			datevalue datetime not null,
			isweekoff varchar(1),
			holiday varchar(255)
		);
		create temporary table weekoffs_table (
			weekoff1 int(11),
			weekoff2 int(11),
			weekoff3 int(11),
			effective_fromdate date,
			effective_todate date
		);
		
		insert into weekoffs_table(weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
		select weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
		from employee_weekoffs
		where employee_weekoffs.empid = employee_id; 
		
		-- create temp table to hold empids under a manager if any
		create temporary table manageremployees (
			mempid int(11)
		);
		set @monthstarttemp = @monthstartdate;

		while (@monthstarttemp <= @monthenddate) do
			insert into datelist(datevalue) values(@monthstarttemp);
			set @monthstarttemp = @monthstarttemp + interval 1 day;
		end while;
		if (`manager_employee_id` is not null) then
			insert into manageremployees
			SELECT e.id 
			FROM employee e,employee_reportingmanagers rm
			WHERE e.id = rm.empid
			and rm.effectiveenddate  is null
			and rm.reportingmanagerid=`manager_employee_id`
			order by e.firstname, e.lastname; 
		else 
			insert into manageremployees values(`employee_id`);
			
		end if;
		
		update datelist d,weekoffs_table v
		set d.isweekoff = 'W'
		where case when v.effective_todate is not null then d.datevalue between v.effective_fromdate and v.effective_todate
				   else d.datevalue > v.effective_fromdate
				   end
		and dayofweek(d.datevalue) in (ifnull(v.weekoff1,0),ifnull(v.weekoff2,0),ifnull(v.weekoff3,0));    -- (ifnull(@w1,0)      
		
		update datelist d,
		(select m.date as date_value,m.description as description
		FROM holidaysmaster m, companyworklocationsmaster v  
		WHERE m.location = v.city 
		and v.id =(select s.locationid from employee_worklocations s where empid = `employee_id` order by id desc limit 1)
		and m.leave_cycle_year = (select fn_get_leave_cycle_year())) v
		set d.holiday = v.description -- 'H' 
		where d.datevalue = v.date_value;
		
		insert into datelist2
		select * from datelist;
		-- now read the temp table data to iterate
		select * from (
		select distinct a.id as attendanceid,a.empid,(select concat(firstname,' ',lastname) from employee where id=a.empid) as empname,a.attendancedate,
		(case when v.isweekoff is not null then v.isweekoff
			  when v.holiday is not null then v.holiday	
			  when exists(select * from employee_attendance where attendancedate=a.attendancedate) then 'P' 
			  else 'A' end) as present_or_absent,
		(select attendancetypesmaster.type from attendancetypesmaster where attendancetypesmaster.id=a.attendancetype) as attendancetype,
		(select shiftname from shiftsmaster where shiftsmaster.id=a.shiftid) as shift, a.firstlogintime,a.lastlogouttime,a.status 
		from employee_attendance a,employee e, datelist2 v
		where a.empid in (select mempid from manageremployees) and a.attendancedate = v.datevalue
		and a.empid = e.id
		and a.attendancedate >= e.dateofjoin
		
		union
		
		select distinct '' as attendanceid,m.mempid as empid,(select concat(firstname,' ',lastname) from employee where id=m.mempid) as empname,
		d.datevalue as attendancedate, 
		(case when d.isweekoff is not null then d.isweekoff
			  when d.holiday is not null then d.holiday
			  else 'A' end) as present_or_absent,'' as attendancetype,'' as shift, '','',''
		from datelist2 d,manageremployees m, employee z
		where d.datevalue not in (select attendancedate from employee_attendance where empid = m.mempid)
		and m.mempid = z.id
		and z.dateofjoin <= d.datevalue 
		) b order by attendancedate,attendanceid;
			
		drop temporary table datelist;
		drop temporary table datelist2;
		drop temporary table manageremployees;
		drop temporary table weekoffs_table;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_attendance_dashboard2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employee_attendance_dashboard2`(
		`manager_employee_id` int(11),
		`employee_id` int(11),
		`calendar_date` datetime
	)
	begin
		set @monthstartdate = `calendar_date`;
		set @monthstartdate = last_day(@monthstartdate) + interval 1 day - interval 1 month;
		set @monthenddate = (case when @monthstartdate=(last_day(current_date()) + interval 1 day - interval 1 month) then current_date() else last_day(@monthstartdate) end);
		if (employee_id is not null) then
			set @doj = (select employee.dateofjoin from employee where employee.id = employee_id);
			if (@monthstartdate < @doj) then
				set @monthstartdate = @doj; 
			end if;
		end if;
		-- create temp table to hold all dates in the given month
		create temporary table dashboard (
			attendanceid varchar(11),
			empid int(11),
			empname varchar(512),
			attendancedate date,
			present_or_absent varchar(32),
			attendancetype varchar(64),
			shift varchar(255), 
			firstlogintime varchar(32),
			lastlogouttime varchar(32),
			status varchar(32)
		);
		
		create temporary table weekoffs_table (
			weekoff1 int(11),
			weekoff2 int(11),
			weekoff3 int(11),
			effective_fromdate date,
			effective_todate date
		);
		
		insert into weekoffs_table(weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
		select weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
		from employee_weekoffs
		where employee_weekoffs.empid = employee_id; 
		
		-- create temp table to hold empids under a manager if any
		create temporary table manageremployees (
			mempid int(11)
		);
		set @monthstarttemp = @monthstartdate;

		if (`manager_employee_id` is not null) then
			insert into manageremployees
			SELECT e.id 
			FROM employee e,employee_reportingmanagers rm
			WHERE e.id = rm.empid
			and rm.effectiveenddate  is null
			and rm.reportingmanagerid=`manager_employee_id`
			order by e.firstname, e.lastname; 
		else 
			insert into manageremployees values(`employee_id`);
			
		end if;
		
		set  @isweekoff='';
		set  @holiday ='';
		set @leave = '';
		set @monthstarttemp = @monthstartdate;
		while (@monthstarttemp <= @monthenddate) do
			-- weekoffs
			select 'W' into @isweekoff from weekoffs_table v
			where ( @monthstarttemp between v.effective_fromdate and v.effective_todate)
					--   or (@monthstarttemp > v.effective_fromdate)
			and dayofweek(@monthstarttemp) in (ifnull(v.weekoff1,0),ifnull(v.weekoff2,0),ifnull(v.weekoff3,0));    
			
			-- holidays
			select v.description into @holiday
			from (select m.date as date_value,m.description as description
			FROM holidaysmaster m, companyworklocationsmaster v  
			WHERE m.location = v.city 
			and v.id =(select s.locationid from employee_worklocations s where empid = `employee_id` order by id desc limit 1)
			and m.leave_cycle_year = (select fn_get_leave_cycle_year())  limit 1) v
			where @monthstarttemp = v.date_value;
			
			 -- leaves
			if exists(select * from information_schema.columns where  table_schema=(select database()) and table_name='lm_employeeleaves') then
				if exists(select * from lm_employeeleaves where @monthstarttemp between fromdate and todate and empid=`employee_id` and leavestatus in ('Submitted','Approved')) then
					set @leave = "L";
				end if;
			end if;
			
			-- now read the temp table data to iterate

			insert into dashboard
			select distinct a.id as attendanceid,a.empid,(select concat(firstname,' ',lastname) from employee where id=a.empid) as empname,a.attendancedate,
			(case when exists(select * from employee_attendance where attendancedate=a.attendancedate) then 'P' 
				  when @isweekoff <> '' then @isweekoff
				  when @holiday <> '' then @holiday	
				  when @leave <> '' then @leave	
				  else 'A' end) as present_or_absent,
			(select attendancetypesmaster.type from attendancetypesmaster where attendancetypesmaster.id=a.attendancetype) as attendancetype,
			(select shiftname from shiftsmaster where shiftsmaster.id=a.shiftid) as shift, a.firstlogintime,a.lastlogouttime,a.status 
			from employee_attendance a,employee e
			where a.empid in (select mempid from manageremployees) and a.attendancedate = @monthstarttemp
			and a.empid = e.id
			and a.attendancedate >= e.dateofjoin;
		
			insert into dashboard
			select distinct '' as attendanceid,m.mempid as empid,(select concat(firstname,' ',lastname) from employee where id=m.mempid) as empname,
			@monthstarttemp as attendancedate, 
			(case when @isweekoff <> '' then @isweekoff
				  when @holiday <> '' then @holiday
				  when @leave <> '' then @leave	
				  else 'A' end) as present_or_absent,'' as attendancetype,'' as shift, '','',''
			from manageremployees m, employee z
			where @monthstarttemp not in (select attendancedate from employee_attendance where empid = m.mempid)
			and m.mempid = z.id
			and z.dateofjoin <= @monthstarttemp;
			
		
			set  @isweekoff='';
			set  @holiday ='';
			set @leave = '';
			set @monthstarttemp = @monthstarttemp + interval 1 day;
		end while;
		select * from dashboard order by attendancedate,attendanceid;
		
		drop temporary table manageremployees;
		drop temporary table weekoffs_table;
		drop temporary table dashboard;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_attendance_notifications` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_attendance_notifications`(
		`manager_employee_id` int(11),
		`employee_id` int(11),
		`calendar_date` date
	)
	begin
	declare vempid int(11);
	declare vname varchar(255);
	declare vdate date;
	declare vdoj date;
	declare empid_cursor cursor for select employee.id,
		concat(employee.firstname,case when employee.middlename is not null then concat(' ',employee.middlename) end,
		case when employee.lastname is not null then concat(' ',employee.lastname) end) as emp_name,
		date(employee.dateofjoin)
	 from employee,employee_reportingmanagers where employee.status = 1
													   and employee.id = employee_reportingmanagers.empid
													   and employee_reportingmanagers.effectiveenddate is null
													   and employee_reportingmanagers.reportingmanagerid = manager_employee_id;
	declare month_cursor cursor for select month_day from month_table;

	create temporary table month_table(
	month_day date
	);

	CREATE TEMPORARY TABLE result_table (
		emp_id int(11),
		employee_name varchar(255),
		absent_date date 
	);

	set @m = 0;
	set @m = month(calendar_date);

	create temporary table emp_attendance (
	empid int(11),
	attendancedate date
	);

	create temporary table emp_regularization (
	empid int(11),
	fromdate date,
	todate date,
	reg_status varchar(32)
	);

	insert into emp_regularization(empid,fromdate,todate,reg_status)
	select empid,fromdate,todate,status from employee_attendance_regularization 
	where month(employee_attendance_regularization.fromdate) = @m or month(employee_attendance_regularization.todate) = @m;

	insert into emp_attendance(empid,attendancedate)
	select empid,attendancedate from employee_attendance where month(employee_attendance.attendancedate) = @m;

	set @start_date = '';
	set @start_date = (SELECT DATE_ADD(calendar_date, interval - DAY((calendar_date)) + 1 DAY));
	set @end_date = '';
	if (@m <> (select month(curdate()))) then
		set @end_date = (SELECT DATE(LAST_DAY(calendar_date)));
	else
		set @end_date = (select curdate());
	end if;

	WHILE (@start_date <= @end_date) DO
	INSERT INTO month_table(month_day) values (@start_date);
	SET @start_date = (select date_add(@start_date,interval 1 day));
	END WHILE;
	if (manager_employee_id is not null) then
	OPEN empid_cursor;
		set @empid_count = 0;
		set @empid_count =found_rows();
		set @e = 0;
		while @e < @empid_count do
			fetch empid_cursor into vempid,vname,vdoj;
			OPEN month_cursor;
			set @month_count = 0;
			set @month_count =found_rows();
			set @t = 0;
			while @t < @month_count do
				fetch month_cursor into vdate;
				if (not exists(select * from emp_attendance where emp_attendance.empid = vempid and emp_attendance.attendancedate = vdate)
					and not exists(select * from emp_regularization where vdate between emp_regularization.fromdate and emp_regularization.todate 
					and emp_regularization.empid = vempid 
					and emp_regularization.reg_status = 'Submitted')) then
					if (vdate >= vdoj) then
						-- first check whether this date is holiday or week-off
						-- set @currstartdate = (current_date() - interval 1 month);
						-- set @currenddate = current_date();
						if not exists(select * from employee_weekoffs where employee_weekoffs.empid=vempid and
						(dayofweek(vdate)=employee_weekoffs.weekoffday1 or dayofweek(vdate)=employee_weekoffs.weekoffday2 or 
						dayofweek(vdate)=employee_weekoffs.weekoffday3) and vdate between employee_weekoffs.effectivefromdate and 
						employee_weekoffs.effectivetodate) 
						-- and vdate not in (select date from holidaysmaster where leave_cycle_year=(select fn_get_leave_cycle_year()) and location=(select city 
						and vdate not in (select date from holidaysmaster where holidaysmaster.year = year(vdate)  and location=(select city 
						from companyworklocationsmaster where id = (select locationid from employee_worklocations where effectivetodate is null 
						and empid=vempid))) then
							set @leave = '';
							if exists(select * from information_schema.columns where  table_schema=(select database()) and table_name='lm_employeeleaves') then
								if exists(select * from lm_employeeleaves where vdate between date(fromdate) and date(todate) 
								and empid= vempid and leavestatus in ('Submitted','Approved')) then
									set @leave = "L";
								end if;
							end if;	
							if @leave='' then
								insert into result_table(emp_id,employee_name,absent_date) values
									(vempid,vname,vdate);
								end if;
							end if;
					end if;
				end if;
				set @t = @t + 1;
			end while;
			CLOSE month_cursor;
			set @e = @e + 1;
		end while;
	CLOSE empid_cursor;
	elseif (employee_id is not null) then
		select concat(employee.firstname,case when employee.middlename is not null then concat(' ',employee.middlename) end,
			case when employee.lastname is not null then concat(' ',employee.lastname) end) as emp_name,
			date(employee.dateofjoin) into @emp_name,@doj
		from employee where employee.id = employee_id;
		OPEN month_cursor;
			set @month_count = 0;
			set @month_count =found_rows();
			set @t = 0;
			while @t < @month_count do
				fetch month_cursor into vdate;
				if (not exists(select * from emp_attendance where emp_attendance.empid = employee_id and emp_attendance.attendancedate = vdate)
					and not exists(select * from emp_regularization where vdate between emp_regularization.fromdate and emp_regularization.todate 
					and emp_regularization.empid = employee_id
					 and emp_regularization.reg_status = 'Submitted')) then
					if (vdate >= @doj) then
						-- first check whether this date is holiday or week-off
						-- set @currstartdate = (current_date() - interval 1 month);
						-- set @currenddate = current_date();
						if not exists(select * from employee_weekoffs where employee_weekoffs.empid=employee_id and
						(dayofweek(vdate)=employee_weekoffs.weekoffday1 or dayofweek(vdate)=employee_weekoffs.weekoffday2 or
						dayofweek(vdate)=employee_weekoffs.weekoffday3) and vdate between employee_weekoffs.effectivefromdate 
						and employee_weekoffs.effectivetodate) 
						-- and vdate not in (select date from holidaysmaster where leave_cycle_year=(select fn_get_leave_cycle_year()) and location=(select city 
						and vdate not in (select date from holidaysmaster where holidaysmaster.year = year(vdate) and location=(select city 
						from companyworklocationsmaster where id = (select locationid from employee_worklocations where effectivetodate is null 
						and empid=employee_id))) then
							set @leave = '';
							if exists(select * from information_schema.columns where  table_schema=(select database()) and table_name='lm_employeeleaves') then
								if exists(select * from lm_employeeleaves where vdate between date(fromdate) and date(todate) 
								and empid= employee_id and leavestatus in ('Submitted','Approved')) then
									set @leave = '"L"';
								end if;
							end if;	
							if @leave='' then
								insert into result_table(emp_id,employee_name,absent_date) values
								(employee_id,@emp_name,vdate);
							end if;
						end if;
					end if;
				end if;
				set @t = @t + 1;
			end while;
	CLOSE month_cursor;
	end if;
	select emp_id,employee_name,absent_date from result_table order by absent_date,emp_id;

	drop temporary table month_table;
	drop temporary table result_table;
	drop temporary table emp_attendance;
	drop temporary table emp_regularization;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_attendance_regularization` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employee_attendance_regularization`(
	  `employee_id` int(11)
	)
	begin

		select a.id,a.applieddate,(select type from attendancetypesmaster where id=a.worktype) as worktype,(select shiftname from shiftsmaster where id=a.shiftid) as shift,a.fromdate, a.todate,a.reason,a.raisedby as raisedbyid,(select concat(firstname,' ',lastname) from employee where id=a.raisedby) as raisedbyname, a.approvercomments as comment, a.status 
		from employee_attendance_regularization a
		where a.empid = `employee_id`
		order by a.id desc;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_checklists` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_checklists`(cid int,employeeid int,c_category varchar(255),dept_id int)
	begin
		select eec.id,
			eec.checklist_id,
			ecm.description as checklist_name,
			(select concat(firstname,' ',middlename,' ',lastname) from employee where id=eec.empid) as empname,
			eec.status,
			eec.comment,
			ecm.category,
			ecm.department_id,
			(select deptname from departmentsmaster where id=ecm.department_id) as department_name,
			get_employee_name(eec.updated_by) as approvername
		from ems_employee_checklist eec,
			ems_checklist_master ecm
		where eec.id <=> ifnull(cid,eec.id) 
		and eec.checklist_id = ecm.id
		and eec.empid <=> ifnull(employeeid,eec.empid)
		and ecm.category <=> ifnull(c_category,ecm.category)
		and eec.department_id <=> ifnull(dept_id,eec.department_id);
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_ctc_durations` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_ctc_durations`(
	employee_id integer(11)
	)
	begin
	select id, concat(monthname(str_to_date(month(effective_from_date),'%m')),', ',year(effective_from_date),' - ',
					  case when effective_to_date is not null 
						   then concat(monthname(str_to_date(month(effective_to_date),'%m')),', ',year(effective_to_date))
					  else 'Present'
					  end) as duration
	from employee_ctc_master
	where empid = employee_id
	order by id desc;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_current_shifts` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employee_current_shifts`(
	in `employee_id` int(11)
	)
	begin
		select s.id,s.shiftid,
		(case when current_date() < date(s.fromdate) then 'Next Shift' else 'Current Shift' end) as duration,
		date(s.fromdate) as fromdate,
		date(s.todate) as todate,
		(select shiftname from shiftsmaster where id = s.shiftid) as shiftname,
		(select fromtime from shiftsmaster where id = s.shiftid) as fromtime,
		(select totime from shiftsmaster where id = s.shiftid) as totime
		from employee_shift_details s
		where s.empid =  `employee_id`
		-- and (date(s.fromdate) between (last_day(current_date()) + interval 1 day - interval 1 month) and last_day(current_date())
		-- or date(s.todate) between (last_day(current_date()) + interval 1 day - interval 1 month) and last_day(current_date())
		-- or (date(s.fromdate) < (last_day(current_date()) + interval 1 day - interval 1 month) and date(s.todate) > last_day(current_date()))
		-- )
		and (current_date() between date(s.fromdate) and date(s.todate)
		or current_date() < date(s.fromdate))
		order by s.shiftid limit 2;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_durations_for_salary_display` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_durations_for_salary_display`(
	employee_id integer(11)
	)
	begin
		if (employee_id is not null) then
			select id, concat(monthname(effective_from_date),', ',year(effective_from_date), ' - ',
			case when ifnull(effective_to_date,0) <> 0 then (concat(monthname(effective_to_date),', ',year(effective_to_date)))
				 else 'Present'
				 end) as duration
			from employee_ctc_master
			where employee_ctc_master.empid = employee_id;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_epf_contribution_options` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_epf_contribution_options`(
	)
	begin
	DECLARE v_percentage decimal(5,2);
	declare v_rpf decimal(15,2);
	set v_percentage = (select payroll_product_component_rulevalues.value from payroll_product_component_rulevalues where 
						payroll_product_component_rulevalues.rule_id = (select payroll_product_component_rulemaster.id 
						from payroll_product_component_rulemaster where payroll_product_component_rulemaster.rule_name = 'TOTAL_PERCENTAGE_CONTRIBUTION_BY_EMPLOYEE'));

	set v_rpf = (select payroll_product_component_rulevalues.value from payroll_product_component_rulevalues where 
						payroll_product_component_rulevalues.rule_id = (select payroll_product_component_rulemaster.id 
						from payroll_product_component_rulemaster where payroll_product_component_rulemaster.rule_name = 'MAXIMUM_SALARY_CONSIDERED_FOR_EMPLOYER_CONTRIBUTION'));

	select concat(v_percentage,'% of Actual PF Wage') as display_string, 'ACTUAL' as return_value
	union
	select concat(v_percentage,'% of restricted contribution of Rs.',v_rpf,' PF wage'), 'RESTRICTED'
	union
	select concat(v_percentage,'% of Actual PF Wage along with employee VPF'),'ACTUAL WITH VPF' 
	union
	select concat(v_percentage,'% of restricted contribution of Rs.',v_rpf,' PF wage along with employee VPF'),'RESTRICTED WITH VPF';
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_epf_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_epf_details`(
	employee_id int(11)
	)
	begin
	set @financial_year = (select fn_get_financial_year());
	select year,monthname(str_to_date(month,'%m')) as month_name,employee_provident_fund
	from employee_net_salary_details
	where employee_net_salary_details.empid = employee_id
	and employee_net_salary_details.financial_year = @financial_year;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_investments` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_investments`(emp_id int)
	begin	
		set @filepath=(select concat(root_folder,'\\',module_code,'\\')  from filepaths_master where module_id=5 limit 1); -- module id 5 is for payroll
		-- set @filepath=(select concat(root_folder,'/',module_code,'/')  from filepaths_master where module_id=5 limit 1); -- module id 5 is for payroll
		-- create a temp table for storing employee uploaded investment files  
		drop temporary table if exists employee_disability_files;
		drop temporary table if exists employee_disability_files_only;
		drop temporary table if exists employee_investment_files;
		drop temporary table if exists employee_investment_files_only;
		
		drop temporary table if exists employee_disability_fileids;
		drop temporary table if exists employee_investment_fileids;
		
		create temporary table employee_disability_files(fid int(11) auto_increment not null,empid int(11),eid int(11),filename varchar(255),filecategory varchar(64), primary key(fid));
		create temporary table employee_investment_files(fid int(11) auto_increment not null,empid int(11),eid int(11),filename varchar(255),filecategory varchar(64), primary key(fid));
		
		create temporary table employee_investment_files_only(fid int(11) auto_increment not null,empid int(11),eid int(11),name varchar(255),filecategory varchar(64), primary key(fid));
		create temporary table employee_disability_files_only(fid int(11) auto_increment not null,empid int(11),eid int(11),name varchar(255),filecategory varchar(64), primary key(fid));
		
		create temporary table employee_disability_fileids(fid int(11) auto_increment not null,empid int(11),eid int(11),fileid int(11),filename varchar(255),filecategory varchar(64), primary key(fid));
		create temporary table employee_investment_fileids(fid int(11) auto_increment not null,empid int(11),eid int(11),fileid int(11),filename varchar(255),filecategory varchar(64), primary key(fid));
			
		insert into employee_investment_files(empid,eid,filename,filecategory)
		select 	emp_id,
				i.id,
				concat(ifnull(emp_id,0),'_','INVESTMENTS','_',ifnull(i.id,''),'_',filename) as filename,
				'INVESTMENTS' as filecategory
		from files_master f,payroll_employee_investments i
		where f.empid <=> emp_id
		-- and files_master.candidate_id <=> (case when ifnull(`employee_id`,0)=0 and `candidate_id` is not null then `candidate_id` else files_master.candidate_id end)
		and file_category = (select id from filecategory_master where module_id=5 and category='INVESTMENTS')
		and request_id <=> i.id
		and i.empid = f.empid;
		
		-- this is just to show filename to the user (excluding path & other stuff appended to filename)
		insert into employee_investment_files_only(empid,eid,name,filecategory)
		select 	emp_id,
				i.id,
				filename as name,
				'INVESTMENTS' as filecategory
		from files_master f,payroll_employee_investments i
		where f.empid <=> emp_id
		and file_category = (select id from filecategory_master where module_id=5 and category='INVESTMENTS')
		and request_id <=> i.id
		and i.empid = f.empid;
		
		insert into employee_investment_fileids(empid,eid,fileid,filename,filecategory)
		select 	emp_id,
				i.id,
				f.id as fileid,
				concat(ifnull(emp_id,0),'_','INVESTMENTS','_',ifnull(i.id,''),'_',filename) as filename,
				'INVESTMENTS' as filecategory
		from files_master f,payroll_employee_investments i
		where f.empid <=> emp_id
		-- and files_master.candidate_id <=> (case when ifnull(`employee_id`,0)=0 and `candidate_id` is not null then `candidate_id` else files_master.candidate_id end)
		and file_category = (select id from filecategory_master where module_id=5 and category='INVESTMENTS')
		and request_id <=> i.id
		and i.empid = f.empid;
		
		insert into employee_disability_files(empid,eid,filename,filecategory)
		select 	emp_id,
				i.id,
				concat(ifnull(emp_id,0),'_','DISABILITIES','_',ifnull(i.id,''),'_',filename) as filename,
				'DISABILITIES' as filecategory
		from files_master f,payroll_employee_investments i
		where f.empid <=> emp_id
		-- and files_master.candidate_id <=> (case when ifnull(`employee_id`,0)=0 and `candidate_id` is not null then `candidate_id` else files_master.candidate_id end)
		and file_category = (select id from filecategory_master where module_id=5 and category='DISABILITIES')
		and request_id <=> i.id
		and i.empid = f.empid;
		
		-- this is just to show filename to the user (excluding path & other stuff appended to filename)
		insert into employee_disability_files_only(empid,eid,name,filecategory)
		select 	emp_id,
				i.id,
				filename as name,
				'DISABILITIES' as filecategory
		from files_master f,payroll_employee_investments i
		where f.empid <=> emp_id
		and file_category = (select id from filecategory_master where module_id=5 and category='DISABILITIES')
		and request_id <=> i.id
		and i.empid = f.empid;
		
		insert into employee_disability_fileids(empid,eid,fileid,filename,filecategory)
		select 	emp_id,
				i.id,
				f.id as fileid,
				concat(ifnull(emp_id,0),'_','DISABILITIES','_',ifnull(i.id,''),'_',filename) as filename,
				'DISABILITIES' as filecategory
		from files_master f,payroll_employee_investments i
		where f.empid <=> emp_id
		-- and files_master.candidate_id <=> (case when ifnull(`employee_id`,0)=0 and `candidate_id` is not null then `candidate_id` else files_master.candidate_id end)
		and file_category = (select id from filecategory_master where module_id=5 and category='DISABILITIES')
		and request_id <=> i.id
		and i.empid = f.empid;
		
		if exists(select * from payroll_employee_investments where empid=emp_id and financial_year=fn_get_financial_year()) then
			select json_arrayagg(json_object(	
				'id',						id,
				'investment_id',			(select json_arrayagg(json_object(
											 'investment_id', i.id
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											  and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'description_section',    	concat(incometax_section,' ',incometax_section_description),
				'description',    			concat(investment_description,(case when disability_min_percentage is null then '' else concat('(disability min percentage: ',disability_min_percentage,')') end),(case when disability_max_percentage is null then '' else concat('(disability max percentage: ',disability_max_percentage,')') end)),
				'disability_flag',			(case when (disability_min_percentage is null) then 0 else 1 end),
				'disability_min_percentage',ifnull(disability_min_percentage,null),	
				'disability_max_percentage',ifnull(disability_max_percentage,null),	
				'filepath',					@filepath,
				'disability_fileid',		(select (select  fileid from employee_disability_fileids where eid=i.id and filecategory = 'DISABILITIES' and empid=i.empid)
											 from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											and i.investment_id = payroll_product_investments_master.id 
											order by i.id  limit 1),
				'disability_file',			(select (select distinct name from employee_disability_files_only where eid=i.id and filecategory = 'DISABILITIES' and empid=i.empid)
											 from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											and i.investment_id = payroll_product_investments_master.id 
											order by i.id  limit 1),                                        
				'disability_filename',		(select (select distinct filename from employee_disability_files where eid=i.id and filecategory = 'DISABILITIES' and empid=i.empid)
											 from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											and i.investment_id = payroll_product_investments_master.id 
											order by i.id  limit 1),
				-- from payroll_product_investments_master where id=investment_id),
				'investment_maxvalue',   	investment_maxvalue,
				-- (select investment_maxvalue from payroll_product_investments_master where id=investment_id),
				'declared_amount',       	(select distinct i.declared_amount from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											  and i.investment_id = payroll_product_investments_master.id
											 ),
				'submitted_amount',      	(select json_arrayagg(json_object(
											 'submitted_amount', i.submitted_amount
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'approved_amount',       	(select json_arrayagg(json_object(
											 'approved_amount', i.verified_amount
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'investment_fileid',		(select json_arrayagg(json_object(
											'investment_fileid', (select fileid from employee_investment_fileids where eid=i.id and filecategory = 'INVESTMENTS' and empid=i.empid)
											)) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											and i.investment_id = payroll_product_investments_master.id 
											order by i.id),       
				'investment_file',		(select json_arrayagg(json_object(
											'investment_file', (select name from employee_investment_files_only where eid=i.id and filecategory = 'INVESTMENTS' and empid=i.empid)
											)) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											and i.investment_id = payroll_product_investments_master.id 
											order by i.id),                                            
				'investment_filename',		(select json_arrayagg(json_object(
											'investment_filename', (select filename from employee_investment_files where eid=i.id and filecategory = 'INVESTMENTS' and empid=i.empid)
											)) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											and i.investment_id = payroll_product_investments_master.id 
											order by i.id),                                         
				'receipt_number',        	(select json_arrayagg(json_object(
											 'receipt_number', i.receipt_number
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'disability_percentage', 	(select distinct i.disability_percentage
											  from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'action_date',      		(select json_arrayagg(json_object(
											 'action_date', i.action_date
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'status',     	 			(select json_arrayagg(json_object(
											 'status', (select name from statusmaster where id=i.status and moduleid=5)
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'status_reason', 			(select json_arrayagg(json_object(
											 'status_reason', i.status_reason
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id)
				)) as json_data   
			from payroll_product_investments_master
			where current_date() between effective_from_date and ifnull(effective_to_date,current_date());
			-- and pim.id = (select investment_id from payroll_employee_investments where empid=ef.empid);
		else
			select json_arrayagg(json_object(	
				'id',						id,
				'investment_id',			null,
				'description_section',		concat(incometax_section,' ',incometax_section_description),
				'description',    			concat(investment_description,(case when disability_min_percentage is null then '' else concat('(disability min percentage: ',disability_min_percentage,')') end),(case when disability_max_percentage is null then '' else concat('(disability max percentage: ',disability_max_percentage,')') end)),
				'filepath',					@filepath,
				'disability_file',			null,
				'disability_filename',		null,
				'disability_flag',			(case when (disability_min_percentage is null) then 0 else 1 end),
				'investment_maxvalue',   	investment_maxvalue,
				'declared_amount',       	null,
				'submitted_amount',      	null,
				'approved_amount',       	null,
				'investment_file',			null,
				'investment_filename',		null,
				'receipt_number',        	null,
				'disability_percentage', 	null,
				'action_date',      		null,
				'status',     	 			null,
				'status_reason', 			null
				)) as json_data   
			from payroll_product_investments_master
			where current_date() between effective_from_date and ifnull(effective_to_date,current_date());
		end if;
		drop temporary table if exists employee_disability_files;
		drop temporary table if exists employee_disability_files_only;
		drop temporary table if exists employee_disability_fileids;
		drop temporary table if exists employee_investment_files;
		drop temporary table if exists employee_investment_files_only;
		drop temporary table if exists employee_investment_fileids;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_investments_bkp` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_investments_bkp`(emp_id int)
	begin	
		if exists(select * from payroll_employee_investments where empid=emp_id and financial_year=fn_get_financial_year()) then
			select json_arrayagg(json_object(	
				'id',						id,
				'investment_id',			(select json_arrayagg(json_object(
											 'investment_id', i.id
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											  and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'description',				 concat(incometax_section,' - ',investment_description), 

				'disability_flag',			(case when (disability_min_percentage is null) then 0 else 1 end),
				-- from payroll_product_investments_master where id=investment_id),
				'investment_maxvalue',   	investment_maxvalue,
				-- (select investment_maxvalue from payroll_product_investments_master where id=investment_id),
				'declared_amount',       	(select distinct i.declared_amount from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											  and i.investment_id = payroll_product_investments_master.id
											 ),
				'submitted_amount',      	(select json_arrayagg(json_object(
											 'submitted_amount', i.submitted_amount
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'approved_amount',       	(select json_arrayagg(json_object(
											 'approved_amount', i.verified_amount
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'receipt_number',        	(select json_arrayagg(json_object(
											 'receipt_number', i.receipt_number
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'disability_percentage', 	(select distinct i.disability_percentage
											  from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'action_date',      		(select json_arrayagg(json_object(
											 'action_date', i.action_date
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'status',     	 			(select json_arrayagg(json_object(
											 'status', i.status
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id),
				'status_reason', 			(select json_arrayagg(json_object(
											 'status_reason', i.status_reason
											 )) from payroll_employee_investments i where i.empid=emp_id and i.financial_year=fn_get_financial_year()
											 and i.investment_id = payroll_product_investments_master.id 
											 order by i.id)
				)) as json_data   
			from payroll_product_investments_master 
			-- payroll_employee_investments
			-- where empid=emp_id;
			where current_date() between effective_from_date and ifnull(effective_to_date,current_date());

		else
			select json_arrayagg(json_object(	
				'id',						id,
				'investment_id',			null,
				'description',    			concat(incometax_section,' ',investment_description),
				'disability_flag',			(case when (disability_min_percentage is null) then 0 else 1 end),
				'investment_maxvalue',   	investment_maxvalue,
				'declared_amount',       	null,
				'submitted_amount',      	null,
				'approved_amount',       	null,
				'receipt_number',        	null,
				'disability_percentage', 	null,
				'action_date',      		null,
				'status',     	 			null,
				'status_reason', 			null
				)) as json_data   
			from payroll_product_investments_master where current_date() between effective_from_date and ifnull(effective_to_date,current_date());
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_investments_test` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_investments_test`(emp_id int)
	begin	
		if exists(select * from payroll_employee_investments where empid=emp_id and financial_year=fn_get_financial_year()) then
	SELECT JSON_ARRAYAGG(JSON_OBJECT('id', t.id, 'incometaxsection', t.investment_section,'investmentdescription',t.investment_description,
	'investmentmaxvalue',t.investment_maxvalue ,'payrollAmount', t.payrollAmount)) AS json_value
	FROM (
	SELECT  pim.id , 
	(select incometax_section from payroll_product_investments_master where id=pem.investment_id and current_date() between effective_from_date 
	and ifnull(effective_to_date,current_date())) as investment_section,
	(select investment_description from payroll_product_investments_master where id=pem.investment_id and current_date() between effective_from_date 
	and ifnull(effective_to_date,current_date())) as investment_description,
	(select investment_maxvalue from payroll_product_investments_master where id=pem.investment_id and current_date() between effective_from_date 
	and ifnull(effective_to_date,current_date())) as investment_maxvalue,
	JSON_ARRAYAGG(JSON_OBJECT('declareamount',pem.declared_amount,'submittedamount',pem.submitted_amount,
	'approvedamount',pem.verified_amount,'receiptnumber',pem.receipt_number,'disableper',pem.disability_percentage,'status_reason',pem.status_reason
	,'status',(select name from statusmaster where id=pem.status and moduleid=5))
	) AS payrollAmount 
	FROM  payroll_product_investments_master pim
	inner join payroll_employee_investments pem on pem.investment_id=pim.id
	where pem.empid=emp_id and pem.financial_year=fn_get_financial_year()
	GROUP BY pim.id
	) t;
	 else
			SELECT JSON_ARRAYAGG(JSON_OBJECT('id', t.id, 'incometaxsection', t.incometax_section,'investmentdescription',t.investment_description,
	'investmentmaxvalue',t.investment_maxvalue ,'payrollAmount', t.payrollAmount)) AS json_value
	FROM (
	SELECT  pim.id ,pim.incometax_section,pim.investment_description,pim.investment_maxvalue,
	JSON_ARRAYAGG(JSON_OBJECT('declareamount',null,'submittedamount',null,
	'approvedamount',null,'receiptnumber',null,'disableper',null,'status_reason',null,'status',null))  
	AS payrollAmount 
	FROM  payroll_product_investments_master pim where current_date() between effective_from_date and ifnull(effective_to_date,current_date())
	GROUP BY pim.id
	) t;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_late_attendance_report` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employee_late_attendance_report`(
		`manager_empid` int(11),
		`employee_id` int(11),
		`shift_id` int(11),
		`from_date` date,
		`to_date` date
	)
	begin
		if (`employee_id` is not null) then
			select 	distinct a.empid,
					(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
					m.shiftname,
					m.fromtime as shiftstarttime,
					m.totime as shiftenddtime,
					a.attendancedate,
					time(a.firstlogintime) as actual_in_time,
					timediff(a.firstlogintime,convert(concat(a.attendancedate,' ',m.fromtime),datetime)) as latehours
					
			from employee_attendance a, employee_shift_details s, shiftsmaster m
			where a.empid = (case when `employee_id` is null then a.empid else `employee_id` end)
			and s.shiftid = (case when `shift_id` is null then s.shiftid else `shift_id` end)
			and s.shiftid = m.id
			and m.id = a.shiftid
			and (`from_date` between s.fromdate and ifnull(s.todate,current_timestamp()) or 
				`to_date` between s.fromdate and ifnull(s.todate,current_timestamp()) or
				(`from_date` >= s.fromdate and `to_date` <= ifnull(s.todate,current_timestamp())) or
				(`from_date` <= s.fromdate and `to_date` >= ifnull(s.todate,current_timestamp()))
			)        
			and a.attendancedate between `from_date` and `to_date`
			and time(a.firstlogintime)  > date_add(m.fromtime,interval time_to_sec(ifnull(m.graceperiod_intime,0)) second) 
			order by a.attendancedate;
		elseif (`manager_empid` is not null) then
			select 	distinct a.empid,
					(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
					m.shiftname,
					m.fromtime as shiftstarttime,
					m.totime as shiftenddtime,
					a.attendancedate,
					time(a.firstlogintime) as actual_in_time,
					timediff(a.firstlogintime,convert(concat(a.attendancedate,' ',m.fromtime),datetime)) as latehours
					
			from employee_attendance a, employee_shift_details s, shiftsmaster m
			where a.empid in (select empid from employee_reportingmanagers where reportingmanagerid=`manager_empid` 
								and (`from_date` between effectivestartdate and ifnull(effectiveenddate,current_timestamp()) or 
										`to_date` between effectivestartdate and ifnull(effectiveenddate,current_timestamp()) or
										(`from_date` >= effectivestartdate and `to_date` <= ifnull(effectiveenddate,current_timestamp())) or
										(`from_date` <= effectivestartdate and `to_date` >= ifnull(effectiveenddate,current_timestamp()))
									)
								)
							-- effectiveenddate is null)
			and s.shiftid = (case when `shift_id` is null then (select shiftid from employee_shift_details where 
															(`from_date` between fromdate and ifnull(todate,current_timestamp()) or 
															`to_date` between fromdate and ifnull(todate,current_timestamp()) or
															(`from_date` >= fromdate and `to_date` <= ifnull(todate,current_timestamp())) or
															(`from_date` <= fromdate and `to_date` >= ifnull(todate,current_timestamp()))
														) and empid=a.empid)    
			
							else `shift_id` end)
			and s.shiftid = m.id
			and (`from_date` between s.fromdate and ifnull(s.todate,current_timestamp()) or 
					`to_date` between s.fromdate and ifnull(s.todate,current_timestamp()) or
					(`from_date` >= s.fromdate and `to_date` <= ifnull(s.todate,current_timestamp())) or
					(`from_date` <= s.fromdate and `to_date` >= ifnull(s.todate,current_timestamp()))
				)
			and a.attendancedate between `from_date` and `to_date`
			and time(a.firstlogintime)  > date_add(m.fromtime,interval time_to_sec(ifnull(m.graceperiod_intime,0)) second) 
			order by a.attendancedate;
		elseif (`manager_empid` is null and `employee_id` is null) then
			select 	distinct a.empid,
					(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
					m.shiftname,
					m.fromtime as shiftstarttime,
					m.totime as shiftenddtime,
					a.attendancedate,
					time(a.firstlogintime) as actual_in_time,
					timediff(a.firstlogintime,convert(concat(a.attendancedate,' ',m.fromtime),datetime)) as latehours
					
			from employee_attendance a, employee_shift_details s, shiftsmaster m
			where s.shiftid = (case when `shift_id` is null then s.shiftid
														/*(select shiftid from employee_shift_details where 
															(`from_date` between fromdate and ifnull(todate,current_timestamp()) or 
															`to_date` between fromdate and ifnull(todate,current_timestamp()) or
															(`from_date` >= fromdate and `to_date` <= ifnull(todate,current_timestamp())) or
															(`from_date` <= fromdate and `to_date` >= ifnull(todate,current_timestamp()))
														) and empid=a.empid)    
														*/
				else `shift_id` end)
			and s.shiftid = m.id
			and (`from_date` between s.fromdate and ifnull(s.todate,current_timestamp()) or 
				`to_date` between s.fromdate and ifnull(s.todate,current_timestamp()) or
				(`from_date` >= s.fromdate and `to_date` <= ifnull(s.todate,current_timestamp())) or
				(`from_date` <= s.fromdate and `to_date` >= ifnull(s.todate,current_timestamp()))
			)       
			and a.attendancedate between `from_date` and `to_date`
			and time(a.firstlogintime)  > date_add(m.fromtime,interval time_to_sec(ifnull(m.graceperiod_intime,0)) second) 
			order by a.attendancedate;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_late_attendance_report1` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employee_late_attendance_report1`(
		`manager_empid` int(11),
		`employee_id` int(11),
		`shift_id` int(11),
		`from_date` date,
		`to_date` date
	)
	begin
		if (`employee_id` is not null) then
			select 	distinct a.empid,
					(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
					m.shiftname,
					m.fromtime as shiftstarttime,
					m.totime as shiftenddtime,
					a.attendancedate,
					time(a.firstlogintime) as actual_in_time,
					timediff(a.firstlogintime,convert(concat(a.attendancedate,' ',m.fromtime),datetime)) as latehours
					
			from employee_attendance a, employee_shift_details s, shiftsmaster m
			where a.empid = (case when `employee_id` is null then a.empid else `employee_id` end)
			and s.shiftid = (case when `shift_id` is null then s.shiftid else `shift_id` end)
			and s.shiftid = m.id
			and m.id = a.shiftid
			and a.attendancedate between `from_date` and `to_date`
			and time(a.firstlogintime)  > date_add(m.fromtime,interval time_to_sec(ifnull(m.graceperiod_intime,0)) second) 
			order by a.attendancedate;
		elseif (`manager_empid` is not null) then
			select 	distinct a.empid,
					(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
					m.shiftname,
					m.fromtime as shiftstarttime,
					m.totime as shiftenddtime,
					a.attendancedate,
					time(a.firstlogintime) as actual_in_time,
					timediff(a.firstlogintime,convert(concat(a.attendancedate,' ',m.fromtime),datetime)) as latehours
					
			from employee_attendance a, employee_shift_details s, shiftsmaster m
			where a.empid in (select empid from employee_reportingmanagers where reportingmanagerid=`manager_empid` and effectiveenddate is null)
			and s.shiftid = (case when `shift_id` is null then s.shiftid else `shift_id` end)
			and s.shiftid = m.id
			and m.id = a.shiftid
			and a.attendancedate between `from_date` and `to_date`
			and time(a.firstlogintime)  > date_add(m.fromtime,interval time_to_sec(ifnull(m.graceperiod_intime,0)) second) 
			order by a.attendancedate;
		elseif (`manager_empid` is null and `employee_id` is null) then
			select 	distinct a.empid,
					(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
					m.shiftname,
					m.fromtime as shiftstarttime,
					m.totime as shiftenddtime,
					a.attendancedate,
					time(a.firstlogintime) as actual_in_time,
					timediff(a.firstlogintime,convert(concat(a.attendancedate,' ',m.fromtime),datetime)) as latehours
					
			from employee_attendance a, employee_shift_details s, shiftsmaster m
			where s.shiftid = (case when `shift_id` is null then s.shiftid else `shift_id` end)
			and s.shiftid = m.id
			and m.id = a.shiftid
			and a.attendancedate between `from_date` and `to_date`
			and time(a.firstlogintime)  > date_add(m.fromtime,interval time_to_sec(ifnull(m.graceperiod_intime,0)) second) 
			order by a.attendancedate;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_late_attendance_report2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employee_late_attendance_report2`(
		`manager_empid` int(11),
		`employee_id` int(11),
		`shift_id` int(11),
		`from_date` date,
		`to_date` date
	)
	begin
		if (`employee_id` is not null) then
			select 	distinct a.empid,
					(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
					m.shiftname,
					m.fromtime as shiftstarttime,
					m.totime as shiftenddtime,
					a.attendancedate,
					time(a.firstlogintime) as actual_in_time,
					timediff(a.firstlogintime,convert(concat(a.attendancedate,' ',m.fromtime),datetime)) as latehours
					
			from employee_attendance a, employee_shift_details s, shiftsmaster m
			where a.empid = (case when `employee_id` is null then a.empid else `employee_id` end)
			and s.shiftid = (case when `shift_id` is null then s.shiftid else `shift_id` end)
			and s.shiftid = m.id
			and m.id = a.shiftid
			and (`from_date` between s.fromdate and ifnull(s.todate,current_timestamp()) or 
				`to_date` between s.fromdate and ifnull(s.todate,current_timestamp()) or
				(`from_date` >= s.fromdate and `to_date` <= ifnull(s.todate,current_timestamp())) or
				(`from_date` <= s.fromdate and `to_date` >= ifnull(s.todate,current_timestamp()))
			)        
			and a.attendancedate between `from_date` and `to_date`
			and time(a.firstlogintime)  > date_add(m.fromtime,interval time_to_sec(ifnull(m.graceperiod_intime,0)) second) 
			order by a.attendancedate;
		elseif (`manager_empid` is not null) then
			select 	distinct a.empid,
					(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
					m.shiftname,
					m.fromtime as shiftstarttime,
					m.totime as shiftenddtime,
					a.attendancedate,
					time(a.firstlogintime) as actual_in_time,
					timediff(a.firstlogintime,convert(concat(a.attendancedate,' ',m.fromtime),datetime)) as latehours
					
			from employee_attendance a, employee_shift_details s, shiftsmaster m
			where a.empid in (select empid from employee_reportingmanagers where reportingmanagerid=`manager_empid` 
								and (`from_date` between effectivestartdate and ifnull(effectiveenddate,current_timestamp()) or 
										`to_date` between effectivestartdate and ifnull(effectiveenddate,current_timestamp()) or
										(`from_date` >= effectivestartdate and `to_date` <= ifnull(effectiveenddate,current_timestamp())) or
										(`from_date` <= effectivestartdate and `to_date` >= ifnull(effectiveenddate,current_timestamp()))
									)
								)
							-- effectiveenddate is null)
			and s.shiftid = (case when `shift_id` is null then s.shiftid else `shift_id` end)
			and s.shiftid = m.id
			and m.id = a.shiftid
			and (`from_date` between s.fromdate and ifnull(s.todate,current_timestamp()) or 
					`to_date` between s.fromdate and ifnull(s.todate,current_timestamp()) or
					(`from_date` >= s.fromdate and `to_date` <= ifnull(s.todate,current_timestamp())) or
					(`from_date` <= s.fromdate and `to_date` >= ifnull(s.todate,current_timestamp()))
				)
			and a.attendancedate between `from_date` and `to_date`
			and time(a.firstlogintime)  > date_add(m.fromtime,interval time_to_sec(ifnull(m.graceperiod_intime,0)) second) 
			order by a.attendancedate;
		elseif (`manager_empid` is null and `employee_id` is null) then
			select 	distinct a.empid,
					(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=a.empid) as empname,
					m.shiftname,
					m.fromtime as shiftstarttime,
					m.totime as shiftenddtime,
					a.attendancedate,
					time(a.firstlogintime) as actual_in_time,
					timediff(a.firstlogintime,convert(concat(a.attendancedate,' ',m.fromtime),datetime)) as latehours
					
			from employee_attendance a, employee_shift_details s, shiftsmaster m
			where s.shiftid = (case when `shift_id` is null then (select shiftid from employee_shift_details where 
															(`from_date` between fromdate and ifnull(todate,current_timestamp()) or 
															`to_date` between fromdate and ifnull(todate,current_timestamp()) or
															(`from_date` >= fromdate and `to_date` <= ifnull(todate,current_timestamp())) or
															(`from_date` <= fromdate and `to_date` >= ifnull(todate,current_timestamp()))
														) and empid=a.empid)    
			else `shift_id` end)
			-- and s.shiftid = m.id
			-- and m.id = a.shiftid
			and (`from_date` between s.fromdate and ifnull(s.todate,current_timestamp()) or 
				`to_date` between s.fromdate and ifnull(s.todate,current_timestamp()) or
				(`from_date` >= s.fromdate and `to_date` <= ifnull(s.todate,current_timestamp())) or
				(`from_date` <= s.fromdate and `to_date` >= ifnull(s.todate,current_timestamp()))
			)        
			and a.attendancedate between `from_date` and `to_date`
			and time(a.firstlogintime)  > date_add(m.fromtime,interval time_to_sec(ifnull(m.graceperiod_intime,0)) second) 
			order by a.attendancedate;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_leaves` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employee_leaves`(
	in `employee_id` int(11),
	in `pagenumber` int(2),
	in `pagesize` int(4)
	)
	begin
		set @pgsize = pagesize;
		if (pagesize!=0 and pagenumber!=0) then
			set @offset1 = pagesize*(pagenumber-1);
		end if;
		set @sqltext = '';
		set @totalrows = 0;    
		set @totalrows = (select count(lm_employeeleaves.id) from lm_employeeleaves where lm_employeeleaves.empid = `employee_id`);
		if (pagesize=0 or pagenumber=0) then
			set @pgsize = @totalrows;
			set @offset1 = 1;
		end if;
		set @present_year = (select fn_get_leave_cycle_year());
		set @previous_year = (select fn_get_leave_cycle_year() - 1);
		set @sqltext = concat('select lm_employeeleaves.id,
		lm_employeeleaves.empid,
		lm_employeeleaves.leavetype as leavetypeid,
		(select lm_leavesmaster.leavename from lm_leavesmaster where lm_leavesmaster.id = lm_employeeleaves.leavetype) as leavetype,
		lm_employeeleaves.fromdate,
		lm_employeeleaves.todate,
		lm_employeeleaves.fromhalfdayleave,
		lm_employeeleaves.tohalfdayleave,
		lm_employeeleaves.leavecount,
		lm_employeeleaves.appliedon,
		(select concat(employee.firstname,'' '',employee.lastname) from employee where employee.id = lm_employeeleaves.approvedby) as approvedby, 
		lm_employeeleaves.leavereason,
		case when exists (select * from lm_leaveapprovalstatustracker 
						  where lm_leaveapprovalstatustracker.leaveid = lm_employeeleaves.id and 
								lm_leaveapprovalstatustracker.status = ''Cancel Submitted'' ) then ''Cancel Submitted''
			 else lm_employeeleaves.leavestatus end as leavestatus,
		lm_employeeleaves.contactnumber,
		lm_employeeleaves.contactemail,
		lm_employeeleaves.contactaddress,
		lm_employeeleaves.approvedon,
		lm_employeeleaves.updatedon,
		lm_employeeleaves.action_reason,
		case when EXISTS(select lm_leaveapprovalstatustracker.id from lm_leaveapprovalstatustracker where lm_leaveapprovalstatustracker.level = 1 and 
						lm_leaveapprovalstatustracker.status is null and lm_leaveapprovalstatustracker.leaveid = lm_employeeleaves.id) and
						lm_employeeleaves.leavestatus = ''Submitted'' 
						  and (select curdate()) <= cast(lm_employeeleaves.todate as date)       
						then 1
			 else 0
		end as editable,
		case when EXISTS(select lm_leaveapprovalstatustracker.id from lm_leaveapprovalstatustracker where lm_leaveapprovalstatustracker.level = 1 and 
						lm_leaveapprovalstatustracker.status is null and lm_leaveapprovalstatustracker.leaveid = lm_employeeleaves.id) and
						lm_employeeleaves.leavestatus = ''Submitted'' 
						and (select curdate()) <= cast(lm_employeeleaves.todate as date)    
						then 1
			 else 0    
		end as deletable,
		case when lm_employeeleaves.leavestatus = ''Approved'' and not exists (select * from lm_leaveapprovalstatustracker 
						  where lm_leaveapprovalstatustracker.leaveid = lm_employeeleaves.id and 
								lm_leaveapprovalstatustracker.status in (''Cancel Submitted'',''Cancel Rejected'') )
						  and (select curdate()) <= cast(lm_employeeleaves.todate as date)      
			then 1
			else 0
		end as cancellable, ',
		@totalrows, ' as total,
		case when lm_employeeleaves.leavetype = 8 then
			(select concat(relationshipmaster.relationship,'' - '',employee_relations.firstname,'' '',employee_relations.lastname) 
			from employee_relations, relationshipmaster 
			where employee_relations.empid = ',employee_id,' and 
			employee_relations.utilized_leave_id = lm_employeeleaves.id
			and employee_relations.relationship = relationshipmaster.id)
			else null end
		as bereavement_relation,
		case when lm_employeeleaves.leavetype = 8 then
			(select employee_relations.id
			from employee_relations, relationshipmaster 
			where employee_relations.empid = ',employee_id,' and 
			employee_relations.utilized_leave_id = lm_employeeleaves.id
			and employee_relations.relationship = relationshipmaster.id)
			else null end
		as bereavement_id,
		case when lm_employeeleaves.leavetype = 9 and lm_employeeleaves.leavecount = 1 then
			 (select lm_register_comp_off.comp_off_date from lm_register_comp_off 
			 where lm_employeeleaves.empid = lm_register_comp_off.empid 
			 and lm_register_comp_off.utilized_leave_id = lm_employeeleaves.id)
			 when lm_employeeleaves.leavetype = 9 and lm_employeeleaves.leavecount < 1 then
			 (select lm_register_comp_off.comp_off_date
			 from lm_register_comp_off
			 where lm_register_comp_off.empid = lm_employeeleaves.empid
			 and (substring_index(lm_register_comp_off.utilized_leave_id,'','',1) = lm_employeeleaves.id or
			 substring_index(lm_register_comp_off.utilized_leave_id,'','',-1) = lm_employeeleaves.id))
			 else null end
		as worked_date
		from lm_employeeleaves where lm_employeeleaves.empid = ',employee_id,'
		 and case when ifnull(lm_employeeleaves.leave_cycle_year,0) <> 0 
				  then lm_employeeleaves.leave_cycle_year in ((select @present_year),(select @previous_year))
				  else ifnull(lm_employeeleaves.leave_cycle_year,0) = 0
				  end
		order by lm_employeeleaves.appliedon desc limit ', @offset1, ', ', @pgsize);
		-- select @sqltext;
		prepare stmt from @sqltext;
		execute stmt;
		deallocate prepare stmt;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_leave_balance` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employee_leave_balance`(
	in `employee_id` int(11)
	)
	BEGIN
		if exists(select id from lm_leavesmaster where lm_leavesmaster.leavename = 'Comp Off Leave' and status = 'Active') then
			set @present_date = (select curdate());
			set @pcount = 0;
			set @pcount = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
						   lm_rulemaster.rulename = 'COMPOFF_THRESHOLD_DAYS_TO_LAPSE_OR_CONVERT_LEAVES_TO_PERKS') order by lm_rulevalues.id desc limit 1);
			set @start_date = date_sub(@present_date, interval @pcount day);
			select v.leavename, v.display_name,v.leavecolor into @name, @display_name,@color from lm_leavesmaster v
			where v.leavename = 'Comp Off Leave';
			select count(comp_off_date) into @balance
			from lm_register_comp_off
			where lm_register_comp_off.empid = employee_id
			and lm_register_comp_off.comp_off_date >= @start_date
			and lm_register_comp_off.status = 'Approved';
			select count(comp_off_date) into @used
			from lm_register_comp_off
			where lm_register_comp_off.empid = employee_id
			and lm_register_comp_off.comp_off_date >= @start_date
			and lm_register_comp_off.status = 'Utilized';
			SELECT distinct m.leavename, m.display_name, m.leavecolor,v.balance as leave_balance, e.leavecount as total, (e.leavecount - v.balance) as used
			FROM  lm_employeeleavebalance v, lm_leavesmaster m,
			(select sum(leavecount) as leavecount,lm_leavecreditsmaster.empid as empid,leavetypeid,leave_cycle_year from lm_leavecreditsmaster
			group by empid,leavetypeid,leave_cycle_year) e
			WHERE v.empid = e.empid and v.leavetypeid = m.id and e.leavetypeid = v.leavetypeid
			and v.empid = `employee_id` 
			and ifnull(e.leave_cycle_year,0) = case when e.leave_cycle_year is not null then (select fn_get_leave_cycle_year()) else 0 end
			and ifnull(e.leave_cycle_year,0) = ifnull(v.leave_cycle_year,0)
			and m.status = 'Active'
		union 
			select @name,@display_name,@color,@balance,'' as total,@used;
		else
			SELECT distinct m.leavename, m.display_name, m.leavecolor,v.balance as leave_balance, e.leavecount as total, (e.leavecount - v.balance) as used
			FROM  lm_employeeleavebalance v, lm_leavesmaster m,
			(select sum(leavecount) as leavecount,lm_leavecreditsmaster.empid as empid,leavetypeid,leave_cycle_year from lm_leavecreditsmaster
			group by empid,leavetypeid,leave_cycle_year) e
			WHERE v.empid = e.empid and v.leavetypeid = m.id and e.leavetypeid = v.leavetypeid
			and v.empid = `employee_id` 
			and ifnull(e.leave_cycle_year,0) = case when e.leave_cycle_year is not null then (select fn_get_leave_cycle_year()) else 0 end
			and ifnull(e.leave_cycle_year,0) = ifnull(v.leave_cycle_year,0)
			and m.status = 'Active';
		end if;
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_leave_balance_for_payroll` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_leave_balance_for_payroll`(
	in `employee_id` int(11),
	out total_balance decimal(5,2)
	)
	BEGIN
		if exists(select id from lm_leavesmaster where lm_leavesmaster.leavename = 'Comp Off Leave' and status = 'Active') then
			select v.leavename, v.display_name,v.leavecolor into @name, @display_name,@color from lm_leavesmaster v
			where v.leavename = 'Comp Off Leave';
			select count(comp_off_date) into @balance
			from lm_register_comp_off
			where lm_register_comp_off.leave_cycle_year = (select fn_get_leave_cycle_year())
			and lm_register_comp_off.empid = employee_id
			and lm_register_comp_off.status = 'Approved';
			select count(comp_off_date) into @used
			from lm_register_comp_off
			where lm_register_comp_off.leave_cycle_year = (select fn_get_leave_cycle_year())
			and lm_register_comp_off.empid = employee_id
			and lm_register_comp_off.status = 'Utilized';
			
			set total_balance = (SELECT -- distinct  m.leavename, m.display_name, m.leavecolor,v.balance as leave_balance, e.leavecount as total, 
			-- (e.leavecount - v.balance) as used,
			sum(v.balance)+@balance as all_leaves_total
			FROM  lm_employeeleavebalance v, lm_leavesmaster m,
			(select sum(leavecount) as leavecount,lm_leavecreditsmaster.empid as empid,leavetypeid,leave_cycle_year from lm_leavecreditsmaster
			group by empid,leavetypeid,leave_cycle_year) e
			WHERE v.empid = e.empid and v.leavetypeid = m.id and e.leavetypeid = v.leavetypeid
			and v.empid = `employee_id` 
			and ifnull(e.leave_cycle_year,0) = case when e.leave_cycle_year is not null then (select fn_get_leave_cycle_year()) else 0 end
			and ifnull(e.leave_cycle_year,0) = ifnull(v.leave_cycle_year,0)
			and m.status = 'Active'
			and m.id in (1,2,3,4,9));
		-- union 
			-- select -- @name,@display_name,@color,@balance,'' as total,@used,
		  --  @balance;
		else
			set total_balance = (SELECT -- distinct m.leavename, m.display_name, m.leavecolor,v.balance as leave_balance, e.leavecount as total, (e.leavecount - v.balance) as used,
			sum(v.balance) as all_leaves_total
			FROM  lm_employeeleavebalance v, lm_leavesmaster m,
			(select sum(leavecount) as leavecount,lm_leavecreditsmaster.empid as empid,leavetypeid,leave_cycle_year from lm_leavecreditsmaster
			group by empid,leavetypeid,leave_cycle_year) e
			WHERE v.empid = e.empid and v.leavetypeid = m.id and e.leavetypeid = v.leavetypeid
			and v.empid = `employee_id` 
			and ifnull(e.leave_cycle_year,0) = case when e.leave_cycle_year is not null then (select fn_get_leave_cycle_year()) else 0 end
			and ifnull(e.leave_cycle_year,0) = ifnull(v.leave_cycle_year,0)
			and m.status = 'Active'
			and m.id in (1,2,3,4,9));
		end if;
		-- select total_balance;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_leave_detailed_report_for_manager` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_leave_detailed_report_for_manager`(
	employee_id varchar(64),
	manager_id int(11),
	leavetype_id varchar(32),
	leave_status varchar(32),
	designation_id varchar(32),
	from_date date,
	to_date date,
	pagenumber int,
	pagesize int
	)
	BEGIN
		set @pgsize = pagesize;
		if (pagesize!=0 and pagenumber!=0) then
			set @offset1 = pagesize*(pagenumber-1);
		end if;
		set @sqltext = '';
		set @totalrows = 0;
		set @totalrows = (select count(lm_employeeleaves.id) from lm_employeeleaves, employee_reportingmanagers, employee
		where lm_employeeleaves.empid = employee.id 
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null
		and lm_employeeleaves.leavetype = case when leavetype_id <> 'All' then leavetype_id else lm_employeeleaves.leavetype end
		and lm_employeeleaves.leavestatus = case when leave_status <> 'All' then leave_status else lm_employeeleaves.leavestatus end
		and case when from_date is not null and to_date is not null then lm_employeeleaves.fromdate between from_date and to_date else lm_employeeleaves.fromdate = lm_employeeleaves.fromdate end
		and case when from_date is not null and to_date is not null then lm_employeeleaves.todate between from_date and to_date else lm_employeeleaves.todate = lm_employeeleaves.todate end
		and lm_employeeleaves.empid in (select employee_designations.empid
										  from employee_designations 
										  where employee_designations.designationid = case when designation_id <> 'All' then designation_id else employee_designations.designationid end
												and employee_designations.effectiveenddate is null)
	and lm_employeeleaves.empid = case when employee_id <> 'All' then (select cast(employee_id as unsigned)) else lm_employeeleaves.empid end
	and employee_reportingmanagers.reportingmanagerid = case when manager_id <> 0 then manager_id else employee_reportingmanagers.reportingmanagerid end);
	-- select @totalrows;
	if (pagesize=0 or pagenumber=0) then
			set @pgsize = @totalrows;
			set @offset1 = 1;
		  end if;
	set @sqltext = concat('select lm_employeeleaves.id,
		lm_employeeleaves.empid,
		(select lm_leavesmaster.leavename from lm_leavesmaster where lm_leavesmaster.id = lm_employeeleaves.leavetype and status=''Active'') as leavetype,
		concat(employee.firstname,case when employee.middlename is not null then concat('' '',employee.middlename) end,
		case when employee.lastname is not null then concat('' '',employee.lastname) end) as employee_name,
		(select designationsmaster.designation from designationsmaster where designationsmaster.id = 
		(select employee_designations.designationid from employee_designations 
		 where employee_designations.empid = lm_employeeleaves.empid
		 and case when lm_employeeleaves.fromdate between employee_designations.effectivestartdate and employee_designations.effectiveenddate then lm_employeeleaves.fromdate between employee_designations.effectivestartdate and employee_designations.effectiveenddate
				 when employee_designations.effectiveenddate is null then lm_employeeleaves.fromdate > employee_designations.effectivestartdate
				 end)) as designation,
		employee.empid as employee_code,         
		lm_employeeleaves.fromdate,
		lm_employeeleaves.todate,
		lm_employeeleaves.fromhalfdayleave,
		lm_employeeleaves.tohalfdayleave,
		lm_employeeleaves.leavecount,
		lm_employeeleaves.appliedon,
		(select concat(employee.firstname,'' '',employee.lastname) from employee where employee.id = lm_employeeleaves.approvedby) as approvedby, 
		lm_employeeleaves.leavereason,
		lm_employeeleaves.leavestatus,
		lm_employeeleaves.contactnumber,
		lm_employeeleaves.contactemail,
		lm_employeeleaves.contactaddress,
		lm_employeeleaves.action_reason,
		lm_employeeleaves.approvedon,
		lm_employeeleaves.updatedon,',
		@totalrows, ' as total from 
	lm_employeeleaves, employee_reportingmanagers, employee
	where lm_employeeleaves.empid = employee.id 
	and employee.id = employee_reportingmanagers.empid
	and employee_reportingmanagers.effectiveenddate is null
	and lm_employeeleaves.leavetype = case when ''',leavetype_id,''' <> ''All'' then ''',leavetype_id,''' else lm_employeeleaves.leavetype end
	and lm_employeeleaves.leavestatus = case when ''',leave_status,''' <> ''All'' then ''',leave_status,''' else lm_employeeleaves.leavestatus end');
	if (from_date is not null and to_date is not null) then
	set @sqltext = concat(@sqltext,' and (lm_employeeleaves.fromdate between ''',from_date, ''' and ''',to_date,''' or ',
						  'lm_employeeleaves.todate between ''',from_date,''' and ''',to_date,''')');
	end if;
	set @sqltext = concat(@sqltext, ' and lm_employeeleaves.empid in (select employee_designations.empid from employee_designations 
									where employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id,''' else employee_designations.designationid end
									and employee_designations.effectiveenddate is null)
	and lm_employeeleaves.empid = case when ''',employee_id,''' <> ''All'' then ',(select cast(employee_id as unsigned)),' else lm_employeeleaves.empid end
	and employee_reportingmanagers.reportingmanagerid = case when ',manager_id,' <> 0 then ',manager_id,' else employee_reportingmanagers.reportingmanagerid end
	order by lm_employeeleaves.id limit ',@offset1,', ',@pgsize);
	 -- select @sqltext;
		prepare stmt from @sqltext;
		execute stmt;
		deallocate prepare stmt; 
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_list_for_salary_processing` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_list_for_salary_processing`(
		year_value int(4),
		month_value int(2)
	)
	begin
	set @date = (select cast(concat(year_value,'-',month_value,'-','15') as date));
set @date = (select date(last_day(@date)));
	select e.id, e.empid as employee_code, concat(e.firstname,case when e.middlename is not null then concat(' ',e.middlename) end,
		 case when e.lastname is not null then concat(' ',e.lastname) end) as employee_name,
		 dm.designation, z.location
	from employee e, employee_ctc_master m, employee_designations d, employee_worklocations w,
		 designationsmaster dm, companyworklocationsmaster s, locationsmaster z
	where e.id = m.empid
		and e.id = d.empid
		and e.id = w.empid
		and case when m.effective_to_date is null then
					  (cast(@date as date) >= cast(m.effective_from_date as date))
				 when m.effective_to_date is not null 
				 then (cast(@date as date) between cast(m.effective_from_date as date) and cast(m.effective_to_date as date))
				 end
		and d.effectiveenddate is null
		and w.effectivetodate is null
		and d.designationid = dm.id
		and w.locationid = s.id
		and s.city = z.id
		and e.id not in (select ensd.empid from employee_net_salary_details ensd where ensd.year = year_value and ensd.month = month_value);

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_payslips` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_payslips`(
	in `emp_id_value` int(11),
	in `financial_year_value` varchar(16)
	)
	begin
	declare v_pay_group_id int(11);
		set v_pay_group_id = (select payroll_employee_pay_group_mapping_master.income_group_id from payroll_employee_pay_group_mapping_master 
							where payroll_employee_pay_group_mapping_master.empid = `emp_id_value`
							and payroll_employee_pay_group_mapping_master.effective_to_date is null);
		
		set @earnings_string = (select group_concat(component_short_name) from payroll_salary_components_master where payroll_salary_components_master.id in
			(select component_id from payroll_income_group_components_master where payroll_income_group_components_master.group_id = v_pay_group_id
			and payroll_income_group_components_master.status = 'Active' and payroll_income_group_components_master.component_id in 
			(select payroll_salary_components_master.id from payroll_salary_components_master where payroll_salary_components_master.section_id = 1)));                      
		
		set @deductions_string = (select group_concat(component_short_name) from payroll_salary_components_master where payroll_salary_components_master.id in
			(select component_id from payroll_income_group_components_master where payroll_income_group_components_master.group_id = v_pay_group_id
			and payroll_income_group_components_master.status = 'Active' and payroll_income_group_components_master.component_id in 
			(select payroll_salary_components_master.id from payroll_salary_components_master where payroll_salary_components_master.section_id = 2)));
		
		set @earnings_string = (select replace(@earnings_string, ',', ' + '));
		set @deductions_string = (select replace(@deductions_string, ',',' + '));
		
		set @short_name_text = '';
		set @short_name_text = concat('select id, empid, concat(monthname(str_to_date(month,''%m'')),'' - '',year) as salary_month, ((',@earnings_string,') - (',@deductions_string,')) as salary from employee_net_salary_details esd 
			where esd.financial_year = ''',`financial_year_value`,''' and esd.empid = ',`emp_id_value`,' and cast(concat(cast(esd.year as char),''-'',cast(esd.month as char),''-01'') as date) <= curdate() order by year desc, month desc');
		-- select @short_name_text;
		prepare stmt from @short_name_text;
		execute stmt;
		deallocate prepare stmt;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_payslip_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_payslip_details`(
	in `id_value` int(11),
	in `emp_id_value` int(11)
	)
	begin
	declare v_pay_group_id int(11);
	declare vshort_name varchar(64);
	declare component_cursor cursor for select component_short_name from salary_table where component_short_name is not null;            

	set v_pay_group_id = (select payroll_employee_pay_group_mapping_master.income_group_id from payroll_employee_pay_group_mapping_master 
						where payroll_employee_pay_group_mapping_master.empid = `emp_id_value`
						and payroll_employee_pay_group_mapping_master.effective_to_date is null);            

	drop temporary table if exists salary_table;
	create temporary table salary_table (
	component_name varchar(255),
	component_short_name varchar(64),
	type_value varchar(64),
	data_value varchar(255)
	);

	insert into salary_table(component_name,data_value)
		select 'Employee Name',concat(employee.firstname,case when employee.middlename is not null then concat(' ',employee.middlename) end,
		case when employee.lastname is not null then concat(' ',employee.lastname) end) 
		from employee where employee.id = emp_id_value;
	insert into salary_table(component_name,data_value)
		select 'Designation', dm.designation
		from employee e, employee_designations ed, designationsmaster dm
		where e.id = ed.empid     
		and ed.designationid = dm.id
		order by ed.id desc limit 1;
	insert into salary_table(component_name,data_value)
		select 'Date of Joining', employee.dateofjoin
		from employee where employee.id = emp_id_value;
	insert into salary_table(component_name,data_value)    
		select 'Pay Period', concat(monthname(str_to_date(employee_net_salary_details.month,'%m')),', ',employee_net_salary_details.year)
		from employee_net_salary_details where employee_net_salary_details.id = id_value;
		
	insert into salary_table(component_name,data_value)  
		select 'Pay Date', employee_net_salary_details.created_on
		from employee_net_salary_details where employee_net_salary_details.id = id_value;
	  
	insert into salary_table(component_short_name,type_value)
	select component_short_name,(select section from payroll_sections_master where payroll_sections_master.id = 1) from payroll_salary_components_master where payroll_salary_components_master.id in
			(select component_id from payroll_income_group_components_master where payroll_income_group_components_master.group_id = v_pay_group_id
			and payroll_income_group_components_master.status = 'Active' and payroll_income_group_components_master.component_id in 
			(select payroll_salary_components_master.id from payroll_salary_components_master where payroll_salary_components_master.section_id = 1));

	insert into salary_table(component_short_name,type_value)
	select component_short_name,(select section from payroll_sections_master where payroll_sections_master.id = 2) from payroll_salary_components_master where payroll_salary_components_master.id in
			(select component_id from payroll_income_group_components_master where payroll_income_group_components_master.group_id = v_pay_group_id
			and payroll_income_group_components_master.status = 'Active' and payroll_income_group_components_master.component_id in 
			(select payroll_salary_components_master.id from payroll_salary_components_master where payroll_salary_components_master.section_id = 2));

		update salary_table, payroll_salary_components_master
		set salary_table.component_name = payroll_salary_components_master.component
		where salary_table.component_short_name = payroll_salary_components_master.component_short_name;
		
		if exists(select * from salary_table where salary_table.component_short_name = 'employee_provident_fund') then
		insert into salary_table(component_name,data_value)    
			select 'UA Number', employee_financials_master.uanumber
			from employee, employee_financials_master
			where employee.id = employee_financials_master.empid and employee.id = emp_id_value;
		end if;
		if exists(select * from salary_table where salary_table.component_short_name = 'esi') then
			insert into salary_table(component_name,data_value)    
			select 'ESI', employee_financials_master.esi
				from employee, employee_financials_master
				where employee.id = employee_financials_master.empid and employee.id = emp_id_value;
		end if;
		
		select paid_days,lop_days into @pdays,@lop_days
		from employee_net_salary_details where employee_net_salary_details.id = id_value;
		
		insert into salary_table(component_name,data_value)
		select 'Paid Days',@pdays - ifnull(@lop_days,0);
		
		insert into salary_table(component_name,data_value)
		select 'LoP Days',@lop_days;
		
		open component_cursor;
			set @component_count = 0;
			set @component_count = found_rows();
			set @f = 0;
			while @f < @component_count do
				fetch component_cursor into vshort_name;
				set @sqltext = '';
				set @sqltext = concat('update salary_table set salary_table.data_value = (select ',vshort_name,' from 
				employee_net_salary_details where employee_net_salary_details.id = ',id_value,') where salary_table.component_short_name = ''',vshort_name,'''');
				-- select @sqltext;
				prepare stmt from @sqltext;
				execute stmt;
				deallocate prepare stmt;  
				set @f = @f + 1;
			end while;
		close component_cursor;
		 
	set @gross_earnings = (select sum(data_value) from salary_table where salary_table.type_value = (select section from payroll_sections_master where payroll_sections_master.id = 1));

	set @deductions = (select sum(data_value) from salary_table where salary_table.type_value = (select section from payroll_sections_master where payroll_sections_master.id = 2));

	insert into salary_table(component_name,data_value) values
	('Gross Earnings', round(@gross_earnings,2)),
	('Total Deductions',round(@deductions,2));

	set @total = round(@gross_earnings,2) - round(@deductions,2);

	insert into salary_table(component_name,data_value) values
	('Total Net Payable',round(@total,2));
	select * from salary_table;

	drop temporary table salary_table;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_professional_tax_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employee_professional_tax_details`(
	)
	begin
		select z.country,s.state,
		(select group_concat(distinct v.location) 
		from companyworklocationsmaster m, locationsmaster v
		where m.city = v.id
			and m.state = s.id
			and m.status = 1 order by v.location
		) as work_locations,
		(select json_arrayagg(json_object(
		'remittance_frequency',	t.remittance_frequency, 
		'gender_dependent',		t.gender_dependant, 
		'gender_value',			t.gender_value,
		'month_dependent',		t.month_dependant,
		'month_value',			t.month_value,
		'salary_from',			t.salary_from_value,
		'salary_to',			t.salary_to_value,
		'tax',					t.tax_value
		))
		from payroll_employee_professional_tax_master t
		where t.state_id = s.id
		and t.country_id = s.countryid
		and t.effective_to_date is null
		) as salary_range
		from statesmaster s, countrymaster z
		where s.countryid = z.id
		and s.id in (select m.state from companyworklocationsmaster m where m.status = 1)
		order by s.state;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_program_alerts` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_program_alerts`(employeeid int)
	begin
		select 	e.id,
				e.schedule_id,
				(select description from ems_programs_master where id = s.program_id) as description,
				get_employee_name(s.conducted_by) as conductedby,
				s.schedule_date,
				s.schedule_starttime,
				s.schedule_endtime,
				e.status ,
				s.reason
		from 	ems_employee_program_schedule e, ems_program_schedules s
		where e.empid <=> ifnull(employeeid,e.empid) 
		and s.id = e.schedule_id
		and (current_timestamp() < convert(concat(s.schedule_date,' ',s.schedule_endtime),datetime)
		or current_timestamp() between (convert(concat(s.schedule_date,' ',s.schedule_endtime),datetime)) and (convert(concat(s.schedule_date,' ',s.schedule_endtime),datetime) + interval 7 day))
		and e.status in ('Not Attended','Pending');
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_program_schedules` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_program_schedules`(employeeid int,scheduleid int)
	begin
		select 	e.id,
				e.schedule_id,
				e.empid,
				get_employee_name(e.empid) as empname,
				(select officeemail from employee where id=e.empid) as officeemail, 
				(select dateofjoin from employee where id=e.empid) as dateofjoin,
				(select description from ems_programs_master where id = s.program_id) as description,
				s.department,
				(select deptname from departmentsmaster where id=s.department) as departmentname,
				get_employee_name(s.conducted_by) as conductedby,
				s.schedule_date,
				s.schedule_starttime,
				e.status ,
				s.reason
		from 	ems_employee_program_schedule e, ems_program_schedules s
		where e.empid <=> ifnull(employeeid,e.empid) 
		and s.id = e.schedule_id
		and e.schedule_id <=> ifnull(scheduleid,e.schedule_id)
		and e.empid not in (select conducted_by from ems_program_schedules where id = e.schedule_id) ;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_recognition_messages` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_recognition_messages`(in `empid` int)
	begin
	   declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; 
			set@unreadcount=(   select count(erm.id) as unreadcount
		   from  employee_recognition_message erm
			where erm.recognition_reciever_empid=`empid` and erm.recognition_isread= 0 );
		  
		   set @readcount=( select count(erm.id)
		   from  employee_recognition_message erm
			where erm.recognition_reciever_empid=`empid` and erm.recognition_isread= 1) ;
			
			set@reciever_json=(select JSON_ARRAYAGG(JSON_OBJECT('id',erm.id,'recogid', rtm.id, 'type', rtm.recognition_type ,'message',erm.recognition_message,
			'date',date(erm.created_on),'isread',erm.recognition_isread,
			'toname',(select e.firstname from employee e where e.id =erm.recognition_reciever_empid order by erm.created_on desc),
			'fromname',(select e.firstname from employee e where e.id =erm.recognition_sender_empid order by erm.created_on desc) )) AS reciever
			from  employee_recognition_message erm
			inner join recognition_type_master rtm on rtm.id=erm.recognition_type_id
			where erm.recognition_reciever_empid=`empid` order by erm.id desc);    
			
			set @sender_json=(select JSON_ARRAYAGG(JSON_OBJECT('id',erm.id,'recogid', rtm.id, 'type', rtm.recognition_type ,'message',erm.recognition_message,
			'date',date(erm.created_on),'isread',erm.recognition_isread,
			'fromname',(select e.firstname from employee e where e.id =erm.recognition_sender_empid  order by erm.created_on desc),
			'toname',(select e.firstname from employee e where e.id =erm.recognition_reciever_empid order by erm.created_on desc) )) AS reciever
			from  employee_recognition_message erm
			inner join recognition_type_master rtm on rtm.id=erm.recognition_type_id
			where erm.recognition_sender_empid=`empid` order by erm.created_on desc);
			select JSON_ARRAYAGG(JSON_OBJECT('unreadcount',@unreadcount,'readcount',@readcount,'reciever',@reciever_json,'sender',@sender_json )) as json ;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_relations_for_bereavement_leave` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_relations_for_bereavement_leave`(
	IN `employee_id` INT(11),
	in `leave_id` int(11)
	)
	begin
	if (leave_id is null) then
		SELECT distinct employee_relations.id as id,concat(relationshipmaster.relationship,' - ',employee_relations.firstname,' ',
		 (case when employee_relations.lastname is null then '' else employee_relations.lastname end)) as name
		FROM employee_relations,relationshipmaster
		where cast(employee_relations.relationship as unsigned) = relationshipmaster.id
		and coalesce(employee_relations.bereavement_leave_utilized,'') <> 1
		and employee_relations.status = 'Alive'
		and employee_relations.empid = `employee_id`;
	elseif (leave_id is not null) then    
		SELECT distinct employee_relations.id as id,concat(relationshipmaster.relationship,' - ',employee_relations.firstname,' ', (case when employee_relations.lastname is null then '' else employee_relations.lastname end)) as name
		FROM employee_relations,relationshipmaster
		where cast(employee_relations.relationship as unsigned) = relationshipmaster.id
		and coalesce(employee_relations.bereavement_leave_utilized,'') <> 1
		and employee_relations.status = 'Alive'
		and employee_relations.empid = `employee_id`
		union
		SELECT distinct employee_relations.id as id,concat(relationshipmaster.relationship,' - ',employee_relations.firstname,' ', (case when employee_relations.lastname is null then '' else employee_relations.lastname end)) as name
		FROM employee_relations,relationshipmaster
		where cast(employee_relations.relationship as unsigned) = relationshipmaster.id
		and employee_relations.empid = `employee_id`
		and employee_relations.utilized_leave_id = `leave_id`;
	end if;    
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_shift` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employee_shift`(
	in `employee_id` int(11)
	)
	begin
		select employee_shift_details.shiftid,
		(select shiftsmaster.shiftname from shiftsmaster where shiftsmaster.id = employee_shift_details.shiftid) as shiftname,
		(select shiftsmaster.fromtime from shiftsmaster where shiftsmaster.id = employee_shift_details.shiftid) as fromtime,
		(select shiftsmaster.totime from shiftsmaster where shiftsmaster.id = employee_shift_details.shiftid) as totime
		from employee_shift_details
		where employee_shift_details.empid = `employee_id`
		order by id desc limit 1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_shifts_for_manager_or_department` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_shifts_for_manager_or_department`(
		`manager_empid` int(11),
		`department_id` int(11)
	)
	begin
		drop temporary table if exists empids;
		
		create temporary table empids (
			id int(11) auto_increment not null,
			eid int(11),
			key(id)
		);
		create temporary table empshifts (
			id int(11) auto_increment not null,
			empid int(11),
			emp_code varchar(50),
			empname varchar(512),
			shiftid int(11),
			shiftname varchar(255),
			fromdate datetime,
			todate datetime,
			key(id)
		);
		if (`department_id` is not null) then 
			insert into empids(eid)
			select empid from employee_departments where departmentid=`department_id`;
		elseif (`manager_empid` is not null) then 
			insert into empids(eid)
			select empid from employee_reportingmanagers where reportingmanagerid=`manager_empid` and effectiveenddate is null;
		
		end if;
	 
		set @count = (select count(*) from empids);
		set @i = 1;
		
		while (@i <= @count ) do
			set @tempid = (select eid from empids where id=@i);
			if exists (select * from employee_shift_details where empid = @tempid) then 
				insert into empshifts(empid,emp_code,empname,shiftid,shiftname,fromdate,todate)
				select s.empid,(select empid  from employee where employee.id=s.empid) as emp_code,
				(select concat(employee.firstname,' ',employee.lastname) from employee where employee.id=s.empid) as empname,s.shiftid,(select shiftname from shiftsmaster where id=s.shiftid) as shiftname,s.fromdate,s.todate
				from employee_shift_details s
				where s.empid = @tempid;
			else
				insert into empshifts(empid,emp_code,empname,shiftid,shiftname,fromdate,todate)
				select @tempid as empid,(select empid  from employee where employee.id=@tempid) as emp_code, (select concat(firstname,' ',lastname) from employee where id=@tempid) as empname,null as shiftid,null as shiftname,null as fromdate,null as todate;
			end if;
			set @i = @i+1;
		end while;

		select distinct s.empid,s.emp_code,s.empname,s.shiftid,s.shiftname,date(s.fromdate) as fromdate,date(s.todate) as todate,
		(select concat((select week_name from week_master where id=weekoffday1),(case when weekoffday2 is null then '' 
		else concat(',',(select week_name from week_master where id=weekoffday2)) end),(case when weekoffday3 is null then '' 
		else concat(',',(select week_name from week_master where id=weekoffday3)) end)) from employee_weekoffs where empid=s.empid 
		and ((s.fromdate between effectivefromdate and effectivetodate) or (s.todate between effectivefromdate and effectivetodate)) 
		order by id desc limit 1) as weekoffs from empshifts s order by s.empid desc;
		
		drop temporary table empids;
		drop temporary table empshifts;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_shift_by_dates` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employee_shift_by_dates`(
	in `employee_id` int(11),
	in `fromd_date` date,
	in `to_date` date
	)
	begin
		select employee_shift_details.shiftid,
		(select shiftsmaster.shiftname from shiftsmaster where shiftsmaster.id = employee_shift_details.shiftid) as shiftname,
		(select shiftsmaster.fromtime from shiftsmaster where shiftsmaster.id = employee_shift_details.shiftid) as fromtime,
		(select shiftsmaster.totime from shiftsmaster where shiftsmaster.id = employee_shift_details.shiftid) as totime
		from employee_shift_details
		where employee_shift_details.empid = `employee_id`
		and ((`fromd_date` between employee_shift_details.fromdate and employee_shift_details.todate) or
		(`to_date` between employee_shift_details.fromdate and employee_shift_details.todate) or
		(employee_shift_details.fromdate > `fromd_date` and employee_shift_details.todate < `to_date`))
	  
		order by id desc;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employee_weekoffs_holidays_for_attendance` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employee_weekoffs_holidays_for_attendance`(
		`employee_id` int(11)
	)
	begin
		set @currstartdate = (current_date() - interval 1 month);
    set @doj = (select date(dateofjoin) from employee where id = `employee_id`);
    if (@currstartdate < @doj) then
		set @currstartdate = @doj;
	end if;
	set @currenddate = current_date();
    set @weekoffs = '[';
    set @holidays = '[';
    set @leaves = '[';
    set @workeddays = '[';
    set @regularizationdays = '[';
    while (@currstartdate <= @currenddate) do
		set @weekoffday1 = (select weekoffday1 from employee_weekoffs where empid=`employee_id` and @currstartdate between effectivefromdate and effectivetodate);
        set @weekoffday2 = (select weekoffday2 from employee_weekoffs where empid=`employee_id` and @currstartdate between effectivefromdate and effectivetodate);
        set @weekoffday3 = (select weekoffday3 from employee_weekoffs where empid=`employee_id` and @currstartdate between effectivefromdate and effectivetodate);
        -- weekoffs
		if (dayofweek(@currstartdate)=@weekoffday1 or dayofweek(@currstartdate)=@weekoffday2 or dayofweek(@currstartdate)=@weekoffday3) then
			set @weekoffs = concat(@weekoffs,(case when @weekoffs='[' then '' else ',' end),'"',@currstartdate,'"');
		end if;
        -- holidays
        -- if @currstartdate in (select date from holidaysmaster where leave_cycle_year=(select fn_get_leave_cycle_year()) and location=(select city from companyworklocationsmaster where id = (select locationid from employee_worklocations where effectivetodate is null and empid=`employee_id`))) then
        if @currstartdate in (select date from holidaysmaster where holidaysmaster.year = year(@currstartdate)  and location=(select city from companyworklocationsmaster where id = (select locationid from employee_worklocations where effectivetodate is null and empid=`employee_id`))) then
			set @holidays = concat(@holidays,(case when @holidays='[' then '' else ',' end),'"',@currstartdate,'"');
		end if;
        -- leaves
        if exists(select * from information_schema.columns where  table_schema=(select database()) and table_name='lm_employeeleaves') then
			if exists(select * from lm_employeeleaves where @currstartdate between fromdate and todate and empid=`employee_id` and leavestatus in ('Submitted','Approved')) then
				set @leaves = concat(@leaves,(case when @leaves='[' then '' else ',' end),'"',@currstartdate,'"');
            end if;
		end if;
        -- regularization requested dates
        if exists(select * from employee_attendance_regularization where (@currstartdate between fromdate and todate) and empid = `employee_id` and Status in ('Submitted','Approved')) then
			set @regularizationdays = concat(@regularizationdays,(case when @regularizationdays='[' then '' else ',' end),'"',@currstartdate,'"');
        end if;
        -- already worked dates
        if exists(select * from employee_attendance where attendancedate=@currstartdate and empid = `employee_id`) then
			set @workeddays = concat(@workeddays,(case when @workeddays='[' then '' else ',' end),'"',@currstartdate,'"');
        end if;
        
        set @currstartdate = @currstartdate + interval 1 day;
        
	end while;
    set @weekoffs = concat(@weekoffs,']');
    set @holidays = concat(@holidays,']');
    set @leaves = concat(@leaves,']');
    set @workeddays = concat(@workeddays,']');
    set @regularizationdays = concat(@regularizationdays,']');
    
    select @weekoffs as weekoffs,@holidays as holidays,@leaves as leaves,@workeddays as workeddays, @regularizationdays as regularizationdays;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employer_epf_contribution_options` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_employer_epf_contribution_options`(
	)
	begin
	DECLARE v_percentage decimal(5,2);
	declare v_rpf decimal(15,2);
	set v_percentage = (select payroll_product_component_rulevalues.value from payroll_product_component_rulevalues where 
						payroll_product_component_rulevalues.rule_id = (select payroll_product_component_rulemaster.id 
						from payroll_product_component_rulemaster where payroll_product_component_rulemaster.rule_name = 'TOTAL_PERCENTAGE_CONTRIBUTION_BY_EMPLOYER'));

	set v_rpf = (select payroll_product_component_rulevalues.value from payroll_product_component_rulevalues where 
						payroll_product_component_rulevalues.rule_id = (select payroll_product_component_rulemaster.id 
						from payroll_product_component_rulemaster where payroll_product_component_rulemaster.rule_name = 'MAXIMUM_SALARY_CONSIDERED_FOR_EMPLOYER_CONTRIBUTION'));

	select concat(v_percentage,'% of Actual PF Wage') as display_string, 'ACTUAL' as return_value
	union
	select concat(v_percentage,'% of restricted contribution of Rs.',v_rpf,' PF wage'), 'RESTRICTED';
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_employer_professional_tax_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_employer_professional_tax_details`(
	)
	begin
		select z.country,
		s.state,(select group_concat(distinct v.location) from companyworklocationsmaster m, locationsmaster v where m.city = v.id
		and m.state = s.id and m.status = 1 order by v.location) as locations, 
		t.remittance_frequency, t.employee_count_dependant,
		t.employee_count_dependant,t.employee_count_from_value,t.employee_count_to_value,t.establishment_dependant,t.establishment_type ,t.tax_value
		from payroll_employer_professional_tax_master t, statesmaster s, countrymaster z
		where s.countryid = z.id
		and t.state_id = s.id
		and s.id in (select m.state from companyworklocationsmaster m where m.status = 1)
		and t.effective_to_date is null;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_emp_announcements` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_emp_announcements`()
	begin
	select annt.topic,ann.title,ann.description from ems_announcements ann
	inner join ems_announcements_topics_master annt on annt.id=ann.topicid
	where date(ann.fromdate)<= current_date() and date(ann.todate)>= current_date()
	and ann.status='Published' ;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_emp_education_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_emp_education_details`(
	in `id` int(11)
	)
	begin

		set @education_json = (select json_arrayagg(json_object(
		'id',            `id`,
		'empid',         `empid`,
		'course', 		 `course`,
		'institutename', `institutename`,
		'fromdate',      `fromdate`,
		'todate',        `todate`      
		))
		from employee_education_details
		where employee_education_details.empid = id
		);
		select json_arrayagg(json_object(
		'empid',                        `empid`,
		'education',					@education_json
		)) as json
	from `employee`
	where `employee`.`id` = id;


	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_emp_employement` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_emp_employement`(
	in `id` int(11)
	)
	begin
		set @financials_id = 		(select employee_financials_master.id from employee_financials_master where employee_financials_master.empid = id);
		set @bankname = 			(select `employee_financials_master`.`bankname` from employee_financials_master where employee_financials_master.empid = id);
		set @ifsccode = 			(select `employee_financials_master`.`ifsccode` from employee_financials_master where employee_financials_master.empid = id);
		set @nameasperbankaccount = (select `employee_financials_master`.`nameasperbankaccount` from employee_financials_master where employee_financials_master.empid = id);
		set @branchname = 			(select `employee_financials_master`.`branchname` from employee_financials_master where employee_financials_master.empid = id);
		set @bankaccountnumber = 	(select `employee_financials_master`.`bankaccountnumber` from employee_financials_master where employee_financials_master.empid = id);
		set @uanumber = (select `employee_financials_master`.`uanumber` from employee_financials_master where employee_financials_master.empid = id);
		set @pfaccountnumber = (select `employee_financials_master`.`pfaccountnumber` from employee_financials_master where employee_financials_master.empid = id);
		set @pan = (select `employee_financials_master`.`pan` from employee_financials_master where employee_financials_master.empid = id);	
		set @esi = (select `employee_financials_master`.`esi` from employee_financials_master where employee_financials_master.empid = id);
		set @experience_json = (select json_arrayagg(json_object(
		'id',          `id`,
		'empid',         `empid`,
		'companyname', `companyname`,
		'designation',  `designation`,
		'skills',      `skills`,
		'fromdate',    `fromdate`,
		'todate',      `todate`           
		))
		from employee_experience_details cx
		where cx.empid = id);
		select json_arrayagg(json_object(
		'empid',                        `empid`,
		'financials_id',				@financials_id,
		'bankname',						@bankname,  		
		'ifsccode',						@ifsccode,  		
		'nameasperbankaccount',			@nameasperbankaccount,
		'branchname',					@branchname,
		'bankaccountnumber',			@bankaccountnumber,
		'uanumber',						@uanumber,
		'pfaccountnumber',		        @pfaccountnumber,
		'pan',							@pan,
		'esi',							@esi,
		'experience',					@experience_json
		)) as json
	from `employee`
	where `employee`.`id` = id;


	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_emp_job_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_emp_job_details`(
	in `id` int(11)
	)
	begin
	  
		set @empid = 			(select `ems_employee_contract_details`.`empid` from ems_employee_contract_details where ems_employee_contract_details.empid = id);
		set @contractname = 			(select `ems_employee_contract_details`.`contractname` from ems_employee_contract_details where ems_employee_contract_details.empid = id);
		set @startdate = (select `ems_employee_contract_details`.`startdate` from ems_employee_contract_details where ems_employee_contract_details.empid = id);
		set @enddate = 			(select `ems_employee_contract_details`.`enddate` from ems_employee_contract_details where ems_employee_contract_details.empid = id);
		set @notes = 	(select `ems_employee_contract_details`.`notes` from ems_employee_contract_details where ems_employee_contract_details.empid = id);
		set @fileid = (select `ems_employee_contract_details`.`fileid` from ems_employee_contract_details where ems_employee_contract_details.empid = id);
	 
		set @promotions_json = (select json_arrayagg(json_object(
		'id',            `id`,
		'empid',         `empid`,
		'salary', 		 `salary`,
		'description', `description`,
		'effectivedate',      `effectivedate`,
		'annualsalary',        `annualsalary`      
		))
		from ems_employee_promotions_details
		where ems_employee_promotions_details.empid = id
		);
		select json_arrayagg(json_object(
		'empid',                        `empid`,
		'contractname',				    @contractname,
		'startdate',					@startdate,  		
		'enddate',						@enddate,  		
		'notes',						@notes,
		'fileid',					    @fileid,
		'promotions',					@promotions_json
		)) as json
	from `employee`
	where `employee`.`id` = id;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_emp_offboard_resignation_checklists` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_emp_offboard_resignation_checklists`(search_str varchar(255),search_date date,employee_id int,dept_id int)
	begin
		select distinct eec.empid,get_employee_name(ifnull(employee_id,eec.empid)) as empname,
		date(er.created_on) as requestdate,date(er.actual_relieving_date) as exitdate,
		(select designation from designationsmaster where id = (select designationid from employee_designations 
		where empid=ifnull(employee_id,e.id) and effectiveenddate is null)) as designation, -- eec.status,
		-- eec.final_status,
		 if((select count(*) from ems_employee_checklist tmp where tmp.empid = ifnull(employee_id,eec.empid)   
			and tmp.department_id = ifnull(dept_id,eec.department_id) and tmp.final_status='Completed'),'Completed','Pending Checklist') as final_status
			-- ,eec.department_id
		from ems_employee_checklist eec,employee e,ems_employee_resignations er,ems_checklist_master ecm
		where eec.empid = e.id and er.empid=e.id and ecm.id=eec.checklist_id
		and ecm.category='Offboarding' and er.status='Approved'
		and e.id = ifnull(employee_id,e.id)
		and (case when search_str is not null then e.firstname like concat('%',search_str,'%') or e.middlename like concat('%',search_str,'%') or e.lastname like concat('%',search_str,'%') else 1=1 end)
		and (case when search_date is not null then search_date=date(er.created_on) or search_date=date(er.updated_on) else 1=1 end)
		and eec.department_id <=> (select distinct department_id from ems_employee_checklist where empid = eec.empid 
		and (status='Pending' or final_status='Pending Checklist') 
		and department_id <=> ifnull(dept_id,eec.department_id))
		order by eec.id desc;
		-- and eec.status='Pending' or eec.final_status='Pending Checklist';
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_emp_offboard_termination_checklists` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_emp_offboard_termination_checklists`(search_str varchar(255),search_date date,employee_id int,dept_id int)
	begin
		select distinct eec.empid,get_employee_name(ifnull(employee_id,eec.empid)) as empname,
		date(et.created_on) as terminationdate,date(e.dateofjoin) as dateofjoin,
		(select designation from designationsmaster where id = (select designationid from employee_designations 
		where empid=ifnull(employee_id,e.id) and effectiveenddate is null)) as designation, -- eec.status,
	   -- eec.final_status,eec.department_id
		 if((select count(*) from ems_employee_checklist tmp where tmp.empid = ifnull(employee_id,eec.empid)   
			and tmp.department_id = ifnull(dept_id,eec.department_id) and tmp.final_status='Completed'),'Completed','Pending Checklist') as final_status
		   -- ,eec.department_id
		from ems_employee_checklist eec,employee e,ems_employee_terminations et,ems_checklist_master ecm
		where eec.empid = e.id and et.empid=e.id and ecm.id=eec.checklist_id
		and ecm.category='Offboarding'
		and e.id = ifnull(employee_id,e.id)
		and (case when search_str is not null then e.firstname like concat('%',search_str,'%') or e.middlename like concat('%',search_str,'%') or e.lastname like concat('%',search_str,'%') else 1=1 end)
		and (case when search_date is not null then search_date=date(et.created_on) or search_date=date(et.created_on) else 1=1 end)
		and eec.department_id <=> (select distinct department_id from ems_employee_checklist where empid = eec.empid 
		and (status='Pending' or final_status='Pending Checklist') 
		and department_id <=> ifnull(dept_id,eec.department_id))
		order by eec.id desc;
		-- and eec.status='Pending' or eec.final_status='Pending Checklist';
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_emp_personal_info` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_emp_personal_info`(
	in `id` int(11)
	)
	begin
		set @dept = (select departmentid from employee_departments where empid= `id` and employee_departments.effectiveenddate is null order by employee_departments.effectiveenddate desc limit 1);
    set @worklocation = (select locationid from employee_worklocations where empid = `id` and employee_worklocations.effectivetodate is null order by employee_worklocations.effectivefromdate desc limit 1);   
    SET @role = (select (select json_arrayagg(json_object('id',role_id,'name', rm.name)) from employee_roles er
     inner join rolesmaster rm on rm.id=er.role_id where 
    er.employee_id =`id` and er.effective_to_date is null and
   				 role_id in (select rolesmaster.id from rolesmaster where rolesmaster.isEditable=0)));         
  --    SET @role = (select role_id from employee_roles where employee_roles.employee_id = `id` and
	-- 			 role_id in (select rolesmaster.id from rolesmaster where rolesmaster.isEditable=0));
  SET @rm = (SELECT reportingmanagerid FROM employee_reportingmanagers WHERE empid = `id` and employee_reportingmanagers.effectiveenddate is null order by employee_reportingmanagers.id desc limit 1);             
	set @d = (select employee_designations.designationid from employee_designations where employee_designations.empid = `id` and employee_designations.effectiveenddate is null order by employee_designations.id desc limit 1);
    
    set @relations_json = (select json_arrayagg(json_object(
    'id',              				`id`,
    'empid',           				`empid`,
    'firstname',       				`firstname`,
    'lastname',        				`lastname`,
    'gender',          				`gender`,
    'contactnumber',   				`contactnumber`,
    'dateofbirth',     				`dateofbirth`,
    'relationship',    				`relationship`,
    'status',          				`status`,
    'bereavement_leave_utilized',	`bereavement_leave_utilized`,
    'utilized_leave_id',			`utilized_leave_id`
    ))
	from employee_relations
    where employee_relations.empid = id
    );
    
    select json_arrayagg(json_object(
    'id',                           `id`,
    'empid',                        `empid`,
    'firstname',					`firstname`,
    'middlename',                   `middlename`,
    'lastname',						`lastname`,
    'personalemail',                `personalemail`,
    'hired_date',					`hiredon`,
    'officeemail',					`officeemail`,
    'dateofbirth',					`dateofbirth`,
    'gender',						`gender`,
    'maritalstatus',				`maritalstatus`,
    'usertype',                     @role,
    'designation',                  @d,
    'employmenttype',				`employmenttype`,
    'dateofjoin',					`dateofjoin`,
    'reportingmanager',             @rm,
	'noticeperiod',                 `noticeperiod`,
    'languages_spoken',             `languages_spoken`,
    'bloodgroup',                   `bloodgroup`,
    'contactnumber',                `contactnumber`,
    'emergencycontactnumber',       `emergencycontactnumber`,
    'emergencycontactrelation',     `emergencycontactrelation`,
    'emergencycontactname',         `emergencycontactname`,
    'address',                      `address`,
    'city',                         `city`,
    'state',                        `state`,
    'pincode',                      `pincode`,
    'country',                      `country`,
    'paddress',                     `paddress`,  
    'pcity',                        `pcity`,
    'pstate',                       `pstate`,
    'ppincode',                     `ppincode`,
    'pcountry',                     `pcountry`,
    'aadharnumber',					if(`aadharnumber`='null','',`aadharnumber`),
    'passport',						`passport`,
    'worklocation',					@worklocation,
    'status',						`status`,
    'department',					@dept,
    'relations',	                @relations_json
    )) as json
from `employee`
where `employee`.`id` = id;
end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_ems_employee_column_configuration_values` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_ems_employee_column_configuration_values`(
	in employee_id int(11)
	)
	begin
	if (employee_id is not null) then
		select concat(employee_status,',',employee_type,',',department,',',designation,',',location,',',gender,',',blood_group,',',marital_status,',',shift,',',reporting_manager) as configurations
		from ems_employee_column_configuration_master
		where empid = employee_id;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_ems_employee_column_filter_data` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_ems_employee_column_filter_data`(
	)
	begin
		select 'Employee Status' as column_name,statusmaster.id,statusmaster.name from statusmaster where statusmaster.moduleid is null
		union
		select 'Employee Type', employmenttypemaster.id,employmenttypemaster.employmenttype from employmenttypemaster 
		union
		select 'Department',departmentsmaster.id,departmentsmaster.deptname from departmentsmaster where departmentsmaster.status = 1
		union
		select 'Designation',designationsmaster.id,designationsmaster.designation from designationsmaster where designationsmaster.status = 1
		union
		select 'Location',v.id, concat(z.location, ' ',if(v.branchcode is null,'',v.branchcode)) from companyworklocationsmaster v, locationsmaster z where v.city = z.id and v.status = 1
		union
		select 'Gender',gendermaster.id, gendermaster.gender from gendermaster where gendermaster.status = 1
		union
		select 'Blood Group', bloodgroupmaster.id,bloodgroupmaster.bloodgroup from bloodgroupmaster where bloodgroupmaster.status = 1
		union
		select 'Marital Status', maritalstatusmaster.id, maritalstatusmaster.maritalstatus from maritalstatusmaster where maritalstatusmaster.status = 1 
		union
		select 'Shift', shiftsmaster.id,shiftsmaster.shiftname from shiftsmaster where shiftsmaster.status = 1
		union
		select 'Reporting Manager', e.id, concat(e.firstname,case when e.middlename is not null then concat('' '',e.middlename) end,
			case when e.lastname is not null then concat('' '',e.lastname) end) from employee e, employee_roles s 
			where e.id = s.employee_id and s.role_id = 2 and e.status = 1;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_ems_employee_column_filter_dataV2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_ems_employee_column_filter_dataV2`(
	)
	begin
		select 'Employee Status' as column_name,statusmaster.id,statusmaster.name from statusmaster where statusmaster.moduleid is null
		union
		select 'Employee Type', employmenttypemaster.id,employmenttypemaster.employmenttype from employmenttypemaster 
		union
		select 'Department',departmentsmaster.id,departmentsmaster.deptname from departmentsmaster where departmentsmaster.status = 1
		union
		select 'Designation',designationsmaster.id,designationsmaster.designation from designationsmaster where designationsmaster.status = 1
		union
		select 'Location',v.id, concat(z.location, ' ',v.branchcode) from companyworklocationsmaster v, locationsmaster z where v.city = z.id and v.status = 1
		union
		select 'Gender',gendermaster.id, gendermaster.gender from gendermaster where gendermaster.status = 1
		union
		select 'Blood Group', bloodgroupmaster.id,bloodgroupmaster.bloodgroup from bloodgroupmaster where bloodgroupmaster.status = 1
		union
		select 'Shift', shiftsmaster.id,shiftsmaster.shiftname from shiftsmaster where shiftsmaster.status = 1
		union
		select 'Reporting Manager', e.id, concat(e.firstname,case when e.middlename is not null then concat('' '',e.middlename) end,
			case when e.lastname is not null then concat('' '',e.lastname) end) from employee e, employee_roles s 
			where e.id = s.employee_id and s.role_id = 2 and e.status = 1;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_ems_employee_data_for_reports` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_ems_employee_data_for_reports`(
	in employee_id integer(11),
	in employee_status_value varchar(255),
	in employee_type_value varchar(255),
	in department_value varchar(255),
	in designation_value varchar(255),
	in location_value varchar(255),
	in gender_value varchar(255),
	in blood_group_value varchar(255),
	in marital_status_value varchar(255),
	in shift_value varchar(255),
	in reporting_manager_value varchar(255),
	in search_string varchar(255)
	)
	begin

	create temporary table configs_temp_table (
	  `employee_status` int(1) DEFAULT NULL,
	  `employee_type` int(1) DEFAULT NULL,
	  `department` int(1) DEFAULT NULL,
	  `designation` int(1) DEFAULT NULL,
	  `location` int(1) DEFAULT NULL,
	  `gender` int(1) DEFAULT NULL,
	  `blood_group` int(1) DEFAULT NULL,
	  `marital_status` int(1) DEFAULT NULL,
	  `shift` int(1) DEFAULT NULL,
	  `reporting_manager` int(1) DEFAULT NULL
	);

	create temporary table emp_rm (
		empid int(11),
		emp_name varchar(255)
	);

	insert into configs_temp_table
	select employee_status,employee_type,department,designation,location,gender,blood_group,marital_status,
	shift,reporting_manager 
	from ems_employee_column_configuration_master
	where ems_employee_column_configuration_master.empid = employee_id;

	insert into emp_rm
	select id, concat(firstname,case when middlename is not null then concat(' ',middlename) end,
		case when lastname is not null then concat(' ',lastname) end)
		from employee where id in (select employee_roles.employee_id from employee_roles where employee_roles.role_id = 2);

	set @sqltext = '';
	set @sqltext = concat('select concat(e.firstname,case when e.middlename is not null then concat('' '',e.middlename) end,
		case when e.lastname is not null then concat('' '',e.lastname) end) as employee_name,
		e.officeemail as office_email,
		e.contactnumber as contact_number ');
		if exists (select * from configs_temp_table where employee_status = 1) then 
			set @sqltext = concat(@sqltext, ', (select statusmaster.name from statusmaster where statusmaster.id = e.status) as status');
		end if;
		if exists (select * from configs_temp_table where employee_type = 1) then 
			set @sqltext = concat(@sqltext, ', (select employmenttypemaster.employmenttype from employmenttypemaster where employmenttypemaster.id = e.employmenttype) as employment_type');
		end if;
		if exists (select * from configs_temp_table where department = 1) then 
			set @sqltext = concat(@sqltext, ', p.deptname  as department_name');
		end if;
		if exists (select * from configs_temp_table where designation = 1) then 
			set @sqltext = concat(@sqltext, ', d.designation as designation');
		end if;
		if exists (select * from configs_temp_table where location = 1) then 
			set @sqltext = concat(@sqltext, ', v.location as work_location');
		end if;
		if exists (select * from configs_temp_table where gender = 1) then 
			set @sqltext = concat(@sqltext, ', (select gendermaster.gender from gendermaster where gendermaster.id = e.gender) as gender');
		end if;
		if exists (select * from configs_temp_table where blood_group = 1) then 
			set @sqltext = concat(@sqltext, ', (select bloodgroupmaster.bloodgroup from bloodgroupmaster where bloodgroupmaster.id = e.bloodgroup) as blood_group');
		end if;
		if exists (select * from configs_temp_table where marital_status = 1) then 
			set @sqltext = concat(@sqltext, ', (select maritalstatusmaster.maritalstatus from maritalstatusmaster where maritalstatusmaster.id = e.maritalstatus) as marital_status');
		end if;
		if exists (select * from configs_temp_table where shift = 1) then 
			set @sqltext = concat(@sqltext, ', s.shiftname  as shift_name');
		end if;
		if exists (select * from configs_temp_table where reporting_manager = 1) then 
			set @sqltext = concat(@sqltext, ', (select emp_rm.emp_name from emp_rm where emp_rm.empid = vv.reportingmanagerid) as reporting_manager');
		end if; 
		set @sqltext = concat(@sqltext, ' from employee e');
		if exists (select * from configs_temp_table where designation = 1) then
			set @sqltext = concat(@sqltext, ',employee_designations ed,
				(select max(id) as maxid,empid from employee_designations group by empid) desig_max_id,
				designationsmaster d');
		end if;    
		if exists (select * from configs_temp_table where department = 1) then 
			set @sqltext = concat(@sqltext, ',employee_departments dp,
			(select max(id) as maxid,empid from employee_departments group by empid) as dept_max_id, departmentsmaster p');
		end if;
		if exists (select * from configs_temp_table where shift = 1) then 
			set @sqltext = concat(@sqltext, ',employee_shift_details esd,
			shiftsmaster s');
		end if; 
		if exists (select * from configs_temp_table where location = 1) then 
			set @sqltext = concat(@sqltext, ',employee_worklocations w,
			companyworklocationsmaster wm,
			locationsmaster v,
			(select max(id) as maxid,empid from employee_worklocations group by empid) as w_max_id');
		end if; 
		if exists (select * from configs_temp_table where reporting_manager = 1) then 
			set @sqltext = concat(@sqltext, ',employee_reportingmanagers vv,
			(select max(id) as maxid,empid from employee_reportingmanagers group by empid) as rm_max_id');
		end if;  
		set @sqltext = concat(@sqltext, ' where 1 = 1');
		if exists (select * from configs_temp_table where designation = 1) then
			set @sqltext = concat(@sqltext, ' and e.id = ed.empid -- designation
			and ed.id = desig_max_id.maxid
			and ed.empid = desig_max_id.empid
			and ed.designationid = d.id');
		end if; 
		if exists (select * from configs_temp_table where department = 1) then 
			set @sqltext = concat(@sqltext, ' and e.id = dp.empid   -- department
			and dp.id = dept_max_id.maxid
			and dp.empid = dept_max_id.empid
			and dp.departmentid = p.id');
		end if;
		if exists (select * from configs_temp_table where shift = 1) then 
			set @sqltext = concat(@sqltext, ' and e.id = esd.empid  -- shift
			and case when esd.todate is not null then (curdate() >= esd.fromdate and curdate() <= esd.todate)
					else curdate() <= esd.fromdate
					end
			and esd.shiftid = s.id');
		end if;  
		if exists (select * from configs_temp_table where location = 1) then 
			set @sqltext = concat(@sqltext, ' and e.id = w.empid    -- place
			and w.id = w_max_id.maxid
			and w.empid = w_max_id.empid
			and w.locationid = wm.id
			and wm.city = v.id');
		end if;
		if exists (select * from configs_temp_table where reporting_manager = 1) then 
			set @sqltext = concat(@sqltext, ' and e.id = vv.empid  -- rm
			and vv.id = rm_max_id.maxid
			and vv.empid = rm_max_id.empid'); 
		end if;    
		if exists (select * from configs_temp_table where employee_status = 1) then 
			set @sqltext = concat(@sqltext, ' and e.status in (',employee_status_value,')');
		end if;
		if exists (select * from configs_temp_table where employee_type = 1) then 
			set @sqltext = concat(@sqltext, ' and e.employmenttype in (', employee_type_value,')');
		end if;
		if exists (select * from configs_temp_table where department = 1) then 
			set @sqltext = concat(@sqltext, ' and p.id in (', department_value,')');
		end if;
		if exists (select * from configs_temp_table where designation = 1) then 
			set @sqltext = concat(@sqltext, ' and d.id in (', designation_value,')');
		end if;
		if exists (select * from configs_temp_table where location = 1) then 
			set @sqltext = concat(@sqltext, ' and wm.id in (', location_value,')');
		end if;    
		if exists (select * from configs_temp_table where gender = 1) then 
			set @sqltext = concat(@sqltext, ' and e.gender in (', gender_value,')');
		end if;
		if exists (select * from configs_temp_table where blood_group = 1) then 
			set @sqltext = concat(@sqltext, ' and e.bloodgroup in (', blood_group_value,')');
		end if;
		if exists (select * from configs_temp_table where marital_status = 1) then 
			set @sqltext = concat(@sqltext, ' and e.maritalstatus in (', marital_status_value,')');
		end if;
		if exists (select * from configs_temp_table where shift = 1) then 
			set @sqltext = concat(@sqltext, ' and s.id in (', shift_value,')');
		end if;
		if exists (select * from configs_temp_table where reporting_manager = 1) then 
			set @sqltext = concat(@sqltext, ' and vv.reportingmanagerid in (', reporting_manager_value,')');
		end if; 
		if (search_string is not null) then
		set @sqltext = concat(@sqltext, ' and ( concat(e.firstname,case when e.middlename is not null then concat('' '',e.middlename) end,
		case when e.lastname is not null then concat('' '',e.lastname) end) like ''%', search_string,'%'' or e.officeemail like ''%', search_string,'%'' or 
		e.contactnumber like ''%',search_string,'%'')');
		end if;
		set @sqltext = concat(@sqltext, ' order by e.id');
		-- select @sqltext;
	prepare stmt from @sqltext; -- , employee_reportingmanagers.id desc
		execute stmt;
		deallocate prepare stmt; 
		drop temporary table configs_temp_table;
		drop temporary table emp_rm;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_ems_induction_conductedby` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_ems_induction_conductedby`()
	begin
		/*SELECT  eeic.id,
		eeic.program_id,
		epm.description,
		eeic.department_id,
		d.deptname as departme,
		(select  json_unquote(json_arrayagg(json_object(
				   'empid',e.id,
				   'conductby',(select concat(e.firstname,' ',e.lastname))
				   )))
				   FROM ems_induction_conductedby cone
				   inner join ems_employee_induction_conductedby con on con.induction_conductedby_id=cone.id
				   inner join employee e on e.id=con.empid and e.status=1
				   where cone.program_id=eeic.program_id and cone.department_id=eeic.department_id
		   )as empids,
		eeic.status
		FROM ems_programs_master epm 
		inner join ems_induction_conductedby eeic on eeic.program_id=epm.id
		inner join ems_employee_induction_conductedby eic on eic.induction_conductedby_id=eeic.id
		inner join departmentsmaster d on d.id=eeic.department_id
		group by eeic.id;*/
		
		SELECT  eeic.id,
		eeic.program_id,
		epm.description,
		eeic.department_id,
		d.deptname as departme,
		(select  json_unquote(json_arrayagg(json_object(
				   'empid',e.id,
				   'employee_code',e.empid,
				   'empname',(select concat(e.firstname,' ',e.lastname))
				   )))
		   )as empids,
		eeic.status
		FROM ems_programs_master epm 
		left join ems_induction_conductedby eeic on eeic.program_id=epm.id
		left join ems_employee_induction_conductedby eic on eic.induction_conductedby_id=eeic.id
		inner join departmentsmaster d on d.id=eeic.department_id
		inner join employee e on e.id=eic.empid and e.status=1
		group by eeic.id;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_ems_messages` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_ems_messages`(in `code` varchar(255),
	in `pagenumber` int,in `pagesize` int)
	begin
		if `code` is not null and `code`!='' then
			set @sql = concat('select *,(select count(*) from ems_messages where code = ''',`code`,''') as total from ems_messages where code = ''',`code`,'''');
			prepare stmt from @sql;
			execute stmt;
			deallocate prepare stmt;
		else
			set @offset1 = pagesize*(pagenumber-1);
			set @count = (select count(*) from ems_messages);
			set @sqltext = concat('select *,@count as total from ems_messages ',' limit ',@offset1,',',pagesize);
			prepare stmt from @sqltext;
			execute stmt;
			deallocate prepare stmt;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_epf_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_epf_details`(
	)
	begin
	select configs.value,configs.effective_from_date into @epf_number,@effective_from_date from configs 
	where configs.name = 'Company EPF Registration Number';
	select v.value into @v1 from payroll_client_component_configuration_details v where v.id = 1 and v.effective_to_date is null;
	select v.value into @v2 from payroll_client_component_configuration_details v where v.id = 2 and v.effective_to_date is null;
	select v.value into @v3 from payroll_client_component_configuration_details v where v.id = 3 and v.effective_to_date is null;
	select v.value into @v4 from payroll_client_component_configuration_details v where v.id = 4 and v.effective_to_date is null;
	select v.value into @v5 from payroll_client_component_configuration_details v where v.id = 5 and v.effective_to_date is null;
	select v.value into @v6 from payroll_client_component_configuration_details v where v.id = 6 and v.effective_to_date is null;
	select @epf_number as epf_number,
		@v1 as include_employer_contribution_in_ctc_value,
		@v2 as include_employer_edli_contribution_in_ctc_value,
		@v3 as include_admin_charges_in_ctc_value,
		@v4 as actual_pf_wage_or_restricted_pf_wage_for_employer_contribution,
		@v5 as actual_pf_wage_or_restricted_pf_wage_for_employee_contribution,
		@v6 as consider_all_comp_if_pf_wage_is_lt_statutory_value,
		@effective_from_date as effective_from_date;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_esi_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
CREATE  PROCEDURE `get_epf_values_for_challan`(
	year_value int(4),
	month_value int(2)
)
begin
	SELECT efm.uanumber as UAN, get_employee_name(e.id) as Employee_Name,
	g.total_gross_salary as "Gross Salary", p.employee_epf_value,
	p.employer_eps_value, p.employer_epf_value,p.employer_edli_value, p.employer_admin_charges_value 
	from payroll_epf_details p, employee e, employee_financials_master efm, employee_gross_salary_details g 
	where p.year = year_value
	and p.month = month_value
	and e.id = p.empid
	and e.id = efm.empid
	and e.id = g.empid
	and g.year = year_value
	and g.month = month_value
	order by Employee_Name;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_esi_details` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE PROCEDURE `get_esi_details`(
)
begin
	select m.id,m.description, v.value
	from payroll_product_component_rulemaster m, payroll_product_component_rulevalues v
	where m.id = v.rule_id
	and m.rule_name in 
	(
	'MINIMUM_NUMBER_OF_EMPLOYEES_REQUIRED',
	'MAXIMUM_GROSS_SALARY_PERMITTED_TO_RECEIVE_ESI',
	'CONTRIBUTION_RATE_OF_EMPLOYEE',
	'CONTRIBUTION_RATE_OF_EMPLOYER')
	and m.component_id = 11
	and v.effectivetodate is null;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_esi_employer_contribution` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_esi_employer_contribution`(
)
begin
set @esi_er_in_ctc = (select payroll_client_component_configuration_details.value
					  from payroll_client_component_configuration_details where payroll_client_component_configuration_details.rule_id =
					  (select id from payroll_client_component_configuration_master 
					  where payroll_client_component_configuration_master.rule_name = 'EMPLOYER_CONTRIBUTION_TO_BE_INCLUDED_IN_CTC'
					  and payroll_client_component_configuration_master.component_id = 11)
					  and effective_to_date is null);    
if (@esi_er_in_ctc is not null) then
	select @esi_er_in_ctc as esi_employer_contribution;
end if;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_esi_for_states` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_esi_for_states`(
	)
	begin
		select v.state ,s.value, s.state_id
		from esi_configs s, statesmaster v
		where s.state_id = v.id
		and s.effective_to_date is null;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_filecategory_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
CREATE  PROCEDURE `get_esi_values_for_challan`(
	year_value int(4),
	month_value int(2)
)
begin
	SELECT efm.esi as ESI, get_employee_name(e.id) as Employee_Name,
    g.total_gross_salary as Gross_Salary, employee_esi_value,employer_esi_value
    from payroll_esi_details p, employee e, employee_financials_master efm, employee_gross_salary_details g 
	where p.year = year_value
	and p.month = month_value
	and e.id = p.empid
	and e.id = efm.empid
	and e.id = g.empid
	and g.year = year_value
	and g.month = month_value
	order by Employee_Name;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_filecategory_master` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_filecategory_master`(`fcid` int,`moduleid` int)
begin
	select * from filecategory_master where id = (case when `fcid` is null then id else `fcid` end) and module_id=`moduleid`;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_filepaths_master` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_filepaths_master`(`moduleid` int)
begin
	select * from filepaths_master where module_id=`moduleid`;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_files_for_approval` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_files_for_approval`(`employee_id` int,`candidate_id` int)
begin
    select 	f.empid,
			(select empid from employee where id=f.empid) as empcode,
			get_employee_name(f.empid) as empname,
            f.id as fileid,
            f.document_number,
            (select description from filecategory_master where id=f.file_category)as description,
            (select concat(root_folder,'\\',module_code,'\\')  from filepaths_master where id=f.filepath_id limit 1) as filepath,
            concat((case when ifnull(`employee_id`,f.empid)=0 and `candidate_id` is not null then concat('CAN',`candidate_id`) else ifnull(`employee_id`,f.empid) end),'_',(select category from filecategory_master where id=f.file_category),'_',ifnull(f.request_id,''),'_',f.filename) as filename,
            f.upload_date,
			f.filename as fname
    from files_master f
    where f.empid=ifnull(`employee_id`,f.empid) 
    and f.candidate_id=ifnull(`candidate_id`,f.candidate_id)
    and f.file_status = 'Submitted'
    and f.file_category not in (select id from filecategory_master where category='PROFILE')
    and f.empid<>0
    order by f.upload_date desc;
    /*
	select 	f.empid,
			(select empid from employee where id=f.empid) as empcode,
			get_employee_name(f.empid) as empname,
			f.id as fileid,
			f.document_number,
			(select description from filecategory_master where id=f.file_category)as description,
			(select concat(root_folder,'/',module_code)  from filepaths_master where id=f.filepath_id limit 1) as filepath,
			concat((case when ifnull(`employee_id`,f.empid)=0 and `candidate_id` is not null then concat('CAN',`candidate_id`) else ifnull(`employee_id`,f.empid) end),'_',(select category from filecategory_master where id=f.file_category),'_',ifnull(f.request_id,''),'_',f.filename) as filename,
			f.upload_date,
			f.filename as fname
	from files_master f
	where f.empid=ifnull(`employee_id`,f.empid) 
	and f.candidate_id=ifnull(`candidate_id`,f.candidate_id)
	and f.file_status = 'Submitted'
	and f.empid<>0
	order by f.upload_date desc;
    */
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_files_master` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_files_master`(`employee_id` int,`candidate_id` int,`moduleid` int,`filecategory` varchar(64),`requestid` int,`status` varchar(32))
begin
	set @filepath=(select concat(root_folder,'\\',module_code,'\\')  from filepaths_master where module_id=`moduleid` limit 1);
    select 	id,
			document_number,
            (select description from filecategory_master where id=file_category and module_id=`moduleid`)as description,
            (select category from filecategory_master where id=file_category and module_id=`moduleid`)as file_category,
            @filepath as filepath,
            concat(
            (case when `candidate_id` is not null then concat('CAN',`candidate_id`) else 
            (case when exists(select id from ems_new_hire where empid=ifnull(`employee_id`,0) and `filecategory`<>'PROFILE' and `candidate_id` is not null) then concat('CAN',(select id from ems_new_hire where empid=ifnull(`employee_id`,0)))
             else ifnull(`employee_id`,0) end) end),
           '_',(select category from filecategory_master where id=files_master.file_category and module_id=`moduleid`),
            '_',ifnull(`request_id`,''),'_',filename) as filename,
            file_status as status,
            filename as fname,
            upload_date  
    from files_master 
    where 
     (files_master.empid= `employee_id` 
     or files_master.candidate_id=(case when `candidate_id`is not null then `candidate_id` else (select id from ems_new_hire where empid=ifnull(`employee_id`,0)) end)
     )
    and file_category <=>(case when `filecategory` is null then file_category else (select id from filecategory_master where category=`filecategory` and module_id=`moduleid`) end)
	and request_id <=> ifnull(`requestid`,request_id)
    and file_status <=> ifnull(`status`,file_status)
    order by upload_date desc;

		/*
		set @filepath=(select concat(root_folder,'/',module_code)  from filepaths_master where module_id=`moduleid` limit 1);
		select 	id,
				document_number,
				(select description from filecategory_master where id=file_category and module_id=`moduleid`)as description,
				(select category from filecategory_master where id=file_category and module_id=`moduleid`)as file_category,
				@filepath as filepath,
				concat(
				(case when `candidate_id` is not null then concat('CAN',`candidate_id`) else 
				(case when (select id from ems_new_hire where empid=ifnull(`employee_id`,0) and `filecategory`<>'PROFILE') then concat('CAN',(select id from ems_new_hire where empid=ifnull(`employee_id`,0)))
				 else ifnull(`employee_id`,0) end) end),
			   '_',(select category from filecategory_master where id=files_master.file_category and module_id=`moduleid`),
				'_',ifnull(`request_id`,''),'_',filename) as filename,
				file_status as status,
				filename as fname,
				upload_date  
		from files_master 
		where 
		 (files_master.empid= `employee_id` 
		 or files_master.candidate_id=(case when `candidate_id`is not null then `candidate_id` else (select id from ems_new_hire where empid=ifnull(`employee_id`,0)) end)
		 )
		and file_category <=>(case when `filecategory` is null then file_category else (select id from filecategory_master where category=`filecategory` and module_id=`moduleid`) end)
		and request_id <=> ifnull(`requestid`,request_id)
		and file_status <=> ifnull(`status`,file_status)
		order by upload_date desc;
		*/
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_financial_years` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_financial_years`()
	begin
		set @present_year = '';
		set @previous_year = '';
		set @start_month = 4;
		set @current_year = year(current_timestamp());                   
		set @current_month = month(current_timestamp());
			if(@start_month = 1) then
				set @current_year = @current_year;
			elseif ((@start_month <> 1) and (@start_month <= @current_month)) then
				set @current_year = @current_year;
			elseif ((@start_month <> 1) and (@start_month > @current_month)) then
				set @current_year = @current_year - 1;
			end if;
		set @present_year =  concat(@current_year,'-',@current_year+1);
		set @previous_year = concat(@current_year-1,'-',@current_year);
		select @present_year as financial_year,@present_year as return_value
		union
		select @previous_year,@previous_year;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_handled_leaves` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_handled_leaves`(
	in `rm_id` int(11)
	)
	begin
	drop temporary table if exists manager_status; 
	create temporary table manager_status (
	leaveid int(11),
	reason varchar(512)
	);

	set @present_year = (select fn_get_leave_cycle_year());
	set @previous_year = (select fn_get_leave_cycle_year() - 1);

	insert into manager_status(reason,leaveid)
	select lm_leaveapprovalstatustracker.action_reason, lm_leaveapprovalstatustracker.leaveid
	from lm_leaveapprovalstatustracker, employee, lm_employeeleaves,
	(select leaveid,max(id) as id
	from lm_leaveapprovalstatustracker group by leaveid) max_ids
	where lm_leaveapprovalstatustracker.empid = employee.id
	and lm_leaveapprovalstatustracker.leaveid = lm_employeeleaves.id
	and lm_employeeleaves.empid = lm_leaveapprovalstatustracker.empid 
	and lm_leaveapprovalstatustracker.approverid = rm_id
	and employee.id = lm_employeeleaves.empid
	and lm_leaveapprovalstatustracker.leaveid = max_ids.leaveid
	and lm_leaveapprovalstatustracker.id = max_ids.id
	and case when ifnull(lm_employeeleaves.leave_cycle_year,0) <> 0 
			 then lm_employeeleaves.leave_cycle_year in ((select @present_year),(select @previous_year))
			 else ifnull(lm_employeeleaves.leave_cycle_year,0) = 0
			 end
	and lm_employeeleaves.leavestatus <> 'Submitted';

	SELECT distinct
		`lm_employeeleaves`.`id`,
		`lm_employeeleaves`.`empid`,
		 concat(employee.firstname,case when employee.middlename is not null then concat(' ',employee.middlename) end,
		 case when employee.lastname is not null then concat(' ',employee.lastname) end) as emp_name,
		 employee.empid as employee_id,
		`lm_employeeleaves`.`leavetype`,
		(select lm_leavesmaster.display_name from lm_leavesmaster where lm_leavesmaster.id = lm_employeeleaves.leavetype) as display_name,
		`lm_employeeleaves`.`fromdate`,
		`lm_employeeleaves`.`todate`,
		`lm_employeeleaves`.`fromhalfdayleave`,
		`lm_employeeleaves`.`tohalfdayleave`,
		`lm_employeeleaves`.`leavecount`,
		`lm_employeeleaves`.`appliedon`,
		`lm_employeeleaves`.`approvedby`,
		`lm_employeeleaves`.`leavereason`,
		`lm_employeeleaves`.`leavestatus`,
		`lm_employeeleaves`.`contactnumber`,
		`lm_employeeleaves`.`contactemail`,
		`lm_employeeleaves`.`contactaddress`,
		`lm_employeeleaves`.`leave_cycle_year`,
		`lm_employeeleaves`.`action_reason`,
		 manager_status.reason as manager_reason,
		`lm_employeeleaves`.`approvedon`,
		`lm_employeeleaves`.`updatedon`,
		case when lm_employeeleaves.leavetype = 8 then
			(select concat(relationshipmaster.relationship,' - ',concat(employee_relations.firstname,case when employee_relations.lastname is not null then concat(' ',employee_relations.lastname) end)) 
			from employee_relations, relationshipmaster 
			where employee_relations.empid = lm_employeeleaves.empid and 
			employee_relations.utilized_leave_id = lm_employeeleaves.id
			and employee_relations.relationship = relationshipmaster.id)
			else null end
		as bereavement_relation,
		case when lm_employeeleaves.leavetype = 8 then
			(select employee_relations.id
			from employee_relations, relationshipmaster 
			where employee_relations.empid = lm_employeeleaves.empid and 
			employee_relations.utilized_leave_id = lm_employeeleaves.id
			and employee_relations.relationship = relationshipmaster.id)
			else null end
		as bereavement_id,
		case when lm_employeeleaves.leavetype = 9 and lm_employeeleaves.leavecount = 1 then
			 (select lm_register_comp_off.comp_off_date from lm_register_comp_off 
			 where lm_employeeleaves.empid = lm_register_comp_off.empid 
			 and lm_register_comp_off.utilized_leave_id = lm_employeeleaves.id)
			 when lm_employeeleaves.leavetype = 9 and lm_employeeleaves.leavecount < 1 then
			 (select lm_register_comp_off.comp_off_date
			 from lm_register_comp_off
			 where lm_register_comp_off.empid = lm_employeeleaves.empid
			 and (substring_index(lm_register_comp_off.utilized_leave_id,',',1) = lm_employeeleaves.id or
			 substring_index(lm_register_comp_off.utilized_leave_id,',',-1) = lm_employeeleaves.id))
			 else null end
		as worked_date
	FROM employee, lm_employeeleaves, lm_leaveapprovalstatustracker, manager_status
	where lm_employeeleaves.empid = lm_leaveapprovalstatustracker.empid 
		and lm_leaveapprovalstatustracker.leaveid = lm_employeeleaves.id
		and lm_leaveapprovalstatustracker.approverid = rm_id
		and employee.id = lm_employeeleaves.empid
		and lm_employeeleaves.id = manager_status.leaveid
		and case when ifnull(lm_employeeleaves.leave_cycle_year,0) <> 0 
				 then lm_employeeleaves.leave_cycle_year in ((select @present_year),(select @previous_year))
				 else ifnull(lm_employeeleaves.leave_cycle_year,0) = 0
				 end
		and lm_employeeleaves.leavestatus <> 'Submitted'
		order by lm_employeeleaves.id desc;
		
		drop temporary table manager_status;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_holiday_years_or_locations` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_holiday_years_or_locations`(in `columnname` varchar(64))
	begin
		set @sqltext = concat('select distinct ', `columnname`,(case when `columnname`='location' then ', (select location from locationsmaster where id=h.location) as locationname' else '' end),' from holidaysmaster h
		where h.leave_cycle_year = (select fn_get_leave_cycle_year())');
		prepare stmt1 from @sqltext;
		execute stmt1;
		deallocate prepare stmt1;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_hr_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_hr_details`()
	begin

			select e.id,CONCAT(e.firstname, " ", e.middlename, " ", e.lastname) as managername 
				  ,e.empid,e.contactnumber , e.officeemail
			from  employee e 
			inner join employee_roles er on er.employee_id=e.id
			where er.role_id=6;
			
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_integration_empids_lookup` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_integration_empids_lookup`(
		`boon_emp_id` int(11),
		`biometric_emp_id` int(11)
	)
	begin

		select (select empid from employee where id=i.boonempid) as boonempid,i.deviceempid,(select concat(firstname,' ',lastname) from employee where id=i.boonempid) as empname from integration_empids i where (case when `boon_emp_id` is null then boonempid=i.boonempid else boonempid=`boon_emp_id` end)
		and (case when `biometric_emp_id` is null then deviceempid=i.deviceempid else deviceempid=`biometric_emp_id` end);

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_leaves_for_approval` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_leaves_for_approval`(
	in `rm_id` int(11)
	)
	begin
	set @present_year = (select fn_get_leave_cycle_year());
	set @previous_year = (select fn_get_leave_cycle_year() - 1);
	SELECT distinct lm_leaveapprovalstatustracker.id, 
		`lm_employeeleaves`.`id` as leave_id,
		`lm_employeeleaves`.`empid`,
		employee.empid as employee_id,
		 concat(employee.firstname,case when employee.middlename is not null then concat(' ',employee.middlename) end,
		 case when employee.lastname is not null then concat(' ',employee.lastname) end) as emp_name,
		`lm_employeeleaves`.`leavetype`,
		lm_leavesmaster.display_name,
		`lm_employeeleaves`.`fromdate`,
		`lm_employeeleaves`.`todate`,
		`lm_employeeleaves`.`fromhalfdayleave`,
		`lm_employeeleaves`.`tohalfdayleave`,
		`lm_employeeleaves`.`leavecount`,
		`lm_employeeleaves`.`appliedon`,
		`lm_employeeleaves`.`approvedby`,
		`lm_employeeleaves`.`leavereason`,
		`lm_employeeleaves`.`leavestatus`,
		`lm_employeeleaves`.`contactnumber`,
		`lm_employeeleaves`.`contactemail`,
		`lm_employeeleaves`.`contactaddress`,
		`lm_employeeleaves`.`leave_cycle_year`,
		`lm_employeeleaves`.`action_reason`,
		`lm_employeeleaves`.`approvedon`,
		`lm_employeeleaves`.`updatedon`,
		case when lm_employeeleaves.leavetype = 8 then
			(select concat(relationshipmaster.relationship,' - ',employee_relations.firstname) -- ,(case when employee_relations.lastname is not null then concat(' ',employee_relations.lastname) end))) 
			from employee_relations, relationshipmaster 
			where employee_relations.empid = lm_employeeleaves.empid and 
			employee_relations.utilized_leave_id = lm_employeeleaves.id
			and employee_relations.relationship = relationshipmaster.id)
			else null end
		as bereavement_relation,
		case when lm_employeeleaves.leavetype = 9 then
			(select lm_register_comp_off.comp_off_date from lm_register_comp_off 
			where lm_register_comp_off.utilized_leave_id = `lm_employeeleaves`.`id`) 
			else null end
		as comp_off_worked_date,    
		DATEDIFF(CURDATE(), date(`lm_employeeleaves`.`appliedon`)) as pendingSince
	FROM employee, lm_employeeleaves, lm_leaveapprovalstatustracker, lm_leavesmaster
	where lm_employeeleaves.empid = lm_leaveapprovalstatustracker.empid 
		and lm_leaveapprovalstatustracker.leaveid = lm_employeeleaves.id
		and employee.id = lm_employeeleaves.empid
		and lm_leavesmaster.id = lm_employeeleaves.leavetype
		and lm_leaveapprovalstatustracker.approverid = rm_id
		and case when ifnull(lm_employeeleaves.leave_cycle_year,0) <> 0 
			 then lm_employeeleaves.leave_cycle_year in ((select @present_year),(select @previous_year))
			 else ifnull(lm_employeeleaves.leave_cycle_year,0) = 0
			 end
		and lm_employeeleaves.leavestatus = 'Submitted';
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_leaves_for_cancellation` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_leaves_for_cancellation`(
	in `rm_id` int(11)
	)
	begin
	set @present_year = (select fn_get_leave_cycle_year());
	set @previous_year = (select fn_get_leave_cycle_year() - 1);
	SELECT `lm_leaveapprovalstatustracker`.`id` as id,
		`lm_employeeleaves`.`empid`,
		 concat(employee.firstname,case when employee.middlename is not null then concat(' ',employee.middlename) end,
		 case when employee.lastname is not null then concat(' ',employee.lastname) end) as emp_name,
		 employee.empid as employee_id,
		`lm_employeeleaves`.`leavetype`,
		`lm_employeeleaves`.`id` as leave_id,
		(select lm_leavesmaster.display_name from lm_leavesmaster where lm_leavesmaster.id = lm_employeeleaves.leavetype) as display_name,
		`lm_employeeleaves`.`fromdate`,
		`lm_employeeleaves`.`todate`,
		`lm_employeeleaves`.`fromhalfdayleave`,
		`lm_employeeleaves`.`tohalfdayleave`,
		`lm_employeeleaves`.`leavecount`,
		`lm_employeeleaves`.`appliedon`,
		`lm_employeeleaves`.`approvedby`,
		`lm_employeeleaves`.`leavereason`,
		`lm_employeeleaves`.`leavestatus`,
		`lm_employeeleaves`.`contactnumber`,
		`lm_employeeleaves`.`contactemail`,
		`lm_employeeleaves`.`contactaddress`,
		`lm_employeeleaves`.`leave_cycle_year`,
		`lm_employeeleaves`.`action_reason`,
		`lm_employeeleaves`.`approvedon`,
		`lm_employeeleaves`.`updatedon`,
		case when lm_employeeleaves.leavetype = 8 then
			(select concat(relationshipmaster.relationship,' - ',employee_relations.firstname,' ',employee_relations.lastname) 
			from employee_relations, relationshipmaster 
			where employee_relations.empid = lm_employeeleaves.empid and 
			employee_relations.utilized_leave_id = lm_employeeleaves.id
			and employee_relations.relationship = relationshipmaster.id)
			else null end
		as bereavement_relation,
		case when lm_employeeleaves.leavetype = 8 then
			(select employee_relations.id
			from employee_relations, relationshipmaster 
			where employee_relations.empid = lm_employeeleaves.empid and 
			employee_relations.utilized_leave_id = lm_employeeleaves.id
			and employee_relations.relationship = relationshipmaster.id)
			else null end
		as bereavement_id,
		case when lm_employeeleaves.leavetype = 9 and lm_employeeleaves.leavecount = 1 then
			 (select lm_register_comp_off.comp_off_date from lm_register_comp_off 
			 where lm_employeeleaves.empid = lm_register_comp_off.empid 
			 and lm_register_comp_off.utilized_leave_id = lm_employeeleaves.id)
			 when lm_employeeleaves.leavetype = 9 and lm_employeeleaves.leavecount < 1 then
			 (select lm_register_comp_off.comp_off_date
			 from lm_register_comp_off
			 where lm_register_comp_off.empid = lm_employeeleaves.empid
			 and (substring_index(lm_register_comp_off.utilized_leave_id,',',1) = lm_employeeleaves.id or
			 substring_index(lm_register_comp_off.utilized_leave_id,',',-1) = lm_employeeleaves.id))
			 else null end
		as worked_date,
			DATEDIFF(CURDATE(), date(`lm_employeeleaves`.`updatedon`)) as pendingSince
	FROM employee, lm_employeeleaves, lm_leaveapprovalstatustracker
	where lm_employeeleaves.empid = lm_leaveapprovalstatustracker.empid 
		and lm_leaveapprovalstatustracker.leaveid = lm_employeeleaves.id
		and lm_leaveapprovalstatustracker.approverid = rm_id
		and employee.id = lm_employeeleaves.empid
		and case when ifnull(lm_employeeleaves.leave_cycle_year,0) <> 0 
				 then lm_employeeleaves.leave_cycle_year in ((select @present_year),(select @previous_year))
				 else ifnull(lm_employeeleaves.leave_cycle_year,0) = 0
				 end
		and lm_leaveapprovalstatustracker.status = 'Cancel Submitted'
		order by lm_employeeleaves.id;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_leaves_for_cancellation_approval` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_leaves_for_cancellation_approval`(
	in `rm_id` int(11)
	)
	begin
	set @present_year = (select fn_get_leave_cycle_year());
	set @previous_year = (select fn_get_leave_cycle_year() - 1);
	SELECT distinct lm_leaveapprovalstatustracker.id, 
		`lm_employeeleaves`.`id` as leave_id,
		`lm_employeeleaves`.`empid`,
		 concat(employee.firstname,case when employee.middlename is not null then concat(' ',employee.middlename) end,
		 case when employee.lastname is not null then concat(' ',employee.lastname) end) as emp_name,
		`lm_employeeleaves`.`leavetype`,
		lm_leavesmaster.display_name,
		`lm_employeeleaves`.`fromdate`,
		`lm_employeeleaves`.`todate`,
		`lm_employeeleaves`.`fromhalfdayleave`,
		`lm_employeeleaves`.`tohalfdayleave`,
		`lm_employeeleaves`.`leavecount`,
		`lm_employeeleaves`.`appliedon`,
		`lm_employeeleaves`.`approvedby`,
		`lm_employeeleaves`.`leavereason`,
		`lm_employeeleaves`.`leavestatus`,
		`lm_employeeleaves`.`contactnumber`,
		`lm_employeeleaves`.`contactemail`,
		`lm_employeeleaves`.`contactaddress`,
		`lm_employeeleaves`.`leave_cycle_year`,
		`lm_employeeleaves`.`action_reason`,
		`lm_employeeleaves`.`approvedon`,
		`lm_employeeleaves`.`updatedon`
	FROM employee, lm_employeeleaves, lm_leaveapprovalstatustracker, lm_leavesmaster
	where lm_employeeleaves.empid = lm_leaveapprovalstatustracker.empid 
		and lm_leaveapprovalstatustracker.leaveid = lm_employeeleaves.id
		and employee.id = lm_employeeleaves.empid
		and lm_leavesmaster.id = lm_employeeleaves.leavetype
		and lm_leaveapprovalstatustracker.approverid = rm_id
		and case when ifnull(lm_employeeleaves.leave_cycle_year,0) <> 0 
				 then lm_employeeleaves.leave_cycle_year in ((select @present_year),(select @previous_year))
				 else ifnull(lm_employeeleaves.leave_cycle_year,0) = 0
				 end
		and lm_employeeleaves.leavestatus = 'Cancel Submitted';
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_leavetypes_data` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_leavetypes_data`()
	BEGIN
		select m.id,m.leavename,m.display_name,
		(select r.value from lm_rulevalues r where r.leavetypeid = m.id and
		r.ruleid = (select id from lm_rulemaster where rulename = 'LEAVES_MAX_COUNT_PER_YEAR')
		order by effectivefromdate desc limit 1) as leavetypecount,
		m.leavecolor,m.status 
		from lm_leavesmaster m
		where m.id in (select id from lm_leavesmaster where status = 'Active')
		order by m.leavename;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_leave_calendar_for_manager` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_leave_calendar_for_manager`(
	IN `rm_id` INT(11)
	)
	begin

	DECLARE vempid int(11);
	DECLARE vname varchar(255);
	DECLARE vleavetype int(11);
	declare vfromdate date;
	declare vtodate date;
	declare vfromhalfdayleave varchar(1);
	declare vtohalfdayleave varchar(1);    
	DECLARE temp_cursor CURSOR FOR select empid, empname,leavetype,fromdate,todate,fromhalfdayleave,tohalfdayleave  
								   from lm_employeeleaves_temp;

	SET @display_year = (select fn_get_leave_cycle_year()); -- get leave cycle year

	drop temporary table if exists lm_employeeleaves_temp;    
	create temporary table lm_employeeleaves_temp (
		empid int(11),
		empname varchar(255), 
		leavetype int(11),
		fromdate date,
		todate date,
		fromhalfdayleave varchar(16),
		tohalfdayleave varchar(16)
	);    

	INSERT INTO lm_employeeleaves_temp(empid,empname,leavetype,fromdate,todate,fromhalfdayleave,tohalfdayleave)
		SELECT lm_employeeleaves.empid, concat(employee.firstname,case when employee.middlename is not null then concat(' ',employee.middlename) end,
		 case when employee.lastname is not null then concat(' ',employee.lastname) end),
		 leavetype,fromdate,todate,fromhalfdayleave,tohalfdayleave FROM lm_employeeleaves, employee
		where employee.id = lm_employeeleaves.empid
		and lm_employeeleaves.empid in (SELECT e.id FROM employee e,employee_reportingmanagers rm WHERE e.id = rm.empid and rm.effectiveenddate  is null 
		and rm.reportingmanagerid = `rm_id`) and 
		ifnull(lm_employeeleaves.leave_cycle_year,0) = case when (lm_employeeleaves.leave_cycle_year is not null) then @display_year  
																else 0 end
		and lm_employeeleaves.leavestatus in ('Submitted','Approved');
	drop temporary table if exists leavecalendar;    
	create temporary table leavecalendar (
		empid int(11),
		ename varchar(255),
		edate date,
		ltype varchar(64),
		lname varchar(64),
		firsthalf int(1),
		secondhalf int(1),
		color varchar(64)
	);

	drop temporary table if exists temp_lm_leavesmaster;
	CREATE temporary TABLE `temp_lm_leavesmaster` (
	  `id` int(11) NOT NULL,
	  `display_name` varchar(64) not null,
	  `leavecolor` varchar(64), 
	  PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;

	insert into temp_lm_leavesmaster
	select lm_leavesmaster.id,lm_leavesmaster.display_name,lm_leavesmaster.leavecolor from lm_leavesmaster;

	SET @leave_cycle_month = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
								  select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
								  lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));    

	set @startdate = concat(@display_year,'-',@leave_cycle_month,'-01');
	set @current_month = month(current_timestamp());
	if(@leave_cycle_month = 1) then
			set @enddate = concat(@display_year,'-','12','-01');
		elseif ((@leave_cycle_month <> 1) and (@leave_cycle_month <= @current_month)) then
			set @enddate = concat((@display_year + 1),'-',(@leave_cycle_month - 1),'-01');
		elseif ((@leave_cycle_month <> 1) and (@leave_cycle_month > @current_month)) then
			set @enddate = concat((@display_year + 1),'-',(@leave_cycle_month - 1),'-01');
		end if;                          
		
		set @enddate = (select last_day(@enddate));

	while (@enddate > @startdate) do
		OPEN temp_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		SET vempid = 0;
		SET vname = '';
		SET vleavetype = 0;
		SET vfromhalfdayleave = '';
		set vtohalfdayleave = '';
		fetch temp_cursor into vempid,vname,vleavetype,vfromdate,vtodate,vfromhalfdayleave,vtohalfdayleave;
		if @startdate = vfromdate then
			insert into leavecalendar(empid,ename,edate,ltype,firsthalf,secondhalf,color) values
			(vempid,vname,@startdate,vleavetype,vfromhalfdayleave,0,(select temp_lm_leavesmaster.leavecolor from temp_lm_leavesmaster where temp_lm_leavesmaster.id = vleavetype));
		elseif ((@startdate > vfromdate) and (@startdate < vtodate)) then
			insert into leavecalendar(empid,ename,edate,ltype,firsthalf,secondhalf,color) values
			(vempid,vname,@startdate,vleavetype,1,1,(select temp_lm_leavesmaster.leavecolor from temp_lm_leavesmaster where temp_lm_leavesmaster.id = vleavetype));
		elseif @startdate = vtodate then
			insert into leavecalendar(empid,ename,edate,ltype,firsthalf,secondhalf,color) values
			(vempid,vname,@startdate,vleavetype,0,vtohalfdayleave,(select temp_lm_leavesmaster.leavecolor from temp_lm_leavesmaster where temp_lm_leavesmaster.id = vleavetype));
		end if;
		
		set @j = @j + 1;
		end while;
		close temp_cursor;

	set @startdate = date_add(@startdate, interval 1 day);
	end while;
	select empid,ename,edate,ltype,(select temp_lm_leavesmaster.display_name 
							  from temp_lm_leavesmaster 
							  where temp_lm_leavesmaster.id = ltype) as leave_name,
							  firsthalf,secondhalf,color
	from leavecalendar;

	drop temporary table lm_employeeleaves_temp;
	drop temporary table leavecalendar;
	drop temporary table temp_lm_leavesmaster;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_leave_cycle_last_month` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_leave_cycle_last_month`()
	begin
		set @id = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
		select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
		lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));
		set @year = year(current_timestamp());
		set @pmonth = month(current_timestamp());
		if(@id = 1) then
			set @id = 12;
		elseif ((@id <> 1) and (@pmonth >= @id)) then
			set @id = @id - 1;
			set @year = @year + 1;
		elseif ((@id <> 1) and (@pmonth < @id)) then
			set @id = @id - 1;
		end if;
		set @date_value = (select last_day(concat(@year,'-',@id,'-','01')));
		select @date_value as last_date, @id as last_month, @year as year_value;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_leave_cycle_year` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_leave_cycle_year`()
	begin
	set @start_month = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
					   select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
					   lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));
	set @current_year = year(current_timestamp());                   
	set @current_month = month(current_timestamp());
		if(@start_month = 1) then
			set @current_year = @current_year;
		elseif ((@start_month <> 1) and (@start_month <= @current_month)) then
			set @current_year = @current_year;
		elseif ((@start_month <> 1) and (@start_month > @current_month)) then
			set @current_year = @current_year - 1;
		end if;
	select @current_year;    
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_leave_types_to_add` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
CREATE  PROCEDURE `get_leave_cycle_year_options`(
)
begin
select leave_cycle_year_master.id as id, leave_cycle_year_master.leave_cycle_year_name as leave_cycle_year_name 
from leave_cycle_year_master;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_leave_types_to_add` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_leave_types_to_add`(
)
begin
	drop temporary table if exists leave_table;
	CREATE TEMPORARY TABLE leave_table(
		leave_id int(11),
		leave_name varchar(64), 
        display_name varchar(64),
		is_new int(1)
	);
	insert into leave_table(leave_id,leave_name,display_name)
	select lm_leavesmaster.id,lm_leavesmaster.leavename,lm_leavesmaster.display_name from lm_leavesmaster where lm_leavesmaster.status = 'Inactive';
	update leave_table
	set leave_table.is_new = case when exists (select lm_rulevalues.effectivefromdate from lm_rulevalues 
											where lm_rulevalues.leavetypeid = leave_table.leave_id 
											and lm_rulevalues.effectivefromdate is not null)
								then 0
								else 1
								end;
	select leave_id as id, leave_name as leavename, display_name, is_new from leave_table;
	
	DROP TEMPORARY TABLE leave_table;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_location_wise_employee_count` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_location_wise_employee_count`()
begin
select  cwl.location,count(emp.id) as count from employee emp
inner join employee_worklocations ew on ew.empid=emp.id
inner join companyworklocationsmaster cwl on cwl.id=ew.locationid
where emp.status=1 group by cwl.location;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_login_details` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_login_details`(in eid int(11))
begin
select el.id,el.login,el.password from employee e,employee_login el 
where  e.id=el.id and e.id=eid and el.status='Active' order by el.lastpasswordchangedate desc limit 1;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_manager_on_behalf_of_employee_attendance_regularizations` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
DELIMITER ;;
CREATE PROCEDURE `get_manager_on_behalf_of_employee_attendance_regularizations`(
	manager_employee_id int(11)
)
begin

		select a.id,a.empid,(select concat(firstname,' ',lastname) from employee where id=a.empid) as empname,a.applieddate,
		(select type from attendancetypesmaster where id=a.worktype) as worktype,(select shiftname from shiftsmaster 
		where id=a.shiftid) as shift,a.fromdate, a.todate,a.reason,a.raisedby as raisedbyid,(select concat(firstname,' ',
		lastname) from employee where id=a.raisedby) as raisedbyname, a.status 
		from employee_attendance_regularization a
		where a.raisedby = `manager_employee_id` 
		and a.empid !=`manager_employee_id` 
		and a.empid in (select empid from employee_reportingmanagers where reportingmanagerid=`manager_employee_id` and effectiveenddate is null)
		order by a.id desc;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_max_count_per_term_value` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_max_count_per_term_value`(
	in leavetype_id int(11)
	)
	BEGIN
		set @max_count = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id 
									from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_MAX_COUNT_PER_TERM')
									and lm_rulevalues.leavetypeid = leavetype_id order by lm_rulevalues.id desc limit 1);
		select @max_count as max_count;                             
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_modulescreenfunctionalities` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_modulescreenfunctionalities`()
	begin
	select JSON_ARRAYAGG(JSON_OBJECT(
		'module_id', mm.id  , 
		'module_name', mm.modulename, 
		'screen_id', sm.id, 
		'screen_name', sm.name, 
		'functionality_name',fm.functionalityname, 
		'screen_functionality_id', sfm.id
		)) as json_string
	FROM  screensmaster sm
	inner join modulesmaster mm on sm.moduleid = mm.id
	inner join screenfunctionalitiesmaster sfm on sfm.screenid=sm.id
	inner join functionalitiesmaster fm on fm.id=sfm.functionalityid;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_modules_screens` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_modules_screens`()
	begin
	SELECT JSON_ARRAYAGG(JSON_OBJECT('moduleid', t.moduleid, 'modulename', t.modulename, 'screens', t.screens)) AS json_value
	FROM (
	SELECT  m.id as moduleid,  m.modulename as modulename,
	JSON_ARRAYAGG(JSON_OBJECT('screenid', sm.id, 'screenname', sm.name)) AS screens 
	FROM modulesmaster m
	inner join screensmaster sm on sm.moduleid=m.id
	inner join screenfunctionalitiesmaster sfm on sfm.screenid=sm.id
	where m.effectivestartdate is not null
	GROUP BY m.id
	) t;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_monthly_payroll_data` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_monthly_payroll_data`(
	month_id int(11),
	year_value char(4),
	department_id int(11)
	)
	begin
	set @financial_year = (select fn_get_financial_year());
	set @date = (select cast(concat(year_value,'-',month_id,'-','15') as date));
	select sum(ifnull(total_gross_salary,0)) into @gross_salary
		from employee_gross_salary_details where employee_gross_salary_details.empid in
		(select employee_ctc_master.empid  from employee_ctc_master, employee_departments
		where employee_ctc_master.empid = employee_departments.empid
		and case when department_id is not null then (employee_departments.departmentid = department_id)
				 when department_id is null then (employee_departments.departmentid = employee_departments.departmentid)
				 end
		and case when employee_departments.effectiveenddate is null then
					  (cast(@date as date) >= cast(employee_departments.effectivestartdate as date))
				 when employee_departments.effectiveenddate is not null 
				 then (cast(@date as date) between cast(employee_departments.effectivestartdate as date) and cast(employee_departments.effectiveenddate as date))
				 end
		and case when employee_ctc_master.effective_to_date is null then
					  (cast(@date as date) >= cast(employee_ctc_master.effective_from_date as date))
				 when employee_ctc_master.effective_to_date is not null 
				 then (cast(@date as date) between cast(employee_ctc_master.effective_from_date as date) and cast(employee_ctc_master.effective_to_date as date))
				 end)
		and employee_gross_salary_details.financial_year = @financial_year
		and employee_gross_salary_details.month = month_id;
	select sum(ifnull(total_net_salary,0)) into @net_salary
		from employee_net_salary_details where employee_net_salary_details.empid in
		(select employee_ctc_master.empid  from employee_ctc_master, employee_departments
		where employee_ctc_master.empid = employee_departments.empid
		and case when department_id is not null then (employee_departments.departmentid = department_id)
				 when department_id is null then (employee_departments.departmentid = employee_departments.departmentid)
				 end
		and case when employee_departments.effectiveenddate is null then
					  (@date >= cast(employee_departments.effectivestartdate as date))
				 when employee_departments.effectiveenddate is not null 
				 then (@date between cast(employee_departments.effectivestartdate as date) and cast(employee_departments.effectiveenddate as date))
				 end
		and case when employee_ctc_master.effective_to_date is null then
					  (cast(@date as date) >= cast(employee_ctc_master.effective_from_date as date))
				 when employee_ctc_master.effective_to_date is not null 
				 then (cast(@date as date) between cast(employee_ctc_master.effective_from_date as date) and cast(employee_ctc_master.effective_to_date as date))
				 end)
		and employee_net_salary_details.financial_year = @financial_year
		and employee_net_salary_details.month = month_id;
	select count(employee_net_salary_details.empid) into @employee_count 
		from employee_net_salary_details where employee_net_salary_details.empid in
		(select employee_ctc_master.empid  from employee_ctc_master, employee_departments
		where employee_ctc_master.empid = employee_departments.empid
		and case when department_id is not null then (employee_departments.departmentid = department_id)
				 when department_id is null then (employee_departments.departmentid = employee_departments.departmentid)
				 end
		and case when employee_departments.effectiveenddate is null then
					  (@date >= cast(employee_departments.effectivestartdate as date))
				 when employee_departments.effectiveenddate is not null 
				 then (@date between cast(employee_departments.effectivestartdate as date) and cast(employee_departments.effectiveenddate as date))
				 end
		and case when employee_ctc_master.effective_to_date is null then
					  (cast(@date as date) >= cast(employee_ctc_master.effective_from_date as date))
				 when employee_ctc_master.effective_to_date is not null 
				 then (cast(@date as date) between cast(employee_ctc_master.effective_from_date as date) and cast(employee_ctc_master.effective_to_date as date))
				 end)
		and employee_net_salary_details.financial_year = @financial_year
		and employee_net_salary_details.month = month_id;  
	select sum(professional_tax_value) into @professional_tax
		from payroll_employee_professional_tax_details where payroll_employee_professional_tax_details.empid in            
		(select employee_ctc_master.empid  from employee_ctc_master, employee_departments
			where employee_ctc_master.empid = employee_departments.empid
			and case when department_id is not null then (employee_departments.departmentid = department_id)
				 when department_id is null then (employee_departments.departmentid = employee_departments.departmentid)
				 end
			and case when employee_departments.effectiveenddate is null then
						(@date >= cast(employee_departments.effectivestartdate as date))
					when employee_departments.effectiveenddate is not null 
					then (@date between cast(employee_departments.effectivestartdate as date) and cast(employee_departments.effectiveenddate as date))
					end
		and case when employee_ctc_master.effective_to_date is null then
					  (cast(@date as date) >= cast(employee_ctc_master.effective_from_date as date))
				 when employee_ctc_master.effective_to_date is not null 
				 then (cast(@date as date) between cast(employee_ctc_master.effective_from_date as date) and cast(employee_ctc_master.effective_to_date as date))
				 end)
		and payroll_employee_professional_tax_details.financial_year = @financial_year
		and payroll_employee_professional_tax_details.month = month_id;   
	select sum(ifnull(employee_provident_fund,0)) into @eprovident_fund
		from employee_net_salary_details where employee_net_salary_details.empid in
		(select employee_ctc_master.empid  from employee_ctc_master, employee_departments
		where employee_ctc_master.empid = employee_departments.empid
		and case when department_id is not null then (employee_departments.departmentid = department_id)
				 when department_id is null then (employee_departments.departmentid = employee_departments.departmentid)
				 end
		and case when employee_departments.effectiveenddate is null then
					  (@date >= cast(employee_departments.effectivestartdate as date))
				 when employee_departments.effectiveenddate is not null 
				 then (@date between cast(employee_departments.effectivestartdate as date) and cast(employee_departments.effectiveenddate as date))
				 end
		and case when employee_ctc_master.effective_to_date is null then
					  (cast(@date as date) >= cast(employee_ctc_master.effective_from_date as date))
				 when employee_ctc_master.effective_to_date is not null 
				 then (cast(@date as date) between cast(employee_ctc_master.effective_from_date as date) and cast(employee_ctc_master.effective_to_date as date))
				 end)
		and employee_net_salary_details.financial_year = @financial_year
		and employee_net_salary_details.month = month_id;    
	select @gross_salary as gross_salary,@net_salary as net_salary, @employee_count as employee_count,
		   cast((@gross_salary - @net_salary) as decimal(15,2)) as total_deductions, @professional_tax as professional_tax, @eprovident_fund as epf;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_monthly_payroll_data_for_graph` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_monthly_payroll_data_for_graph`(
	month_id int(11),
	year_value char(4)
	)
	begin
	set @financial_year = (select fn_get_financial_year());
	set @date = (select cast(concat(year_value,'-',month_id,'-','15') as date));
	select employee_departments.departmentid as department_id,departmentsmaster.deptname as deptname,sum(ifnull(total_gross_salary,0)) as sum
		from employee_gross_salary_details, employee_departments, departmentsmaster 
		where employee_gross_salary_details.empid in
		(select employee_ctc_master.empid  from employee_ctc_master, employee_departments
		where employee_ctc_master.empid = employee_departments.empid
		and case when employee_departments.effectiveenddate is null then
					  (@date >= cast(employee_departments.effectivestartdate as date))
				 when employee_departments.effectiveenddate is not null 
				 then (@date between cast(employee_departments.effectivestartdate as date) and cast(employee_departments.effectiveenddate as date))
				 end
		and case when employee_ctc_master.effective_to_date is null then
					  (cast(@date as date) >= cast(employee_ctc_master.effective_from_date as date))
				 when employee_ctc_master.effective_to_date is not null 
				 then (cast(@date as date) between cast(employee_ctc_master.effective_from_date as date) and cast(employee_ctc_master.effective_to_date as date))
				 end)
		and employee_gross_salary_details.financial_year = @financial_year
		and employee_gross_salary_details.month = month_id
		and employee_gross_salary_details.empid = employee_departments.empid
		and employee_departments.departmentid = departmentsmaster.id
		and case when employee_departments.effectiveenddate is null then
					  (@date >= cast(employee_departments.effectivestartdate as date))
				 when employee_departments.effectiveenddate is not null 
				 then (@date between cast(employee_departments.effectivestartdate as date) and cast(employee_departments.effectiveenddate as date))
				 end
		group by employee_departments.departmentid,departmentsmaster.deptname;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_months_for_financial_year` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_months_for_financial_year`(
	financial_year_value varchar(16)
	)
	begin
	drop temporary table if exists display_table;
	create temporary table display_table(
		display_value varchar(64),
		month_value int(2),
		year_value int(4)
	);
	set @current_month = (select month(current_timestamp()));
	if (financial_year_value is not null) then
		set @fyear = substr(financial_year_value,1,4);
		set @nyear = (cast(@fyear as unsigned) + 1);
		if (financial_year_value = (select fn_get_financial_year())) then
			IF ((select year(current_timestamp())) = @fyear) THEN
				set @x = 4;
				set @y = 0;
				set @y = @current_month;
				while (@x <= @y) do
					insert into display_table(display_value,month_value,year_value)
					select concat(monthname(str_to_date(@x,'%m')),' - ',@fyear), @x, @fyear;
					set @x = @x + 1;    
				end while;
			elseif ((select year(current_timestamp())) = @nyear) then    
				set @x = 4;
				set @y = 12;
				while (@x <= @y) do
					insert into display_table(display_value,month_value,year_value)
					select concat(monthname(str_to_date(@x,'%m')),' - ',@fyear), @x, @fyear;
					set @x = @x + 1;
				end while;
				set @p = 1;
				set @q = @current_month;
				while (@p <= @q) do
					insert into display_table(display_value,month_value,year_value)
					select concat(monthname(str_to_date(@p,'%m')),' - ',@nyear), @p, @nyear;
					set @p = @p + 1;
				end while;
			END IF;
			select * from display_table;
		else
			select concat(monthname(str_to_date(4,'%m')),' - ',@fyear) as display_value,4 as month_value,@fyear as year_value
			union
			select concat(monthname(str_to_date(5,'%m')),' - ',@fyear),5,@fyear
			union
			select concat(monthname(str_to_date(6,'%m')),' - ',@fyear),6,@fyear
			union
			select concat(monthname(str_to_date(7,'%m')),' - ',@fyear),7,@fyear
			union
			select concat(monthname(str_to_date(8,'%m')),' - ',@fyear),8,@fyear
			union
			select concat(monthname(str_to_date(9,'%m')),' - ',@fyear),9,@fyear
			union
			select concat(monthname(str_to_date(10,'%m')),' - ',@fyear),10,@fyear
			union
			select concat(monthname(str_to_date(11,'%m')),' - ',@fyear),11,@fyear
			union
			select concat(monthname(str_to_date(12,'%m')),' - ',@fyear),12,@fyear
			union
			select concat(monthname(str_to_date(1,'%m')),' - ',@nyear),1,@nyear
			union
			select concat(monthname(str_to_date(2,'%m')),' - ',@nyear),2,@nyear
			union
			select concat(monthname(str_to_date(3,'%m')),' - ',@nyear),3,@nyear;
		end if;
	end if;
	drop temporary table display_table;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_new_hire_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_new_hire_details`(in cid int)
	BEGIN
	select c.id,c.candidate_id ,c.firstname,c.middlename,c.lastname,c.personal_email,c.dateofjoin,c.hired_date,
		   c.designation,c.contact_number,c.alternatecontact_number, s.name status,c.comment
		  from ems_new_hire as c 
		  inner join statusmaster s on s.id=c.status
		where c.id <=> ifnull(cid,c.id)
		order by c.id desc;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_next_leave_date` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_next_leave_date`(
		IN `employee_id` INT(11),
		in `from_date` date
	)
	begin
		select fromdate,tohalfdayleave as first_half,fromhalfdayleave as second_half from lm_employeeleaves
		where lm_employeeleaves.empid = `employee_id` 
		and date(lm_employeeleaves.fromdate) > `from_date`
		and lm_employeeleaves.leavestatus in ('Approved','Submitted')
		order by lm_employeeleaves.fromdate limit 1; 
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_notice_period` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_notice_period`()
	begin
		  select  rv.id, rm.id ruleid,rm.rulename,rm.description
		 , (select val.value from ems_rulevalues as val where val.id=rv.id ) as value
		 -- ,rv.effectivefromdate 
		  from ems_rulemaster rm
		  right join (select  MAX(el.id) id,el.ruleid ruleid from ems_rulevalues el 
		  group by el.ruleid
		  )as  rv on rm.id =rv.ruleid
		  where rm.category="Offboarding" and rm.id=15;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_offboard_settings` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_offboard_settings`()
	begin
		  select  rv.id, rm.id ruleid,rm.rulename,rm.description
		 , (select val.value from ems_rulevalues as val where val.id=rv.id ) as value
		 -- ,rv.effectivefromdate 
		  from ems_rulemaster rm
		  right join (select  MAX(el.id) id,el.ruleid ruleid from ems_rulevalues el 
		  group by el.ruleid
		  )as  rv on rm.id =rv.ruleid
		  where rm.category="Offboarding";
				 
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_onboard_settings` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_onboard_settings`()
	begin
		  select  rv.id, rm.id ruleid,rm.rulename,rm.description
		 , (select val.value from ems_rulevalues as val where val.id=rv.id ) as value
		 -- ,rv.effectivefromdate 
		  from ems_rulemaster rm
		  right join (select  MAX(el.id) id,el.ruleid ruleid from ems_rulevalues el 
		  group by el.ruleid
		  )as  rv on rm.id =rv.ruleid
		  where rm.category="Onboarding";
				 
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_payroll_income_groups` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_payroll_income_groups`(
	)
	begin
		select 
		id,
		group_name,
		income_from_value,
		income_to_value,
		(select group_concat(display_name)
		from payroll_income_group_components_master
		where payroll_income_group_components_master.component_id in 
		(select payroll_salary_components_master.id from payroll_salary_components_master where payroll_salary_components_master.section_id = 1)
		and payroll_income_group_components_master.group_id = payroll_income_groups_master.id
		and payroll_income_group_components_master.effective_to_date is null
		group by payroll_income_group_components_master.group_id
		) as Earnings,
		(select group_concat(display_name)
		from payroll_income_group_components_master
		where payroll_income_group_components_master.component_id in 
		(select payroll_salary_components_master.id from payroll_salary_components_master where payroll_salary_components_master.section_id = 2)
		and payroll_income_group_components_master.group_id = payroll_income_groups_master.id
		and payroll_income_group_components_master.effective_to_date is null
		group by payroll_income_group_components_master.group_id
		) as Deductions,
		(select display_name
		from payroll_income_group_components_master
		where payroll_income_group_components_master.component_id in 
		(select payroll_salary_components_master.id from payroll_salary_components_master where payroll_salary_components_master.section_id = 3)
		and payroll_income_group_components_master.group_id = payroll_income_groups_master.id
		and payroll_income_group_components_master.effective_to_date is null
		group by payroll_income_group_components_master.group_id
		) as Loans,
		status as status
		from payroll_income_groups_master
		order by payroll_income_groups_master.id;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_payroll_messages` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_payroll_messages`(in `code` varchar(255),
	in `pagenumber` int,in `pagesize` int)
	begin
		if `code` is not null and `code`!='' then
			set @sql = concat('select *,(select count(*) from payroll_messages where code = ''',`code`,''') 
			as total from payroll_messages where code = ''',`code`,'''');
			prepare stmt from @sql;
			execute stmt;
			deallocate prepare stmt;
		else
			set @offset1 = pagesize*(pagenumber-1);
			set @count = (select count(*) from payroll_messages);
			set @sqltext = concat('select *,@count as total from payroll_messages ',' limit ',@offset1,',',pagesize);
			prepare stmt from @sqltext;
			execute stmt;
			deallocate prepare stmt;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_payroll_sections` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_payroll_sections`(
	)
	begin
	select id,section
	from
	payroll_sections_master;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_pay_groups_for_ctc` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_pay_groups_for_ctc`(ctc float)
	begin
		select 
		id,
		group_name as name,
		income_from_value as startrange,
		income_to_value as endrange,
		(select group_concat(display_name)
		from payroll_income_group_components_master
		where payroll_income_group_components_master.component_id in 
		(select payroll_salary_components_master.id from payroll_salary_components_master where payroll_salary_components_master.section_id = 1)
		and payroll_income_group_components_master.group_id = payroll_income_groups_master.id
		and payroll_income_group_components_master.effective_to_date is null
		group by payroll_income_group_components_master.group_id
		) as Earnings,
		(select group_concat(display_name)
		from payroll_income_group_components_master
		where payroll_income_group_components_master.component_id in 
		(select payroll_salary_components_master.id from payroll_salary_components_master where payroll_salary_components_master.section_id = 2)
		and payroll_income_group_components_master.group_id = payroll_income_groups_master.id
		and payroll_income_group_components_master.effective_to_date is null
		group by payroll_income_group_components_master.group_id
		) as Deductions
		from payroll_income_groups_master
		where status='Active' and ctc between income_from_value and income_to_value
		order by payroll_income_groups_master.id;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_pay_group_component_values` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_pay_group_component_values`(
	pigcm_id_value int
	)
	begin
	set @component_id = (select payroll_income_group_components_master.component_id from payroll_income_group_components_master 
						 where payroll_income_group_components_master.id = pigcm_id_value);
	if (pigcm_id_value is not null) then
		if not exists(select id from payroll_earning_components_formula_details 
						where payroll_earning_components_formula_details.pigcm_id = pigcm_id_value) then
		select payroll_income_groups_master.group_name as group_name, payroll_salary_components_master.component as component_name,
			payroll_income_group_components_master.display_name as display_name, 
			null as is_percentage_or_flat_amount,
			null as component_value,
			null as parent_component_id,
			payroll_income_group_components_master.id as pigcm_id,
			is_this_component_a_part_of_employee_salary_structure,
			calculate_on_pro_rata_basis,
			is_this_component_taxable,
			consider_for_esi_contribution,
			consider_for_epf_contribution,
			epf_always,
			epf_only_when_pf_wage_is_less_than_standard_pf_wage,
			show_this_component_in_payslip
		from payroll_income_group_components_master, payroll_income_groups_master, 
			 payroll_salary_components_master, payroll_earning_components_epf_configs_details
		where payroll_income_group_components_master.id = pigcm_id_value
		and payroll_income_group_components_master.group_id = payroll_income_groups_master.id
		and payroll_income_group_components_master.component_id = payroll_salary_components_master.id
		and payroll_income_group_components_master.id = payroll_earning_components_epf_configs_details.pigcm_id;
		else
			select payroll_income_groups_master.group_name as group_name, payroll_salary_components_master.component as component_name,
				payroll_income_group_components_master.display_name as display_name, 
				is_percentage_or_flat_amount,
				component_value,
				parent_component_id,
				payroll_income_group_components_master.id as pigcm_id,
				is_this_component_a_part_of_employee_salary_structure,
				calculate_on_pro_rata_basis,
				is_this_component_taxable,
				consider_for_esi_contribution,
				consider_for_epf_contribution,
				epf_always,
				epf_only_when_pf_wage_is_less_than_standard_pf_wage,
				show_this_component_in_payslip
			from payroll_income_group_components_master, payroll_income_groups_master, payroll_salary_components_master,
				payroll_earning_components_formula_details, payroll_earning_components_epf_configs_details
			where payroll_income_group_components_master.id = pigcm_id_value
			and payroll_income_group_components_master.group_id = payroll_income_groups_master.id
			and payroll_income_group_components_master.component_id = payroll_salary_components_master.id
			and payroll_earning_components_formula_details.pigcm_id = payroll_income_group_components_master.id
			and payroll_income_group_components_master.id = payroll_earning_components_epf_configs_details.pigcm_id;
		end if;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_pending_attendance` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_pending_attendance`(
		`manager_employee_id` int(11),
		`employee_id` int(11),
		`calendar_date` datetime
	)
	begin

		set @monthstartdate = `calendar_date`;
		set @monthstartdate = last_day(@monthstartdate) + interval 1 day - interval 1 month;
		set @monthenddate = (case when @monthstartdate=(last_day(current_date()) + interval 1 day - interval 1 month) then current_date() else last_day(@monthstartdate) end);
		-- create temp table to hold all dates in the given month
		create table datelist (
			datevalue datetime not null
		);
		-- create temp table to hold empids under a manager if any
		create table manageremployees (
			mempid int(11)
		);
		set @monthstarttemp = @monthstartdate;

		while (@monthstarttemp <= @monthenddate) do
			insert into datelist values(@monthstarttemp);
			set @monthstarttemp = @monthstarttemp + interval 1 day;
		end while;
		if (`manager_employee_id` is not null) then
			insert into manageremployees
			SELECT e.id 
			FROM employee e,employee_reportingmanagers rm
			WHERE e.id = rm.empid
			and rm.effectiveenddate  is null
			and rm.reportingmanagerid=`manager_employee_id`
			order by e.firstname, e.lastname; 
		else 
			insert into manageremployees values(`employee_id`);
			
		end if;
		
		-- now read the temp table data to iterate
		select * from (
		select m.mempid as id,(select concat(firstname,' ',lastname) from employee where id=m.mempid) as empname,d.datevalue as attendancedate, (select shiftname from shiftsmaster where id=(select shiftid from employee_shift_details where empid=m.mempid and todate is null)) as shift
		from datelist d,manageremployees m
		where d.datevalue not in (select attendancedate from employee_attendance where empid in (select mempid from manageremployees))) b order by attendancedate,id;
			
		drop table datelist;
		drop table manageremployees;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_pending_attendance_regularizations` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_pending_attendance_regularizations`(
		manager_employee_id int(11)
	)
	begin

		select a.id,(select concat(firstname,' ',lastname) from employee where id=a.empid) as empname,a.applieddate,(select type from attendancetypesmaster where id=a.worktype) as worktype,(select shiftname from shiftsmaster where id=a.shiftid) as shift,a.fromdate, a.todate,a.reason,a.raisedby as raisedbyid,(select concat(firstname,' ',lastname) from employee where id=a.raisedby) as raisedbyname, a.approvercomments as comment,a.status 
		from employee_attendance_regularization a
		where  a.status = 'Submitted' and
		a.empid in (select empid from employee_reportingmanagers where reportingmanagerid=`manager_employee_id` and effectiveenddate is null);

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_pending_attendance_regularizations_v2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_pending_attendance_regularizations_v2`(
		manager_employee_id int(11)
	)
	begin

		select a.id,a.applieddate,(select type from attendancetypesmaster where id=a.worktype) as worktype,(select shiftname from shiftsmaster where id=a.shiftid) as shift,a.fromdate, a.todate,a.reason,a.raisedby as raisedbyid,(select concat(firstname,' ',lastname) from employee where id=a.raisedby) as raisedbyname, a.approvercomments as comment,a.status 
		from employee_attendance_regularization a
		where  a.status = 'Submitted' and
		a.empid in (select empid from employee_reportingmanagers where reportingmanagerid=`manager_employee_id` and effectiveenddate is null);

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_programs_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_programs_master`(in pid int)
	begin
		select p.id,
			p.name,
			p.description,
			p.status,
			s.schedule_date,
			(case when current_date()<=s.schedule_date then 1 else 0 end) as isActive 
		from ems_programs_master p, ems_program_schedules s
		where s.program_id=p.id
		and p.id <=> ifnull(pid,p.id);
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_program_schedules` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_program_schedules`(scheduleid int,programid int)
	begin
			 update ems_program_schedules set status='Finished'
			 where CONCAT(schedule_date,' ',schedule_endtime)<=current_timestamp() and status in ('Scheduled','Rescheduled') ;
		select s.id,
			s.program_id,
			(select description from ems_programs_master where id = s.program_id) as program_name,
			s.department,
			(select deptname from departmentsmaster where id=s.department) as department_name,
			s.designation, 
			(select designation from designationsmaster where id=s.designation) as designation_name,
			s.conducted_by,
			get_employee_name(s.conducted_by) as conducted_by_name,
			s.schedule_date,
			s.schedule_starttime,
			s.schedule_endtime,
			s.description ,
			status,
			s.reason
		from ems_program_schedules s
		where id = ifnull(scheduleid,id) 
		and program_id <=> ifnull(programid,program_id)
		order by id desc;
	  --  and CONCAT(schedule_date,' ',schedule_endtime)>=current_timestamp();
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_program_tasks` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_program_tasks`(tid int,programid int)
	begin
		select * from ems_program_tasks where id <=> ifnull(tid,id) and program_id <=> ifnull(programid,program_id);
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_reason_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_reason_master`(in reasonid int)
	begin
		select r.id,reason,r.status from ems_reason_master r where id <=> ifnull(reasonid,id);
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_recognition_messages` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_recognition_messages`(in recognition_type_id int)
	BEGIN
		select rm.id,rm.message
		from recognition_message_master rm
		where rm.status='Active' and rm.recognition_type_id =recognition_type_id;
	  END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_recognition_messages_for_employee_type` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_recognition_messages_for_employee_type`(in `empid` int, `typeid` int)
	begin
	   declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; 
			
			select get_employee_name(e.id) as empname, rtm.recognition_type,count(erm.id) as count
			from  employee_recognition_message erm
			inner join  employee e on e.id=erm.recognition_reciever_empid
			inner join recognition_type_master rtm on rtm.id=erm.recognition_type_id
			where erm.recognition_reciever_empid=IFNULL(`empid`,erm.recognition_reciever_empid) 
			and erm.recognition_type_id=ifnull(`typeid`,erm.recognition_type_id)
			group by e.id,rtm.recognition_type;    
				
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_recognition_types` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_recognition_types`()
	BEGIN
		select rtm.id,rtm.recognition_type
		from recognition_type_master rtm
		where rtm.status='Active';
	  END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_reporting_manager_for_emp` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_reporting_manager_for_emp`(IN `empid` int)
	begin

			select e.id,CONCAT(e.firstname, " ", e.middlename, " ", e.lastname) as managername 
				  ,e.empid,e.contactnumber , e.officeemail
			from  employee e 
			inner join employee_reportingmanagers rm on  e.id = rm.reportingmanagerid  
			and rm.effectiveenddate is null and  rm.empid =`empid`;
			
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_report_for_payroll_processing` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_report_for_payroll_processing`(employeeid int,chosendate date)
	begin

		set @monthstartdate = last_day(chosendate) + interval 1 day - interval 1 month;
		set @monthenddate = last_day(chosendate);
		if  (current_date() < @monthenddate) then
			set @monthenddate = current_date();
		end if;

		set @temp = 0;
		drop temporary table if exists emp_balance_totals;
		drop temporary table if exists emp_temp;
		
		create temporary table emp_temp (id int(11) auto_increment not null,emp_id int(11), key(id));
		insert into emp_temp(emp_id)
		select id from employee where status in (1); -- ('1','Active');
		
		create temporary table emp_balance_totals (emp_id int(11),lopcount decimal(5,2),approvedleavescount decimal(5,2),absentcount decimal(5,2));

		set @monthdayscnt = case when month(chosendate)<>month(current_date()) then (SELECT DAYOFMONTH(LAST_DAY(@monthstartdate))) else (select datediff(@monthenddate,@monthstartdate)+1) end;
	   if employeeid is null then
			set @cnt = (select count(*) from employee where status in (1)); -- ','Active'));
			set @tot = @cnt;
			while (@tot>=0) do
				set @temp = 0.00;
				set @eid = (select emp_id from emp_temp where id=((@cnt-@tot)+1));
				
				set @empattdaycount = (select count(distinct attendancedate) from employee_attendance where empid=@eid and attendancedate between @monthstartdate and  @monthenddate);
				set @empabsentcnt = (@monthdayscnt - @empattdaycount);
				set @offdaysworkedcount = 0;
				
				-- weekoffs 
				set @weekoffscount = 0;
				set @monthstarttemp = @monthstartdate;
				while (@monthstarttemp<=@monthenddate) do
					set @weekoffscount = @weekoffscount + (case when exists(select * from employee_weekoffs v
															where ( @monthstarttemp between v.effectivefromdate and v.effectivetodate)
															and dayofweek(@monthstarttemp) in (ifnull(v.weekoffday1,0),ifnull(v.weekoffday2,0),ifnull(v.weekoffday3,0))
															and empid = @eid order by empid desc) then 1 else 0 end) ; 	
					-- handle employee worked on weekoff day 
					set @offdaysworkedcount = @offdaysworkedcount + (case when exists(select * from employee_weekoffs v
															where ( @monthstarttemp between v.effectivefromdate and v.effectivetodate)
															and dayofweek(@monthstarttemp) in (ifnull(v.weekoffday1,0),ifnull(v.weekoffday2,0),ifnull(v.weekoffday3,0))
															and empid = @eid and (select count(*) from employee_attendance where empid=@eid and attendancedate=@monthstarttemp)>0 order by empid desc) then 1 else 0 end) ;
															
					set @monthstarttemp = @monthstarttemp + interval 1 day;
				end while;

				-- holidays
				set @holidaystotal = 0;
				select count(*) into @holidaystotal
				from (select m.date as date_value,m.description as description
				FROM holidaysmaster m, companyworklocationsmaster v  
				WHERE m.location = v.city 
				and v.id =(select s.locationid from employee_worklocations s where empid = @eid order by id desc limit 1)
				and m.leave_cycle_year = (select fn_get_leave_cycle_year())) v
				where v.date_value between @monthstartdate and @monthenddate;
				
				-- handle employee worked on holiday 
				set @offdaysworkedcount = @offdaysworkedcount + (select count(*) 
					from (select m.date as date_value,m.description as description
					FROM holidaysmaster m, companyworklocationsmaster v  
					WHERE m.location = v.city 
					and v.id =(select s.locationid from employee_worklocations s where empid = @eid order by id desc limit 1)
					and m.leave_cycle_year = (select fn_get_leave_cycle_year())) v
					where v.date_value in (select attendancedate from employee_attendance where empid=@eid and attendancedate between @monthstartdate and @monthenddate)
				);
				-- add offdays worked count in absents count
				set @empabsentcnt = @empabsentcnt + @offdaysworkedcount;
				
				-- approved leaves count
				set @approved_leaves_count = 0;
				set @monthstarttemp = @monthstartdate;
				while (@monthstarttemp<=@monthenddate) do
					set @approved_leaves_count = @approved_leaves_count + (case when exists(select * from lm_employeeleaves where empid=@eid 
												and leavestatus = 'Approved' and @monthstarttemp between date(fromdate) and date(todate)) then 1 else 0 end);
					set @monthstarttemp = @monthstarttemp + interval 1 day;
				end while;
				-- loss of pay count
				set @monthstarttemp = @monthstartdate;
				set @lopcount = 0;
				while (@monthstarttemp<=@monthenddate) do
					set @lopcount = @lopcount +  (case when exists(select * from lm_employeeleaves where empid = @eid and leavetype = (select id from lm_leavesmaster where leavename like '%loss of pay%' and status='Active') 
											and leavestatus = 'Approved' and @monthstarttemp between date(fromdate) and date(todate)) then 1 else 0 end);
					set @monthstarttemp = @monthstarttemp + interval 1 day;
				end while;
				
				insert into emp_balance_totals
				select @eid,@lopcount,@approved_leaves_count,(@empabsentcnt - @holidaystotal - @weekoffscount - @approved_leaves_count);

				set @tot = @tot - 1;
			end while;
		else
			-- weekoffs 
			set @weekoffscount = 0;
			set @approved_leaves_count = 0;
			set @monthstarttemp = @monthstartdate;
			set @offdaysworkedcount = 0;
			while (@monthstarttemp<=@monthenddate) do
				set @weekoffscount = @weekoffscount + (case when exists(select * from employee_weekoffs v
														where ( @monthstarttemp between v.effectivefromdate and v.effectivetodate)
														and dayofweek(@monthstarttemp) in (ifnull(v.weekoffday1,0),ifnull(v.weekoffday2,0),ifnull(v.weekoffday3,0))
														and empid = employeeid order by empid desc) then 1 else 0 end) ; 	
				-- handle employee worked on weekoff day 
				set @offdaysworkedcount = @offdaysworkedcount + (case when exists(select * from employee_weekoffs v
														where ( @monthstarttemp between v.effectivefromdate and v.effectivetodate)
														and dayofweek(@monthstarttemp) in (ifnull(v.weekoffday1,0),ifnull(v.weekoffday2,0),ifnull(v.weekoffday3,0))
														and empid = employeeid and (select count(*) from employee_attendance where empid=employeeid and attendancedate=@monthstarttemp)>0 order by empid desc) then 1 else 0 end) ;
																											
				set @monthstarttemp = @monthstarttemp + interval 1 day;
			end while;
	  
			-- holidays
			set @holidaystotal = 0;
			select count(*) into @holidaystotal
			from (select m.date as date_value,m.description as description
			FROM holidaysmaster m, companyworklocationsmaster v  
			WHERE m.location = v.city 
			and v.id =(select s.locationid from employee_worklocations s where empid = employeeid order by id desc limit 1)
			and m.leave_cycle_year = (select fn_get_leave_cycle_year())) v
			where v.date_value between @monthstartdate and @monthenddate;

			-- handle employee worked on holiday 
			set @offdaysworkedcount = @offdaysworkedcount + (select count(*) 
				from (select m.date as date_value,m.description as description
				FROM holidaysmaster m, companyworklocationsmaster v  
				WHERE m.location = v.city 
				and v.id =(select s.locationid from employee_worklocations s where empid = employeeid order by id desc limit 1)
				and m.leave_cycle_year = (select fn_get_leave_cycle_year())) v
				where v.date_value in (select attendancedate from employee_attendance where empid=employeeid and attendancedate between @monthstartdate and @monthenddate)
			);
			
			set @empattdaycount = (select ifnull(count(distinct attendancedate),0) from employee_attendance where empid=employeeid and attendancedate between @monthstartdate and  @monthenddate);
			set @empabsentcnt = (@monthdayscnt - @empattdaycount );
			
			-- add offdays worked count in absents count
			set @empabsentcnt = @empabsentcnt + @offdaysworkedcount;
			
			-- approved leaves count
			set @monthstarttemp = @monthstartdate;
			while (@monthstarttemp<=@monthenddate) do
				set @approved_leaves_count = @approved_leaves_count + (case when exists(select * from lm_employeeleaves where empid=employeeid 
											and leavestatus = 'Approved' and @monthstarttemp between date(fromdate) and date(todate)) then 1 else 0 end);
				set @monthstarttemp = @monthstarttemp + interval 1 day;
			end while;
			
			-- loss of pay count
			set @monthstarttemp = @monthstartdate;
			set @lopcount = 0;
			while (@monthstarttemp<=@monthenddate) do
				set @lopcount = @lopcount +  (case when exists(select * from lm_employeeleaves where empid = employeeid and leavetype = (select id from lm_leavesmaster where leavename like '%loss of pay%' and status='Active') 
										and leavestatus = 'Approved' and @monthstarttemp between date(fromdate) and date(todate)) then 1 else 0 end);
				set @monthstarttemp = @monthstarttemp + interval 1 day;
			end while;
			
			insert into emp_balance_totals 
			select employeeid,@lopcount,@approved_leaves_count,(@empabsentcnt - @holidaystotal - @weekoffscount - @approved_leaves_count);
		end if;
		select  distinct 	e.id,
							e.empid,
							get_employee_name(e.id) as empname,
							/*(case when (select count(*) from lm_employeeleaves where empid = ifnull(employeeid,e.id) and leavetype = (select id from lm_leavesmaster where leavename like '%loss of pay%' and status='Active') 
										and ((fromdate between @monthstartdate and @monthenddate or todate between @monthstartdate and  @monthenddate) or (fromdate > @monthstartdate and todate < @monthenddate)))>0 
									then (select sum(leavecount) from lm_employeeleaves where empid = ifnull(employeeid,e.id) and leavetype = (select id from lm_leavesmaster where leavename like '%loss of pay%' and status='Active') and leavestatus='Approved' 
										and ((fromdate between @monthstartdate and  @monthenddate or todate between @monthstartdate and  @monthenddate) or (fromdate > @monthstartdate and todate < @monthenddate))) 
									else 0 end)*/
							t.lopcount as lopcount,
							t.approvedleavescount as approved_leaves,
							t.absentcount as absents
		
		from employee e,emp_balance_totals t
		where e.id = ifnull(employeeid,e.id)
		and e.id = t.emp_id
		group by e.id 
		order by e.id;
		
		drop temporary table emp_balance_totals;
		drop temporary table emp_temp;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_resignation_data` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_resignation_data`(in resgid int, in employee_id int(11), in manager_employee_id int(11))
	begin
		 if(employee_id is not null) then
			
			select resg.id,e.id as empid,resg.reason_id, CONCAT(e.firstname, " ", e.middlename, " ", e.lastname) as empname,e.empid as empcode,date(resg.applied_date) applied_date,resg.notice_period, 
			date(resg.original_relieving_date) original_relieving_date,date(resg.requested_relieving_date) requested_relieving_date, res.reason,
			resg.comment, resg.status 
			from ems_employee_resignations resg
			inner join employee e on e.id=resg.empid
			inner join ems_reason_master res on res.id=resg.reason_id
			where resg.empid= employee_id order by resg.id desc;
		
		else if (manager_employee_id is not null) then
		
			select resg.id,e.id as empid,resg.reason_id,CONCAT(e.firstname, " ", e.middlename, " ", e.lastname) as empname,e.empid as empcode,date(resg.applied_date) applied_date,resg.notice_period, 
			date(resg.original_relieving_date) original_relieving_date,date(resg.requested_relieving_date) requested_relieving_date, res.reason,
			resg.comment, resg.status 
			from ems_employee_resignations resg
			inner join employee e on e.id=resg.empid
			inner join ems_reason_master res on res.id=resg.reason_id
			and employee.id = employee_reportingmanagers.empid
			and employee_reportingmanagers.effectiveenddate is null
			and employee_reportingmanagers.reportingmanagerid = manager_employee_id order by resg.id desc;
		
		else if (resgid is not null) then
		
			select resg.id,e.id as empid,resg.reason_id,CONCAT(e.firstname, " ", e.middlename, " ", e.lastname) as empname,e.empid as empcode,date(resg.applied_date) applied_date,resg.notice_period, 
			date(resg.original_relieving_date) original_relieving_date,date(resg.requested_relieving_date) requested_relieving_date, res.reason,resg.comment, resg.status 
			from ems_employee_resignations resg
			inner join employee e on e.id=resg.empid
			inner join ems_reason_master res on res.id=resg.reason_id
			where resg.id =resgid order by resg.id desc;
		else
			 select resg.id,e.id as empid,resg.reason_id,CONCAT(e.firstname, " ", e.middlename, " ", e.lastname) as empname,e.empid as empcode,date(resg.applied_date) applied_date,resg.notice_period, 
			date(resg.original_relieving_date) original_relieving_date,date(resg.requested_relieving_date) requested_relieving_date, res.reason,
			resg.comment, resg.status 
			from ems_employee_resignations resg
			inner join employee e on e.id=resg.empid
			inner join ems_reason_master res on res.id=resg.reason_id 
			order by resg.id desc;
			
		end if;
		end if;
		end if;
		end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_salary_components` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_salary_components`(
	vsection_id integer(11)
	)
	begin
	if (vsection_id is not null) then
		select payroll_salary_components_master.id,payroll_sections_master.section,payroll_salary_components_master.component
		from payroll_salary_components_master, payroll_sections_master
		where payroll_salary_components_master.section_id = payroll_sections_master.id
		and payroll_sections_master.id = vsection_id;
	end if;    
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_salary_components_for_pay_group` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_salary_components_for_pay_group`(
	paygroup_id integer(11)
	)
	begin
	if (paygroup_id is not null) then
		select g.group_name as group_name,psm.section,v.id as pigcm_id ,s.id as component_id,s.component as component_name,
		(select
		case when is_percentage_or_flat_amount = 1 then concat(component_value,'% of ',(case when parent_component_id = '15' then 'CTC'
																							when parent_component_id = '1' then 'Basic Salary'
																							end))
			 when is_percentage_or_flat_amount = 0 then concat(component_value,' Flat Amount')
			 end
		from payroll_earning_components_formula_details q where v.id = q.pigcm_id)     
		as calculation_type,
			   v.consider_for_esi_contribution as esi,v.consider_for_epf_contribution as epf, v.status
		from payroll_salary_components_master s, 
		payroll_income_groups_master g, 
		payroll_income_group_components_master v,
		payroll_sections_master psm
		where s.id = v.component_id
		and v.group_id = g.id
		and g.id = paygroup_id
		and psm.id = s.section_id
		and v.effective_to_date is null;
	end if;    
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_screens_for_employee` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_screens_for_employee`(IN empid int)
	BEGIN
	if exists (select rolesmaster.isEditable from rolesmaster where rolesmaster.id in (select employee_roles.role_id 
						from employee_roles where employee_roles.employee_id = `empid`)) then
    set @isEditable = 1; 
    end if;
						
	drop temporary table  if exists ftable;
	create temporary table ftable(
		id int(11),
		modulename varchar(64),
		dashboard_order int(11),
		iconpath varchar(255),
		menu_items varchar(15000),
		default_url varchar(1000)
	);
    
    if exists(select employee_roles.role_id from employee_roles where employee_roles.employee_id = `empid` and employee_roles.role_id in(4))then
    
	insert into ftable (id,modulename,dashboard_order,iconpath) 
	select m.id ,m.modulename,m.dashboard_order,m.iconpath from modulesmaster as m 
	where case when m.effectiveenddate is null then (m.effectivestartdate is not null and m.effectiveenddate is null)
			else (curdate() between m.effectivestartdate and m.effectiveenddate) end;
	
    update ftable, screensmaster, modulesmaster
    set ftable.default_url = screensmaster.routename
    where ftable.modulename = modulesmaster.modulename
    and modulesmaster.id = screensmaster.moduleid
    and screensmaster.name like 'Employee Dashboard';
	
	drop temporary table if exists json_table;
	create temporary table json_table(
	parentrole int(11),
	roleid varchar(10),
	role_name varchar(128),
	screen_id int(11),
	menu_order int(11),
	screen_name varchar(128),
	routename varchar(64),
	modulename varchar(64)
	);
    
	if (@isEditable = 1) then
	insert into json_table(parentrole,roleid,role_name,screen_id,menu_order,screen_name,routename,modulename)       
	select s.parentrole as parentrole, '' as rid, 'Employee' as rname, s.id as screenid, s.menu_order as menu_order, s.name as sname,
		s.routename as routename, m.modulename as modulename from
		screensmaster s, modulesmaster m
		where s.id in (
		select sm.screenid from screenfunctionalitiesmaster sm where sm.id in
		(select screenfunctionalityid from rolescreenaccess_common))
		and s.moduleid = m.id
		order by menu_order asc;
    end if;
    insert into json_table(parentrole,roleid,role_name,screen_id,menu_order,screen_name,routename,modulename)
	select distinct s.parentrole as parentrole, cast(r.id as char) as rid, r.name as rname, s.id as screenid, s.menu_order as menu_order, s.name as sname,
		s.routename as routename, m.modulename as modulename from
		screensmaster s, screenfunctionalitiesmaster sfm, rolescreenaccess rs, rolesmaster r, modulesmaster m
		where s.id in (
		select sm.screenid from screenfunctionalitiesmaster sm where sm.id in
		(select screenfunctionalityid from rolescreenaccess where rolescreenaccess.roleid in 
        (select employee_roles.role_id from employee_roles where employee_roles.employee_id = `empid` and 
         case when employee_roles.effective_to_date is null
              then curdate() >= employee_roles.effective_from_date
              else curdate() between employee_roles.effective_from_date and employee_roles.effective_to_date
              end)))
		and s.id = sfm.screenid
        and sfm.id = rs.screenfunctionalityid
        and rs.roleid = r.id
        and s.moduleid = m.id
		and r.id in (select employee_roles.role_id from employee_roles where employee_roles.employee_id = `empid`)
        order by rname, modulename asc, menu_order asc;    
				
	update ftable set menu_items=(select  json_unquote(json_arrayagg(json_object (
		"parentrole",	(select rolesmaster.name from rolesmaster where rolesmaster.id = d.parentrole), 
		"roleid", 		d.roleid, 
		"role_name",	d.role_name,
		"screenid",		d.screen_id,
		"menu_order",	d.menu_order,
		"screen_name",	d.screen_name,
		"routename",	d.routename,
		"functionalities", (select json_unquote(json_arrayagg(json_object(
							'functionalityid',sf.functionalityid,
							'functionalityname',f.functionalityname 
							)))
							from screenfunctionalitiesmaster sf,functionalitiesmaster f
							where sf.id in (select rolescreenaccess.screenfunctionalityid from rolescreenaccess where rolescreenaccess.roleid in
                                            (select employee_roles.role_id from employee_roles where employee_roles.employee_id = empid and 
											 case when employee_roles.effective_to_date is null
												then curdate() >= employee_roles.effective_from_date
												else curdate() between employee_roles.effective_from_date and employee_roles.effective_to_date
												end)
                                            union
											select rolescreenaccess_common.screenfunctionalityid from rolescreenaccess_common)
                            and sf.screenid = d.screen_id and sf.functionalityid = f.id )
		)))
		from json_table as d
		where ftable.modulename = d.modulename);
	
	select id, modulename, dashboard_order, iconpath, menu_items, default_url from ftable order by dashboard_order;
	drop temporary table ftable;
    
    else
    
	insert into ftable (id,modulename,dashboard_order,iconpath) 
	select m.id ,m.modulename,m.dashboard_order,m.iconpath from modulesmaster as m 
	where case when m.effectiveenddate is null then (m.effectivestartdate is not null and m.effectiveenddate is null)
			else (curdate() between m.effectivestartdate and m.effectiveenddate) end and m.id<>10;
	
    update ftable, screensmaster, modulesmaster
    set ftable.default_url = screensmaster.routename
    where ftable.modulename = modulesmaster.modulename
    and modulesmaster.id = screensmaster.moduleid
    and screensmaster.name like 'Employee Dashboard';
	
	drop temporary table if exists json_table;
	create temporary table json_table(
	parentrole int(11),
	roleid varchar(10),
	role_name varchar(128),
	screen_id int(11),
	menu_order int(11),
	screen_name varchar(128),
	routename varchar(64),
	modulename varchar(64)
	);
    
	if (@isEditable = 1) then
	insert into json_table(parentrole,roleid,role_name,screen_id,menu_order,screen_name,routename,modulename)       
	select s.parentrole as parentrole, '' as rid, 'Employee' as rname, s.id as screenid, s.menu_order as menu_order, s.name as sname,
		s.routename as routename, m.modulename as modulename from
		screensmaster s, modulesmaster m
		where s.id in (
		select sm.screenid from screenfunctionalitiesmaster sm where sm.id in
		(select screenfunctionalityid from rolescreenaccess_common))
		and s.moduleid = m.id
		order by menu_order asc;
    end if;
    insert into json_table(parentrole,roleid,role_name,screen_id,menu_order,screen_name,routename,modulename)
	select distinct s.parentrole as parentrole, cast(r.id as char) as rid, r.name as rname, s.id as screenid, s.menu_order as menu_order, s.name as sname,
		s.routename as routename, m.modulename as modulename from
		screensmaster s, screenfunctionalitiesmaster sfm, rolescreenaccess rs, rolesmaster r, modulesmaster m
		where s.id in (
		select sm.screenid from screenfunctionalitiesmaster sm where sm.id in
		(select screenfunctionalityid from rolescreenaccess where rolescreenaccess.roleid in 
        (select employee_roles.role_id from employee_roles where employee_roles.employee_id = `empid` and 
         case when employee_roles.effective_to_date is null
              then curdate() >= employee_roles.effective_from_date
              else curdate() between employee_roles.effective_from_date and employee_roles.effective_to_date
              end)))
		and s.id = sfm.screenid
        and sfm.id = rs.screenfunctionalityid
        and rs.roleid = r.id
        and s.moduleid = m.id
		and r.id in (select employee_roles.role_id from employee_roles where employee_roles.employee_id = `empid`)
        order by rname, modulename asc, menu_order asc;    
				
	update ftable set menu_items=(select  json_unquote(json_arrayagg(json_object (
		"parentrole",	(select rolesmaster.name from rolesmaster where rolesmaster.id = d.parentrole), 
		"roleid", 		d.roleid, 
		"role_name",	d.role_name,
		"screenid",		d.screen_id,
		"menu_order",	d.menu_order,
		"screen_name",	d.screen_name,
		"routename",	d.routename,
		"functionalities", (select json_unquote(json_arrayagg(json_object(
							'functionalityid',sf.functionalityid,
							'functionalityname',f.functionalityname 
							)))
							from screenfunctionalitiesmaster sf,functionalitiesmaster f
							where sf.id in (select rolescreenaccess.screenfunctionalityid from rolescreenaccess where rolescreenaccess.roleid in
                                            (select employee_roles.role_id from employee_roles where employee_roles.employee_id = empid and 
											 case when employee_roles.effective_to_date is null
												then curdate() >= employee_roles.effective_from_date
												else curdate() between employee_roles.effective_from_date and employee_roles.effective_to_date
												end)
                                            union
											select rolescreenaccess_common.screenfunctionalityid from rolescreenaccess_common)
                            and sf.screenid = d.screen_id and sf.functionalityid = f.id )
		)))
		from json_table as d
		where ftable.modulename = d.modulename);
	
	select id, modulename, dashboard_order, iconpath, menu_items, default_url from ftable order by dashboard_order;
	drop temporary table ftable;
    end if;    
	END ;;
	DELIMITER ;
    
    DELIMITER ;;
	CREATE PROCEDURE `get_screens_for_super_admin`(IN empid int)
	BEGIN
if exists (select rolesmaster.isEditable from rolesmaster where rolesmaster.id in (select employee_roles.role_id 
						from employee_roles where employee_roles.employee_id = `empid`)) then
    set @isEditable = 1; 
    end if;
						
	drop temporary table  if exists ftable;
	create temporary table ftable(
		id int(11),
		modulename varchar(64),
		dashboard_order int(11),
		iconpath varchar(255),
		menu_items varchar(15000),
		default_url varchar(1000)
	);
    
	insert into ftable (id,modulename,dashboard_order,iconpath) 
	select m.id ,m.modulename,m.dashboard_order,m.iconpath from modulesmaster as m 
	where case when m.effectiveenddate is null then (m.effectivestartdate is not null and m.effectiveenddate is null)
			else (curdate() between m.effectivestartdate and m.effectiveenddate) end and m.id=10;
	
    update ftable, screensmaster, modulesmaster
    set ftable.default_url = screensmaster.routename
    where ftable.modulename = modulesmaster.modulename
    and modulesmaster.id = screensmaster.moduleid
    and screensmaster.name like 'Employee Dashboard';
	
	drop temporary table if exists json_table;
	create temporary table json_table(
	parentrole int(11),
	roleid varchar(10),
	role_name varchar(128),
	screen_id int(11),
	menu_order int(11),
	screen_name varchar(128),
	routename varchar(64),
	modulename varchar(64)
	);
    
	if (@isEditable = 1) then
	insert into json_table(parentrole,roleid,role_name,screen_id,menu_order,screen_name,routename,modulename)       
	select s.parentrole as parentrole, '' as rid, 'Employee' as rname, s.id as screenid, s.menu_order as menu_order, s.name as sname,
		s.routename as routename, m.modulename as modulename from
		screensmaster s, modulesmaster m
		where s.id in (
		select sm.screenid from screenfunctionalitiesmaster sm where sm.id in
		(select screenfunctionalityid from rolescreenaccess_common))
		and s.moduleid = m.id
		order by menu_order asc;
    end if;
    insert into json_table(parentrole,roleid,role_name,screen_id,menu_order,screen_name,routename,modulename)
	select distinct s.parentrole as parentrole, cast(r.id as char) as rid, r.name as rname, s.id as screenid, s.menu_order as menu_order, s.name as sname,
		s.routename as routename, m.modulename as modulename from
		screensmaster s, screenfunctionalitiesmaster sfm, rolescreenaccess rs, rolesmaster r, modulesmaster m
		where s.id in (
		select sm.screenid from screenfunctionalitiesmaster sm where sm.id in
		(select screenfunctionalityid from rolescreenaccess where rolescreenaccess.roleid in 
        (select employee_roles.role_id from employee_roles where employee_roles.employee_id = `empid` and 
         case when employee_roles.effective_to_date is null
              then curdate() >= employee_roles.effective_from_date
              else curdate() between employee_roles.effective_from_date and employee_roles.effective_to_date
              end)))
		and s.id = sfm.screenid
        and sfm.id = rs.screenfunctionalityid
        and rs.roleid = r.id
        and s.moduleid = m.id
		and r.id in (select employee_roles.role_id from employee_roles where employee_roles.employee_id = `empid`)
        order by rname, modulename asc, menu_order asc;    
				
	update ftable set menu_items=(select  json_unquote(json_arrayagg(json_object (
		"parentrole",	(select rolesmaster.name from rolesmaster where rolesmaster.id = d.parentrole), 
		"roleid", 		d.roleid, 
		"role_name",	d.role_name,
		"screenid",		d.screen_id,
		"menu_order",	d.menu_order,
		"screen_name",	d.screen_name,
		"routename",	d.routename,
		"functionalities", (select json_unquote(json_arrayagg(json_object(
							'functionalityid',sf.functionalityid,
							'functionalityname',f.functionalityname 
							)))
							from screenfunctionalitiesmaster sf,functionalitiesmaster f
							where sf.id in (select rolescreenaccess.screenfunctionalityid from rolescreenaccess where rolescreenaccess.roleid in
                                            (select employee_roles.role_id from employee_roles where employee_roles.employee_id = empid and 
											 case when employee_roles.effective_to_date is null
												then curdate() >= employee_roles.effective_from_date
												else curdate() between employee_roles.effective_from_date and employee_roles.effective_to_date
												end)
                                            union
											select rolescreenaccess_common.screenfunctionalityid from rolescreenaccess_common)
                            and sf.screenid = d.screen_id and sf.functionalityid = f.id )
		)))
		from json_table as d
		where ftable.modulename = d.modulename);
	
	select id, modulename, dashboard_order, iconpath, menu_items, default_url from ftable order by dashboard_order;
	drop temporary table ftable;
   
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_screens_functionalities` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_screens_functionalities`(in moduleid int)
	begin
	SELECT JSON_ARRAYAGG(JSON_OBJECT('screenid', t.screenid, 'screenname', t.screenname, 'functionalities', t.functionalities)) AS json_value
	FROM (
	SELECT  sm.id as screenid,  sm.name as screenname,
	JSON_ARRAYAGG(JSON_OBJECT('functid', fm.id, 'functname', fm.functionalityname)) AS functionalities 
	FROM  screensmaster sm
	inner join modulesmaster m on sm.moduleid=m.id
	inner join screenfunctionalitiesmaster sfm on sfm.screenid=sm.id
	inner join functionalitiesmaster fm on fm.id=sfm.functionalityid
	where m.id=ifnull(moduleid,m.id)
	GROUP BY sm.id
	) t;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_screens_functionalities_for_role` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_screens_functionalities_for_role`(IN roleid int)
	begin

	create temporary table ftable(
	screenid int(11),
	fjson varchar(1000)
	);
	insert into ftable(screenid) 
	select distinct sf.screenid
	from screenfunctionalitiesmaster sf,screensmaster s,functionalitiesmaster f,rolescreenaccess ra
	where ra.roleid = `roleid` and ra.screenfunctionalityid=sf.id and sf.screenid=s.id and sf.functionalityid=f.id ;
	update ftable set fjson = (select json_unquote(json_arrayagg(json_object(
				   'functionalityid',sf.functionalityid,
				   'functionalityname',f.functionalityname 
				   )))
				   from screenfunctionalitiesmaster sf,screensmaster s,functionalitiesmaster f,rolescreenaccess ra
				   where ra.roleid = `roleid` and ra.screenfunctionalityid=sf.id and sf.screenid=s.id and sf.functionalityid=f.id 
				   and sf.screenid = ftable.screenid);
	-- select * from ftable;               
				   
		select distinct ra.roleid, 
		r.name as role_name,
		m.id as moduleid,
		m.modulename,
		sf.screenid,
		s.menu_order,
		s.name as screen_name,
		s.routename,
		s.parentrole,
		ft.fjson from ftable ft, screenfunctionalitiesmaster sf,screensmaster s,rolesmaster r,functionalitiesmaster f,rolescreenaccess ra,modulesmaster m
		where ft.screenid = s.id 
		and m.id=s.moduleid
		and ra.roleid = `roleid`
		and ra.screenfunctionalityid=sf.id 
		and sf.screenid=s.id 
		and sf.functionalityid=f.id 
		and r.id = ra.roleid
		order by s.menu_order;

		drop temporary table ftable;    
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_shifts_details_by_id` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_shifts_details_by_id`(
		`shift_id` int(11)
	)
	begin
		select *
		from shiftsmaster
		where id = `shift_id`;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_states_for_esi` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_states_for_esi`(
	)
	begin
		select distinct v.id,v.state from companyworklocationsmaster s, statesmaster v
		where s.state = v.id
		and s.status = 1
		and v.id not in (select esi_configs.state_id from esi_configs where esi_configs.effective_to_date is null)
		order by v.state;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_status_list` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_status_list`(in `moduleid` int)
	begin
	  if `moduleid` is not null and `moduleid` !='' then
		   select s.id ,s.name from statusmaster s where s.moduleid=`moduleid`;
	   else
		  select s.id ,s.name from statusmaster s where s.moduleid is null;
	   end if;
	 end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_statutory_max_pf_wage_for_employer_contribution` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_statutory_max_pf_wage_for_employer_contribution`(
	)
	begin
		select payroll_product_component_rulevalues.value 
		from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
		(select id from payroll_product_component_rulemaster 
		where payroll_product_component_rulemaster.rule_name = 'MAXIMUM_SALARY_CONSIDERED_FOR_EMPLOYER_CONTRIBUTION')
		order by id desc limit 1;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_summary_report_for_manager` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_summary_report_for_manager`(
	`manager_id` int,
	`employee_id` varchar(32),
	`designation_id` varchar(32),
	`department_id` varchar(32),
	`display_year` int
	)
	BEGIN
	DROP TEMPORARY TABLE IF EXISTS temp_employee_leave_summary;
	CREATE TEMPORARY TABLE `temp_employee_leave_summary` (
	  `leavetype_id` varchar(64) NOT NULL,
	  `january` float DEFAULT NULL,
	  `february` float DEFAULT NULL,
	  `march` float DEFAULT NULL,
	  `april` float DEFAULT NULL,
	  `may` float DEFAULT NULL,
	  `june` float DEFAULT NULL,
	  `july` float DEFAULT NULL,
	  `august` float DEFAULT NULL,
	  `september` float DEFAULT NULL,
	  `october` float DEFAULT NULL,
	  `november` float DEFAULT NULL,
	  `december` float DEFAULT NULL,
	  `total` float DEFAULT NULL
	);  
		set @month_id = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
			   select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
			   lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));
		
		set @dy = 0;
		set @dy = (display_year + 1);
		
		set @curr_month = (select month(curdate())); -- get current month 
		
		set @totaltext = '';
		set @totaltext = concat('insert into temp_employee_leave_summary(leavetype_id');
		set @tt = 0;
		set @tt = @month_id;    
		while (@tt <= 12) do -- year value 2020 mentioned to retrieve month name but not used for calculation
			set @totaltext = concat(@totaltext,',',(select MONTHNAME(concat('2020-',@tt,'-01'))));
			set @tt = @tt + 1;
		end while;
		set @totaltext = concat(@totaltext,',total) select ''Working days per month''');
		set @tq = 0;
		set @tq = @month_id;
		while (@tq <= 12) do -- (case when (@tq <= @curr_month or @curr_month < @month_id) then concat('sum(',(select MONTHNAME(concat('2020-',@tq,'-01'))),')') else '''''' end)
		set @totaltext = concat(@totaltext,',','sum(',(select MONTHNAME(concat('2020-',@tq,'-01'))),')'); --  
		set @tq = @tq + 1;
		end while;
		set @totaltext = concat(@totaltext, ',sum(total) from employee_working_days
		where employee_working_days.year = ',display_year,
		' and employee_working_days.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers, employee_departments 
		where employee_departments.departmentid = case when ''',department_id,''' <> ''All'' then ''',department_id,
										''' else employee_departments.departmentid 
										end
		and employee.id = employee_departments.empid
		and employee_departments.effectiveenddate is null
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id, 
													''' else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = ',manager_id,
		' and employee.id = case when ''',employee_id,''' <> ''All'' then ''',employee_id,
							''' else employee.id
							end)');
		-- select @totaltext;                    
		prepare stmt from @totaltext;
		execute stmt;
		deallocate prepare stmt;        
		if (@month_id <> 1) then
			set @totaltext_nextyear = '';
			set @totaltext_nextyear = concat(@totaltext_nextyear,'update temp_employee_leave_summary,
			(select ''Working days per month'' as leavetype_id, sum(employee_leave_summary.january) as january, sum(employee_leave_summary.february) as february,
				sum(employee_leave_summary.march) as march, sum(employee_leave_summary.april) as april,
				sum(employee_leave_summary.may) as may,sum(employee_leave_summary.june) as june,
				sum(employee_leave_summary.july) as july,sum(employee_leave_summary.august) as august,
				sum(employee_leave_summary.september) as september,sum(employee_leave_summary.october) as october,
				sum(employee_leave_summary.november) as november, sum(employee_leave_summary.december) as december,sum(employee_leave_summary.total) as total
			from employee_leave_summary
			where employee_leave_summary.year = ',@dy,' and employee_leave_summary.empid in (
			select employee.id
			from employee, employee_designations,employee_reportingmanagers, employee_departments 
			where employee_departments.departmentid = case when ''',department_id,''' <> ''All'' then ''',department_id,
										''' else employee_departments.departmentid 
										end
			and employee.id = employee_departments.empid
			and employee_departments.effectiveenddate is null
			and employee.id = employee_designations.empid
			and employee_designations.effectiveenddate is null       
			and employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id,
														''' else employee_designations.designationid
														end
			and employee.id = employee_reportingmanagers.empid
			and employee_reportingmanagers.effectiveenddate is null                                               
			and employee_reportingmanagers.reportingmanagerid = ',manager_id,
			' and employee.id = case when ''',employee_id,''' <> ''All'' then ''',employee_id,
								''' else employee.id
								end)
			group by employee_leave_summary.leavetype_id) as temp set ');
			set @up = 0;
			set @up = 1;    
			while (@up < @month_id) do
				set @totaltext_nextyear = concat(@totaltext_nextyear,'temp_employee_leave_summary.',(select MONTHNAME(concat('2020-',@up,'-01'))));
				set @totaltext_nextyear = concat(@totaltext_nextyear,' = temp.',(select MONTHNAME(concat('2020-',@up,'-01'))));
				set @totaltext_nextyear = case when (@up <> (@month_id-1)) then concat(@totaltext_nextyear,',')
									else concat(@totaltext_nextyear,'')
									end;
				set @up = (@up + 1);                        
			end while;
			set @totaltext_nextyear = concat(@totaltext_nextyear,' where temp_employee_leave_summary.leavetype_id = cast(temp.leavetype_id as char)');
			-- select @totaltext_nextyear;
			prepare stmt from @totaltext_nextyear;
			execute stmt;
			deallocate prepare stmt; 
		end if;

	if (@month_id = 1) then
		   select 'Working days per month',sum(january) as 'January' ,sum(february) as 'February' ,sum(march) as 'March',sum(april) as 'April',sum(may) as 'May',sum(june) as 'June',sum(july) as 'July',sum(august) as 'August',sum(september) as 'September',
		sum(october) as 'October',sum(november) as 'November',sum(december) as 'December',sum(total) as 'Total'
		from employee_working_days
		where employee_working_days.year = display_year
		and employee_working_days.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers, employee_departments 
		where employee_departments.departmentid = case when `department_id` <> 'All' then department_id
													   else employee_departments.departmentid 
													   end
		and employee.id = employee_departments.empid
		and employee_departments.effectiveenddate is null
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when `designation_id` <> 'All' then `designation_id`
													else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = `manager_id`
		and employee.id = case when `employee_id` <> 'All' then `employee_id`
							else employee.id
							end)
		union
		select lm_leavesmaster.leavename, sum(employee_leave_summary.january), sum(`employee_leave_summary`.`february`),
			sum(`employee_leave_summary`.`march`), sum(`employee_leave_summary`.`april`),
			sum(`employee_leave_summary`.`may`),sum(`employee_leave_summary`.`june`),
			sum(`employee_leave_summary`.`july`),sum(`employee_leave_summary`.`august`),
			sum(`employee_leave_summary`.`september`),sum(`employee_leave_summary`.`october`),
			sum(`employee_leave_summary`.`november`), sum(`employee_leave_summary`.`december`),sum(`employee_leave_summary`.`total`)
		from employee_leave_summary, lm_leavesmaster
		where employee_leave_summary.year = display_year and employee_leave_summary.leavetype_id = lm_leavesmaster.id
		and employee_leave_summary.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers, employee_departments 
		where employee_departments.departmentid = case when `department_id` <> 'All' then department_id
													   else employee_departments.departmentid 
													   end
		and employee.id = employee_departments.empid
		and employee_departments.effectiveenddate is null
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when `designation_id` <> 'All' then `designation_id`
													else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = `manager_id`
		and employee.id = case when `employee_id` <> 'All' then `employee_id`
							else employee.id
							end)
		group by employee_leave_summary.leavetype_id
		union
		select 'Total Leaves', sum(employee_leave_summary.january), sum(`employee_leave_summary`.`february`),
			sum(`employee_leave_summary`.`march`), sum(`employee_leave_summary`.`april`),
			sum(`employee_leave_summary`.`may`),sum(`employee_leave_summary`.`june`),
			sum(`employee_leave_summary`.`july`),sum(`employee_leave_summary`.`august`),
			sum(`employee_leave_summary`.`september`),sum(`employee_leave_summary`.`october`),
			sum(`employee_leave_summary`.`november`), sum(`employee_leave_summary`.`december`),sum(`employee_leave_summary`.`total`)
		from employee_leave_summary
		where employee_leave_summary.year = display_year
		and employee_leave_summary.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers, employee_departments 
		where employee_departments.departmentid = case when `department_id` <> 'All' then department_id
													   else employee_departments.departmentid 
													   end
		and employee.id = employee_departments.empid
		and employee_departments.effectiveenddate is null
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when `designation_id` <> 'All' then `designation_id`
													else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = `manager_id`
		and employee.id = case when `employee_id` <> 'All' then `employee_id`
							else employee.id
							end);
	elseif (@month_id <> 1) then
		-- insert total values
		set @i = 0;
		set @i = @month_id;
		set @sqltext = '';
		set @sqltext = concat('insert into temp_employee_leave_summary(leavetype_id');
		while (@i <= 12) do
			set @sqltext = concat(@sqltext,',',(select MONTHNAME(concat('2020-',@i,'-01'))));
			set @i = @i + 1;
		end while;
		set @sqltext = concat(@sqltext,',total) ');
		set @sqltext = concat(@sqltext,'select leavetype_id');
		set @q = 0;
		set @q = @month_id;
		while (@q <= 12) do
		set @sqltext = concat(@sqltext,',', 'sum(',(select MONTHNAME(concat('2020-',@q,'-01'))),')');
		set @q = @q + 1;
		end while;
		set @sqltext = concat(@sqltext,',sum(total) from employee_leave_summary
		where employee_leave_summary.year = ',display_year,
		' and employee_leave_summary.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers, employee_departments 
		where employee_departments.departmentid = case when ''',department_id,''' <> ''All'' then ''',department_id,
										''' else employee_departments.departmentid 
										end
		and employee.id = employee_departments.empid
		and employee_departments.effectiveenddate is null
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id, 
													''' else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = ',manager_id,
		' and employee.id = case when ''',employee_id,''' <> ''All'' then ''',employee_id,
							''' else employee.id
							end)
		group by employee_leave_summary.leavetype_id');
		-- select @sqltext;
		prepare stmt from @sqltext;
		execute stmt;
		deallocate prepare stmt; 
		set @s = 1;
		set @v = 0;
		set @v = @month_id;
		-- update each leavetypes with their number  
		set @updatetext = concat('update temp_employee_leave_summary,
		(select leavetype_id, sum(employee_leave_summary.january) as january, sum(employee_leave_summary.february) as february,
			sum(employee_leave_summary.march) as march, sum(employee_leave_summary.april) as april,
			sum(employee_leave_summary.may) as may,sum(employee_leave_summary.june) as june,
			sum(employee_leave_summary.july) as july,sum(employee_leave_summary.august) as august,
			sum(employee_leave_summary.september) as september,sum(employee_leave_summary.october) as october,
			sum(employee_leave_summary.november) as november, sum(employee_leave_summary.december) as december,sum(employee_leave_summary.total) as total
		from employee_leave_summary
		where employee_leave_summary.year = ',@dy,' and employee_leave_summary.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers, employee_departments 
		where employee_departments.departmentid = case when ''',department_id,''' <> ''All'' then ''',department_id,
										''' else employee_departments.departmentid 
										end
		and employee.id = employee_departments.empid
		and employee_departments.effectiveenddate is null
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id,
													''' else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = ',manager_id,
		' and employee.id = case when ''',employee_id,''' <> ''All'' then ''',employee_id,
							''' else employee.id
							end)
		group by employee_leave_summary.leavetype_id) as temp set ');
		while(@s < @v) do
			set @updatetext = concat(@updatetext,'temp_employee_leave_summary.',(select MONTHNAME(concat('2020-',@s,'-01'))));
			set @updatetext = concat(@updatetext,' = temp.',(select MONTHNAME(concat('2020-',@s,'-01'))));
			set @updatetext = case when (@s <> (@v-1)) then concat(@updatetext,',')
								else concat(@updatetext,'')
								end;
			set @s = @s + 1;
		end while;
		set @updatetext = concat(@updatetext,' where temp_employee_leave_summary.leavetype_id = cast(temp.leavetype_id as char)');
		-- select @updatetext;
		prepare stmt from @updatetext;
		execute stmt;
		deallocate prepare stmt; 
		
		-- display total leaves
		
		set @ti = 0;
		set @ti = @month_id;
		set @tltext = '';
		set @tltext = concat('insert into temp_employee_leave_summary(leavetype_id');
		while (@ti <= 12) do
			set @tltext = concat(@tltext,',',(select MONTHNAME(concat('2020-',@ti,'-01'))));
			set @ti = @ti + 1;
		end while;
		set @tltext = concat(@tltext,',total) ');
		set @tltext = concat(@tltext,'select ''Total Leaves''');
		set @tq = 0;
		set @tq = @month_id;
		while (@tq <= 12) do
		set @tltext = concat(@tltext,',', 'sum(',(select MONTHNAME(concat('2020-',@tq,'-01'))),')');
		set @tq = @tq + 1;
		end while;
		set @tltext = concat(@tltext,',sum(total) from employee_leave_summary
		where employee_leave_summary.year = ',display_year,
		' and employee_leave_summary.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers, employee_departments 
		where employee_departments.departmentid = case when ''',department_id,''' <> ''All'' then ''',department_id,
										''' else employee_departments.departmentid 
										end
		and employee.id = employee_departments.empid
		and employee_departments.effectiveenddate is null
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id, 
													''' else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = ',manager_id,
		' and employee.id = case when ''',employee_id,''' <> ''All'' then ''',employee_id,
							''' else employee.id
							end)');
		-- select @tltext;
		prepare stmt from @tltext;
		execute stmt;
		deallocate prepare stmt; 
		if (@month_id <> 1) then
			set @ts = 1;
			set @tv = 0;
			set @tv = @month_id;
			set @dy = 0;
			set @dy = (display_year + 1); -- update each leavetypes total with their number  
			set @updatetltext = concat('update temp_employee_leave_summary,
			(select sum(employee_leave_summary.january) as january, sum(employee_leave_summary.february) as february,
				sum(employee_leave_summary.march) as march, sum(employee_leave_summary.april) as april,
				sum(employee_leave_summary.may) as may,sum(employee_leave_summary.june) as june,
				sum(employee_leave_summary.july) as july,sum(employee_leave_summary.august) as august,
				sum(employee_leave_summary.september) as september,sum(employee_leave_summary.october) as october,
				sum(employee_leave_summary.november) as november, sum(employee_leave_summary.december) as december,sum(employee_leave_summary.total) as total
			from employee_leave_summary
			where employee_leave_summary.year = ',@dy,' and employee_leave_summary.empid in (
			select employee.id
			from employee, employee_designations,employee_reportingmanagers, employee_departments 
			where employee_departments.departmentid = case when ''',department_id,''' <> ''All'' then ''',department_id,
										''' else employee_departments.departmentid 
										end
			and employee.id = employee_departments.empid
			and employee_departments.effectiveenddate is null
			and employee.id = employee_designations.empid
			and employee_designations.effectiveenddate is null       
			and employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id,
														''' else employee_designations.designationid
														end
			and employee.id = employee_reportingmanagers.empid
			and employee_reportingmanagers.effectiveenddate is null                                               
			and employee_reportingmanagers.reportingmanagerid = ',manager_id,
			' and employee.id = case when ''',employee_id,''' <> ''All'' then ''',employee_id,
								''' else employee.id
								end)) as temp set ');
			while(@ts < @tv) do
				set @updatetltext = concat(@updatetltext,'temp_employee_leave_summary.',(select MONTHNAME(concat('2020-',@ts,'-01'))));
				set @updatetltext = concat(@updatetltext,' = temp.',(select MONTHNAME(concat('2020-',@ts,'-01'))));
				set @updatetltext = case when (@ts <> (@tv-1)) then concat(@updatetltext,',')
									else concat(@updatetltext,'')
									end;
				set @ts = @ts + 1;
			end while;
			set @updatetltext = concat(@updatetltext,' where temp_employee_leave_summary.leavetype_id = ''Total Leaves''');
			-- select @updatetltext;
			prepare stmt from @updatetltext;
			execute stmt;
			deallocate prepare stmt; 
		end if;
		-- -----------------------------------
		
		insert into temp_employee_leave_summary(leavetype_id) values ('Total Worked Days');
		
		SELECT january,february,march,april,may,june,july,august,september,october,november,december,total
		into @wjanuary,@wfebruary,@wmarch,@wapril,@wmay,@wjune,@wjuly,@waugust,@wseptember,@woctober,@wnovember,@wdecember,@wtotal 
		FROM temp_employee_leave_summary where temp_employee_leave_summary.leavetype_id = 'Working days per month';
		SELECT january,february,march,april,may,june,july,august,september,october,november,december,total
		into @january,@february,@march,@april,@may,@june,@july,@august,@september,@october,@november,@december,@total 
		FROM temp_employee_leave_summary where temp_employee_leave_summary.leavetype_id = 'Total Leaves';
		-- select @january, @january;
		UPDATE temp_employee_leave_summary 
		set temp_employee_leave_summary.january    = @wjanuary   - @january,
		temp_employee_leave_summary.february   = @wfebruary  - @february,  
		temp_employee_leave_summary.march      = @wmarch     - @march,
		temp_employee_leave_summary.april      = @wapril     - @april,
		temp_employee_leave_summary.may        = @wmay       - @may,
		temp_employee_leave_summary.june       = @wjune      - @june,
		temp_employee_leave_summary.july       = @wjuly      - @july,
		temp_employee_leave_summary.august     = @waugust    - @august,
		temp_employee_leave_summary.september  = @wseptember - @september,
		temp_employee_leave_summary.october    = @woctober   - @october,
		temp_employee_leave_summary.november   = @wnovember  - @november,
		temp_employee_leave_summary.december   = @wdecember  - @december,
		temp_employee_leave_summary.total      = @wtotal     - @total  
		where temp_employee_leave_summary.leavetype_id = 'Total Worked Days';
		/*
		set @ev = 0;
		set @ev = @month_id;
		set @twtext = '';
		set @twtext = concat(@twtext,'update temp_employee_leave_summary set ');
		while (@ev <= 12) do
			set @twtext = concat(@twtext, (case when (@ev > @curr_month or @curr_month < @month_id) then concat((select MONTHNAME(concat('2020-',@ev,'-01'))),' = 0 ,') else '' end)); -- (case when (@dt <= @curr_month or @curr_month < @month_id) then (select MONTHNAME(concat('2020-',@dt,'-01'))) else 'null' end), ' as ',
			set @ev = @ev + 1;
		end while;
		-- select @twtext;
		set @ve = 1;
		while (@ve < @month_id) do
			set @twtext = concat(@twtext, (case when (@ve < @curr_month or @curr_month < @month_id) then concat((select MONTHNAME(concat('2020-',@ve,'-01'))),' = 0 ') else '' end)); --  (case when (@dt1 <= @curr_month and @curr_month < @month_id) then (select MONTHNAME(concat('2020-',@dt1,'-01'))) else 'null' end), ' as ',
			set @twtext = case when (@ve <> (@month_id-1)) then concat(@twtext,',')
									else concat(@twtext,'')
									end;
			set @ve = @ve + 1;
		end while;
		set @twtext = concat(@twtext,' where temp_employee_leave_summary.leavetype_id = ''Total Worked Days'''); 
		-- select @twtext;
		prepare stmt from @twtext;
		execute stmt;
		deallocate prepare stmt;  
		*/
		set @total = (select `january` + `february` + `march` +
		`april` + `may` + `june` + `july` + `august` + `september` + `october` + `november` + `december`
		from temp_employee_leave_summary where temp_employee_leave_summary.leavetype_id = 'Total Worked Days');
		
		update temp_employee_leave_summary set total = @total
		where temp_employee_leave_summary.leavetype_id = 'Total Worked Days';
			
		set @displaytext = '';
		set @displaytext = concat(@displaytext,'select case when temp_employee_leave_summary.leavetype_id in
		(select cast(lm_leavesmaster.id as char) from lm_leavesmaster) then 
		(select lm_leavesmaster.display_name from lm_leavesmaster where cast(lm_leavesmaster.id as char) = temp_employee_leave_summary.leavetype_id) 
		else temp_employee_leave_summary.leavetype_id end as Month');
		set @dt = 0;
		set @dt = @month_id;
		while (@dt <= 12) do
			set @displaytext = concat(@displaytext,', case when ', (select MONTHNAME(concat('2020-',@dt,'-01'))),' >= 0 then ', (select MONTHNAME(concat('2020-',@dt,'-01'))),' else 0 end as ',(select MONTHNAME(concat('2020-',@dt,'-01')))); -- (case when (@dt <= @curr_month or @curr_month < @month_id) then (select MONTHNAME(concat('2020-',@dt,'-01'))) else 'null' end), ' as ',
			set @dt = @dt + 1;
		end while;
		set @dt1 = 1;
		while (@dt1 < @month_id) do
			set @displaytext = concat(@displaytext,', case when ', (select MONTHNAME(concat('2020-',@dt1,'-01'))),' >= 0 then ', (select MONTHNAME(concat('2020-',@dt1,'-01'))),' else 0 end as ',(select MONTHNAME(concat('2020-',@dt1,'-01')))); --  (case when (@dt1 <= @curr_month and @curr_month < @month_id) then (select MONTHNAME(concat('2020-',@dt1,'-01'))) else 'null' end), ' as ',
			set @dt1 = @dt1 + 1;
		end while;
		set @displaytext = concat(@displaytext,', Total from temp_employee_leave_summary'); 
		prepare stmt from @displaytext;
		execute stmt;
		deallocate prepare stmt;  
		
	end if;
	drop temporary table temp_employee_leave_summary;

	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_summary_report_for_manager_V2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `get_summary_report_for_manager_V2`(
	`manager_id` int,
	`employee_id` varchar(32),
	`designation_id` varchar(32),
	`department_id` varchar(32),
	`display_year` int
	)
	BEGIN
	CREATE TEMPORARY TABLE `temp_employee_leave_summary` (
	  `leavetype_id` varchar(64) NOT NULL,
	  `january` float DEFAULT NULL,
	  `february` float DEFAULT NULL,
	  `march` float DEFAULT NULL,
	  `april` float DEFAULT NULL,
	  `may` float DEFAULT NULL,
	  `june` float DEFAULT NULL,
	  `july` float DEFAULT NULL,
	  `august` float DEFAULT NULL,
	  `september` float DEFAULT NULL,
	  `october` float DEFAULT NULL,
	  `november` float DEFAULT NULL,
	  `december` float DEFAULT NULL,
	  `total` float DEFAULT NULL
	);  
		set @month_id = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
			   select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
			   lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));
		
		set @dy = 0;
		set @dy = (display_year + 1);
		
		set @curr_month = (select month(curdate())); -- get current month 
		
		set @totaltext = '';
		set @totaltext = concat('insert into temp_employee_leave_summary(leavetype_id');
		set @tt = 0;
		set @tt = @month_id;    
		while (@tt <= 12) do
			set @totaltext = concat(@totaltext,',',(select MONTHNAME(concat('2020-',@tt,'-01'))));
			set @tt = @tt + 1;
		end while;
		set @totaltext = concat(@totaltext,',total) select ''Working days per month''');
		set @tq = 0;
		set @tq = @month_id;
		while (@tq <= 12) do -- (case when (@tq <= @curr_month or @curr_month < @month_id) then concat('sum(',(select MONTHNAME(concat('2020-',@tq,'-01'))),')') else '''''' end)
		set @totaltext = concat(@totaltext,',','sum(',(select MONTHNAME(concat('2020-',@tq,'-01'))),')'); --  
		set @tq = @tq + 1;
		end while;
		set @totaltext = concat(@totaltext, ',sum(total) from employee_working_days
		where employee_working_days.year = ',display_year,
		' and employee_working_days.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers 
		where employee.department = case when ''',department_id,''' <> ''All'' then ''',department_id,
										''' else employee.department 
										end
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id, 
													''' else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = ',manager_id,
		' and employee.id = case when ''',employee_id,''' <> ''All'' then ''',employee_id,
							''' else employee.id
							end)');
		-- select @totaltext;                    
		prepare stmt from @totaltext;
		execute stmt;
		deallocate prepare stmt;        
		if (@month_id <> 1) then
			set @totaltext_nextyear = '';
			set @totaltext_nextyear = concat(@totaltext_nextyear,'update temp_employee_leave_summary,
			(select ''Working days per month'' as leavetype_id, sum(employee_leave_summary.january) as january, sum(employee_leave_summary.february) as february,
				sum(employee_leave_summary.march) as march, sum(employee_leave_summary.april) as april,
				sum(employee_leave_summary.may) as may,sum(employee_leave_summary.june) as june,
				sum(employee_leave_summary.july) as july,sum(employee_leave_summary.august) as august,
				sum(employee_leave_summary.september) as september,sum(employee_leave_summary.october) as october,
				sum(employee_leave_summary.november) as november, sum(employee_leave_summary.december) as december,sum(employee_leave_summary.total) as total
			from employee_leave_summary
			where employee_leave_summary.year = ',@dy,' and employee_leave_summary.empid in (
			select employee.id
			from employee, employee_designations,employee_reportingmanagers 
			where employee.department = case when ''',department_id,''' <> ''All'' then ''',department_id,
											''' else employee.department 
											end
			and employee.id = employee_designations.empid
			and employee_designations.effectiveenddate is null       
			and employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id,
														''' else employee_designations.designationid
														end
			and employee.id = employee_reportingmanagers.empid
			and employee_reportingmanagers.effectiveenddate is null                                               
			and employee_reportingmanagers.reportingmanagerid = ',manager_id,
			' and employee.id = case when ''',employee_id,''' <> ''All'' then ''',employee_id,
								''' else employee.id
								end)
			group by employee_leave_summary.leavetype_id) as temp set ');
			set @up = 0;
			set @up = 1;    
			while (@up < @month_id) do
				set @totaltext_nextyear = concat(@totaltext_nextyear,'temp_employee_leave_summary.',(select MONTHNAME(concat('2020-',@up,'-01'))));
				set @totaltext_nextyear = concat(@totaltext_nextyear,' = temp.',(select MONTHNAME(concat('2020-',@up,'-01'))));
				set @totaltext_nextyear = case when (@up <> (@month_id-1)) then concat(@totaltext_nextyear,',')
									else concat(@totaltext_nextyear,'')
									end;
				set @up = (@up + 1);                        
			end while;
			set @totaltext_nextyear = concat(@totaltext_nextyear,' where temp_employee_leave_summary.leavetype_id = cast(temp.leavetype_id as char)');
			-- select @totaltext_nextyear;
			prepare stmt from @totaltext_nextyear;
			execute stmt;
			deallocate prepare stmt; 
		end if;

	if (@month_id = 1) then
		select 'Working days per month',sum(january),sum(february),sum(march),sum(april),sum(may),sum(june),sum(july),sum(august),sum(september),
		sum(october),sum(november),sum(december),sum(total)
		from employee_working_days
		where employee_working_days.year = display_year
		and employee_working_days.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers 
		where employee.department = case when `department_id` <> 'All' then `department_id`
										else employee.department 
										end
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when `designation_id` <> 'All' then `designation_id`
													else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = `manager_id`
		and employee.id = case when `employee_id` <> 'All' then `employee_id`
							else employee.id
							end)
		union
		select lm_leavesmaster.leavename, sum(employee_leave_summary.january), sum(`employee_leave_summary`.`february`),
			sum(`employee_leave_summary`.`march`), sum(`employee_leave_summary`.`april`),
			sum(`employee_leave_summary`.`may`),sum(`employee_leave_summary`.`june`),
			sum(`employee_leave_summary`.`july`),sum(`employee_leave_summary`.`august`),
			sum(`employee_leave_summary`.`september`),sum(`employee_leave_summary`.`october`),
			sum(`employee_leave_summary`.`november`), sum(`employee_leave_summary`.`december`),sum(`employee_leave_summary`.`total`)
		from employee_leave_summary, lm_leavesmaster
		where employee_leave_summary.year = display_year and employee_leave_summary.leavetype_id = lm_leavesmaster.id
		and employee_leave_summary.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers 
		where employee.department = case when `department_id` <> 'All' then `department_id`
										else employee.department 
										end
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when `designation_id` <> 'All' then `designation_id`
													else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = `manager_id`
		and employee.id = case when `employee_id` <> 'All' then `employee_id`
							else employee.id
							end)
		group by employee_leave_summary.leavetype_id
		union
		select 'Total Leaves', sum(employee_leave_summary.january), sum(`employee_leave_summary`.`february`),
			sum(`employee_leave_summary`.`march`), sum(`employee_leave_summary`.`april`),
			sum(`employee_leave_summary`.`may`),sum(`employee_leave_summary`.`june`),
			sum(`employee_leave_summary`.`july`),sum(`employee_leave_summary`.`august`),
			sum(`employee_leave_summary`.`september`),sum(`employee_leave_summary`.`october`),
			sum(`employee_leave_summary`.`november`), sum(`employee_leave_summary`.`december`),sum(`employee_leave_summary`.`total`)
		from employee_leave_summary
		where employee_leave_summary.year = display_year
		and employee_leave_summary.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers 
		where employee.department = case when `department_id` <> 'All' then `department_id`
										else employee.department 
										end
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when `designation_id` <> 'All' then `designation_id`
													else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = `manager_id`
		and employee.id = case when `employee_id` <> 'All' then `employee_id`
							else employee.id
							end);
	elseif (@month_id <> 1) then
		-- insert total values
		set @i = 0;
		set @i = @month_id;
		set @sqltext = '';
		set @sqltext = concat('insert into temp_employee_leave_summary(leavetype_id');
		while (@i <= 12) do
			set @sqltext = concat(@sqltext,',',(select MONTHNAME(concat('2020-',@i,'-01'))));
			set @i = @i + 1;
		end while;
		set @sqltext = concat(@sqltext,',total) ');
		set @sqltext = concat(@sqltext,'select leavetype_id');
		set @q = 0;
		set @q = @month_id;
		while (@q <= 12) do
		set @sqltext = concat(@sqltext,',', 'sum(',(select MONTHNAME(concat('2020-',@q,'-01'))),')');
		set @q = @q + 1;
		end while;
		set @sqltext = concat(@sqltext,',sum(total) from employee_leave_summary
		where employee_leave_summary.year = ',display_year,
		' and employee_leave_summary.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers 
		where employee.department = case when ''',department_id,''' <> ''All'' then ''',department_id,
										''' else employee.department 
										end
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id, 
													''' else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = ',manager_id,
		' and employee.id = case when ''',employee_id,''' <> ''All'' then ''',employee_id,
							''' else employee.id
							end)
		group by employee_leave_summary.leavetype_id');
		-- select @sqltext;
		prepare stmt from @sqltext;
		execute stmt;
		deallocate prepare stmt; 
		set @s = 1;
		set @v = 0;
		set @v = @month_id;
		-- update each leavetypes with their number  
		set @updatetext = concat('update temp_employee_leave_summary,
		(select leavetype_id, sum(employee_leave_summary.january) as january, sum(employee_leave_summary.february) as february,
			sum(employee_leave_summary.march) as march, sum(employee_leave_summary.april) as april,
			sum(employee_leave_summary.may) as may,sum(employee_leave_summary.june) as june,
			sum(employee_leave_summary.july) as july,sum(employee_leave_summary.august) as august,
			sum(employee_leave_summary.september) as september,sum(employee_leave_summary.october) as october,
			sum(employee_leave_summary.november) as november, sum(employee_leave_summary.december) as december,sum(employee_leave_summary.total) as total
		from employee_leave_summary
		where employee_leave_summary.year = ',@dy,' and employee_leave_summary.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers 
		where employee.department = case when ''',department_id,''' <> ''All'' then ''',department_id,
										''' else employee.department 
										end
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id,
													''' else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = ',manager_id,
		' and employee.id = case when ''',employee_id,''' <> ''All'' then ''',employee_id,
							''' else employee.id
							end)
		group by employee_leave_summary.leavetype_id) as temp set ');
		while(@s < @v) do
			set @updatetext = concat(@updatetext,'temp_employee_leave_summary.',(select MONTHNAME(concat('2020-',@s,'-01'))));
			set @updatetext = concat(@updatetext,' = temp.',(select MONTHNAME(concat('2020-',@s,'-01'))));
			set @updatetext = case when (@s <> (@v-1)) then concat(@updatetext,',')
								else concat(@updatetext,'')
								end;
			set @s = @s + 1;
		end while;
		set @updatetext = concat(@updatetext,' where temp_employee_leave_summary.leavetype_id = cast(temp.leavetype_id as char)');
		-- select @updatetext;
		prepare stmt from @updatetext;
		execute stmt;
		deallocate prepare stmt; 
		
		-- display total leaves
		
		set @ti = 0;
		set @ti = @month_id;
		set @tltext = '';
		set @tltext = concat('insert into temp_employee_leave_summary(leavetype_id');
		while (@ti <= 12) do
			set @tltext = concat(@tltext,',',(select MONTHNAME(concat('2020-',@ti,'-01'))));
			set @ti = @ti + 1;
		end while;
		set @tltext = concat(@tltext,',total) ');
		set @tltext = concat(@tltext,'select ''Total Leaves''');
		set @tq = 0;
		set @tq = @month_id;
		while (@tq <= 12) do
		set @tltext = concat(@tltext,',', 'sum(',(select MONTHNAME(concat('2020-',@tq,'-01'))),')');
		set @tq = @tq + 1;
		end while;
		set @tltext = concat(@tltext,',sum(total) from employee_leave_summary
		where employee_leave_summary.year = ',display_year,
		' and employee_leave_summary.empid in (
		select employee.id
		from employee, employee_designations,employee_reportingmanagers 
		where employee.department = case when ''',department_id,''' <> ''All'' then ''',department_id,
										''' else employee.department 
										end
		and employee.id = employee_designations.empid
		and employee_designations.effectiveenddate is null       
		and employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id, 
													''' else employee_designations.designationid
													end
		and employee.id = employee_reportingmanagers.empid
		and employee_reportingmanagers.effectiveenddate is null                                               
		and employee_reportingmanagers.reportingmanagerid = ',manager_id,
		' and employee.id = case when ''',employee_id,''' <> ''All'' then ''',employee_id,
							''' else employee.id
							end)');
		-- select @tltext;
		prepare stmt from @tltext;
		execute stmt;
		deallocate prepare stmt; 
		if (@month_id <> 1) then
			set @ts = 1;
			set @tv = 0;
			set @tv = @month_id;
			set @dy = 0;
			set @dy = (display_year + 1); -- update each leavetypes total with their number  
			set @updatetltext = concat('update temp_employee_leave_summary,
			(select sum(employee_leave_summary.january) as january, sum(employee_leave_summary.february) as february,
				sum(employee_leave_summary.march) as march, sum(employee_leave_summary.april) as april,
				sum(employee_leave_summary.may) as may,sum(employee_leave_summary.june) as june,
				sum(employee_leave_summary.july) as july,sum(employee_leave_summary.august) as august,
				sum(employee_leave_summary.september) as september,sum(employee_leave_summary.october) as october,
				sum(employee_leave_summary.november) as november, sum(employee_leave_summary.december) as december,sum(employee_leave_summary.total) as total
			from employee_leave_summary
			where employee_leave_summary.year = ',@dy,' and employee_leave_summary.empid in (
			select employee.id
			from employee, employee_designations,employee_reportingmanagers 
			where employee.department = case when ''',department_id,''' <> ''All'' then ''',department_id,
											''' else employee.department 
											end
			and employee.id = employee_designations.empid
			and employee_designations.effectiveenddate is null       
			and employee_designations.designationid = case when ''',designation_id,''' <> ''All'' then ''',designation_id,
														''' else employee_designations.designationid
														end
			and employee.id = employee_reportingmanagers.empid
			and employee_reportingmanagers.effectiveenddate is null                                               
			and employee_reportingmanagers.reportingmanagerid = ',manager_id,
			' and employee.id = case when ''',employee_id,''' <> ''All'' then ''',employee_id,
								''' else employee.id
								end)) as temp set ');
			while(@ts < @tv) do
				set @updatetltext = concat(@updatetltext,'temp_employee_leave_summary.',(select MONTHNAME(concat('2020-',@ts,'-01'))));
				set @updatetltext = concat(@updatetltext,' = temp.',(select MONTHNAME(concat('2020-',@ts,'-01'))));
				set @updatetltext = case when (@ts <> (@tv-1)) then concat(@updatetltext,',')
									else concat(@updatetltext,'')
									end;
				set @ts = @ts + 1;
			end while;
			set @updatetltext = concat(@updatetltext,' where temp_employee_leave_summary.leavetype_id = ''Total Leaves''');
			-- select @updatetltext;
			prepare stmt from @updatetltext;
			execute stmt;
			deallocate prepare stmt; 
		end if;
		-- -----------------------------------
		
		insert into temp_employee_leave_summary(leavetype_id) values ('Total Worked Days');
		
		SELECT january,february,march,april,may,june,july,august,september,october,november,december,total
		into @wjanuary,@wfebruary,@wmarch,@wapril,@wmay,@wjune,@wjuly,@waugust,@wseptember,@woctober,@wnovember,@wdecember,@wtotal 
		FROM temp_employee_leave_summary where temp_employee_leave_summary.leavetype_id = 'Working days per month';
		SELECT january,february,march,april,may,june,july,august,september,october,november,december,total
		into @january,@february,@march,@april,@may,@june,@july,@august,@september,@october,@november,@december,@total 
		FROM temp_employee_leave_summary where temp_employee_leave_summary.leavetype_id = 'Total Leaves';
		-- select @january;
		UPDATE temp_employee_leave_summary 
		set temp_employee_leave_summary.january    = @wjanuary   - @january,
		temp_employee_leave_summary.february   = @wfebruary  - @february,  
		temp_employee_leave_summary.march      = @wmarch     - @march,
		temp_employee_leave_summary.april      = @wapril     - @april,
		temp_employee_leave_summary.may        = @wmay       - @may,
		temp_employee_leave_summary.june       = @wjune      - @june,
		temp_employee_leave_summary.july       = @wjuly      - @july,
		temp_employee_leave_summary.august     = @waugust    - @august,
		temp_employee_leave_summary.september  = @wseptember - @september,
		temp_employee_leave_summary.october    = @woctober   - @october,
		temp_employee_leave_summary.november   = @wnovember  - @november,
		temp_employee_leave_summary.december   = @wdecember  - @december,
		temp_employee_leave_summary.total      = @wtotal     - @total  
		where temp_employee_leave_summary.leavetype_id = 'Total Worked Days';
		
		set @ev = 0;
		set @ev = @month_id;
		set @twtext = '';
		set @twtext = concat(@twtext,'update temp_employee_leave_summary set ');
		while (@ev <= 12) do
			set @twtext = concat(@twtext, (case when (@ev > @curr_month or @curr_month < @month_id) then concat((select MONTHNAME(concat('2020-',@ev,'-01'))),' = 0 ,') else '' end)); -- (case when (@dt <= @curr_month or @curr_month < @month_id) then (select MONTHNAME(concat('2020-',@dt,'-01'))) else 'null' end), ' as ',
			set @ev = @ev + 1;
		end while;
		-- select @twtext;
		set @ve = 1;
		while (@ve < @month_id) do
			set @twtext = concat(@twtext, (case when (@ve < @curr_month or @curr_month < @month_id) then concat((select MONTHNAME(concat('2020-',@ve,'-01'))),' = 0 ') else '' end)); --  (case when (@dt1 <= @curr_month and @curr_month < @month_id) then (select MONTHNAME(concat('2020-',@dt1,'-01'))) else 'null' end), ' as ',
			set @twtext = case when (@ve <> (@month_id-1)) then concat(@twtext,',')
									else concat(@twtext,'')
									end;
			set @ve = @ve + 1;
		end while;
		set @twtext = concat(@twtext,' where temp_employee_leave_summary.leavetype_id = ''Total Worked Days'''); 
		-- select @twtext;
		prepare stmt from @twtext;
		execute stmt;
		deallocate prepare stmt;  
		
		set @total = (select `january` + `february` + `march` +
		`april` + `may` + `june` + `july` + `august` + `september` + `october` + `november` + `december`
		from temp_employee_leave_summary where temp_employee_leave_summary.leavetype_id = 'Total Worked Days');
		
		update temp_employee_leave_summary set total = @total
		where temp_employee_leave_summary.leavetype_id = 'Total Worked Days';
			
		set @displaytext = '';
		set @displaytext = concat(@displaytext,'select case when temp_employee_leave_summary.leavetype_id in
		(select cast(lm_leavesmaster.id as char) from lm_leavesmaster) then 
		(select lm_leavesmaster.display_name from lm_leavesmaster where cast(lm_leavesmaster.id as char) = temp_employee_leave_summary.leavetype_id) 
		else temp_employee_leave_summary.leavetype_id end as Month');
		set @dt = 0;
		set @dt = @month_id;
		while (@dt <= 12) do
			set @displaytext = concat(@displaytext,',',  (select MONTHNAME(concat('2020-',@dt,'-01')))); -- (case when (@dt <= @curr_month or @curr_month < @month_id) then (select MONTHNAME(concat('2020-',@dt,'-01'))) else 'null' end), ' as ',
			set @dt = @dt + 1;
		end while;
		set @dt1 = 1;
		while (@dt1 < @month_id) do
			set @displaytext = concat(@displaytext,',', (select MONTHNAME(concat('2020-',@dt1,'-01')))); --  (case when (@dt1 <= @curr_month and @curr_month < @month_id) then (select MONTHNAME(concat('2020-',@dt1,'-01'))) else 'null' end), ' as ',
			set @dt1 = @dt1 + 1;
		end while;
		set @displaytext = concat(@displaytext,', Total from temp_employee_leave_summary'); 
		prepare stmt from @displaytext;
		execute stmt;
		deallocate prepare stmt;  
		
	end if;
	drop temporary table temp_employee_leave_summary;

	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_termination_category` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_termination_category`(in terminationid int)
	begin
		select t.id,t.category,t.status from ems_termination_category_master t where t.id <=> ifnull(terminationid,t.id);
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_unread_messages_count` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_unread_messages_count`(in empid int)
	BEGIN
		   select COUNT(erm.id) as unreadcount
		   from  employee_recognition_message erm
			where erm.recognition_reciever_empid=`empid` and erm.recognition_isread=0 ;
	  END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_user_login_data` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_user_login_data`()
	begin
		     /*select e.id, e.empid, concat(firstname, ' ',middlename,'',lastname) empname,e.officeemail, elog.login , elog.status
     from employee e 
     left join (select MAX(el.id) id, el.login login, el.status status from employee_login el group by el.login) as elog on elog.id=e.id
     where e.status=1
     order by e.id desc;*/
	 select e.id, e.empid, concat(ifnull(e.firstname,''), ' ',ifnull(e.middlename,''),'',ifnull(e.lastname,'')) empname,e.officeemail, 
     (select login from employee_login el where el.id=e.id order by el.lastpasswordchangedate desc limit 1) as login ,
     (select sm.name from statusmaster sm where sm.id=e.status) as status
     from employee e 
     where e.status='1' -- and not exists(select * from employee_login where id=e.id)
     order by e.id desc;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `get_years_for_report` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `get_years_for_report`()
	begin
		create temporary table year_table(
			year_value year not null
		);
		set @start_year = null;
		if exists (select year(effectivestartdate) from modulesmaster where modulesmaster.modulename like '%Leave%'
				   and modulesmaster.effectiveenddate is null order by id desc limit 1) then
			set @start_year = (select year(effectivestartdate) from modulesmaster where modulesmaster.modulename like '%Leave%'
				   and modulesmaster.effectiveenddate is null order by id desc limit 1);
		end if;
		set @present_year = (select year(curdate()));
		if @start_year is not null then
		while @start_year <= @present_year do
			insert into year_table(year_value) values (@start_year);
			set @start_year = @start_year + 1;
		end while;
		end if;
		select * from year_table;
		drop temporary table year_table;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `other_allowance_popup` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `other_allowance_popup`(
	pigcm_id_value int
	)
	begin
	if (pigcm_id_value is not null) then
		set @group_id = (select payroll_income_group_components_master.group_id from payroll_income_group_components_master 
						 where payroll_income_group_components_master.id = pigcm_id_value);
		set @component_id = (select payroll_salary_components_master.id from payroll_salary_components_master where 
							payroll_salary_components_master.component = 'Other Allowance');                 
		if exists (select payroll_income_group_components_master.id from payroll_income_group_components_master where payroll_income_group_components_master.group_id = @group_id
					   and payroll_income_group_components_master.component_id = @component_id) then
			select 0 as popup;
		else
			select 1 as popup;
		end if;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `separation_employee_cron` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `separation_employee_cron`()
	BEGIN
		   update employee e join employee_login el on e.id = el.id
		   set e.status=2, el.status='Inactive'
		   where 
		   e.id in (select er.empid from ems_employee_resignations er where er.status='Approved'
		   and date(er.actual_relieving_date) = (current_date() - interval 1 day));
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `setcompanyworklocation` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `setcompanyworklocation`(
	in locationdata varchar(8000)
	)
	begin

	set @id = (json_unquote(json_extract(locationdata,"$.id")));

	if not exists(select * from companyworklocationsmaster where `companyworklocationsmaster`.`id` = @id) then
	begin
	 insert into companyworklocationsmaster(`branchcode`,`address1`,`address2`,`location`,`city`,
	 `state`,`pincode`,`country`,`createddate`,`status`,`created_on`,`created_by`) values
	 (
	 json_unquote(json_extract(locationdata,"$.branchcode")),
	 json_unquote(json_extract(locationdata,"$.address1")),
	 json_unquote(json_extract(locationdata,"$.address2")),
	 json_unquote(json_extract(locationdata,"$.location")),
	 json_unquote(json_extract(locationdata,"$.city")),
	 json_unquote(json_extract(locationdata,"$.state")),
	 json_unquote(json_extract(locationdata,"$.pincode")),
	 json_unquote(json_extract(locationdata,"$.country")),
	 current_timestamp(),
	 json_unquote(json_extract(locationdata,"$.status")),
	 current_timestamp(),
	  json_unquote(json_extract(locationdata,"$.created_by"))
	 );
	 
	 if(json_unquote(json_extract(locationdata,"$.prefix")) is not null) then
	 if exists(select * from employee_idgenerator where employee_idgenerator.prefix = json_unquote(json_extract(locationdata,"$.prefix"))) then
	 set @seed = (select min(employee_idgenerator.seed) from employee_idgenerator where employee_idgenerator.prefix = json_unquote(json_extract(locationdata,"$.prefix")));
	 set @cvalue = (select max(employee_idgenerator.currentvalue) from employee_idgenerator where employee_idgenerator.prefix = json_unquote(json_extract(locationdata,"$.prefix")));
	 insert into employee_idgenerator(prefix,seed,currentvalue,companylocation,createddate) values
		(
		json_unquote(json_extract(locationdata,"$.prefix")),
		@seed,
		@cvalue,
		last_insert_id(),
		current_timestamp()
		);
	 end if;
	 if not exists(select * from employee_idgenerator where employee_idgenerator.prefix = json_unquote(json_extract(locationdata,"$.prefix"))) then
		insert into employee_idgenerator(prefix,seed,currentvalue,companylocation,createddate) values
		(
		json_unquote(json_extract(locationdata,"$.prefix")),
		json_unquote(json_extract(locationdata,"$.seed")),
		json_unquote(json_extract(locationdata,"$.seed")),
		last_insert_id(),
		current_timestamp()
		);
	 end if;
	 elseif (json_unquote(json_extract(locationdata,"$.prefix")) is null) then
	 if not exists(select * from employee_idgenerator where employee_idgenerator.prefix is null) then
		insert into employee_idgenerator(prefix,seed,currentvalue,companylocation,createddate) values
		(
		null,
		json_unquote(json_extract(locationdata,"$.seed")),
		json_unquote(json_extract(locationdata,"$.seed")),
		last_insert_id(),
		current_timestamp()
		);
	 end if;
	 end if;
	end;
	else
	begin
	set @seed = (select seed from employee_idgenerator where companylocation = @id);
	set @cvalue = (select currentvalue from employee_idgenerator where companylocation = @id);

	if (@seed = @cvalue) then
	begin
	update companyworklocationsmaster set
	`branchcode` = json_unquote(json_extract(locationdata,"$.branchcode")),
	`address1`   = json_unquote(json_extract(locationdata,"$.address1")),
	`address2`   = json_unquote(json_extract(locationdata,"$.address2")),
	`location`   = json_unquote(json_extract(locationdata,"$.location")),
	`city`       = json_unquote(json_extract(locationdata,"$.city")),
	`state`      = json_unquote(json_extract(locationdata,"$.state")),
	`pincode`    = json_unquote(json_extract(locationdata,"$.pincode")),
	`country`    = json_unquote(json_extract(locationdata,"$.country")),
	-- `createddate`= json_unquote(json_extract(locationdata,"$.createddate")),	
	`status`     = json_unquote(json_extract(locationdata,"$.status"))	 ,
	`updated_on` = current_timestamp(),
	`updated_by` = json_unquote(json_extract(locationdata,"$.updated_by"))
	where `companyworklocationsmaster`.`id` = @id;

	update employee_idgenerator set
	`prefix`       = json_unquote(json_extract(locationdata,"$.prefix")),
	`seed`         = json_unquote(json_extract(locationdata,"$.seed")),
	`currentvalue` = json_unquote(json_extract(locationdata,"$.seed"))
	where `companylocation` = @id;
	end;
	elseif (@seed < @cvalue) then
	begin
		update companyworklocationsmaster set
		`branchcode` = json_unquote(json_extract(locationdata,"$.branchcode")),
		`address1`   = json_unquote(json_extract(locationdata,"$.address1")),
		`address2`   = json_unquote(json_extract(locationdata,"$.address2")),
		`location`   = json_unquote(json_extract(locationdata,"$.location")),
		`city`       = json_unquote(json_extract(locationdata,"$.city")),
		`state`      = json_unquote(json_extract(locationdata,"$.state")),
		`pincode`    = json_unquote(json_extract(locationdata,"$.pincode")),
		`country`    = json_unquote(json_extract(locationdata,"$.country")),
		`status`     = json_unquote(json_extract(locationdata,"$.status")),
		`updated_on` = current_timestamp(),
		`updated_by` = json_unquote(json_extract(locationdata,"$.updated_by"))
		where `companyworklocationsmaster`.`id` = @id;
	end;
	end if;
	end;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `setcompanyworklocation_v2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `setcompanyworklocation_v2`(
	in locationdata varchar(8000)
	)
	begin

	set @id = (json_unquote(json_extract(locationdata,"$.id")));

	if not exists(select * from companyworklocationsmaster where `companyworklocationsmaster`.`id` = @id) then
	begin
	 insert into companyworklocationsmaster(`branchcode`,`address1`,`address2`,`location`,`city`,
	 `state`,`pincode`,`country`,`createddate`,`status`) values
	 (
	 json_unquote(json_extract(locationdata,"$.branchcode")),
	 json_unquote(json_extract(locationdata,"$.address1")),
	 json_unquote(json_extract(locationdata,"$.address2")),
	 json_unquote(json_extract(locationdata,"$.location")),
	 json_unquote(json_extract(locationdata,"$.city")),
	 json_unquote(json_extract(locationdata,"$.state")),
	 json_unquote(json_extract(locationdata,"$.pincode")),
	 json_unquote(json_extract(locationdata,"$.country")),
	 current_timestamp(),
	 json_unquote(json_extract(locationdata,"$.status")));
	 
	 if(json_unquote(json_extract(locationdata,"$.prefix")) is not null) then
	 if exists(select * from employee_idgenerator where employee_idgenerator.prefix = json_unquote(json_extract(locationdata,"$.prefix"))) then
	 set @seed = (select min(employee_idgenerator.seed) from employee_idgenerator where employee_idgenerator.prefix = json_unquote(json_extract(locationdata,"$.prefix")));
	 set @cvalue = (select max(employee_idgenerator.currentvalue) from employee_idgenerator where employee_idgenerator.prefix = json_unquote(json_extract(locationdata,"$.prefix")));
	 insert into employee_idgenerator(prefix,seed,currentvalue,companylocation,createddate) values
		(
		json_unquote(json_extract(locationdata,"$.prefix")),
		@seed,
		@cvalue,
		last_insert_id(),
		current_timestamp()
		);
	 end if;
	 if not exists(select * from employee_idgenerator where employee_idgenerator.prefix = json_unquote(json_extract(locationdata,"$.prefix"))) then
		insert into employee_idgenerator(prefix,seed,currentvalue,companylocation,createddate) values
		(
		json_unquote(json_extract(locationdata,"$.prefix")),
		json_unquote(json_extract(locationdata,"$.seed")),
		json_unquote(json_extract(locationdata,"$.seed")),
		last_insert_id(),
		current_timestamp()
		);
	 end if;
	 elseif (json_unquote(json_extract(locationdata,"$.prefix")) is null) then
	 if not exists(select * from employee_idgenerator where employee_idgenerator.prefix is null) then
		insert into employee_idgenerator(prefix,seed,currentvalue,companylocation,createddate) values
		(
		null,
		json_unquote(json_extract(locationdata,"$.seed")),
		json_unquote(json_extract(locationdata,"$.seed")),
		last_insert_id(),
		current_timestamp()
		);
	 end if;
	 end if;
	end;
	else
	begin
	set @seed = (select seed from employee_idgenerator where companylocation = @id);
	set @cvalue = (select currentvalue from employee_idgenerator where companylocation = @id);

	if (@seed = @cvalue) then
	begin
	update companyworklocationsmaster set
	`branchcode` = json_unquote(json_extract(locationdata,"$.branchcode")),
	`address1`   = json_unquote(json_extract(locationdata,"$.address1")),
	`address2`   = json_unquote(json_extract(locationdata,"$.address2")),
	`location`   = json_unquote(json_extract(locationdata,"$.location")),
	`city`       = json_unquote(json_extract(locationdata,"$.city")),
	`state`      = json_unquote(json_extract(locationdata,"$.state")),
	`pincode`    = json_unquote(json_extract(locationdata,"$.pincode")),
	`country`    = json_unquote(json_extract(locationdata,"$.country")),
	-- `createddate`= json_unquote(json_extract(locationdata,"$.createddate")),	
	`status`     = json_unquote(json_extract(locationdata,"$.status"))	   
	where `companyworklocationsmaster`.`id` = @id;

	update employee_idgenerator set
	`prefix`       = json_unquote(json_extract(locationdata,"$.prefix")),
	`seed`         = json_unquote(json_extract(locationdata,"$.seed")),
	`currentvalue` = json_unquote(json_extract(locationdata,"$.seed"))
	where `companylocation` = @id;
	end;
	elseif (@seed < @cvalue) then
	begin
		update companyworklocationsmaster set
		`branchcode` = json_unquote(json_extract(locationdata,"$.branchcode")),
		`address1`   = json_unquote(json_extract(locationdata,"$.address1")),
		`address2`   = json_unquote(json_extract(locationdata,"$.address2")),
		`location`   = json_unquote(json_extract(locationdata,"$.location")),
		`city`       = json_unquote(json_extract(locationdata,"$.city")),
		`state`      = json_unquote(json_extract(locationdata,"$.state")),
		`pincode`    = json_unquote(json_extract(locationdata,"$.pincode")),
		`country`    = json_unquote(json_extract(locationdata,"$.country")),
		`status`     = json_unquote(json_extract(locationdata,"$.status"))	   
		where `companyworklocationsmaster`.`id` = @id;
	end;
	end if;
	end;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `setempid` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `setempid`(
		in prefix varchar(16), 
		in seed int(11), 
		in companylocation varchar(64)
	)
	begin

		/* declare exit handler for sqlexception
		begin
			rollback;
			select 'an error has occurred, operation rollbacked and the stored procedure was terminated' as message;
		end; */
		if prefix is null then set prefix=''; end if;
		if seed is null then set seed=0; end if;
		if companylocation is null then set companylocation=''; end if;
		
		if exists(select * from employee_idgenerator where prefix=prefix and seed=seed and companylocation=companylocation) then
			update employee_idgenerator  set currentvalue=currentvalue+1,createddate=current_timestamp() where prefix=prefix and seed=seed and companylocation=companylocation;
		else insert into employee_idgenerator(prefix,seed,currentvalue,companylocation,createddate) 
			values(prefix,seed,seed,companylocation,current_timestamp());
		end if;
		select concat(prefix,(select currentvalue from employee_idgenerator where prefix=prefix and seed=seed and companylocation=companylocation)) as empid;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `setemployeelogin` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `setemployeelogin`(
		IN `id` INT,
		IN `login` VARCHAR(255), 
		IN `password` VARCHAR(1024),  
		IN `status` VARCHAR(16),
		IN `firstLogin` varchar(1)
	)
	procbegin:BEGIN

		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			SELECT -1 as successstate;
		END;
		
		set @lastcount=0;
		-- handle forgot password,change password here
		set @query='set @lastcount = (select convert(`value` , unsigned) from ems_rulevalues where ruleid=(select `id` from ems_rulemaster where `rulename`=''PASSWORD_LAST_PASSWORD_MATCH_COUNT'') order by `effectivefromdate` desc limit 1);';
		prepare stmt from @query;
		execute stmt;
		deallocate prepare stmt;
		if exists(select * from employee_login where  employee_login.login=`login` and employee_login.id!=`id`) then
			select 1 as successstate; -- duplicate login exists
			leave procbegin;
		end if;
		set @cnt = (select count(*) from employee_login where  id=`id` and employee_login.login=`login`);
		if (@cnt=0) then
			if not exists(select * from employee_login where  employee_login.login=`login` ) then -- if same login record exists in the table, we should not add/update the new record
				insert into employee_login(id,login,`password`,`status`,firstlogin,lastpasswordchangedate) 
				values(`id`,`login`,MD5(`password`),`status`,(case when @cnt = 0 then 'Y' else 'N' end),current_timestamp());
				select 0 as successstate;
			else
				select 1 as successstate; -- duplicate login exists
			end if;
		
		elseif ( @cnt < @lastcount) then
			if not exists(select * from employee_login where  employee_login.id=`id` and employee_login.login=`login` and employee_login.password=md5(`password`))
			then -- if same (id,login,password) record exists in the table, we should not add/update the new record
				insert into employee_login(id,login,`password`,`status`,firstlogin,lastpasswordchangedate) 
				values(`id`,`login`,MD5(`password`),`status`,(case when @cnt = 0 then 'Y' else 'N' end),current_timestamp());
				select 0 as successstate;
			else
				select 1 as successstate; -- duplicate login exists
			end if;
			-- ,(select Value from Configs where Name='encryptionSecretKey')),`status`,'N',current_timestamp());
		else -- delete the first record (in the order of most recent lastpasswordchangedate) and then insert this new record
			if not exists(select * from employee_login where  employee_login.id=`id` and employee_login.login=`login` and employee_login.password=md5(`password`))
			then  -- if same (id,login,password) record exists in the table, we should not add/update the new record
				delete from employee_login where id=`id` and employee_login.login=`login`  order by lastpasswordchangedate limit 1;
				insert into employee_login(employee_login.id,employee_login.login,employee_login.password,employee_login.status,employee_login.firstlogin,employee_login.lastpasswordchangedate) 
				values(`id`,`login`,MD5(`password`),`status`,'N',current_timestamp());
				select 0 as successstate;
			else
				select 0 as successstate; -- not inserted, but its success
			end if;
		end if;
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `setemployeemaster` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `setemployeemaster`(
	in employeedata varchar(8000)
	)
	begin
		DECLARE vleave_id int(11);
		declare vid int(1);
		DECLARE leavetype_cursor cursor for select temp_lm_leavesmaster.leave_id,leavetype from temp_lm_leavesmaster;

		set @relationscount = 0;
		set @relationscount = (select json_length(employeedata, '$.relations'));
		set @educationcount = 0;
		set @educationcount = (select json_length(employeedata, '$.education'));
		set @experiencecount = 0;
		set @experiencecount = (select json_length(employeedata, '$.experience'));

		set @employeelocation = (select json_unquote(json_extract(employeedata,"$.companylocation")));
		-- select @employeelocation;
		set @i = 0;
		set @j = 0;
		set @k = 0;
		set @insertrstring = '';
		set @insertedstring = '';
		set @insertexstring = '';
		set @updaterstring = '';
		set @eid = 0;
		set @rid = 0;

	set @eid = (select id from employee where empid = (select json_unquote(json_extract(employeedata,"$.empid"))));    
	-- select @eid;
	if @eid is null then
	begin
		select employee_idgenerator.prefix,employee_idgenerator.seed,employee_idgenerator.currentvalue 
		into @ei_prefix,@ei_seed,@ei_currentvalue 
		from employee_idgenerator where employee_idgenerator.companylocation = @employeelocation;
	if (@ei_prefix is not null) then
		set @employeeid = (select concat(@ei_prefix,@ei_currentvalue));
	else
		set @employeeid = (select @ei_currentvalue);
		--  select @employeeid;
	end if;

	insert into employee(`empid`,`firstname`,`middlename`,`lastname`,`personalemail`,`officeemail`,`dateofbirth`,
	`gender`,`maritalstatus`,`employmenttype`,`dateofjoin`,
	`bloodgroup`,`contactnumber`,`emergencycontactnumber`,`emergencycontactrelation`,
	`emergencycontactname`,`address`,`city`,`state`,`pincode`,`country`,`paddress`,`pcity`,
	`pstate`,`ppincode`,`pcountry`,`aadharnumber`,`passport`,`status`)
	values
	(@employeeid,
	json_unquote(json_extract(employeedata,"$.firstname")),
	json_unquote(json_extract(employeedata,"$.middlename")),
	json_unquote(json_extract(employeedata,"$.lastname")),
	json_unquote(json_extract(employeedata,"$.personalemail")),
	json_unquote(json_extract(employeedata,"$.officeemail")),
	json_unquote(json_extract(employeedata,"$.dateofbirth")),
	json_unquote(json_extract(employeedata,"$.gender")),
	json_unquote(json_extract(employeedata,"$.maritalstatus")),
	json_unquote(json_extract(employeedata,"$.employmenttype")),
	json_unquote(json_extract(employeedata,"$.dateofjoin")),
	json_unquote(json_extract(employeedata,"$.bloodgroup")),
	json_unquote(json_extract(employeedata,"$.contactnumber")),
	json_unquote(json_extract(employeedata,"$.emergencycontactnumber")),
	json_unquote(json_extract(employeedata,"$.emergencycontactrelation")),
	json_unquote(json_extract(employeedata,"$.emergencycontactname")),
	json_unquote(json_extract(employeedata,"$.address")),
	json_unquote(json_extract(employeedata,"$.city")),
	json_unquote(json_extract(employeedata,"$.state")),
	json_unquote(json_extract(employeedata,"$.pincode")),
	json_unquote(json_extract(employeedata,"$.country")),
	json_unquote(json_extract(employeedata,"$.paddress")),
	json_unquote(json_extract(employeedata,"$.pcity")),
	json_unquote(json_extract(employeedata,"$.pstate")),
	json_unquote(json_extract(employeedata,"$.ppincode")),
	json_unquote(json_extract(employeedata,"$.pcountry")),
	json_unquote(json_extract(employeedata,"$.aadharnumber")),
	json_unquote(json_extract(employeedata,"$.passport")),
	json_unquote(json_extract(employeedata,"$.status")));                        

	set @eid = (select employee.id from employee where employee.empid = @employeeid);

	IF @eid is not null then      -- update employee_idgenerator.currentvalue count
		set @prefix = (select v.prefix from employee_idgenerator v where v.companylocation = @employeelocation);
		if @prefix is not null then
		update employee_idgenerator set employee_idgenerator.currentvalue = employee_idgenerator.currentvalue + 1 
			   where employee_idgenerator.prefix = @prefix;
		elseif @prefix is null then
		update employee_idgenerator set employee_idgenerator.currentvalue = employee_idgenerator.currentvalue + 1 
			   where employee_idgenerator.prefix is null;
		end if;
		if (json_unquote(json_extract(employeedata,"$.reportingmanager")) <> 'Self') then
			INSERT INTO employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
			(@eid,json_unquote(json_extract(employeedata,"$.reportingmanager")),current_timestamp());
			INSERT INTO employee_roles(employee_id,role_id,rmid) VALUES
			(@eid,json_unquote(json_extract(employeedata,"$.usertype")),json_unquote(json_extract(employeedata,"$.reportingmanager")));
		elseif (json_unquote(json_extract(employeedata,"$.reportingmanager")) = 'Self') then
			INSERT INTO employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
			(@eid,@eid,current_timestamp());
			INSERT INTO employee_roles(employee_id,role_id,rmid) VALUES
			(@eid,json_unquote(json_extract(employeedata,"$.usertype")),@eid);
		end if;
		INSERT INTO employee_designations(empid,designationid,effectivestartdate) values
		(@eid,json_unquote(json_extract(employeedata,"$.designation")),current_timestamp());
		
		-- adding leave balance records for the employee
		if exists(select modulesmaster.id from modulesmaster where modulesmaster.modulename = 'Leaves') then
		create temporary table temp_lm_leavesmaster (
			leave_id int(11),
			leavetype int(1)
		);
		insert into temp_lm_leavesmaster(leave_id) select lm_leavesmaster.id from lm_leavesmaster;
		update temp_lm_leavesmaster -- leavetype to add/not add year 
		set temp_lm_leavesmaster.leavetype = 1
		where leave_id in (select lm_rulevalues.leavetypeid from lm_rulevalues where lm_rulevalues.ruleid = 3);
		if exists(select temp_lm_leavesmaster.leave_id from temp_lm_leavesmaster where temp_lm_leavesmaster.leave_id = 9) then
			update temp_lm_leavesmaster set temp_lm_leavesmaster.leavetype = 1
			where temp_lm_leavesmaster.leave_id = 9;
		end if;
		set @year = (select fn_get_leave_cycle_year());
		open leavetype_cursor;
			set @ltype_count = 0;
			set @ltype_count = found_rows();
			set @e = 0;
			WHILE @e < @ltype_count do
				fetch leavetype_cursor into vleave_id,vid;
				insert into lm_employeeleavebalance(empid,leavetypeid,balance,lastupdatedat,leave_cycle_year) values
				(@eid,vleave_id,0,current_timestamp(),case when vid = 1 then @year else null end);
				set @e = @e + 1;
			end while;
		close leavetype_cursor;
		call credit_employee_event_leave(@eid); -- crediting event-based leaves
		drop temporary table temp_lm_leavesmaster;
		end if; 
		insert into employee_departments(empid,departmentid,effectivestartdate) values
		(@eid,json_unquote(json_extract(employeedata,"$.department")),current_timestamp());
		insert into employee_weekoffs(empid,effectivefromdate) values (@eid,current_date());
	end if;

	insert into employee_worklocations(empid,locationid,effectivefromdate) values
	(@eid,@employeelocation,current_timestamp());

	insert into employee_financials_master(`empid`,`bankname`,`ifsccode`,`nameasperbankaccount`,
	`branchname`,`bankaccountnumber`,`uanumber`,`pfaccountnumber`,`pan`,`esi`)
	values
	(
	@eid,
	json_unquote(json_extract(employeedata,"$.bankname")),
	json_unquote(json_extract(employeedata,"$.ifsccode")),
	json_unquote(json_extract(employeedata,"$.nameasperbankaccount")),
	json_unquote(json_extract(employeedata,"$.branchname")),
	json_unquote(json_extract(employeedata,"$.bankaccountnumber")),
	json_unquote(json_extract(employeedata,"$.uanumber")),
	json_unquote(json_extract(employeedata,"$.pfaccountnumber")),
	json_unquote(json_extract(employeedata,"$.pan")),
	json_unquote(json_extract(employeedata,"$.esi"))
	);
	/*
	insert into employee_shift_details(empid,shiftid,fromdate) values
	(
	@eid,
	json_unquote(json_extract(employeedata,"$.shift")),
	current_timestamp());*/

	set @i = 0;
	set @insertrstring = '';
	while @i < @relationscount do
		-- select json_unquote(json_extract(employeedata,concat('$.relations[',@i,'].gender')));
		set @insertrstring = concat('insert into employee_relations(`empid`,`firstname`,`lastname`,`gender`,`contactnumber`,`dateofbirth`,`relationship`,`status`)
		values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].firstname")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].lastname")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].gender")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].contactnumber")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].dateofbirth")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].relationship")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].status")))');
		-- select @insertrstring;
		prepare stmt from @insertrstring;
		execute stmt;
		deallocate prepare stmt;
		set @insertrstring = '';
		
		set @i = @i + 1;
	end while;

	set @j = 0;
	set @insertedstring = '';
	while @j < @educationcount do
		set @insertedstring = concat('insert into employee_education_details(`empid`,`course`,`institutename`,`fromdate`,`todate`)
		values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.education[',@j,'].course")),
		json_unquote(json_extract(''',employeedata,''',"$.education[',@j,'].institutename")),
		json_unquote(json_extract(''',employeedata,''',"$.education[',@j,'].fromdate")),
		json_unquote(json_extract(''',employeedata,''',"$.education[',@j,'].todate")))');
		-- select @insertedstring;
		prepare estmt from @insertedstring;
		execute estmt;
		deallocate prepare estmt;
		set @insertedstring = '';

		set @j = @j + 1;
	end while;

	set @insertexstring = '';
	set @k = 0;
	while @k < @experiencecount do
		set @insertexstring = concat('insert into employee_experience_details(`empid`,`companyname`,`skills`,`fromdate`,`todate`)
		values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].companyname")),
		json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].skills")),
		json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].fromdate")),
		json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].todate")))');
		prepare stmt from @insertexstring;
		execute stmt;
		deallocate prepare stmt;
		set @insertexstring = '';
		
		set @k = @k + 1;
	end while;

	end;
	else
	begin
	update employee set
	-- `empid` = (select json_unquote(json_extract(employeedata,"$.empid"))),
	`firstname` 	= (select json_unquote(json_extract(employeedata,"$.firstname"))),
	`middlename` 	= (select json_unquote(json_extract(employeedata,"$.middlename"))),
	`lastname` 		= (select json_unquote(json_extract(employeedata,"$.lastname"))),
	`personalemail` = (select json_unquote(json_extract(employeedata,"$.personalemail"))),
	`officeemail` 	= (select json_unquote(json_extract(employeedata,"$.officeemail"))),
	`dateofbirth` 	= (select json_unquote(json_extract(employeedata,"$.dateofbirth"))),
	`gender` 		= (select json_unquote(json_extract(employeedata,"$.gender"))),
	`maritalstatus` = (select json_unquote(json_extract(employeedata,"$.maritalstatus"))),
	`employmenttype` 			= (select json_unquote(json_extract(employeedata,"$.employmenttype"))),
	`dateofjoin` 				= (select json_unquote(json_extract(employeedata,"$.dateofjoin"))),
	`bloodgroup` 				= (select json_unquote(json_extract(employeedata,"$.bloodgroup"))),
	`contactnumber` 			= (select json_unquote(json_extract(employeedata,"$.contactnumber"))),
	`emergencycontactnumber` 	= (select json_unquote(json_extract(employeedata,"$.emergencycontactnumber"))),
	`emergencycontactrelation` = (select json_unquote(json_extract(employeedata,"$.emergencycontactrelation"))),
	`emergencycontactname` = (select json_unquote(json_extract(employeedata,"$.emergencycontactname"))),
	`address` 		= (select json_unquote(json_extract(employeedata,"$.address"))),
	`city` 			= (select json_unquote(json_extract(employeedata,"$.city"))),
	`state` 		= (select json_unquote(json_extract(employeedata,"$.state"))),
	`pincode` 		= (select json_unquote(json_extract(employeedata,"$.pincode"))),
	`country` 		= (select json_unquote(json_extract(employeedata,"$.country"))),
	`paddress` 		= (select json_unquote(json_extract(employeedata,"$.paddress"))),
	`pcity` 		= (select json_unquote(json_extract(employeedata,"$.pcity"))),
	`pstate` 		= (select json_unquote(json_extract(employeedata,"$.pstate"))),
	`ppincode` 		= (select json_unquote(json_extract(employeedata,"$.ppincode"))),
	`pcountry` 		= (select json_unquote(json_extract(employeedata,"$.pcountry"))),
	`aadharnumber` 	= (select json_unquote(json_extract(employeedata,"$.aadharnumber"))),
	`passport` 		= (select json_unquote(json_extract(employeedata,"$.passport"))),
	`status` 		= (select json_unquote(json_extract(employeedata,"$.status")))
	where id = @eid;

	IF ((SELECT reportingmanagerid FROM employee_reportingmanagers WHERE empid = @eid order by id desc limit 1) <> (select json_unquote(json_extract(employeedata,"$.reportingmanager")))) THEN
		update employee_reportingmanagers SET effectiveenddate = current_timestamp()
		where empid = @eid and effectiveenddate is null order by employee_reportingmanagers.id desc limit 1;
		if (json_unquote(json_extract(employeedata,"$.reportingmanager")) <> 'Self') then
			insert into employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
			(@eid,json_unquote(json_extract(employeedata,"$.reportingmanager")),current_timestamp());
		elseif (json_unquote(json_extract(employeedata,"$.reportingmanager")) = 'Self') then
			insert into employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
			(@eid,@eid,current_timestamp());
		end if;
	END IF;

	IF ((SELECT designationid FROM employee_designations WHERE empid = @eid order by id desc limit 1) <> (select json_unquote(json_extract(employeedata,"$.designation")))) THEN
		update employee_designations SET effectiveenddate = current_timestamp()
		where empid = @eid and effectiveenddate is null order by employee_designations.id desc limit 1;
		insert into employee_designations(empid,designationid,effectivestartdate) VALUES
		(@eid,json_unquote(json_extract(employeedata,"$.designation")),current_timestamp());
	END IF;

	IF ((SELECT departmentid FROM employee_departments WHERE empid = @eid order by id desc limit 1) <> (select json_unquote(json_extract(employeedata,"$.department")))) THEN
		update employee_departments SET effectiveenddate = current_timestamp()
		where empid = @eid and effectiveenddate is null order by employee_departments.id desc limit 1;
		insert into employee_departments(empid,departmentid,effectivestartdate) VALUES
		(@eid,json_unquote(json_extract(employeedata,"$.department")),current_timestamp());
	END IF;

	if ((select role_id from employee_roles e,rolesmaster m where e.role_id = m.id and m.name in ('Employee','Manager','Admin') and e.employee_id = @eid) <> (select json_unquote(json_extract(employeedata,"$.usertype")))) then
		update employee_roles set employee_roles.role_id = (select json_unquote(json_extract(employeedata,"$.usertype")))
		where employee_roles.employee_id = @eid and
		employee_roles.role_id in (select id from rolesmaster where rolesmaster.name in ('Employee','Manager','Admin'));
	end if;

	update employee_financials_master
	set `bankname` = (select json_unquote(json_extract(employeedata,"$.bankname"))),
	`ifsccode` = (select json_unquote(json_extract(employeedata,"$.ifsccode"))),
	`nameasperbankaccount` = (select json_unquote(json_extract(employeedata,"$.nameasperbankaccount"))),
	`branchname` = (select json_unquote(json_extract(employeedata,"$.branchname"))),
	`bankaccountnumber`= (select json_unquote(json_extract(employeedata,"$.bankaccountnumber"))),
	`uanumber`= (select json_unquote(json_extract(employeedata,"$.uanumber"))),
	`pfaccountnumber` = (select json_unquote(json_extract(employeedata,"$.pfaccountnumber"))),
	`pan` = (select json_unquote(json_extract(employeedata,"$.pan"))),
	`esi` = (select json_unquote(json_extract(employeedata,"$.esi")))
	where employee_financials_master.empid = @eid;

	if((select locationid from employee_worklocations where `employee_worklocations`.`empid` = @eid and effectivetodate is null) <> @employeelocation) then
	update employee_worklocations 
	set effectivetodate = current_timestamp() where `employee_worklocations`.`empid` = @eid
	and effectivetodate is null;
	insert into employee_worklocations(empid,locationid,effectivefromdate) values
	(@eid,@employeelocation,current_timestamp());
	end if;
	/*
	if (select json_unquote(json_extract(employeedata,"$.shift")) <> (select shiftid from employee_shift_details where empid = @eid and todate is null)) then
	begin
	set @maxid = (select max(id) from employee_shift_details where empid = @eid);
	update employee_shift_details set todate = current_timestamp()
	where employee_shift_details.empid = @eid and 
	employee_shift_details.id = @maxid;
	insert into employee_shift_details(empid,shiftid,fromdate) values
	(@eid,
	json_unquote(json_extract(employeedata,"$.shift")),
	current_timestamp()
	);
	end;
	end if;*/

	delete from employee_relations where empid = @eid;

	while @i < @relationscount do
	set @insertrstring = concat('insert into employee_relations(`empid`,`firstname`,`lastname`,`gender`,`contactnumber`,`dateofbirth`,`relationship`,`status`)
	values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].firstname")),
	json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].lastname")),
	json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].gender")),
	json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].contactnumber")),
	json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].dateofbirth")),
	json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].relationship")),
	json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].status")))');
	prepare stmt from @insertrstring;
	execute stmt;
	deallocate prepare stmt;
	set @insertrstring = '';

	set @i = @i + 1;
	end while;

	set @i = 0;

	delete from employee_education_details where empid = @eid;

	while @i < @educationcount do
	set @insertrstring = concat('insert into employee_education_details(`empid`,`course`,`institutename`,`fromdate`,`todate`)
	values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.education[',@i,'].course")),
	json_unquote(json_extract(''',employeedata,''',"$.education[',@i,'].institutename")),
	json_unquote(json_extract(''',employeedata,''',"$.education[',@i,'].fromdate")),
	json_unquote(json_extract(''',employeedata,''',"$.education[',@i,'].todate")))');
	prepare stmt from @insertrstring;
	execute stmt;
	deallocate prepare stmt;
	set @insertrstring = '';

	set @i = @i + 1;
	end while;

	set @i = 0;

	delete from employee_experience_details where empid = @eid;

	while @i < @experiencecount do
	set @insertrstring = concat('insert into employee_experience_details(`empid`,`companyname`,`skills`,`fromdate`,`todate`)
	values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.experience[',@i,'].companyname")),
	json_unquote(json_extract(''',employeedata,''',"$.experience[',@i,'].skills")),
	json_unquote(json_extract(''',employeedata,''',"$.experience[',@i,'].fromdate")),
	json_unquote(json_extract(''',employeedata,''',"$.experience[',@i,'].todate")))');
	prepare stmt from @insertrstring;
	execute stmt;
	deallocate prepare stmt;
	set @insertrstring = '';

	set @i = @i + 1;
	end while;

	end;
	end if;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `setemployeemaster_V2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `setemployeemaster_V2`(
	in employeedata varchar(8000)
	)
	begin
		DECLARE vleave_id int(11);
		declare vid int(1);
		DECLARE leavetype_cursor cursor for select temp_lm_leavesmaster.leave_id,leavetype from temp_lm_leavesmaster;

		set @relationscount = 0;
		set @relationscount = (select json_length(employeedata, '$.relations'));
		set @educationcount = 0;
		set @educationcount = (select json_length(employeedata, '$.education'));
		set @experiencecount = 0;
		set @experiencecount = (select json_length(employeedata, '$.experience'));

		set @employeelocation = (select json_unquote(json_extract(employeedata,"$.companylocation")));
		-- select @employeelocation;
		set @i = 0;
		set @j = 0;
		set @k = 0;
		set @insertrstring = '';
		set @insertedstring = '';
		set @insertexstring = '';
		set @updaterstring = '';
		set @eid = 0;
		set @rid = 0;

	set @eid = (select id from employee where empid = (select json_unquote(json_extract(employeedata,"$.empid"))));    
	-- select @eid;
	if @eid is null then
	begin
		select employee_idgenerator.prefix,employee_idgenerator.seed,employee_idgenerator.currentvalue 
		into @ei_prefix,@ei_seed,@ei_currentvalue 
		from employee_idgenerator where employee_idgenerator.companylocation = @employeelocation;
	if (@ei_prefix is not null) then
		set @employeeid = (select concat(@ei_prefix,@ei_currentvalue));
	else
		set @employeeid = (select @ei_currentvalue);
		--  select @employeeid;
	end if;

	insert into employee(`empid`,`firstname`,`middlename`,`lastname`,`personalemail`,`officeemail`,`dateofbirth`,
	`gender`,`maritalstatus`,`employmenttype`,`dateofjoin`,
	`bloodgroup`,`contactnumber`,`emergencycontactnumber`,`emergencycontactrelation`,
	`emergencycontactname`,`address`,`city`,`state`,`pincode`,`country`,`paddress`,`pcity`,
	`pstate`,`ppincode`,`pcountry`,`aadharnumber`,`passport`,`status`)
	values
	(@employeeid,
	json_unquote(json_extract(employeedata,"$.firstname")),
	json_unquote(json_extract(employeedata,"$.middlename")),
	json_unquote(json_extract(employeedata,"$.lastname")),
	json_unquote(json_extract(employeedata,"$.personalemail")),
	json_unquote(json_extract(employeedata,"$.officeemail")),
	json_unquote(json_extract(employeedata,"$.dateofbirth")),
	json_unquote(json_extract(employeedata,"$.gender")),
	json_unquote(json_extract(employeedata,"$.maritalstatus")),
	json_unquote(json_extract(employeedata,"$.employmenttype")),
	json_unquote(json_extract(employeedata,"$.dateofjoin")),
	json_unquote(json_extract(employeedata,"$.bloodgroup")),
	json_unquote(json_extract(employeedata,"$.contactnumber")),
	json_unquote(json_extract(employeedata,"$.emergencycontactnumber")),
	json_unquote(json_extract(employeedata,"$.emergencycontactrelation")),
	json_unquote(json_extract(employeedata,"$.emergencycontactname")),
	json_unquote(json_extract(employeedata,"$.address")),
	json_unquote(json_extract(employeedata,"$.city")),
	json_unquote(json_extract(employeedata,"$.state")),
	json_unquote(json_extract(employeedata,"$.pincode")),
	json_unquote(json_extract(employeedata,"$.country")),
	json_unquote(json_extract(employeedata,"$.paddress")),
	json_unquote(json_extract(employeedata,"$.pcity")),
	json_unquote(json_extract(employeedata,"$.pstate")),
	json_unquote(json_extract(employeedata,"$.ppincode")),
	json_unquote(json_extract(employeedata,"$.pcountry")),
	json_unquote(json_extract(employeedata,"$.aadharnumber")),
	json_unquote(json_extract(employeedata,"$.passport")),
	json_unquote(json_extract(employeedata,"$.status")));                        

	set @eid = (select employee.id from employee where employee.empid = @employeeid);

	IF @eid is not null then      -- update employee_idgenerator.currentvalue count
		set @prefix = (select v.prefix from employee_idgenerator v where v.companylocation = @employeelocation);
		if @prefix is not null then
		update employee_idgenerator set employee_idgenerator.currentvalue = employee_idgenerator.currentvalue + 1 
			   where employee_idgenerator.prefix = @prefix;
		elseif @prefix is null then
		update employee_idgenerator set employee_idgenerator.currentvalue = employee_idgenerator.currentvalue + 1 
			   where employee_idgenerator.prefix is null;
		end if;
		if (json_unquote(json_extract(employeedata,"$.reportingmanager")) <> 'Self') then
			INSERT INTO employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
			(@eid,json_unquote(json_extract(employeedata,"$.reportingmanager")),current_timestamp());
			INSERT INTO employee_roles(employee_id,role_id,rmid) VALUES
			(@eid,json_unquote(json_extract(employeedata,"$.usertype")),json_unquote(json_extract(employeedata,"$.reportingmanager")));
		elseif (json_unquote(json_extract(employeedata,"$.reportingmanager")) = 'Self') then
			INSERT INTO employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
			(@eid,@eid,current_timestamp());
			INSERT INTO employee_roles(employee_id,role_id,rmid) VALUES
			(@eid,json_unquote(json_extract(employeedata,"$.usertype")),@eid);
		end if;
		INSERT INTO employee_designations(empid,designationid,effectivestartdate) values
		(@eid,json_unquote(json_extract(employeedata,"$.designation")),current_timestamp());
		
		-- adding leave balance records for the employee
		if exists(select modulesmaster.id from modulesmaster where modulesmaster.modulename = 'Leaves') then
		create temporary table temp_lm_leavesmaster (
			leave_id int(11),
			leavetype int(1)
		);
		insert into temp_lm_leavesmaster(leave_id) select lm_leavesmaster.id from lm_leavesmaster;
		update temp_lm_leavesmaster 
		set temp_lm_leavesmaster.leavetype = 1
		where leave_id in (select lm_rulevalues.leavetypeid from lm_rulevalues where lm_rulevalues.ruleid = 3);
		set @year = (select fn_get_leave_cycle_year());
		open leavetype_cursor;
			set @ltype_count = 0;
			set @ltype_count = found_rows();
			set @e = 0;
			WHILE @e < @ltype_count do
				fetch leavetype_cursor into vleave_id,vid;
				insert into lm_employeeleavebalance(empid,leavetypeid,balance,lastupdatedat,leave_cycle_year) values
				(@eid,vleave_id,0,current_timestamp(),case when vid = 1 then @year else null end);
				set @e = @e + 1;
			end while;
		close leavetype_cursor;
		call credit_employee_event_leave(@eid); -- crediting event-based leaves
		drop temporary table temp_lm_leavesmaster;
		end if; 
		insert into employee_departments(empid,departmentid,effectivestartdate) values
		(@eid,json_unquote(json_extract(employeedata,"$.department")),current_timestamp());
		insert into employee_weekoffs(empid,effectivefromdate) values (@eid,current_date());
	end if;

	insert into employee_worklocations(empid,locationid,effectivefromdate) values
	(@eid,@employeelocation,current_timestamp());

	insert into employee_financials_master(`empid`,`bankname`,`ifsccode`,`nameasperbankaccount`,
	`branchname`,`bankaccountnumber`,`uanumber`,`pfaccountnumber`,`pan`,`esi`)
	values
	(
	@eid,
	json_unquote(json_extract(employeedata,"$.bankname")),
	json_unquote(json_extract(employeedata,"$.ifsccode")),
	json_unquote(json_extract(employeedata,"$.nameasperbankaccount")),
	json_unquote(json_extract(employeedata,"$.branchname")),
	json_unquote(json_extract(employeedata,"$.bankaccountnumber")),
	json_unquote(json_extract(employeedata,"$.uanumber")),
	json_unquote(json_extract(employeedata,"$.pfaccountnumber")),
	json_unquote(json_extract(employeedata,"$.pan")),
	json_unquote(json_extract(employeedata,"$.esi"))
	);
	/*
	insert into employee_shift_details(empid,shiftid,fromdate) values
	(
	@eid,
	json_unquote(json_extract(employeedata,"$.shift")),
	current_timestamp());*/

	set @i = 0;
	set @insertrstring = '';
	while @i < @relationscount do
		-- select json_unquote(json_extract(employeedata,concat('$.relations[',@i,'].gender')));
		set @insertrstring = concat('insert into employee_relations(`empid`,`firstname`,`lastname`,`gender`,`contactnumber`,`dateofbirth`,`relationship`,`status`)
		values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].firstname")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].lastname")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].gender")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].contactnumber")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].dateofbirth")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].relationship")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].status")))');
		-- select @insertrstring;
		prepare stmt from @insertrstring;
		execute stmt;
		deallocate prepare stmt;
		set @insertrstring = '';
		
		set @i = @i + 1;
	end while;

	set @j = 0;
	set @insertedstring = '';
	while @j < @educationcount do
		set @insertedstring = concat('insert into employee_education_details(`empid`,`course`,`institutename`,`fromdate`,`todate`)
		values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.education[',@j,'].course")),
		json_unquote(json_extract(''',employeedata,''',"$.education[',@j,'].institutename")),
		json_unquote(json_extract(''',employeedata,''',"$.education[',@j,'].fromdate")),
		json_unquote(json_extract(''',employeedata,''',"$.education[',@j,'].todate")))');
		-- select @insertedstring;
		prepare estmt from @insertedstring;
		execute estmt;
		deallocate prepare estmt;
		set @insertedstring = '';

		set @j = @j + 1;
	end while;

	set @insertexstring = '';
	set @k = 0;
	while @k < @experiencecount do
		set @insertexstring = concat('insert into employee_experience_details(`empid`,`companyname`,`skills`,`fromdate`,`todate`)
		values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].companyname")),
		json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].skills")),
		json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].fromdate")),
		json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].todate")))');
		prepare stmt from @insertexstring;
		execute stmt;
		deallocate prepare stmt;
		set @insertexstring = '';
		
		set @k = @k + 1;
	end while;

	end;
	else
	begin
	update employee set
	-- `empid` = (select json_unquote(json_extract(employeedata,"$.empid"))),
	`firstname` 	= (select json_unquote(json_extract(employeedata,"$.firstname"))),
	`middlename` 	= (select json_unquote(json_extract(employeedata,"$.middlename"))),
	`lastname` 		= (select json_unquote(json_extract(employeedata,"$.lastname"))),
	`personalemail` = (select json_unquote(json_extract(employeedata,"$.personalemail"))),
	`officeemail` 	= (select json_unquote(json_extract(employeedata,"$.officeemail"))),
	`dateofbirth` 	= (select json_unquote(json_extract(employeedata,"$.dateofbirth"))),
	`gender` 		= (select json_unquote(json_extract(employeedata,"$.gender"))),
	`maritalstatus` = (select json_unquote(json_extract(employeedata,"$.maritalstatus"))),
	`employmenttype` 			= (select json_unquote(json_extract(employeedata,"$.employmenttype"))),
	`dateofjoin` 				= (select json_unquote(json_extract(employeedata,"$.dateofjoin"))),
	`bloodgroup` 				= (select json_unquote(json_extract(employeedata,"$.bloodgroup"))),
	`contactnumber` 			= (select json_unquote(json_extract(employeedata,"$.contactnumber"))),
	`emergencycontactnumber` 	= (select json_unquote(json_extract(employeedata,"$.emergencycontactnumber"))),
	`emergencycontactrelation` = (select json_unquote(json_extract(employeedata,"$.emergencycontactrelation"))),
	`emergencycontactname` = (select json_unquote(json_extract(employeedata,"$.emergencycontactname"))),
	`address` 		= (select json_unquote(json_extract(employeedata,"$.address"))),
	`city` 			= (select json_unquote(json_extract(employeedata,"$.city"))),
	`state` 		= (select json_unquote(json_extract(employeedata,"$.state"))),
	`pincode` 		= (select json_unquote(json_extract(employeedata,"$.pincode"))),
	`country` 		= (select json_unquote(json_extract(employeedata,"$.country"))),
	`paddress` 		= (select json_unquote(json_extract(employeedata,"$.paddress"))),
	`pcity` 		= (select json_unquote(json_extract(employeedata,"$.pcity"))),
	`pstate` 		= (select json_unquote(json_extract(employeedata,"$.pstate"))),
	`ppincode` 		= (select json_unquote(json_extract(employeedata,"$.ppincode"))),
	`pcountry` 		= (select json_unquote(json_extract(employeedata,"$.pcountry"))),
	`aadharnumber` 	= (select json_unquote(json_extract(employeedata,"$.aadharnumber"))),
	`passport` 		= (select json_unquote(json_extract(employeedata,"$.passport"))),
	`status` 		= (select json_unquote(json_extract(employeedata,"$.status")))
	where id = @eid;

	IF ((SELECT reportingmanagerid FROM employee_reportingmanagers WHERE empid = @eid order by id desc limit 1) <> (select json_unquote(json_extract(employeedata,"$.reportingmanager")))) THEN
		update employee_reportingmanagers SET effectiveenddate = current_timestamp()
		where empid = @eid and effectiveenddate is null order by employee_reportingmanagers.id desc limit 1;
		if (json_unquote(json_extract(employeedata,"$.reportingmanager")) <> 'Self') then
			insert into employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
			(@eid,json_unquote(json_extract(employeedata,"$.reportingmanager")),current_timestamp());
		elseif (json_unquote(json_extract(employeedata,"$.reportingmanager")) = 'Self') then
			insert into employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
			(@eid,@eid,current_timestamp());
		end if;
	END IF;

	IF ((SELECT designationid FROM employee_designations WHERE empid = @eid order by id desc limit 1) <> (select json_unquote(json_extract(employeedata,"$.designation")))) THEN
		update employee_designations SET effectiveenddate = current_timestamp()
		where empid = @eid and effectiveenddate is null order by employee_designations.id desc limit 1;
		insert into employee_designations(empid,designationid,effectivestartdate) VALUES
		(@eid,json_unquote(json_extract(employeedata,"$.designation")),current_timestamp());
	END IF;

	IF ((SELECT departmentid FROM employee_departments WHERE empid = @eid order by id desc limit 1) <> (select json_unquote(json_extract(employeedata,"$.department")))) THEN
		update employee_departments SET effectiveenddate = current_timestamp()
		where empid = @eid and effectiveenddate is null order by employee_departments.id desc limit 1;
		insert into employee_departments(empid,departmentid,effectivestartdate) VALUES
		(@eid,json_unquote(json_extract(employeedata,"$.department")),current_timestamp());
	END IF;

	if ((select role_id from employee_roles e,rolesmaster m where e.role_id = m.id and m.name in ('Employee','Manager','Admin') and e.employee_id = @eid) <> (select json_unquote(json_extract(employeedata,"$.usertype")))) then
		update employee_roles set employee_roles.role_id = (select json_unquote(json_extract(employeedata,"$.usertype")))
		where employee_roles.employee_id = @eid and
		employee_roles.role_id in (select id from rolesmaster where rolesmaster.name in ('Employee','Manager','Admin'));
	end if;

	update employee_financials_master
	set `bankname` = (select json_unquote(json_extract(employeedata,"$.bankname"))),
	`ifsccode` = (select json_unquote(json_extract(employeedata,"$.ifsccode"))),
	`nameasperbankaccount` = (select json_unquote(json_extract(employeedata,"$.nameasperbankaccount"))),
	`branchname` = (select json_unquote(json_extract(employeedata,"$.branchname"))),
	`bankaccountnumber`= (select json_unquote(json_extract(employeedata,"$.bankaccountnumber"))),
	`uanumber`= (select json_unquote(json_extract(employeedata,"$.uanumber"))),
	`pfaccountnumber` = (select json_unquote(json_extract(employeedata,"$.pfaccountnumber"))),
	`pan` = (select json_unquote(json_extract(employeedata,"$.pan"))),
	`esi` = (select json_unquote(json_extract(employeedata,"$.esi")))
	where employee_financials_master.empid = @eid;

	if((select locationid from employee_worklocations where `employee_worklocations`.`empid` = @eid and effectivetodate is null) <> @employeelocation) then
	update employee_worklocations 
	set effectivetodate = current_timestamp() where `employee_worklocations`.`empid` = @eid
	and effectivetodate is null;
	insert into employee_worklocations(empid,locationid,effectivefromdate) values
	(@eid,@employeelocation,current_timestamp());
	end if;
	/*
	if (select json_unquote(json_extract(employeedata,"$.shift")) <> (select shiftid from employee_shift_details where empid = @eid and todate is null)) then
	begin
	set @maxid = (select max(id) from employee_shift_details where empid = @eid);
	update employee_shift_details set todate = current_timestamp()
	where employee_shift_details.empid = @eid and 
	employee_shift_details.id = @maxid;
	insert into employee_shift_details(empid,shiftid,fromdate) values
	(@eid,
	json_unquote(json_extract(employeedata,"$.shift")),
	current_timestamp()
	);
	end;
	end if;*/

	delete from employee_relations where empid = @eid;

	while @i < @relationscount do
	set @insertrstring = concat('insert into employee_relations(`empid`,`firstname`,`lastname`,`gender`,`contactnumber`,`dateofbirth`,`relationship`,`status`)
	values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].firstname")),
	json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].lastname")),
	json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].gender")),
	json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].contactnumber")),
	json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].dateofbirth")),
	json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].relationship")),
	json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].status")))');
	prepare stmt from @insertrstring;
	execute stmt;
	deallocate prepare stmt;
	set @insertrstring = '';

	set @i = @i + 1;
	end while;

	set @i = 0;

	delete from employee_education_details where empid = @eid;

	while @i < @educationcount do
	set @insertrstring = concat('insert into employee_education_details(`empid`,`course`,`institutename`,`fromdate`,`todate`)
	values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.education[',@i,'].course")),
	json_unquote(json_extract(''',employeedata,''',"$.education[',@i,'].institutename")),
	json_unquote(json_extract(''',employeedata,''',"$.education[',@i,'].fromdate")),
	json_unquote(json_extract(''',employeedata,''',"$.education[',@i,'].todate")))');
	prepare stmt from @insertrstring;
	execute stmt;
	deallocate prepare stmt;
	set @insertrstring = '';

	set @i = @i + 1;
	end while;

	set @i = 0;

	delete from employee_experience_details where empid = @eid;

	while @i < @experiencecount do
	set @insertrstring = concat('insert into employee_experience_details(`empid`,`companyname`,`skills`,`fromdate`,`todate`)
	values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.experience[',@i,'].companyname")),
	json_unquote(json_extract(''',employeedata,''',"$.experience[',@i,'].skills")),
	json_unquote(json_extract(''',employeedata,''',"$.experience[',@i,'].fromdate")),
	json_unquote(json_extract(''',employeedata,''',"$.experience[',@i,'].todate")))');
	prepare stmt from @insertrstring;
	execute stmt;
	deallocate prepare stmt;
	set @insertrstring = '';

	set @i = @i + 1;
	end while;

	end;
	end if;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `seterrormessages` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `seterrormessages`(
		-- IN `errorcode` VARCHAR(20),
		-- IN `screenname` VARCHAR(20), 
		-- IN `errormessage` VARCHAR(1024)
		IN `errordata` VARCHAR(8000) -- JSON array format: [{"errorcode":"LM1","screenname":"","errormessage":"This screen is required"},{"errorcode":"LM2","screenname":"","errormessage":"Fromdate should be lessthan Todate"}]
	)
	BEGIN
		/* DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
		END; */
		
		set @arraylen = (select json_length(`errordata`));
		set @tot = @arraylen;
		while ((@tot-@arraylen) < @tot) do
			set @sqlquery = concat('select json_unquote(json_extract(''',`errordata`,''',"$[',(@tot-@arraylen),']")) into @subjson');
			
			prepare stmt from @sqlquery;
			execute stmt;
			deallocate prepare stmt;
			set @errorcode = json_unquote(json_extract(@subjson,'$.errorcode'));
			set @screenname = json_unquote(json_extract(@subjson,'$.screenname'));
			set @errormessage = json_unquote(json_extract(@subjson,'$.errormessage'));
			if @errorcode not in (select lm_errormessages.errorcode from lm_errormessages where lm_errormessages.errorcode <=> @errorcode) then
				-- new entry, so insert
				insert into lm_errormessages(errorcode,screenname,errormessage) 
				values(@errorcode,@screenname,@errormessage);
			else -- exists, so update
				update lm_errormessages set lm_errormessages.errormessage=@errormessage where lm_errormessages.errorcode <=> @errorcode;
			end if;
			/*if exists(select * from lm_errormessages where lm_errormessages.errorcode <=> @errorcode and lm_errormessages.screenname <=> @screenname) then
				update lm_errormessages set lm_errormessages.errormessage=@errormessage where lm_errormessages.errorcode <=> @errorcode and lm_errormessages.screenname <=>  @screenname;
			else -- new entry, so insert
				insert into lm_errormessages(errorcode,screenname,errormessage) 
				values(@errorcode,@screenname,@errormessage);
			end if;*/
			set @arraylen = @arraylen - 1;
		end while;
		/*if exists(select * from lm_errormessages where lm_errormessages.errorcode = `errorcode` and lm_errormessages.screenname = `screenname`) then
			update lm_errormessages set lm_errormessages.errormessage=`errormessage` where lm_errormessages.errorcode=`errorcode` and lm_errormessages.screenname=`screenname`;
		else -- new entry, so insert
			insert into lm_errormessages(errorcode,screenname,errormessage) 
			values(`errorcode`,`screenname`,`errormessage`);
		end if;*/
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `setleavepolicies` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `setleavepolicies`(
		in `ruledata` text /* json format:
		[{"ruleid":1,
		  "rulename":"advanced_leaves_eligibility",
		  "description":"max leaves eligibility",
		  "value":12,
		  "categoryid":2},
		 {"ruleid": 6,
		  "rulename": "LEAVES_MIN_SERVICE_ELIGIBILITY",
		  "description": "Minimum service (in months) for employees to get these leaves (for the first time joinee)",
		  "value": 12,
		  "leavetypeid": 2}
		 {"ruleid": 6,
		  "rulename": "LEAVES_MIN_SERVICE_ELIGIBILITY",
		  "description": "Minimum service (in months) for employees to get these leaves (for the first time joinee)",
		  "value": 12,
		  "leavetypeid": 2,
		  "status":"Inactive"
		  }] */
	)
	begin
		DECLARE vvalue varchar(64);
		declare vstatus char(8);
		set @arraylen = (select json_length(ruledata));
		set @i =0;
		set @tot= @arraylen;
		set @sqlquery = '';
		while ((@tot-@i)>0) do
			set @sqlquery = concat(@sqlquery,'select json_unquote(json_extract(''',ruledata,''',"$[',@i,']")) into @subjson');
			set @rule_id =  (select json_unquote(json_extract(@subjson,'$.ruleid')));
			set @rvalue = (select json_unquote(json_extract(@subjson,'$.value')));
			set @ltype = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = 
						  (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVETYPE_THAT_CAN_BE_AVAILED_IN_ADVANCE') 
						  order by lm_rulevalues.id desc limit 1);
			prepare stmt from @sqlquery;
			execute stmt;
			deallocate prepare stmt;
			-- select @subjson;    
			set @fromdate = null;
			set @fromdate = (select json_unquote(json_extract(@subjson,'$.isFromDate')));
			set @todate = null;
			set @todate = (select json_unquote(json_extract(@subjson,'$.isToDate')));
			set vvalue = '';
			set vvalue = (select ifnull(lm_rulevalues.value,'') from lm_rulevalues 
						   where lm_rulevalues.leavetypeid = json_unquote(json_extract(@subjson,'$.leavetype_id'))
						   and lm_rulevalues.ruleid = json_unquote(json_extract(@subjson,'$.ruleid'))
						   order by lm_rulevalues.id desc limit 1);
			set vstatus = '';
			set vstatus = (select lm_rulevalues.status from lm_rulevalues 
						   where lm_rulevalues.leavetypeid = json_unquote(json_extract(@subjson,'$.leavetype_id'))
						   and lm_rulevalues.ruleid = json_unquote(json_extract(@subjson,'$.ruleid'))
						   order by lm_rulevalues.id desc limit 1);
						   -- select @fromdate,@todate,vstatus,vvalue;
			if(json_unquote(json_extract(@subjson,'$.leavetype_id')) is not null) then  
				-- update leave colour          
				update lm_leavesmaster set lm_leavesmaster.leavecolor = json_unquote(json_extract(@subjson,'$.leavecolor')) 
				where lm_leavesmaster.id = json_unquote(json_extract(@subjson,'$.leavetype_id'));
				-- insert/update rule values
				if(vvalue = json_unquote(json_extract(@subjson,'$.value')) and -- predefined leave - add with given configuration
					@fromdate = 0 and
					vstatus = 'Active') then
					-- select 1,@fromdate,@todate,vstatus,vvalue;
					update lm_rulevalues set 
						lm_rulevalues.effectivefromdate = current_timestamp()
						where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
					update lm_leavesmaster set lm_leavesmaster.status = 'Active' 
						where lm_leavesmaster.id = json_unquote(json_extract(@subjson,'$.leavetype_id'));   
				elseif(vvalue <> json_unquote(json_extract(@subjson,'$.value')) and -- predefined leave - add with changed configuration
					@fromdate = 0 and
					vstatus = 'Active') then
					-- select 2,@fromdate,@todate,vstatus,vvalue;
					update lm_rulevalues set 
						lm_rulevalues.value = json_unquote(json_extract(@subjson,'$.value')),
						lm_rulevalues.effectivefromdate = current_timestamp()
						where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
					update lm_leavesmaster set lm_leavesmaster.status = 'Active' 
						where lm_leavesmaster.id = json_unquote(json_extract(@subjson,'$.leavetype_id'));    
				elseif(vvalue <> '' and (vvalue <> json_unquote(json_extract(@subjson,'$.value')))
						and @fromdate = 1) then -- both types
					-- select 3,@fromdate,@todate,vstatus,vvalue;
					update lm_rulevalues set lm_rulevalues.status = 'Inactive',
						lm_rulevalues.effectivetodate = current_timestamp() 
						where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
					insert into lm_rulevalues(ruleid,leavetypeid,value,effectivefromdate,status) values
						(json_unquote(json_extract(@subjson,'$.ruleid')),
						json_unquote(json_extract(@subjson,'$.leavetype_id')),
						json_unquote(json_extract(@subjson,'$.value')),
						current_timestamp(),
						json_unquote(json_extract(@subjson,'$.status')));   
				elseif(vvalue = '' and -- customized leave  
						@fromdate = 0  and
						vstatus <> json_unquote(json_extract(@subjson,'$.status')) and vstatus = 'Inactive') then
					-- select 4,@fromdate,@todate,vstatus,vvalue;
					update lm_rulevalues set lm_rulevalues.status = json_unquote(json_extract(@subjson,'$.status')),
						lm_rulevalues.effectivefromdate = current_timestamp(),
						lm_rulevalues.value = json_unquote(json_extract(@subjson,'$.value'))
						where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
					update lm_leavesmaster set lm_leavesmaster.status = 'Active' 
						where lm_leavesmaster.id = json_unquote(json_extract(@subjson,'$.leavetype_id'));   
				elseif(vvalue = json_unquote(json_extract(@subjson,'$.value')) and -- customized leave
					@fromdate = 1 and
					@todate = 1 and
					vstatus <> json_unquote(json_extract(@subjson,'$.status')) and vstatus = 'Inactive') then
					-- select 5,@fromdate,@todate,vstatus,vvalue;
					insert into lm_rulevalues(ruleid,leavetypeid,value,effectivefromdate,status) values
						(json_unquote(json_extract(@subjson,'$.ruleid')),
						json_unquote(json_extract(@subjson,'$.leavetype_id')),
						json_unquote(json_extract(@subjson,'$.value')),
						current_timestamp(),
						json_unquote(json_extract(@subjson,'$.status')));
					-- select 'hi';
				elseif(vvalue = json_unquote(json_extract(@subjson,'$.value')) and -- customized leave
					@fromdate = 1 and
					vstatus <> json_unquote(json_extract(@subjson,'$.status')) and vstatus = 'Active') then
					-- select 6,@fromdate,@todate,vstatus,vvalue;
					update lm_rulevalues set lm_rulevalues.status = json_unquote(json_extract(@subjson,'$.status')),
						lm_rulevalues.effectivetodate = current_timestamp()
						where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
				end if;   
			elseif (json_unquote(json_extract(@subjson,'$.leavetype_id')) is null) then
				set vvalue = 0;
				set vvalue = (select lm_rulevalues.value from lm_rulevalues 
							   where lm_rulevalues.ruleid = json_unquote(json_extract(@subjson,'$.ruleid'))
							   order by lm_rulevalues.effectivefromdate desc limit 1);
			   if(vvalue <> json_unquote(json_extract(@subjson,'$.value'))) then           
					update lm_rulevalues set lm_rulevalues.status = 'Inactive',
					lm_rulevalues.effectivetodate = current_timestamp() 
					where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
					insert into lm_rulevalues(ruleid,value,effectivefromdate,status) values
					(json_unquote(json_extract(@subjson,'$.ruleid')),
					json_unquote(json_extract(@subjson,'$.value')),
					current_timestamp(),
					json_unquote(json_extract(@subjson,'$.status')));
			   end if;
			end if;    
			if (cast(@rule_id as unsigned) = 3 and cast(@rvalue as unsigned) = 12 and (json_unquote(json_extract(@subjson,'$.leavetype_id')) = cast(@ltype as unsigned))) then
				set @rulevalue_id = (select lm_rulevalues.id from lm_rulevalues where lm_rulevalues.ruleid = 1
									 and lm_rulevalues.leavetypeid = 1
									 order by lm_rulevalues.id desc limit 1);
				UPDATE lm_rulevalues 
				set lm_rulevalues.status = 'Inactive',
				lm_rulevalues.effectivetodate = current_timestamp()
				where lm_rulevalues.id = @rulevalue_id;
				insert into lm_rulevalues(ruleid,leavetypeid,status,value) 
				values (1,1,'Active','');
				update lm_leavesmaster 
				set lm_leavesmaster.status = 'Inactive'
				where lm_leavesmaster.id = 1;
			end if;
			set @i = @i+1;
			set @sqlquery = '';
		end while;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `setleavepoliciesv2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `setleavepoliciesv2`(
		in `ruledata` varchar(20000) /* json format:[{"ruleid":1,"rulename":"advanced_leaves_eligibility","description":"max leaves eligibility","value":12,"categoryid":2},
			{"ruleid": 6,"rulename": "LEAVES_MIN_SERVICE_ELIGIBILITY","description": "Minimum service (in months) for employees to get these leaves (for the first time joinee)","value": 12,"leavetypeid": 2}
			{
		"ruleid": 6,
		"rulename": "LEAVES_MIN_SERVICE_ELIGIBILITY",
		"description": "Minimum service (in months) for employees to get these leaves (for the first time joinee)",
		"value": 12,
		"leavetypeid": 2,
		"status":"inactive"
	}
			]
		*/
	)
	begin
		DECLARE vvalue varchar(64);
		declare vefdate boolean;
		declare veedate boolean;
		declare vstatus char(8);
		set @arraylen = (select json_length(ruledata));
		set @i =0;
		set @tot= @arraylen;
		set @sqlquery = '';
		while ((@tot-@i)>0) do
			-- set @subjson = json_unquote(json_extract(ruledata,'$[@i]'));
			set @sqlquery = concat(@sqlquery,'select json_unquote(json_extract(''',ruledata,''',"$[',@i,']")) into @subjson');
			
			prepare stmt from @sqlquery;
			execute stmt;
			deallocate prepare stmt;
			-- select @subjson;    
			set @b = null;
			set @b = (select cast(json_unquote(json_extract(@subjson,'$.isFromDate')) as unsigned));
			set @e = null;
			set @e = (select cast(json_unquote(json_extract(@subjson,'$.isToDate')) as unsigned));
			set vefdate = null;
			set vefdate = (select cast(@b as unsigned));
			set veedate = null;
			set veedate = (select cast(@e as unsigned));
			/* (select lm_rulevalues.effectivefromdate from lm_rulevalues 
						   where lm_rulevalues.leavetypeid = json_unquote(json_extract(@subjson,'$.leavetype_id'))
						   and lm_rulevalues.ruleid = json_unquote(json_extract(@subjson,'$.ruleid'))
						   order by lm_rulevalues.id desc limit 1)*/     
			set vvalue = '';
			set vvalue = (select lm_rulevalues.value from lm_rulevalues 
						   where lm_rulevalues.leavetypeid = json_unquote(json_extract(@subjson,'$.leavetype_id'))
						   and lm_rulevalues.ruleid = json_unquote(json_extract(@subjson,'$.ruleid'))
						   order by lm_rulevalues.id desc limit 1);
			set vstatus = '';
			set vstatus = (select lm_rulevalues.status from lm_rulevalues 
						   where lm_rulevalues.leavetypeid = json_unquote(json_extract(@subjson,'$.leavetype_id'))
						   and lm_rulevalues.ruleid = json_unquote(json_extract(@subjson,'$.ruleid'))
						   order by lm_rulevalues.id desc limit 1);
						   select vefdate,veedate,vstatus,vvalue;
			if(json_unquote(json_extract(@subjson,'$.leavetype_id')) is not null) then            
			update lm_leavesmaster set lm_leavesmaster.leavecolor = json_unquote(json_extract(@subjson,'$.leavecolor')) 
			where lm_leavesmaster.id = json_unquote(json_extract(@subjson,'$.leavetype_id'));
			if(vvalue is null and -- customized leave  
			   vefdate = 0  and
			   vstatus <> json_unquote(json_extract(@subjson,'$.status')) and vstatus = 'Inactive') then
				select 1,vefdate,veedate,vstatus,vvalue;
			   update lm_rulevalues set lm_rulevalues.status = json_unquote(json_extract(@subjson,'$.status')),
			   lm_rulevalues.effectivefromdate = current_timestamp(),
			   lm_rulevalues.value = json_unquote(json_extract(@subjson,'$.value'))
			   where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
			   update lm_leavesmaster set lm_leavesmaster.status = 'Active' 
			   where lm_leavesmaster.id = json_unquote(json_extract(@subjson,'$.leavetype_id'));
			elseif(vvalue = json_unquote(json_extract(@subjson,'$.value')) and -- predefined leave
			   vefdate = 0 and
			   vstatus = 'Active') then
			   select 2,vefdate,veedate,vstatus,vvalue;
			   update lm_rulevalues set 
			   lm_rulevalues.effectivefromdate = current_timestamp()
			   where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
			   update lm_leavesmaster set lm_leavesmaster.status = 'Active' 
			   where lm_leavesmaster.id = json_unquote(json_extract(@subjson,'$.leavetype_id'));   
			elseif(vvalue <> json_unquote(json_extract(@subjson,'$.value')) and -- predefined leave 
			   vefdate = 0 and
			   vstatus = 'Active') then
			   select 3,vefdate,veedate,vstatus,vvalue;
			   update lm_rulevalues set 
			   lm_rulevalues.value = json_unquote(json_extract(@subjson,'$.value')),
			   lm_rulevalues.effectivefromdate = current_timestamp()
			   where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
			   update lm_leavesmaster set lm_leavesmaster.status = 'Active' 
			   where lm_leavesmaster.id = json_unquote(json_extract(@subjson,'$.leavetype_id'));      
			elseif(vvalue = json_unquote(json_extract(@subjson,'$.value')) and -- customized leave
			   vefdate = 1 and
			   veedate = 1 and
			   vstatus <> json_unquote(json_extract(@subjson,'$.status')) and vstatus = 'Inactive') then
			   select 4,vefdate,veedate,vstatus,vvalue;
			   insert into lm_rulevalues(ruleid,leavetypeid,value,effectivefromdate,status) values
			   (json_unquote(json_extract(@subjson,'$.ruleid')),
			   json_unquote(json_extract(@subjson,'$.leavetype_id')),
			   json_unquote(json_extract(@subjson,'$.value')),
			   current_timestamp(),
			   json_unquote(json_extract(@subjson,'$.status')));
			
			elseif(vvalue = json_unquote(json_extract(@subjson,'$.value')) and -- customized leave
			   vefdate = 1 and
			   vstatus <> json_unquote(json_extract(@subjson,'$.status')) and vstatus = 'Active') then
			   select 5,vefdate,veedate,vstatus,vvalue;
			   update lm_rulevalues set lm_rulevalues.status = json_unquote(json_extract(@subjson,'$.status')),
			   lm_rulevalues.effectivetodate = current_timestamp()
			   where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
			elseif(vvalue is not null and (vvalue <> json_unquote(json_extract(@subjson,'$.value')))) then -- both types
			   select 6,vefdate,veedate,vstatus,vvalue;
			   update lm_rulevalues set lm_rulevalues.status = 'Inactive',
			   lm_rulevalues.effectivetodate = current_timestamp() 
			   where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
			   insert into lm_rulevalues(ruleid,leavetypeid,value,effectivefromdate,status) values
			   (json_unquote(json_extract(@subjson,'$.ruleid')),
			   json_unquote(json_extract(@subjson,'$.leavetype_id')),
			   json_unquote(json_extract(@subjson,'$.value')),
			   current_timestamp(),
			   json_unquote(json_extract(@subjson,'$.status')));
			end if;   
			elseif (json_unquote(json_extract(@subjson,'$.leavetype_id')) is null) then
				set vvalue = 0;
				set vvalue = (select lm_rulevalues.value from lm_rulevalues 
							   where lm_rulevalues.ruleid = json_unquote(json_extract(@subjson,'$.ruleid'))
							   order by lm_rulevalues.effectivefromdate desc limit 1);
			   if(vvalue <> json_unquote(json_extract(@subjson,'$.value'))) then           
					update lm_rulevalues set lm_rulevalues.status = 'Inactive',
					lm_rulevalues.effectivetodate = current_timestamp() 
					where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
					insert into lm_rulevalues(ruleid,value,effectivefromdate,status) values
					(json_unquote(json_extract(@subjson,'$.ruleid')),
					json_unquote(json_extract(@subjson,'$.value')),
					current_timestamp(),
					json_unquote(json_extract(@subjson,'$.status')));
			   end if;
			end if;    
			set @i = @i+1;
			set @sqlquery = '';
		end while;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `setmastertable` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `setmastertable`(
		in tablename varchar(255), 
		in schemaname varchar(255), 
		in tabledata varchar(8000)
	)
	begin

		/* declare exit handler for sqlexception
		begin
			rollback;
			select 'an error has occurred, operation rollbacked and the stored procedure was terminated' as message;
		end; */
		
		-- declare @i int;
		set @sqlquery = concat('insert into ',schemaname,'.',tablename);-- tablename);
		set @sqlquery = concat(@sqlquery,'( ');
		set @i = 1;
		set @len = (select count(column_name) from information_schema.columns where table_name=tablename and table_schema=schemaname);
		collist: loop
	   if @i > @len then
		  leave collist;
	   end if;
	   set @autoincrementflag = (select extra from information_schema.columns where table_name=tablename  and table_schema=schemaname and ordinal_position=@i);
	   if (@autoincrementflag!='auto_increment') then
			set @sqlquery = concat(@sqlquery,(select column_name from information_schema.columns where table_name=tablename  and table_schema=schemaname and ordinal_position=@i));
			if @i<@len then
				set @sqlquery = concat(@sqlquery,',');
			end if;
	   end if;
	   set @i = @i + 1;
	   iterate collist;
	   end loop collist;
		
		set @sqlquery = concat(@sqlquery,') values (');
		-- now read the values from json
			set @i = 1;
			jsoncollist: loop
		   if @i > @len then
			  leave jsoncollist;
		   end if;
		   set @autoincrementflag = (select extra from information_schema.columns where table_name=tablename  and table_schema=schemaname and ordinal_position=@i);
		   if (@autoincrementflag!='auto_increment') then
				set @datatype = (select data_type from information_schema.columns where table_name=tablename  and table_schema=schemaname and ordinal_position=@i);
				set @datavalue = trim(json_unquote(json_extract(tabledata,concat('$.',(select column_name from information_schema.columns where table_name=tablename  and table_schema=schemaname and ordinal_position=@i)))));
				-- add single quotes if datatype is varchar or datetime
				if (@datavalue = 'null') then
					set @sqlquery = concat(@sqlquery,'null');
				else
					if (@datatype='varchar' or @datatype='datetime' or @datatype='date') then
						set @sqlquery = concat(@sqlquery,'''');
					end if;
					set @sqlquery = concat(@sqlquery,@datavalue);
					 if (@datatype='varchar' or @datatype='datetime' or @datatype='date') then
						set @sqlquery = concat(@sqlquery,'''');
					end if;
				end if;
				if @i<@len then
					set @sqlquery = concat(@sqlquery,',');
				end if;
		   end if;
		   set @i = @i + 1;
		   iterate jsoncollist;
		   end loop jsoncollist;
			set @sqlquery = concat(@sqlquery,') ');
		  -- select @sqlquery;
		 prepare stmt from @sqlquery;
		 execute stmt;
		 deallocate prepare stmt;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `setnewleavetype` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `setnewleavetype`(
		in `leavetype` varchar(255), 
		in `leavedisplayname` varchar(255), 
		in `leavecolor` varchar(255)
	)
	begin

		-- add record in lm_leavesmaster
		if not exists(select * from lm_leavesmaster where leavename = `leavetype`) then
			insert into lm_leavesmaster(leavename,leavecolor,`status`,display_name) 
			values (leavetype,leavecolor,'Inactive',leavedisplayname);
			
			set @leavetypeid = 0;    
			set @leavetypeid = last_insert_id();    
		
			-- add records in lm_rulevalues
			if (@leavetypeid is not null and @leavetypeid <> 0) then
			insert into lm_rulevalues(ruleid,leavetypeid,status)
			select id,@leavetypeid,'Inactive' from lm_rulemaster where iscommonrule = 'n'
			and lm_rulemaster.rulename not in ('LEAVETYPE_THAT_CAN_BE_AVAILED_IN_ADVANCE',
											   'LEAVES_ELIGIBLE_ON_WEEKOFFS',
											   'LEAVES_ELIGIBLE_ON_COMPANY_HOLIDAYS',
											   'COMPOFF_MIN_WORKING_HOURS_FOR_ELIGIBILITY',
											   'COMPOFF_MAX_BACKDATED_DAYS_PERMITTED_FOR_SUBMISSION',
											   'COMPOFF_THRESHOLD_DAYS_TO_LAPSE_OR_CONVERT_LEAVES_TO_PERKS') ;
			end if;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `setrolemaster` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `setrolemaster`(
		in `rolename` varchar(128)
	)
	begin

		/* declare exit handler for sqlexception
		begin
			rollback;
			select 'an error has occurred, operation rollbacked and the stored procedure was terminated' as message;
		end; */
		insert into rolesmaster(name,iseditable) values(`rolename`,1);
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_advanced_leave_rule_values` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_advanced_leave_rule_values`(
		IN `ltypeid` INT(11)
		)
	BEGIN
	set @color = (select lm_leavesmaster.leavecolor from lm_leavesmaster where lm_leavesmaster.id = `ltypeid`);
	update lm_leavesmaster set lm_leavesmaster.status = 'Active' where lm_leavesmaster.leavename = 'Advanced Leave';
	update lm_rulevalues m, lm_rulevalues v
	set m.value = v.value,
		m.effectivefromdate = current_timestamp(),
		m.status = 'Active'
	where m.ruleid = v.ruleid
		and m.leavetypeid = (select lm_leavesmaster.id from lm_leavesmaster where leavename = 'Advanced Leave')
		and v.leavetypeid = `ltypeid`;
	UPDATE lm_rulevalues
	SET lm_rulevalues.value = `ltypeid`
	WHERE lm_rulevalues.leavetypeid = (select lm_leavesmaster.id from lm_leavesmaster where leavename = 'Advanced Leave')    
	and lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVETYPE_THAT_CAN_BE_AVAILED_IN_ADVANCE');
	update lm_leavesmaster set lm_leavesmaster.leavecolor = @color
	where lm_leavesmaster.leavename = 'Advanced Leave';
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_announcements` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_announcements`(announcementdata mediumtext)
	begin
		 declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; 
		set @announceid=(select json_unquote(json_extract(announcementdata,"$.id")));	
		if (ifnull(@announceid,0)=0) then
			insert into ems_announcements(`topicid`,`title`,`fromdate`,`todate`,`description`,`status`,`created_on`,`created_by`) values
			(
			(select json_unquote(json_extract(announcementdata,"$.topicid"))),
			(select json_unquote(json_extract(announcementdata,"$.title"))),
			(select json_unquote(json_extract(announcementdata,"$.fromdate"))),
			(select json_unquote(json_extract(announcementdata,"$.todate"))),
			(select json_unquote(json_extract(announcementdata,"$.description"))),
			(select json_unquote(json_extract(announcementdata,"$.status"))),
			current_timestamp(),
			(select json_unquote(json_extract(announcementdata,"$.actionby")))
			);
			select 0 as statuscode;
		else 
			update ems_announcements r set 
			r.topicid =(select json_unquote(json_extract(announcementdata,"$.topicid"))),
			r.title =(select json_unquote(json_extract(announcementdata,"$.title"))),
			r.fromdate =(select json_unquote(json_extract(announcementdata,"$.fromdate"))),
			r.todate =(select json_unquote(json_extract(announcementdata,"$.todate"))),
			r.description =(select json_unquote(json_extract(announcementdata,"$.description"))),
			r.status = (select json_unquote(json_extract(announcementdata,"$.status"))),
			r.updated_on=current_timestamp(),
			r.updated_by= (select json_unquote(json_extract(announcementdata,"$.actionby")))
			where r.id = @announceid;
			select 0 as statuscode;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_announcements_topics_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_announcements_topics_master`(
		in topic_id int(11),
		in topic varchar(64),
		in topic_status int(11), -- values: 1(Active) , 2(Inactive)
		in actionby int(11)
	)
	begin
		declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; 
		
		if (ifnull(topic_id,0)=0) then
			insert into ems_announcements_topics_master(`topic`,`status`,`created_on`,`created_by`) values
			(topic,topic_status,current_timestamp(),actionby);
				select 0 as statuscode;
		else
			update ems_announcements_topics_master r
			set r.topic=topic,
			r.status = topic_status,
			r.updated_on=current_timestamp(),
			r.updated_by=actionby
			where r.id = topic_id;
			select 0 as statuscode;
		end if;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_approve_leave` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_approve_leave`(
	id int(11),
	leave_id int(11),
	emp_id int(11),
	approver_id int(11),
	leavestatus varchar(32),
	reason varchar(512),
	detail varchar(32)
	)
	begin
	select lm_employeeleaves.leavecount, lm_employeeleaves.leavetype into @leave_count, @leave_type 
	from lm_employeeleaves where lm_employeeleaves.id = leave_id;
	set @freq = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_CREDIT_FREQUENCY');
	IF (leavestatus = 'Approved') then
		UPDATE lm_leaveapprovalstatustracker 
			SET lm_leaveapprovalstatustracker.status = 'Approved',
			lm_leaveapprovalstatustracker.updateddate = current_timestamp()
			WHERE lm_leaveapprovalstatustracker.id = id
			and lm_leaveapprovalstatustracker.empid = emp_id
			and lm_leaveapprovalstatustracker.leaveid = leave_id
			and lm_leaveapprovalstatustracker.approverid = approver_id;
		UPDATE lm_employeeleaves
			SET lm_employeeleaves.leavestatus = 'Approved',
			lm_employeeleaves.approvedon = current_timestamp(),
			lm_employeeleaves.approvedby = approver_id
			WHERE lm_employeeleaves.empid = emp_id
			and lm_employeeleaves.id = leave_id;
		if (@freq not in (select lm_rulevalues.ruleid from lm_rulevalues where lm_rulevalues.leavetypeid = @leave_type)) then
		UPDATE lm_employee_utilized_event_leaves
			SET lm_employee_utilized_event_leaves.leavestatus = 'Approved',
			lm_employee_utilized_event_leaves.approvedon = current_timestamp(),
			lm_employee_utilized_event_leaves.approvedby = approver_id
			WHERE lm_employee_utilized_event_leaves.empid = emp_id
			and lm_employee_utilized_event_leaves.id = leave_id;
		end if;
	ELSEIF (leavestatus = 'Rejected') then
		UPDATE lm_leaveapprovalstatustracker 
			SET lm_leaveapprovalstatustracker.status = 'Rejected',
			lm_leaveapprovalstatustracker.action_reason = `reason`,
			lm_leaveapprovalstatustracker.updateddate = current_timestamp()
			WHERE lm_leaveapprovalstatustracker.id = id
			and lm_leaveapprovalstatustracker.empid = emp_id
			and lm_leaveapprovalstatustracker.leaveid = leave_id
			and lm_leaveapprovalstatustracker.approverid = approver_id;
		UPDATE lm_employeeleaves
			SET lm_employeeleaves.leavestatus = 'Rejected',
			lm_employeeleaves.updatedon = current_timestamp(),
			lm_employeeleaves.action_reason = reason
			WHERE lm_employeeleaves.empid = emp_id
			and lm_employeeleaves.id = leave_id;
		if (@freq not in (select lm_rulevalues.ruleid from lm_rulevalues where lm_rulevalues.leavetypeid = @leave_type)) then
			UPDATE lm_employee_utilized_event_leaves
			SET lm_employee_utilized_event_leaves.leavestatus = 'Rejected',
			lm_employee_utilized_event_leaves.updatedon = current_timestamp(),
			lm_employee_utilized_event_leaves.action_reason = reason
			WHERE lm_employee_utilized_event_leaves.empid = emp_id
			and lm_employee_utilized_event_leaves.id = leave_id;
		end if;    
		update lm_employeeleavebalance 
			set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance + @leave_count),
				lm_employeeleavebalance.lastupdatedat = current_timestamp()
			where lm_employeeleavebalance.empid = emp_id 
			and lm_employeeleavebalance.leavetypeid = @leave_type;  
		if (@leave_type = 9) then
		set @utilized_leave_id = (select lm_register_comp_off.utilized_leave_id from lm_register_comp_off 
											  where lm_register_comp_off.empid = `emp_id` and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d'));    
					if((select instr(@utilized_leave_id,',')) = 0) then -- verify if only one entry is there in utilized_leave_id column and drop it
						update lm_register_comp_off
						set lm_register_comp_off.utilized_leave_id = null,
							lm_register_comp_off.status = 'Approved'
						where lm_register_comp_off.empid = `emp_id`
						and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');
					else -- dropping the deleted leaveid 
						if(select substring_index(@utilized_leave_id,',',1) = `id`) then
							update lm_register_comp_off
								set lm_register_comp_off.utilized_leave_id = (select substring_index(@utilized_leave_id,',',-1)),
									lm_register_comp_off.status = 'Approved'
								where lm_register_comp_off.empid = `emp_id`
								and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');
						else
							update lm_register_comp_off
								set lm_register_comp_off.utilized_leave_id = (select substring_index(@utilized_leave_id,',',1)),
									lm_register_comp_off.status = 'Approved'
								where lm_register_comp_off.empid = `emp_id`
								and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');
						end if;    
					end if; 
		elseif (@leave_type = 8) then -- bereavement leave
		set @v = (select employee_relations.id from employee_relations where employee_relations.utilized_leave_id = `leave_id`);
					-- undo the previously set relation 
			update employee_relations
				set employee_relations.bereavement_leave_utilized = 0,
					employee_relations.utilized_leave_id = null,
					employee_relations.status = 'Alive'
				where employee_relations.id = @v
				and employee_relations.empid = `emp_id`;            
		end if;
	ELSEIF (leavestatus = 'Cancel Approved') then   
		UPDATE lm_leaveapprovalstatustracker 
			SET lm_leaveapprovalstatustracker.status = 'Cancel Approved',
			lm_leaveapprovalstatustracker.updateddate = current_timestamp()
			WHERE lm_leaveapprovalstatustracker.id = id
			and lm_leaveapprovalstatustracker.empid = emp_id
			and lm_leaveapprovalstatustracker.leaveid = leave_id
			and lm_leaveapprovalstatustracker.approverid = approver_id;
		UPDATE lm_employeeleaves
			SET lm_employeeleaves.leavestatus = 'Cancelled',
			lm_employeeleaves.updatedon = current_timestamp()
			WHERE lm_employeeleaves.empid = emp_id
			and lm_employeeleaves.id = leave_id;
		if (@freq not in (select lm_rulevalues.ruleid from lm_rulevalues where lm_rulevalues.leavetypeid = @leave_type)) then
		UPDATE lm_employee_utilized_event_leaves
			SET lm_employee_utilized_event_leaves.leavestatus = 'Cancelled',
			lm_employee_utilized_event_leaves.updatedon = current_timestamp()
			WHERE lm_employee_utilized_event_leaves.id = leave_id;
		end if;
		if (@leave_type = 8) then -- bereavement leave
		set @v = (select employee_relations.id from employee_relations where employee_relations.utilized_leave_id = `leave_id`);
					-- undo the previously set relation 
			update employee_relations
				set employee_relations.bereavement_leave_utilized = 0,
					employee_relations.utilized_leave_id = null,
					employee_relations.status = 'Alive'
				where employee_relations.id = @v
				and employee_relations.empid = `emp_id`;
			update lm_employeeleavebalance 
				set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance + @leave_count),
					 lm_employeeleavebalance.lastupdatedat = current_timestamp()
				where lm_employeeleavebalance.empid = `emp_id` 
				and lm_employeeleavebalance.leavetypeid = @leave_type;    
		elseif (@leave_type = 9) then -- compoff leave
			UPDATE lm_employeeleaves
					SET lm_employeeleaves.leavestatus = 'Cancelled',
						lm_employeeleaves.updatedon = current_timestamp()
					WHERE lm_employeeleaves.id = `leave_id`;
			update lm_employeeleavebalance 
					set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance + @leave_count),
						lm_employeeleavebalance.lastupdatedat = current_timestamp()
					where lm_employeeleavebalance.empid = `emp_id` 
					and lm_employeeleavebalance.leavetypeid = @leave_type;  
					set @utilized_leave_id = (select lm_register_comp_off.utilized_leave_id from lm_register_comp_off 
											  where lm_register_comp_off.empid = `emp_id` and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d'));    
					if((select instr(@utilized_leave_id,',')) = 0) then -- verify if only one entry is there in utilized_leave_id column and drop it
						update lm_register_comp_off
						set lm_register_comp_off.utilized_leave_id = null,
							lm_register_comp_off.status = 'Approved'
						where lm_register_comp_off.empid = `emp_id`
						and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');
					else -- dropping the deleted leaveid 
						if(select substring_index(@utilized_leave_id,',',1) = `id`) then
							update lm_register_comp_off
								set lm_register_comp_off.utilized_leave_id = (select substring_index(@utilized_leave_id,',',-1)),
									lm_register_comp_off.status = 'Approved'
								where lm_register_comp_off.empid = `emp_id`
								and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');
						else
							update lm_register_comp_off
								set lm_register_comp_off.utilized_leave_id = (select substring_index(@utilized_leave_id,',',1)),
									lm_register_comp_off.status = 'Approved'
								where lm_register_comp_off.empid = `emp_id`
								and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');
						end if;    
					end if; 
		
		else
		update lm_employeeleavebalance 
						set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance + @leave_count),
						lm_employeeleavebalance.lastupdatedat = current_timestamp()
						where lm_employeeleavebalance.empid = `emp_id` 
						and lm_employeeleavebalance.leavetypeid = @leave_type;   
		end if;
	ELSEIF (leavestatus = 'Cancel Rejected') then
		UPDATE lm_leaveapprovalstatustracker 
		SET lm_leaveapprovalstatustracker.status = 'Cancel Rejected',
		lm_leaveapprovalstatustracker.action_reason = reason,
		lm_leaveapprovalstatustracker.updateddate = current_timestamp()
		WHERE lm_leaveapprovalstatustracker.id = id
		and lm_leaveapprovalstatustracker.empid = emp_id
		and lm_leaveapprovalstatustracker.leaveid = leave_id
		and lm_leaveapprovalstatustracker.approverid = approver_id;
		UPDATE lm_employeeleaves
		SET lm_employeeleaves.leavestatus = 'Approved',
		lm_employeeleaves.updatedon = current_timestamp(),
		lm_employeeleaves.action_reason = reason
		WHERE lm_employeeleaves.empid = emp_id
		and lm_employeeleaves.id = leave_id;
		if (@freq not in (select lm_rulevalues.ruleid from lm_rulevalues where lm_rulevalues.leavetypeid = @leave_type)) then
			UPDATE lm_employee_utilized_event_leaves
			SET lm_employee_utilized_event_leaves.leavestatus = 'Approved',
			lm_employee_utilized_event_leaves.updatedon = current_timestamp(),
			lm_employee_utilized_event_leaves.action_reason = reason
			WHERE lm_employee_utilized_event_leaves.empid = emp_id
			and lm_employee_utilized_event_leaves.id = leave_id;
		end if;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_attendance_approval_status` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_attendance_approval_status`(
	  `id` int(11),
	  `approver_comments` varchar(255),
	  `action_by`  int(11),
	  `approval_status` varchar(32)
	)
	begin
		update employee_attendance_regularization 
		set approvercomments=`approver_comments`,
			actionby=`action_by`,
			actiondate=current_date(),
			status=`approval_status`
		where employee_attendance_regularization.id=`id`;
		if (approval_status = 'Approved') then
			select employee_attendance_regularization.empid,
				employee_attendance_regularization.shiftid,
				employee_attendance_regularization.fromdate,
				employee_attendance_regularization.todate,
				employee_attendance_regularization.logintime,
				employee_attendance_regularization.logouttime,
				employee_attendance_regularization.worktype
			into @empid,@shiftid,@fromdate,@todate,@logintime,@logouttime,@worktype
			from employee_attendance_regularization where employee_attendance_regularization.id = `id`;
			
			if (@logouttime < @logintime) then
						set @sid = 1;
					else 
						set @sid=0;
					end if;
			set @fromdate = convert(@fromdate,date);
			set @todate = convert(@todate,date);
			drop temporary table if exists emp_holidays;
			create temporary table emp_holidays (holiday_date date);
			-- get holidays list for this employee, into temp table
			insert into emp_holidays
			select distinct v.date from holidaysmaster v 
			 where v.location = (select companyworklocationsmaster.city from companyworklocationsmaster where companyworklocationsmaster.id =
				(SELECT employee_worklocations.locationid FROM employee_worklocations 
				 WHERE employee_worklocations.empid = @empid  order by employee_worklocations.id desc limit 1))
				 and v.leave_cycle_year = (select fn_get_leave_cycle_year());
				 
			while (@fromdate<=@todate) do
			
				set @diff = 0;
				set @diff = (select timediff(@logintime,@logouttime));
				-- get weekoffs
				select weekoffday1,weekoffday2,weekoffday3 into @weekoffday1, @weekoffday2, @weekoffday3 from employee_weekoffs where empid=@empid and @fromdate between effectivefromdate and effectivetodate;
				-- exclude weekoffs & holidays from adding records into attendance table
				if @fromdate not in (select holiday_date from emp_holidays) and dayofweek(@fromdate) not in (ifnull(@weekoffday1,0), ifnull(@weekoffday2,0), ifnull(@weekoffday3,0)) then
					
					insert into employee_attendance(empid,attendancetype,attendancedate,firstlogintime,lastlogouttime,workedhours,productivehours,shiftid)
							values (@empid,@worktype,@fromdate,convert(concat(@fromdate,' ',@logintime),datetime),convert(concat((case when @sid=1 then date_add(@fromdate,interval 1 day) else @fromdate end),' ',@logouttime),datetime),@diff,@diff,@shiftid);
					set @attendanceid = last_insert_id();
				
					insert into employee_attendance_details(attendanceid,punchtime,category)
							values (@attendanceid,convert(concat(@fromdate,' ',@logintime),datetime),'in');
					insert into employee_attendance_details(attendanceid,punchtime,category)
							values (@attendanceid,convert(concat((case when @sid=1 then date_add(@fromdate,interval 1 day) else @fromdate end),' ',@logouttime),datetime),'out');
				end if;	
				set @fromdate = @fromdate + interval 1 day;
				set @weekoffday1 = null;
				set @weekoffday2 = null;
				set @weekoffday3 = null;
			end while;
			drop temporary table emp_holidays;
		end if;        
	 
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_attendance_messages` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_attendance_messages`(
		IN `messagedata` VARCHAR(8000) -- JSON array format: [{"code":"ATT1","screenname":"","message":"This screen is required"},{"code":"ATT2","screenname":"","message":"Fromdate should be lessthan Todate"}]
	)
	BEGIN
		/* DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
		END; */
		
		set @arraylen = (select json_length(`messagedata`));
		set @tot = @arraylen;
		while ((@tot-@arraylen) < @tot) do
			set @sqlquery = concat('select json_unquote(json_extract(''',`messagedata`,''',"$[',(@tot-@arraylen),']")) into @subjson');
			
			prepare stmt from @sqlquery;
			execute stmt;
			deallocate prepare stmt;
			set @code = json_unquote(json_extract(@subjson,'$.code'));
			set @screenname = json_unquote(json_extract(@subjson,'$.screenname'));
			set @message = json_unquote(json_extract(@subjson,'$.message'));
			if @code not in (select attendance_messages.code from attendance_messages where attendance_messages.code <=> @code) then
				-- new entry, so insert
				insert into attendance_messages(code,screenname,message) 
				values(@code,@screenname,@message);
			else -- exists, so update
				update attendance_messages set attendance_messages.message=@message where attendance_messages.code <=> @code;
			end if;
			set @arraylen = @arraylen - 1;
		end while;
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_checklists_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_checklists_master`(
		checklist_items varchar(10000), -- json array
		actionby int(11)
		/*format: {"department":1,"category":"Onboarding","checklists":[{"id":1,"name":"","description":"Setup a desktop","status":"Active"},{"id":2,"name":"","description":"Generate email-id","status":"Active"}]}
		*/
		/*in cid int(11),
		in department int(11),
		in checklist_name varchar(64), 
		in checklist_category varchar(25), -- values: Onboarding/Offboarding
		in checklist_description varchar(255),
		in actionby int(11)*/
	)
	begin

		declare exit handler for sqlexception
		begin
			rollback;
			select -1 as successstate;
		end; 
		set @department = json_unquote(json_extract(checklist_items,'$.department'));
		set @category = json_unquote(json_extract(checklist_items,'$.category'));
		set @jsonlen = json_length(checklist_items,'$.checklists');
		set @i = 0;
		set @failed_descriptions = '[';
		while (@i<@jsonlen) do
			set @cid = json_unquote(json_extract(checklist_items,concat('$.checklists[',@i,'].id')));
			set @checklist_name = json_unquote(json_extract(checklist_items,concat('$.checklists[',@i,'].name')));
			set @description = json_unquote(json_extract(checklist_items,concat('$.checklists[',@i,'].description')));
			set @status = json_unquote(json_extract(checklist_items,concat('$.checklists[',@i,'].status')));
			if @cid is null then -- new (insert)
				if not exists(select * from ems_checklist_master where name=@checklist_name and description=@description and department_id=@department and category=@category) then
					insert into ems_checklist_master(name,description,department_id,category,status,created_on,created_by) values
					(@checklist_name,@description,@department,@category,'Active',current_timestamp(),actionby);
				else
					set @failed_descriptions = concat(@failed_descriptions,'"',@description,'",');
				end if;
			else -- existing (update)
				if exists(select * from ems_checklist_master where id= @cid and name=@checklist_name and description=@description and department_id=@department and category=@category) then
					update 	ems_checklist_master
					set 	name = @checklist_name,
					description = @description,
					department_id = @department,
					category = @category,
					status =  @status,
					updated_on = current_timestamp(),
					updated_by = actionby
					where	id = @cid;
				else
					set @failed_descriptions = concat(@failed_descriptions,'"',@description,'",');
				end if;
			end if;

			set @cid = 0;
			set @checklist_name = '';
			set @description = '';
			
			set @i = @i + 1;
		end while;
		set @failed_descriptions = (case when @failed_descriptions = '[' then @failed_descriptions else substring(@failed_descriptions,1,length(@failed_descriptions)-1) end);
		set @failed_descriptions = concat(@failed_descriptions,']');
		select 0 as successstate, @failed_descriptions as failed_descriptions;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_checklists_master2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_checklists_master2`(
		in cid int(11),
		in department int(11),
		in checklist_name varchar(64), 
		in checklist_category varchar(25), -- values: Onboarding/Offboarding
		in checklist_description varchar(255),
		in actionby int(11)
	)
	begin

		declare exit handler for sqlexception
		begin
			rollback;
			select -1 as successstate;
		end; 
		
		if cid is null and not exists(select * from ems_checklist_master where name=checklist_name and description=checklist_description and department_id=department and category=checklist_category) then
			insert into ems_checklist_master(name,description,department_id,category,status,created_on,created_by) values
			(checklist_name,checklist_description,department,checklist_category,'Active',current_timestamp(),actionby);
		else
			update 	ems_checklist_master
			set 	name = checklist_name,
			description = checklist_description,
			department_id = department,
			category = checklist_category,
			updated_on = current_timestamp(),
			updated_by = actionby
			where	id = cid;
		end if;
		select 0 as successstate;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_checklists_to_employee` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_checklists_to_employee`(
		in cid varchar(10000), -- JSON array format: [23,36,42]
		in employeeid int(11),
		in deptid int(11),
		in c_comment varchar(255), 
		in c_status varchar(25), -- values: Pending/Completed
		in finalstatus varchar(45), -- values: Pending Checklist, Task Completed
		in c_category varchar(25), -- values: Onboarding, Offboarding
		in actionby int(11),
		out successstate int(1)
	)
	begin

		declare exit handler for sqlexception
		begin
			rollback;
		  set  successstate=-1;
		end; 
		
		if cid is null then
			insert into ems_employee_checklist(checklist_id,empid,department_id,status,comment,created_on,created_by,final_status) 
			select m.id,employeeid, m.department_id,c_status,c_comment,current_timestamp(),actionby,finalstatus
			from ems_checklist_master m where m.department_id = ifnull(deptid,m.department_id) and m.category = ifnull(c_category,m.category)
			   and m.status='Active';
		else
			 create temporary table cidtemp (id int(11) auto_increment,tid int(11), key(id) );
			 
			 set @jsl = json_length(cid);
			 set @cnt = @jsl;
			 while (@jsl>0) do
					insert into cidtemp(tid)
					select json_unquote(json_extract(cid,concat('$[',(@cnt-@jsl),']')));
					set @jsl = @jsl - 1;
			 end while;
			
			update ems_employee_checklist eec
			inner join cidtemp temp on temp.tid=eec.checklist_id
			set department_id = deptid,
			status = c_status,
			comment = c_comment,
			final_status=finalstatus
			where empid = employeeid and
			checklist_id = tid;
			
			drop temporary table cidtemp;
		end if;
		set successstate=0;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_company_epf_values` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_company_epf_values`(
		pf_number varchar(18),
		actual_pf_wage_or_restricted_pf_wage_for_employer_contribution varchar(64),
		actual_pf_wage_or_restricted_pf_wage_for_employee_contribution varchar(64),
		include_employer_contribution_in_ctc_value int(1),
		include_employer_edli_contribution_in_ctc_value int(1),
		include_admin_charges_in_ctc_value int(1),
		consider_all_comp_if_pf_wage_is_lt_statutory_value int(1),
		effective_fdate date
	)
	begin
		if (pf_number is not null) then
		update configs set configs.value = pf_number,
		configs.effective_from_date = effective_fdate
		where configs.name = 'Company EPF Registration Number';
		end if;
		update payroll_client_component_configuration_details v
			set v.value = include_employer_contribution_in_ctc_value,
				v.effective_from_date = effective_fdate
			where v.id = 1;
		update payroll_client_component_configuration_details v
			set v.value = include_employer_edli_contribution_in_ctc_value,
				v.effective_from_date = effective_fdate 
			where v.id = 2;
		update payroll_client_component_configuration_details v
			set v.value = include_admin_charges_in_ctc_value,
				v.effective_from_date = effective_fdate 
			where v.id = 3;
		update payroll_client_component_configuration_details v
			set v.value = actual_pf_wage_or_restricted_pf_wage_for_employer_contribution,
				v.effective_from_date = effective_fdate 
			where v.id = 4;
		update payroll_client_component_configuration_details v
			set v.value = actual_pf_wage_or_restricted_pf_wage_for_employee_contribution,
				v.effective_from_date = effective_fdate
			where v.id = 5;
		update payroll_client_component_configuration_details v
			set v.value = consider_all_comp_if_pf_wage_is_lt_statutory_value,
				v.effective_from_date = effective_fdate 
			where v.id = 6;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_company_esi_values` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_company_esi_values`(
		include_employer_contribution_in_ctc int(1)
	)
	begin
	if (include_employer_contribution_in_ctc is not null) then
		select payroll_client_component_configuration_details.id, payroll_client_component_configuration_details.rule_id, 
		payroll_client_component_configuration_details.value into @id,@rule_id,@value 
		from payroll_client_component_configuration_details 
		where payroll_client_component_configuration_details.rule_id = (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master
		where payroll_client_component_configuration_master.rule_name = 'EMPLOYER_CONTRIBUTION_TO_BE_INCLUDED_IN_CTC' and
		payroll_client_component_configuration_master.component_id = 11)
		order by payroll_client_component_configuration_details.id desc limit 1;
		if (include_employer_contribution_in_ctc <> cast(@value as unsigned)) then
			update payroll_client_component_configuration_details
			set payroll_client_component_configuration_details.effective_to_date = current_timestamp()
			where payroll_client_component_configuration_details.id = @id;
			insert into payroll_client_component_configuration_details(rule_id,value,effective_from_date,created_on) values
			(@rule_id,include_employer_contribution_in_ctc,current_timestamp(),current_timestamp());
		end if;              
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_company_pay_schedule` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_company_pay_schedule`(
		monthly_salary_calculation_basis varchar(32), -- valid values: WORKING, CALENDAR
		pay_day_of_month varchar(32), -- valid values : LAST_WORKING_DAY, 1 to 20, LAST_DAY,LAST_BUT_1_DAY,LAST_BUT_2_DAYS
		payroll_window_from_date varchar(64),
		payroll_window_to_date varchar(64),
		leave_window_from_date_in_previous_month varchar(64),
		leave_window_to_date_in_current_month varchar(64),
		non_working_day_payment_options varchar(64)
	)
	begin

		declare exit handler for sqlexception
		begin
			rollback;
		   select -1 as successstate;
		end; 
	 
		set @rule_id = (select id from payroll_client_component_configuration_master where rule_name='CALCULATE_SALARY_BASED_ON_WORKING_DAYS_OR_CALENDAR_DAYS');
		set @monthly_salary_calculation_basis = (select value from payroll_client_component_configuration_details where rule_id=@rule_id and effective_to_date is null);
		if (monthly_salary_calculation_basis <> @monthly_salary_calculation_basis) then
			update payroll_client_component_configuration_details
			set effective_to_date = current_timestamp()
			where rule_id = @rule_id
			and effective_to_date is null;
			
			insert into payroll_client_component_configuration_details(rule_id,value,effective_from_date)
			values(@rule_id,ifnull(monthly_salary_calculation_basis,payroll_client_component_configuration_details.value),current_timestamp());
			
			set @rule_id = 0;
		end if;
		/*
		set @rule_id = (select id from payroll_client_component_configuration_master where rule_name='SALARY_PAY_DAY_OF_MONTH');
		set @pay_day_of_month = (select value from payroll_client_component_configuration_details where rule_id=@rule_id and effective_to_date is null);
		if (pay_day_of_month <> @pay_day_of_month) then
			update payroll_client_component_configuration_details
			set effective_to_date = current_timestamp()
			where rule_id = @rule_id
			and effective_to_date is null;
			
			insert into payroll_client_component_configuration_details(rule_id,value,effective_from_date)
			values(@rule_id,ifnull(pay_day_of_month,payroll_client_component_configuration_details.value),current_timestamp());
			
			set @rule_id = 0;
		end if;
		*/
		set @rule_id = (select id from payroll_client_component_configuration_master where rule_name='PAYROLL_WINDOW_FROM_DATE');
		set @payroll_window_from_date = (select value from payroll_client_component_configuration_details where rule_id=@rule_id and effective_to_date is null);
		if (payroll_window_from_date <> @payroll_window_from_date) then
			update payroll_client_component_configuration_details
			set effective_to_date = current_timestamp()
			where rule_id = @rule_id
			and effective_to_date is null;
			
			insert into payroll_client_component_configuration_details(rule_id,value,effective_from_date)
			values(@rule_id,ifnull(payroll_window_from_date,payroll_client_component_configuration_details.value),current_timestamp());
			
			set @rule_id = 0;
		end if;

		set @rule_id = (select id from payroll_client_component_configuration_master where rule_name='PAYROLL_WINDOW_TO_DATE');
		set @payroll_window_to_date = (select value from payroll_client_component_configuration_details where rule_id=@rule_id and effective_to_date is null);
		if (payroll_window_to_date <> @payroll_window_to_date) then
			update payroll_client_component_configuration_details
			set effective_to_date = current_timestamp()
			where rule_id = @rule_id
			and effective_to_date is null;
			
			insert into payroll_client_component_configuration_details(rule_id,value,effective_from_date)
			values(@rule_id,ifnull(payroll_window_to_date,payroll_client_component_configuration_details.value),current_timestamp());
			
			set @rule_id = 0;
		end if;
		
		set @rule_id = (select id from payroll_client_component_configuration_master where rule_name='LEAVE_WINDOW_START_DATE');
		set @leave_window_from_date_in_previous_month = (select value from payroll_client_component_configuration_details where rule_id=@rule_id and effective_to_date is null);
		if (leave_window_from_date_in_previous_month <> @leave_window_from_date_in_previous_month) then
			update payroll_client_component_configuration_details
			set effective_to_date = current_timestamp()
			where rule_id = @rule_id
			and effective_to_date is null;
			
			insert into payroll_client_component_configuration_details(rule_id,value,effective_from_date)
			values(@rule_id,ifnull(leave_window_from_date_in_previous_month,payroll_client_component_configuration_details.value),current_timestamp());
			
			set @rule_id = 0;
		end if;

		set @rule_id = (select id from payroll_client_component_configuration_master where rule_name='LEAVE_WINDOW_END_DATE');
		set @leave_window_to_date_in_current_month = (select value from payroll_client_component_configuration_details where rule_id=@rule_id and effective_to_date is null);
		if (leave_window_to_date_in_current_month <> @leave_window_to_date_in_current_month) then
			update payroll_client_component_configuration_details
			set effective_to_date = current_timestamp()
			where rule_id = @rule_id
			and effective_to_date is null;
			insert into payroll_client_component_configuration_details(rule_id,payroll_client_component_configuration_details.value,effective_from_date)
			values (@rule_id,ifnull(leave_window_to_date_in_current_month,payroll_client_component_configuration_details.value),current_timestamp());
			set @rule_id = 0;
		end if;
		/*
		set @rule_id = (select id from payroll_client_component_configuration_master where rule_name='NON_WORKING_DAY_PAYMENT_OPTION');
		set @non_working_day_payment_options = (select value from payroll_client_component_configuration_details where rule_id=@rule_id and effective_to_date is null);
		if (non_working_day_payment_options <> @non_working_day_payment_options) then
			update payroll_client_component_configuration_details
			set effective_to_date = current_timestamp()
			where rule_id = @rule_id
			and effective_to_date is null;
			
			insert into payroll_client_component_configuration_details(rule_id,value,effective_from_date)
			values(@rule_id,ifnull(non_working_day_payment_options,null),current_timestamp());
			
			set @rule_id = 0;
		end if; */
		
		select 0 as successstate;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_compoff` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_compoff`(
		in `id` int(11),
		in `empid` int(11),
		in `comp_off_date` date,
		in `worked_hours` int(2),
		in `worked_minutes` int(2),
		in `reason` varchar(1000),
		in `rmid` int(11),
		in `status` varchar(255),
		in `remarks` varchar(1000)
	)
	BEGIN
	IF (`id` IS NULL and `empid` IS NOT NULL) THEN
		INSERT INTO lm_register_comp_off(empid,comp_off_date,applied_date,worked_hours,worked_minutes,reason,rmid,status,remarks,createddate) values
		(empid,comp_off_date,current_timestamp(),worked_hours,worked_minutes,reason,rmid,status,remarks,current_timestamp());
	ELSEIF (`id` is not null) then
		if (`status` = 'Approved') then
			update lm_register_comp_off
				set lm_register_comp_off.status = `status`
				, lm_register_comp_off.updateddate = current_timestamp()
				where lm_register_comp_off.id = `id`;
			update lm_employeeleavebalance 
				set lm_employeeleavebalance.balance = lm_employeeleavebalance.balance + cast('1.00' as decimal(3,2)),
				lm_employeeleavebalance.lastupdatedat = current_timestamp()
				where lm_employeeleavebalance.empid = `empid`
				and lm_employeeleavebalance.leavetypeid = (select lm_leavesmaster.id from lm_leavesmaster where lm_leavesmaster.leavename = 'Comp Off Leave');
		elseif (`status` = 'Rejected') then    
			update lm_register_comp_off 
				set lm_register_comp_off.status = `status`,
				lm_register_comp_off.updateddate = current_timestamp(),
				lm_register_comp_off.remarks = `remarks`
				where lm_register_comp_off.id = `id`;
		end if;
	end if;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_document_category` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_document_category`(
		in document_id int(11),
		in document_category varchar(100),
		in document_status int(11), -- values: 1(Active) , 2(Inactive)
		in actionby int(11)
	)
	begin
		declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; 
		
		if (ifnull(document_id,0)=0)  and not exists(select * from document_category_master  dc where dc.category=document_category) then
			insert into document_category_master(`category`,`status`,`created_on`,`created_by`) values
			(document_category,document_status,current_timestamp(),actionby);
				select 0 as statuscode;
		else
			update document_category_master dc
			set dc.category=document_category,
			dc.status = document_status,
			dc.updated_on=current_timestamp(),
			dc.updated_by=actionby
			where dc.id = document_id;
				select 0 as statuscode;
		end if;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_attendance` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_employee_attendance`(
		`attendancejson` JSON
		/* format:
		[{"empid":101,"attendancetype":"Work from office","attendancedate":"2022-06-01","punchtime":"14:20:03","punchcategory":"in","shift":"general"},
		{"empid":102,"attendancetype":"Work from home","attendancedate":"2022-06-01","punchtime":"18:00:00","punchcategory":"in","shift":"night"}]
		
		
	  `empid` int(11),
	  `attendancetype` int(11),
	  `attendancedate` datetime,
	  `punchtime` datetime,
	  `punchcategory` varchar(16),
	  `shiftid` int(11)*/
	)
	begin
	set @count = (select JSON_LENGTH(`attendancejson`));
	set @tot=@count;

	/*drop table if exists teampatt;

	create  table tempatt(
	  id int(11) auto_increment not null,
	  empid int(11),
	  attendancetype varchar(64),
	  punchtime datetime,
	  punchcategory varchar(16),
	  shift varchar(64),
	  PRIMARY KEY (id)
	);*/
	while (@count>0)  do -- [@tot-@count]
		-- insert into tempatt 
		
		set @empid = json_unquote(json_extract(`attendancejson`,concat('$[',convert((@tot-@count),char),'].empid')));
		-- change empid to id
		set @empid = (select id from employee where empid=@empid);
		set @attendancetype = json_unquote(json_extract(`attendancejson`,concat('$[',convert((@tot-@count),char),'].attendancetype')));
		set @punchtime = json_unquote(json_extract(`attendancejson`,concat('$[',convert((@tot-@count),char),'].punchtime')));
		set @punchcategory = json_unquote(json_extract(`attendancejson`,concat('$[',convert((@tot-@count),char),'].punchcategory')));
		set @shift = json_unquote(json_extract(`attendancejson`,concat('$[',convert((@tot-@count),char),'].shift')));
		
		if (select count(*) from employee_attendance where employee_attendance.empid=@empid and employee_attendance.attendancedate=date(@punchtime))=0 then -- first attendance record for this day
			-- insert data in main attendance table
			insert into employee_attendance(empid,attendancetype,attendancedate,firstlogintime,shiftid) values
			(@empid,(select attendancetypesmaster.id from attendancetypesmaster where type=@attendancetype),date(@punchtime),@punchtime,(select shiftsmaster.id from shiftsmaster where shiftname=@shift));
			-- insert data in details table
			insert into employee_attendance_details(attendanceid,punchtime,category) values
			(last_insert_id(),@punchtime,@punchcategory);
		else -- attendance record already exists forr this day, so just insert data only in details table
			set @attid = (select employee_attendance.id from employee_attendance 
						  where employee_attendance.empid=@empid and employee_attendance.attendancedate=date(@punchtime) 
						  and employee_attendance.attendancetype=(select attendancetypesmaster.id from attendancetypesmaster where type=@attendancetype));
			if (@attid is not null) then
			insert into employee_attendance_details(attendanceid,punchtime,category) values
			(@attid,@punchtime,@punchcategory);
			end if;
		end if;
		
		/*select 	json_unquote(json_extract(`attendancejson`,concat('$[',convert((@tot-@count),char),'].empid'))),
				json_unquote(json_extract(`attendancejson`,concat('$[',convert((@tot-@count),char),'].attendancetype'))),
				json_unquote(json_extract(`attendancejson`,concat('$[',convert((@tot-@count),char),'].punchtime'))),
				json_unquote(json_extract(`attendancejson`,concat('$[',convert((@tot-@count),char),'].punchcategory'))),
				json_unquote(json_extract(`attendancejson`,concat('$[',convert((@tot-@count),char),'].shift')));*/
		
		
		set @count = @count-1;
		
		set @empid = null;
		set @attendancetype = null;
		set @punchtime = null;
		set @punchcategory = null;
		set @shift = null;
		
	end while;



	drop temporary table tempatt;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_attendance_regularization` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_employee_attendance_regularization`(
	  `id` int(11),
	  `emp_id` int(11),
	  `shiftid` int(11),
	  `fromdate` date,
	  `todate` date,
	  `logintime` time,
	  `logouttime` time,
	  `worktype` int(11),
	  `reason` varchar(255),
	  `raisedby` int(11),
	  `approvercomments` varchar(255),
	  `actionby` int(11),
	  `status` varchar(32)
	)
	begin
		SET @doj = (select date(dateofjoin) from employee where employee.id = emp_id);
		SET @valid = (SELECT count(*) from employee_attendance where employee_attendance.empid = emp_id and employee_attendance.attendancedate
					  between fromdate and todate);
		set @reg_valid = (select count(*) from employee_attendance_regularization where employee_attendance_regularization.empid = emp_id and
							employee_attendance_regularization.worktype = `worktype` and 
							employee_attendance_regularization.reason = `reason` and 
						  (employee_attendance_regularization.fromdate between fromdate and todate or  
						  employee_attendance_regularization.todate between fromdate and todate or 
						  -- fromdate between employee_attendance_regularization.fromdate and employee_attendance_regularization.todate
						  (employee_attendance_regularization.fromdate > fromdate and employee_attendance_regularization.todate < todate))
						  and employee_attendance_regularization.status = 'Submitted');              
		set @valid = (@valid + @reg_valid);
		IF (@valid > 0 ) then -- and id is null
			select 0 as validity_status;
		ELSEIF (@doj > fromdate or @doj > todate) then
			select 0 as validity_status;
		else if (id is null) then
				insert into employee_attendance_regularization(empid,applieddate,shiftid,fromdate,todate,logintime,logouttime,worktype,reason,raisedby,actionby,actiondate,status) values
				(`emp_id`,current_date(),`shiftid`,`fromdate`,`todate`,`logintime`,`logouttime`,`worktype`,`reason`,`raisedby`,`actionby`,current_date(),`status`);
				SET @last_insert_id = (select last_insert_id());
				if (@last_insert_id is not null and `status` = 'Approved') then
					drop temporary table if exists emp_holidays;
					 create temporary table emp_holidays (holiday_date date);
					 
					-- get holidays list for this employee, into temp table
					insert into emp_holidays
					select distinct v.date from holidaysmaster v 
					 where v.location = (select companyworklocationsmaster.city from companyworklocationsmaster where companyworklocationsmaster.id =
						(SELECT employee_worklocations.locationid FROM employee_worklocations 
						 WHERE employee_worklocations.empid = emp_id order by employee_worklocations.id desc limit 1))
						 and v.leave_cycle_year = (select fn_get_leave_cycle_year());
	 
					while (fromdate <= todate) do
						set @iid = null;
						if (logouttime < logintime) then
							set @sid = 1;
							set @todate = (select date_add(fromdate,interval 1 day));
						else 
							set @sid=0;
						end if;
						set @diff = timediff(convert(concat((case when @sid <> 1 then `fromdate` else @todate end),' ',`logouttime`),datetime),convert(concat(`fromdate`,' ',`logintime`),datetime));
						
						set @weekoffday1 = null;
						set @weekoffday2 = null;
						set @weekoffday3 = null;
						-- get weekoffs
						select weekoffday1,weekoffday2,weekoffday3 into @weekoffday1, @weekoffday2, @weekoffday3 from employee_weekoffs where employee_weekoffs.empid=`emp_id` and fromdate between effectivefromdate and effectivetodate;
						-- exclude weekoffs &holidays from adding records into attendance table

						if fromdate not in (select holiday_date from emp_holidays) and dayofweek(fromdate) not in (ifnull(@weekoffday1,0), ifnull(@weekoffday2,0), ifnull(@weekoffday3,0)) then
							if not exists(select * from employee_attendance where employee_attendance.empid=`emp_id` and attendancedate=fromdate) then
								insert into employee_attendance(empid,attendancetype,attendancedate,firstlogintime,lastlogouttime,workedhours,productivehours,shiftid) values
								(`emp_id`,`worktype`,`fromdate`,convert(concat(`fromdate`,' ',`logintime`),datetime),convert(concat((case when @sid <> 1 then `fromdate` else @todate end),' ',`logouttime`),datetime),@diff,@diff,`shiftid`);
								set @iid = last_insert_id();
							else 
								set @iid = (select id from employee_attendance where employee_attendance.empid=`emp_id` and attendancedate=fromdate);
							end if;

							insert into employee_attendance_details(attendanceid,punchtime,category)
							values (@iid,convert(concat(`fromdate`,' ',`logintime`),datetime),'in');
							insert into employee_attendance_details(attendanceid,punchtime,category)
							values (@iid,convert(concat((case when @sid <> 1 then `fromdate` else @todate end),' ',`logouttime`),datetime),'out');
						end if;
						SET fromdate = (select date_add(fromdate,interval 1 day));

						set @weekoffday1 = null;
						set @weekoffday2 = null;
						set @weekoffday3 = null;
					end while;
					drop temporary table emp_holidays;
				end if;
				select 1 as validity_status;
			elseif (id is not null) then
				-- check if any request is already raised in these given dates
				if exists(select * from employee_attendance_regularization where employee_attendance_regularization.id = `id` )
					-- and employee_attendance_regularization.empid=`emp_id`
					-- and employee_attendance_regularization.fromdate = `fromdate` and employee_attendance_regularization.todate = `todate`) 
					then 
					update employee_attendance_regularization
						set employee_attendance_regularization.fromdate = `fromdate`,
						employee_attendance_regularization.todate = `todate`,
						employee_attendance_regularization.worktype = `worktype`,
						employee_attendance_regularization.reason = `reason`,
						employee_attendance_regularization.approvercomments = (case when approvercomments is null then employee_attendance_regularization.approvercomments else approvercomments end),
						employee_attendance_regularization.actionby = (case when actionby is null then employee_attendance_regularization.actionby else actionby end),
						employee_attendance_regularization.actiondate = current_date(),
						employee_attendance_regularization.status = (case when status is null then employee_attendance_regularization.status else status end)
						where employee_attendance_regularization.id = id;
						
						select 2 as validity_status;
						
				elseif (select count(*) from employee_attendance_regularization where employee_attendance_regularization.id != `id` and
				  (employee_attendance_regularization.fromdate between fromdate and todate or  
				  employee_attendance_regularization.todate between fromdate and todate or 
				  (employee_attendance_regularization.fromdate > fromdate and employee_attendance_regularization.todate < todate)))=0 then  
						update employee_attendance_regularization
						set employee_attendance_regularization.fromdate = `fromdate`,
						employee_attendance_regularization.todate = `todate`,
						employee_attendance_regularization.worktype = `worktype`,
						employee_attendance_regularization.reason = `reason`,
						employee_attendance_regularization.approvercomments = (case when approvercomments is null then employee_attendance_regularization.approvercomments else approvercomments end),
						employee_attendance_regularization.actionby = (case when actionby is null then employee_attendance_regularization.actionby else actionby end),
						employee_attendance_regularization.actiondate = current_date(),
						employee_attendance_regularization.status = (case when status is null then employee_attendance_regularization.status else status end)
						where employee_attendance_regularization.id = id;
					select 2 as validity_status;
				else
					select 0 as validity_status;
				end if;
			end if;
		   -- select 1 as validity_status;
		end if;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_attendance_summary_by_days` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_employee_attendance_summary_by_days`(
		-- `rundate` date
		day_count integer(3)
	)
	begin
		
	if (day_count >= 0) then
		/* declare exit handler for sqlexception
		begin
			rollback;
			select 'an error has occurred, operation rollbacked and the stored procedure was terminated' as message;
		end; */
		set @breakstr = '';
		-- calculate break time
		-- TO DO ------
		-- first update main table. here update will happen to day before yesterday records only for a current date
		update employee_attendance a 
		set a.lastlogouttime=(select punchtime from  employee_attendance_details where attendanceid =a.id and (select count(*) from employee_attendance_details where attendanceid =a.id) >=2 and coalesce(category,'out') in ('out',null) order by punchtime desc limit 1)
		-- where attendancedate=(case when `rundate` is null then (current_date() + interval -1 day) else `rundate` end)
		where a.attendancedate between date_add(current_date(), interval -day_count day) and current_date()
		and a.lastlogouttime is null
		and a.shiftid is not null
		-- and (select addtime((case when fromtime>totime then convert(concat(date_add(a.attendancedate,interval 1 day),' ',totime),datetime) else convert(concat(a.attendancedate,' ',fromtime),datetime) end),(case when fromtime<totime then '00:59:00' else '-00:59:00' end)) from shiftsmaster where id = a.shiftid) < current_timestamp();
		and (select addtime((case when fromtime>totime then convert(concat(date_add(a.attendancedate,interval 1 day),' ',totime),datetime) else convert(concat(a.attendancedate,' ',totime),datetime) end),'00:59:00') from shiftsmaster where id = a.shiftid) < current_timestamp();
		
		update employee_attendance a 
		set a.workedhours=(case when a.lastlogouttime is null then a.workedhours 
							else case when (a.lastlogouttime > a.firstlogintime)-- exists (select * from shiftsmaster where shiftsmaster.fromtime < shiftsmaster.totime and shiftsmaster.id = a.shiftid) 
									  then timediff(a.lastlogouttime,a.firstlogintime) 
									  else (select sec_to_time(time_to_sec(timediff( cast('24:00:00' as time), time(a.firstlogintime))) + time_to_sec(time(a.lastlogouttime)))) end
							end),		
		a.breakhours=null,
		a.productivehours=timediff(a.workedhours,coalesce(a.breakhours,'00:00:00'))
		-- where attendancedate=(case when `rundate` is null then (current_date() + interval -1 day) else `rundate` end);
		where a.attendancedate between date_add(current_date(), interval -day_count day) and current_date()
		and a.lastlogouttime is not null
		and a.shiftid is not null
		-- and (select addtime((case when fromtime>totime then totime else fromtime end),(case when fromtime<totime then '00:59:00' else '-00:59:00' end)) from shiftsmaster where id = a.shiftid) < time(current_timestamp());
		-- and (select addtime((case when fromtime>totime then convert(concat(date_add(a.attendancedate,interval 1 day),' ',totime),datetime) else convert(concat(a.attendancedate,' ',fromtime),datetime) end),(case when fromtime<totime then '00:59:00' else '-00:59:00' end)) from shiftsmaster where id = a.shiftid) < current_timestamp();
		and (select addtime((case when fromtime>totime then convert(concat(date_add(a.attendancedate,interval 1 day),' ',totime),datetime) else convert(concat(a.attendancedate,' ',totime),datetime) end),'00:59:00') from shiftsmaster where id = a.shiftid) < current_timestamp();
		
		insert into employee_attendance_summary(empid,attendanceid,attendancedate,firstlogintime,lastlogouttime,totalhours,breaks,breaktime,productivehours)
		select distinct ea.empid,ea.id, ea.attendancedate, ea.firstlogintime,ea.lastlogouttime,ea.workedhours,
		(case when (select count(*) from employee_attendance_details where attendanceid=ea.id )<=2 then null
		else
			(select group_concat(convert(time(punchtime),char(4000)) separator ',') from employee_attendance_details where attendanceid=ea.id  order by punchtime)
			end) as breaks,
		ea.breakhours as breaktime, -- this need to be updated 
		ea.productivehours
		from employee_attendance ea, employee_attendance_details ead
		-- where ea.attendancedate=(case when `rundate` is null then (current_date() + interval -1 day) else `rundate` end)
		where ea.attendancedate between date_add(current_date(), interval -day_count day) and current_date()
		-- and ea.id not in (select attendanceid from employee_attendance_summary where attendancedate=(case when `rundate` is null then (current_date() + interval -1 day) else `rundate` end))
		and ea.id not in (select attendanceid from employee_attendance_summary where attendancedate between date_add(current_date(), interval -day_count day) and current_date())
		and ea.lastlogouttime is not null;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_attendance_summary_cron` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_employee_attendance_summary_cron`(
		-- `rundate` date
	)
	begin
		

		/* declare exit handler for sqlexception
		begin
			rollback;
			select 'an error has occurred, operation rollbacked and the stored procedure was terminated' as message;
		end; */
		set @breakstr = '';
		-- calculate break time
		-- TO DO ------
		-- first update main table. here update will happen to day before yesterday records only for a current date
		update employee_attendance a 
    set a.lastlogouttime=(select punchtime from  employee_attendance_details where attendanceid =a.id and (select count(*) from employee_attendance_details where attendanceid =a.id) >=2 and coalesce(category,null,'out') in ('out',null) order by punchtime desc limit 1)
		-- where attendancedate=(case when `rundate` is null then (current_date() + interval -1 day) else `rundate` end)
		where a.attendancedate between date_add(current_date(), interval -31 day) and current_date()
		and a.lastlogouttime is null
		and a.shiftid is not null
		-- and (select addtime((case when fromtime>totime then convert(concat(date_add(a.attendancedate,interval 1 day),' ',totime),datetime) else convert(concat(a.attendancedate,' ',fromtime),datetime) end),(case when fromtime<totime then '00:59:00' else '-00:59:00' end)) from shiftsmaster where id = a.shiftid) < current_timestamp();
		and (select addtime((case when fromtime>totime then convert(concat(date_add(a.attendancedate,interval 1 day),' ',totime),datetime) else convert(concat(a.attendancedate,' ',totime),datetime) end),'00:59:00') from shiftsmaster where id = a.shiftid) < current_timestamp();
		
		update employee_attendance a 
		set a.workedhours=(case when a.lastlogouttime is null then a.workedhours 
							else case when (a.lastlogouttime > a.firstlogintime)-- exists (select * from shiftsmaster where shiftsmaster.fromtime < shiftsmaster.totime and shiftsmaster.id = a.shiftid) 
									  then timediff(a.lastlogouttime,a.firstlogintime) 
									  else (select sec_to_time(time_to_sec(timediff( cast('24:00:00' as time), time(a.firstlogintime))) + time_to_sec(time(a.lastlogouttime)))) end
							end),		
		a.breakhours=null,
		a.productivehours=timediff(a.workedhours,coalesce(a.breakhours,'00:00:00'))
		-- where attendancedate=(case when `rundate` is null then (current_date() + interval -1 day) else `rundate` end);
		where a.attendancedate between date_add(current_date(), interval -31 day) and current_date()
		and a.lastlogouttime is not null
		and a.shiftid is not null
		-- and (select addtime((case when fromtime>totime then totime else fromtime end),(case when fromtime<totime then '00:59:00' else '-00:59:00' end)) from shiftsmaster where id = a.shiftid) < time(current_timestamp());
		-- and (select addtime((case when fromtime>totime then convert(concat(date_add(a.attendancedate,interval 1 day),' ',totime),datetime) else convert(concat(a.attendancedate,' ',fromtime),datetime) end),(case when fromtime<totime then '00:59:00' else '-00:59:00' end)) from shiftsmaster where id = a.shiftid) < current_timestamp();
		and (select addtime((case when fromtime>totime then convert(concat(date_add(a.attendancedate,interval 1 day),' ',totime),datetime) else convert(concat(a.attendancedate,' ',totime),datetime) end),'00:59:00') from shiftsmaster where id = a.shiftid) < current_timestamp();
		
		insert into employee_attendance_summary(empid,attendanceid,attendancedate,firstlogintime,lastlogouttime,totalhours,breaks,breaktime,productivehours)
		select distinct ea.empid,ea.id, ea.attendancedate, ea.firstlogintime,ea.lastlogouttime,ea.workedhours,
		(case when (select count(*) from employee_attendance_details where attendanceid=ea.id )<=2 then null
		else
			(select group_concat(convert(time(punchtime),char(4000)) separator ',') from employee_attendance_details where attendanceid=ea.id  order by punchtime)
			end) as breaks,
		ea.breakhours as breaktime, -- this need to be updated 
		ea.productivehours
		from employee_attendance ea, employee_attendance_details ead
		-- where ea.attendancedate=(case when `rundate` is null then (current_date() + interval -1 day) else `rundate` end)
		where ea.attendancedate between date_add(current_date(), interval -31 day) and current_date()
		-- and ea.id not in (select attendanceid from employee_attendance_summary where attendancedate=(case when `rundate` is null then (current_date() + interval -1 day) else `rundate` end))
		and ea.id not in (select attendanceid from employee_attendance_summary where attendancedate between date_add(current_date(), interval -31 day) and current_date())
		and ea.lastlogouttime is not null;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_checklists` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_employee_checklists`(
		in cid varchar(10000), -- JSON array format: [23,36,42]
		in employeeid int(11),
		in deptid int(11),
		in c_comment varchar(255), 
		in c_status varchar(25), -- values: Pending/Completed
		in finalstatus varchar(45), -- values: Pending Checklist, Task Completed
		in c_category varchar(25), -- values: Onboarding, Offboarding
		in actionby int(11)
	)
	begin

		declare exit handler for sqlexception
		begin
			rollback;
		   select -1 as successstate;
		end; 
		
		if cid is null then
			insert into ems_employee_checklist(checklist_id,empid,department_id,status,comment,created_on,created_by,final_status) 
			select m.id,employeeid, m.department_id,c_status,c_comment,current_timestamp(),actionby,finalstatus
			from ems_checklist_master m where m.department_id = ifnull(deptid,m.department_id) and m.category = ifnull(c_category,m.category)
			and m.status='Active';
		else
			 create temporary table cidtemp (id int(11) auto_increment,tid int(11), key(id) );
			 
			 set @jsl = json_length(cid);
			 set @cnt = @jsl;
			 while (@jsl>0) do
					insert into cidtemp(tid)
					select json_unquote(json_extract(cid,concat('$[',(@cnt-@jsl),']')));
					set @jsl = @jsl - 1;
			 end while;
			
			update ems_employee_checklist eec
			inner join cidtemp temp on temp.tid=eec.checklist_id
			set department_id = deptid,
			status = c_status,
			comment = c_comment,
			final_status=finalstatus,
			updated_on=current_timestamp(),
			updated_by=actionby
			where empid = employeeid and
			checklist_id = tid;
			
			drop temporary table cidtemp;
		end if;
		 select 0 as successstate;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_investments` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_employee_investments`(
		`iid` int(11),
		`emp_id` int(11),
		`investmentid` int(11),
		`declaredamount` decimal(15,2),
		`submittedamount` decimal(15,2),
		`verifiedamount` decimal(15,2),
		`receiptnumber` varchar(32),
		`disabilitypercentage` decimal(5,2),
		`statusvalue` int(11),
		`statusreason` varchar(512),
		`actionby` int(11)
	)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			-- SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
			select -1 as successstate,0 as idofupdate;
		END; 
		set @idofupdate = 0;
		if (`iid` is null) then -- new record insertion
			-- check validations 
			if (not exists(select * from payroll_employee_investments where empid=`emp_id` and investment_id=`investmentid` and financial_year=fn_get_financial_year()) or (select sum(submitted_amount)+`submittedamount` from payroll_employee_investments where empid=`emp_id` and investment_id=`investmentid` and financial_year=fn_get_financial_year()) <= (select investment_maxvalue from payroll_product_investments_master where id=`investmentid`)) then
				insert into payroll_employee_investments
				(
					empid,
					investment_id,
					declared_amount,
					submitted_amount,
					verified_amount,
					receipt_number,
					disability_percentage,
					action_date,
					financial_year,
					assessment_year,
					status,
					status_reason,
					created_on,
					created_by
				) values (
					`emp_id`,
					`investmentid`,
					`declaredamount`,
					`submittedamount`,
					`verifiedamount`,
					`receiptnumber`,
					`disabilitypercentage`,
					current_timestamp(),
					(select fn_get_financial_year()),
					(select fn_get_assessment_year()),
					`statusvalue`,
					`statusreason`,
					current_timestamp(),
					`actionby`
				);
				set @idofupdate = last_insert_id();
				select 0 as successstate,@idofupdate as idofupdate;
			else
				select 1 as successstate,@idofupdate as idofupdate; -- this is validation error case
			end if;
		else -- update existing record
			if ((select sum(submitted_amount)+(case when `verifiedamount` is null and statusvalue=10 then 0 when `verifiedamount` is null and statusvalue=9 then `submittedamount` else 0 end) from payroll_employee_investments where empid=`emp_id` and investment_id=`investmentid` and financial_year=fn_get_financial_year()) <= (select investment_maxvalue from payroll_product_investments_master where id=`investmentid`)) then
				update 	payroll_employee_investments
				set		declared_amount = `declaredamount`,
						submitted_amount = (case when `verifiedamount` is null then `submittedamount` else submitted_amount end),
						verified_amount = `verifiedamount`,
						receipt_number = `receiptnumber`,
						disability_percentage = `disabilitypercentage`,
						status = `statusvalue`,
						status_reason = `statusreason`,
						updated_on = current_timestamp(),
						updated_by = `actionby`
				where 	id = `iid`
				and		empid = `emp_id`
				and		investment_id = `investmentid`;
				
				-- this is the case when user modified declared amount. in this case, we have to copy this revised amount for all investment records related to this investment id
				update 	payroll_employee_investments
				set		declared_amount = `declaredamount`,
						updated_on = current_timestamp(),
						updated_by = `actionby`
				where 	empid = `emp_id`
				and		investment_id = `investmentid`;
				
				set @idofupdate = `iid`;
				select 0 as successstate,@idofupdate as idofupdate;
			else
				select 1 as successstate,@idofupdate as idofupdate; -- this is validation error case
			end if;
		end if;
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_leave` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_employee_leave`(
	  `id` int(11),
	  `empid` int(11),
	  `leavetype` int(11),
	  `fromdate` datetime,
	  `todate` datetime,
	  `fromhalfdayleave` varchar(32),
	  `tohalfdayleave` varchar(32),
	  `leavecount` varchar(6),
	  `leavereason` varchar(512),
	  `leavestatus` varchar(32),
	  `contactnumber` varchar(15),
	  `contactemail` varchar(32),
	  `contactaddress` varchar(1024),
	  `action_reason` varchar(512),
	  `detail` varchar(255)
	)
	BEGIN
	SET @leave_cycle_year = (select fn_get_leave_cycle_year());
	SET @rmid = (SELECT reportingmanagerid FROM employee_reportingmanagers WHERE employee_reportingmanagers.empid = `empid` 
				 order by employee_reportingmanagers.id desc limit 1);
	IF(`leavetype` = 1) THEN
		SET @ltype = 0;
		SET @ltype = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.leavetypeid = `leavetype` and lm_rulevalues.ruleid = 
				(select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVETYPE_THAT_CAN_BE_AVAILED_IN_ADVANCE') 
				order by lm_rulevalues.id desc limit 1);
		set `leavetype` = (select cast(@ltype as unsigned));        
	end if;             
	IF (`id` IS NULL) THEN
		if (`leavetype` = 8) then -- bereavement leave
			INSERT INTO lm_employeeleaves(empid,leavetype,fromdate,todate,fromhalfdayleave,tohalfdayleave,leavecount,appliedon,leavereason,leavestatus,contactnumber,contactemail,contactaddress)
			VALUES (`empid`,`leavetype`,`fromdate`,`todate`,`fromhalfdayleave`,`tohalfdayleave`,`leavecount`,current_timestamp(),`leavereason`,`leavestatus`,`contactnumber`,`contactemail`,`contactaddress`);
			set @last_insert_id = (select last_insert_id());
			if (@last_insert_id is not null) then
			INSERT INTO lm_employee_utilized_event_leaves(id,empid,leavetype,fromdate,todate,fromhalfdayleave,tohalfdayleave,leavecount,appliedon,leavereason,leavestatus,contactnumber,contactemail,contactaddress)
			VALUES (@last_insert_id,`empid`,`leavetype`,`fromdate`,`todate`,`fromhalfdayleave`,`tohalfdayleave`,`leavecount`,current_timestamp(),`leavereason`,`leavestatus`,`contactnumber`,`contactemail`,`contactaddress`);
				insert into lm_leaveapprovalstatustracker(empid,leaveid,approverid,level,createddate) values
				(`empid`,@last_insert_id,@rmid,'1',current_timestamp());
				update lm_employeeleavebalance -- reduce leave balance
					set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance - `leavecount`),
					lm_employeeleavebalance.lastupdatedat = current_timestamp()
					where lm_employeeleavebalance.empid = `empid` 
					and lm_employeeleavebalance.leavetypeid = `leavetype`;
				update employee_relations -- change status of this relation
					set employee_relations.bereavement_leave_utilized = 1,
					employee_relations.utilized_leave_id = @last_insert_id,
					employee_relations.status = 'Late'
					where employee_relations.empid = `empid`
					and employee_relations.id = `detail`;
				select @last_insert_id as last_insert_id;    
			end if;
		elseif (`leavetype` = 9) then -- compoff leave
			INSERT INTO lm_employeeleaves(empid,leavetype,fromdate,todate,fromhalfdayleave,tohalfdayleave,leavecount,appliedon,leavereason,leavestatus,contactnumber,contactemail,contactaddress,leave_cycle_year)
			VALUES (`empid`,`leavetype`,`fromdate`,`todate`,`fromhalfdayleave`,`tohalfdayleave`,`leavecount`,current_timestamp(),`leavereason`,`leavestatus`,`contactnumber`,`contactemail`,`contactaddress`,@leave_cycle_year);
			set @last_insert_id = (select last_insert_id());
			if (@last_insert_id is not null) then
				insert into lm_leaveapprovalstatustracker(empid,leaveid,approverid,level,createddate) values
				(`empid`,@last_insert_id,@rmid,'1',current_timestamp());
				update lm_employeeleavebalance 
					set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance - `leavecount`),
					lm_employeeleavebalance.lastupdatedat = current_timestamp()
					where lm_employeeleavebalance.empid = `empid` 
					and lm_employeeleavebalance.leavetypeid = `leavetype`;  
				set @uli_value = (select lm_register_comp_off.utilized_leave_id from lm_register_comp_off 
								 where lm_register_comp_off.empid = `empid` 
								 and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d'));    
				if (@uli_value is null) and (`leavecount` = '1') then    
					-- select cast(@last_insert_id as char);
					update lm_register_comp_off
						set lm_register_comp_off.status = 'Utilized',
						lm_register_comp_off.utilized_leave_id = (select cast(@last_insert_id as char)) ,
						lm_register_comp_off.updateddate = current_timestamp()
						where lm_register_comp_off.empid = `empid`
						and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');
				elseif (@uli_value is null) and (`leavecount` <> '1') then  
					-- select cast(@last_insert_id as char);          
					update lm_register_comp_off
						set lm_register_comp_off.utilized_leave_id = (select cast(@last_insert_id as char)) ,
						lm_register_comp_off.updateddate = current_timestamp()
						where lm_register_comp_off.empid = `empid`
						and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');          
				elseif (@uli_value is not null) then      
					set @uli = (select lm_register_comp_off.utilized_leave_id from lm_register_comp_off where lm_register_comp_off.empid = `empid` 
								and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d'));     
					update lm_register_comp_off
						set lm_register_comp_off.utilized_leave_id = concat(@uli,',',(select cast(@last_insert_id as char))),
						lm_register_comp_off.status = 'Utilized',
						lm_register_comp_off.updateddate = current_timestamp()
						where lm_register_comp_off.empid = `empid`
						and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');      
				end if;   
				select @last_insert_id as last_insert_id;    
				end if;              
		else
			INSERT INTO lm_employeeleaves(empid,leavetype,fromdate,todate,fromhalfdayleave,tohalfdayleave,leavecount,appliedon,leavereason,leavestatus,contactnumber,contactemail,contactaddress,leave_cycle_year)
			VALUES (`empid`,`leavetype`,`fromdate`,`todate`,`fromhalfdayleave`,`tohalfdayleave`,`leavecount`,current_timestamp(),`leavereason`,`leavestatus`,`contactnumber`,`contactemail`,`contactaddress`,@leave_cycle_year);
			set @last_insert_id = (select last_insert_id());
			if (@last_insert_id is not null) then
				set @freq = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_CREDIT_FREQUENCY');
				if (@freq not in (select lm_rulevalues.ruleid from lm_rulevalues where lm_rulevalues.leavetypeid = `leavetype`)) then
					INSERT INTO lm_employee_utilized_event_leaves(id,empid,leavetype,fromdate,todate,fromhalfdayleave,tohalfdayleave,leavecount,appliedon,leavereason,leavestatus,contactnumber,contactemail,contactaddress)
					VALUES (@last_insert_id,`empid`,`leavetype`,`fromdate`,`todate`,`fromhalfdayleave`,`tohalfdayleave`,`leavecount`,current_timestamp(),`leavereason`,`leavestatus`,`contactnumber`,`contactemail`,`contactaddress`);
				end if;
				insert into lm_leaveapprovalstatustracker(empid,leaveid,approverid,level,createddate) values
				(`empid`,@last_insert_id,@rmid,'1',current_timestamp());
				update lm_employeeleavebalance 
				set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance - `leavecount`),
				lm_employeeleavebalance.lastupdatedat = current_timestamp()
				where lm_employeeleavebalance.empid = `empid` 
				and lm_employeeleavebalance.leavetypeid = `leavetype`;
				select @last_insert_id as last_insert_id;    
			end if;
		end if;    
	ELSEIF (`id` IS NOT NULL) THEN
		if (`leavetype` = 8) then -- bereavement leave
			if(`leavestatus` = 'Deleted') then
				IF EXISTS(select * from lm_leaveapprovalstatustracker where lm_leaveapprovalstatustracker.level = '1' and 
							lm_leaveapprovalstatustracker.status is null and lm_leaveapprovalstatustracker.leaveid = `id`) then    
					UPDATE lm_employeeleaves
					SET lm_employeeleaves.leavestatus = `leavestatus`,
						lm_employeeleaves.updatedon = current_timestamp(),
						lm_employeeleaves.action_reason = `action_reason`
					WHERE lm_employeeleaves.id = `id`;
					UPDATE lm_employee_utilized_event_leaves
					SET lm_employee_utilized_event_leaves.leavestatus = `leavestatus`,
						lm_employee_utilized_event_leaves.updatedon = current_timestamp(),
						lm_employee_utilized_event_leaves.action_reason = `action_reason`
					WHERE lm_employee_utilized_event_leaves.id = `id`;
					set @v = (select employee_relations.id from employee_relations where employee_relations.utilized_leave_id = `id`);
					-- undo the previously set relation 
					update employee_relations
						set employee_relations.bereavement_leave_utilized = 0,
						employee_relations.utilized_leave_id = null,
						employee_relations.status = 'Alive'
						where employee_relations.id = @v
						and employee_relations.empid = `empid`;
					update lm_employeeleavebalance -- adding back the reduced leave count
						set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance + `leavecount`)
						where lm_employeeleavebalance.empid = `empid` 
						and lm_employeeleavebalance.leavetypeid = `leavetype`;    
				end if;    
			elseif(`leavestatus` = 'Submitted') then    
				IF EXISTS(select * from lm_leaveapprovalstatustracker where lm_leaveapprovalstatustracker.level = '1' and 
								lm_leaveapprovalstatustracker.status is null and lm_leaveapprovalstatustracker.leaveid = `id`) then  
					set @leavecount = (select lm_employeeleaves.leavecount from lm_employeeleaves where lm_employeeleaves.id = `id`);  
					update lm_employeeleavebalance -- adding the previous leave count to balance
						set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance + @leavecount),
						lm_employeeleavebalance.lastupdatedat = current_timestamp()
						where lm_employeeleavebalance.empid = `empid` 
						and lm_employeeleavebalance.leavetypeid = `leavetype`; 
					update lm_employeeleavebalance -- reducing the updated leave count from balance
						set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance - `leavecount`),
						lm_employeeleavebalance.lastupdatedat = current_timestamp()
						where lm_employeeleavebalance.empid = `empid` 
						and lm_employeeleavebalance.leavetypeid = `leavetype`;   
					update lm_employeeleaves
					set lm_employeeleaves.leavetype = `leavetype`,
						lm_employeeleaves.fromdate = `fromdate`,
						lm_employeeleaves.todate = `todate`,
						lm_employeeleaves.fromhalfdayleave = `fromhalfdayleave`,
						lm_employeeleaves.tohalfdayleave = `tohalfdayleave`,
						lm_employeeleaves.leavecount = `leavecount`,
						lm_employeeleaves.updatedon = current_timestamp(),
						lm_employeeleaves.leavereason = `leavereason`,
						lm_employeeleaves.leavestatus = `leavestatus`,
						lm_employeeleaves.contactnumber = `contactnumber`,
						lm_employeeleaves.contactemail = `contactemail`,
						lm_employeeleaves.contactaddress = `contactaddress`
					where lm_employeeleaves.id = `id`;
					if exists(select lm_employee_utilized_event_leaves.id from lm_employee_utilized_event_leaves where
							  lm_employee_utilized_event_leaves.id = `id`) then  
						update lm_employee_utilized_event_leaves
						set lm_employee_utilized_event_leaves.leavetype = `leavetype`,
							lm_employee_utilized_event_leaves.fromdate = `fromdate`,
							lm_employee_utilized_event_leaves.todate = `todate`,
							lm_employee_utilized_event_leaves.fromhalfdayleave = `fromhalfdayleave`,
							lm_employee_utilized_event_leaves.tohalfdayleave = `tohalfdayleave`,
							lm_employee_utilized_event_leaves.leavecount = `leavecount`,
							lm_employee_utilized_event_leaves.updatedon = current_timestamp(),
							lm_employee_utilized_event_leaves.leavereason = `leavereason`,
							lm_employee_utilized_event_leaves.leavestatus = `leavestatus`,
							lm_employee_utilized_event_leaves.contactnumber = `contactnumber`,
							lm_employee_utilized_event_leaves.contactemail = `contactemail`,
							lm_employee_utilized_event_leaves.contactaddress = `contactaddress`
						where lm_employee_utilized_event_leaves.id = `id`;
					else
						INSERT INTO lm_employee_utilized_event_leaves(id,empid,leavetype,fromdate,todate,fromhalfdayleave,tohalfdayleave,leavecount,appliedon,leavereason,leavestatus,contactnumber,contactemail,contactaddress)
						VALUES (`id`,`empid`,`leavetype`,`fromdate`,`todate`,`fromhalfdayleave`,`tohalfdayleave`,`leavecount`,current_timestamp(),`leavereason`,`leavestatus`,`contactnumber`,`contactemail`,`contactaddress`);
					end if;
					set @v = (select employee_relations.id from employee_relations where employee_relations.utilized_leave_id = `id`);
					-- undo the previously set relation 
					update employee_relations
						set employee_relations.bereavement_leave_utilized = 0,
						employee_relations.utilized_leave_id = null,
						employee_relations.status = 'Alive'
						where employee_relations.id = @v
						and employee_relations.empid = `empid`;
					-- update the new relation    
					update employee_relations
						set employee_relations.bereavement_leave_utilized = 1,
						employee_relations.utilized_leave_id = `id`,
						employee_relations.status = 'Late'
						where employee_relations.id = `detail`
						and employee_relations.empid = `empid`;
				end if;
			elseif(`leavestatus` = 'Cancelled') then
				IF EXISTS(select * from lm_employeeleaves where lm_employeeleaves.id = `id` and lm_employeeleaves.leavestatus = 'Approved') then    
					insert into lm_leaveapprovalstatustracker(empid,leaveid,approverid,level,createddate,status) values
								(`empid`,id,@rmid,'1',current_timestamp(),'Cancel Submitted');
					UPDATE lm_employeeleaves -- status to be updated only after cancel request is approved
					SET lm_employeeleaves.updatedon = current_timestamp(),
						lm_employeeleaves.action_reason = `action_reason`
					WHERE lm_employeeleaves.id = `id`;
					UPDATE lm_employee_utilized_event_leaves
					SET lm_employee_utilized_event_leaves.updatedon = current_timestamp(),
						lm_employee_utilized_event_leaves.action_reason = `action_reason`
					WHERE lm_employee_utilized_event_leaves.id = `id`;
				end if;       
			end if;    
		elseif (`leavetype` = 9) then -- compoff leave
			if(`leavestatus` = 'Deleted') then
				IF EXISTS(select * from lm_leaveapprovalstatustracker where lm_leaveapprovalstatustracker.level = '1' and 
							lm_leaveapprovalstatustracker.status is null and lm_leaveapprovalstatustracker.leaveid = `id`) then    
					UPDATE lm_employeeleaves
						SET lm_employeeleaves.leavestatus = `leavestatus`,
						lm_employeeleaves.updatedon = current_timestamp(),
						lm_employeeleaves.action_reason = `action_reason`
						WHERE lm_employeeleaves.id = `id`;
					update lm_employeeleavebalance 
						set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance + `leavecount`),
						lm_employeeleavebalance.lastupdatedat = current_timestamp()
						where lm_employeeleavebalance.empid = `empid` 
						and lm_employeeleavebalance.leavetypeid = `leavetype`;
					set @utilized_leave_id = (select lm_register_comp_off.utilized_leave_id from lm_register_comp_off 
											  where lm_register_comp_off.empid = `empid` and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d'));    
					if((select instr(@utilized_leave_id,',')) = 0) then -- verify if only one entry is there in utilized_leave_id column and drop it
						update lm_register_comp_off
						set lm_register_comp_off.utilized_leave_id = null,
							lm_register_comp_off.status = 'Approved'
						where lm_register_comp_off.empid = `empid`
						and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');
					else -- dropping the deleted leaveid 
						if(select substring_index(@utilized_leave_id,',',1) = `id`) then
							update lm_register_comp_off
								set lm_register_comp_off.utilized_leave_id = (select substring_index(@utilized_leave_id,',',-1)),
									lm_register_comp_off.status = 'Approved'
								where lm_register_comp_off.empid = `empid`
								and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');
						else
							update lm_register_comp_off
								set lm_register_comp_off.utilized_leave_id = (select substring_index(@utilized_leave_id,',',1)),
									lm_register_comp_off.status = 'Approved'
								where lm_register_comp_off.empid = `empid`
								and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');
						end if;    
					end if;
				end if;    
			elseif(`leavestatus` = 'Submitted') then    
				IF EXISTS(select * from lm_leaveapprovalstatustracker where lm_leaveapprovalstatustracker.level = '1' and 
								lm_leaveapprovalstatustracker.status is null and lm_leaveapprovalstatustracker.leaveid = `id`) then   
					set @leavecount = (select lm_employeeleaves.leavecount from lm_employeeleaves where lm_employeeleaves.id = `id`);  
					update lm_employeeleavebalance -- adding the previous leave count to balance
						set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance + @leavecount),
						lm_employeeleavebalance.lastupdatedat = current_timestamp()
						where lm_employeeleavebalance.empid = `empid` 
						and lm_employeeleavebalance.leavetypeid = `leavetype`; 
					update lm_employeeleavebalance -- reducing the updated leave count from balance
						set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance - `leavecount`),
						lm_employeeleavebalance.lastupdatedat = current_timestamp()
						where lm_employeeleavebalance.empid = `empid` 
						and lm_employeeleavebalance.leavetypeid = `leavetype`;              
					update lm_employeeleaves
					set lm_employeeleaves.leavetype = `leavetype`,
						lm_employeeleaves.fromdate = `fromdate`,
						lm_employeeleaves.todate = `todate`,
						lm_employeeleaves.fromhalfdayleave = `fromhalfdayleave`,
						lm_employeeleaves.tohalfdayleave = `tohalfdayleave`,
						lm_employeeleaves.leavecount = `leavecount`,
						lm_employeeleaves.updatedon = current_timestamp(),
						lm_employeeleaves.leavereason = `leavereason`,
						lm_employeeleaves.leavestatus = `leavestatus`,
						lm_employeeleaves.contactnumber = `contactnumber`,
						lm_employeeleaves.contactemail = `contactemail`,
						lm_employeeleaves.contactaddress = `contactaddress`
					where lm_employeeleaves.id = `id`;
					set @prev_compoff_date = (select comp_off_date from lm_register_comp_off where cast(`id` as char) in (lm_register_comp_off.utilized_leave_id)); 
					if (cast(@prev_compoff_date as date) <> cast(`detail` as date)) then
						set @utilized_leave_id_string = (select lm_register_comp_off.utilized_leave_id from lm_register_comp_off 
												where lm_register_comp_off.empid = `empid` and lm_register_comp_off.comp_off_date = str_to_date(@prev_compoff_date,'%Y-%m-%d'));    
						if((select instr(@utilized_leave_id_string,',')) = 0) then -- verify if only one entry is there in utilized_leave_id column and drop it
							update lm_register_comp_off
							set lm_register_comp_off.utilized_leave_id = null,
								lm_register_comp_off.status = 'Approved'
							where lm_register_comp_off.empid = `empid`
							and lm_register_comp_off.comp_off_date = str_to_date(@prev_compoff_date,'%Y-%m-%d');
						else -- dropping the deleted leaveid 
							if(select substring_index(@utilized_leave_id_string,',',1) = `id`) then
								update lm_register_comp_off
									set lm_register_comp_off.utilized_leave_id = (select substring_index(@utilized_leave_id_string,',',-1)),
										lm_register_comp_off.status = 'Approved'
									where lm_register_comp_off.empid = `empid`
									and lm_register_comp_off.comp_off_date = str_to_date(@prev_compoff_date,'%Y-%m-%d');
							else
								update lm_register_comp_off
									set lm_register_comp_off.utilized_leave_id = (select substring_index(@utilized_leave_id_string,',',1)),
										lm_register_comp_off.status = 'Approved'
									where lm_register_comp_off.empid = `empid`
									and lm_register_comp_off.comp_off_date = str_to_date(@prev_compoff_date,'%Y-%m-%d');
							end if;    
						end if;
						-- update the new compoff_date with leave_id
						set @uli_value = (select lm_register_comp_off.utilized_leave_id from lm_register_comp_off 
								 where lm_register_comp_off.empid = `empid` 
								 and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d'));    
						if (@uli_value is null) and (`leavecount` = '1') then    
							update lm_register_comp_off
								set lm_register_comp_off.status = 'Utilized',
								lm_register_comp_off.utilized_leave_id = `id`,
								lm_register_comp_off.updateddate = current_timestamp()
								where lm_register_comp_off.empid = `empid`
								and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');
						elseif (@uli_value is null) and (`leavecount` <> '1') then  
							update lm_register_comp_off
								set lm_register_comp_off.utilized_leave_id = `id`,
								lm_register_comp_off.updateddate = current_timestamp()
								where lm_register_comp_off.empid = `empid`
								and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');          
						elseif (@uli_value is not null) then      
							set @uli = (select lm_register_comp_off.utilized_leave_id from lm_register_comp_off where lm_register_comp_off.empid = `empid` 
										and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d'));     
							update lm_register_comp_off
								set lm_register_comp_off.utilized_leave_id = concat(@uli,',',`id`),
								lm_register_comp_off.status = 'Utilized',
								lm_register_comp_off.updateddate = current_timestamp()
								where lm_register_comp_off.empid = `empid`
								and lm_register_comp_off.comp_off_date = str_to_date(`detail`,'%Y-%m-%d');      
						end if;  
					end if;
				end if;
			elseif(`leavestatus` = 'Cancelled') then
				IF EXISTS(select * from lm_employeeleaves where lm_employeeleaves.id = `id` and lm_employeeleaves.leavestatus = 'Approved') then    
					insert into lm_leaveapprovalstatustracker(empid,leaveid,approverid,level,createddate,status) values
								(`empid`,id,@rmid,'1',current_timestamp(),'Cancel Submitted');
					UPDATE lm_employeeleaves
					SET lm_employeeleaves.updatedon = current_timestamp(),
						lm_employeeleaves.action_reason = `action_reason`
					WHERE lm_employeeleaves.id = `id`;            
				end if;       
			end if;     
		else
		if(`leavestatus` = 'Deleted') then
			IF EXISTS(select * from lm_leaveapprovalstatustracker where lm_leaveapprovalstatustracker.level = '1' and 
						lm_leaveapprovalstatustracker.status is null and lm_leaveapprovalstatustracker.leaveid = `id`) then    
				UPDATE lm_employeeleaves
				SET lm_employeeleaves.leavestatus = `leavestatus`,
					lm_employeeleaves.updatedon = current_timestamp(),
					lm_employeeleaves.action_reason = `action_reason`
				WHERE lm_employeeleaves.id = `id`;
				if exists(select * from lm_employee_utilized_event_leaves where lm_employee_utilized_event_leaves.id = `id`) then
					UPDATE lm_employee_utilized_event_leaves
						SET lm_employee_utilized_event_leaves.leavestatus = `leavestatus`,
						lm_employee_utilized_event_leaves.updatedon = current_timestamp(),
						lm_employee_utilized_event_leaves.action_reason = `action_reason`
						WHERE lm_employee_utilized_event_leaves.id = `id`;
				end if;
				update lm_employeeleavebalance 
						set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance + `leavecount`),
						lm_employeeleavebalance.lastupdatedat = current_timestamp()
						where lm_employeeleavebalance.empid = `empid` 
						and lm_employeeleavebalance.leavetypeid = `leavetype`;   
			end if;    
		elseif(`leavestatus` = 'Submitted') then    
			IF EXISTS(select * from lm_leaveapprovalstatustracker where lm_leaveapprovalstatustracker.level = '1' and 
							lm_leaveapprovalstatustracker.status is null and lm_leaveapprovalstatustracker.leaveid = `id`) then    
				set @leavecount = (select lm_employeeleaves.leavecount from lm_employeeleaves where lm_employeeleaves.id = `id`);  
					update lm_employeeleavebalance -- adding the previous leave count of this request to balance
						set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance + @leavecount),
						lm_employeeleavebalance.lastupdatedat = current_timestamp()
						where lm_employeeleavebalance.empid = `empid` 
						and lm_employeeleavebalance.leavetypeid = `leavetype`; 
					update lm_employeeleavebalance -- reducing the updated leave count of this request from balance
						set lm_employeeleavebalance.balance = (lm_employeeleavebalance.balance - `leavecount`),
						lm_employeeleavebalance.lastupdatedat = current_timestamp()
						where lm_employeeleavebalance.empid = `empid` 
						and lm_employeeleavebalance.leavetypeid = `leavetype`;              
				update lm_employeeleaves
				set lm_employeeleaves.leavetype = `leavetype`,
					lm_employeeleaves.fromdate = `fromdate`,
					lm_employeeleaves.todate = `todate`,
					lm_employeeleaves.fromhalfdayleave = `fromhalfdayleave`,
					lm_employeeleaves.tohalfdayleave = `tohalfdayleave`,
					lm_employeeleaves.leavecount = `leavecount`,
					lm_employeeleaves.updatedon = current_timestamp(),
					lm_employeeleaves.leavereason = `leavereason`,
					lm_employeeleaves.leavestatus = `leavestatus`,
					lm_employeeleaves.contactnumber = `contactnumber`,
					lm_employeeleaves.contactemail = `contactemail`,
					lm_employeeleaves.contactaddress = `contactaddress`
				where lm_employeeleaves.id = `id`;
				set @freq = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_CREDIT_FREQUENCY');
				if (@freq not in (select lm_rulevalues.ruleid from lm_rulevalues where lm_rulevalues.leavetypeid = `leavetype`)) then
					if exists(select * from lm_employee_utilized_event_leaves where lm_employee_utilized_event_leaves.id = `id`) then
						update lm_employee_utilized_event_leaves
							set lm_employee_utilized_event_leaves.leavetype = `leavetype`,
							lm_employee_utilized_event_leaves.fromdate = `fromdate`,
							lm_employee_utilized_event_leaves.todate = `todate`,
							lm_employee_utilized_event_leaves.fromhalfdayleave = `fromhalfdayleave`,
							lm_employee_utilized_event_leaves.tohalfdayleave = `tohalfdayleave`,
							lm_employee_utilized_event_leaves.leavecount = `leavecount`,
							lm_employee_utilized_event_leaves.updatedon = current_timestamp(),
							lm_employee_utilized_event_leaves.leavereason = `leavereason`,
							lm_employee_utilized_event_leaves.leavestatus = `leavestatus`,
							lm_employee_utilized_event_leaves.contactnumber = `contactnumber`,
							lm_employee_utilized_event_leaves.contactemail = `contactemail`,
							lm_employee_utilized_event_leaves.contactaddress = `contactaddress`
							where lm_employee_utilized_event_leaves.id = `id`;
					else
						INSERT INTO lm_employee_utilized_event_leaves(id,empid,leavetype,fromdate,todate,fromhalfdayleave,tohalfdayleave,leavecount,appliedon,leavereason,leavestatus,contactnumber,contactemail,contactaddress)
						VALUES (`id`,`empid`,`leavetype`,`fromdate`,`todate`,`fromhalfdayleave`,`tohalfdayleave`,`leavecount`,current_timestamp(),`leavereason`,`leavestatus`,`contactnumber`,`contactemail`,`contactaddress`);
					end if;
				end if;
			end if;
		elseif(`leavestatus` = 'Cancelled') then
			IF EXISTS(select * from lm_employeeleaves where lm_employeeleaves.id = `id` and lm_employeeleaves.leavestatus = 'Approved') then    
				insert into lm_leaveapprovalstatustracker(empid,leaveid,approverid,level,createddate,status) values
								(`empid`,id,@rmid,'1',current_timestamp(),'Cancel Submitted');
				UPDATE lm_employeeleaves
				SET lm_employeeleaves.updatedon = current_timestamp(),
					lm_employeeleaves.action_reason = `action_reason`
				WHERE lm_employeeleaves.id = `id`;
				if exists(select * from lm_employee_utilized_event_leaves where lm_employee_utilized_event_leaves.id = `id`) then
					UPDATE lm_employee_utilized_event_leaves
						SET lm_employee_utilized_event_leaves.updatedon = current_timestamp(),
						lm_employee_utilized_event_leaves.action_reason = `action_reason`
						WHERE lm_employee_utilized_event_leaves.id = `id`;
				end if;
			end if;       
		end if; 
		end if;
		select `id` as last_insert_id;
	END IF;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_program_schedules` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_employee_program_schedules`(
		esid varchar(10000), -- JSON array format:[1,2,3,4]
		scheduleid int(11),
		employeeids varchar(10000), -- JSON array format:[11,12,18,5]
		-- employeeid int(11),
		s_status varchar(25), -- values: Scheduled, Pending, Completed
		actionby int(11)
	)
	begin

	/*	declare exit handler for sqlexception
		begin
			rollback;
			select -1 as successstate;
		end; */
		create temporary table emptemp (tid int(11) auto_increment,empid int(11), key(tid) );
		set @jsl = json_length(employeeids);
		set @cnt = @jsl;
		while (@jsl>0) do
				insert into emptemp(empid)
				select json_unquote(json_extract(employeeids,concat('$[',(@cnt-@jsl),']')));
				set @jsl = @jsl - 1;
		end while;

		 create temporary table esidtemp (etid int(11) auto_increment,esid int(11), key(etid) );
		 if esid is not null then
			 set @jsl = json_length(esid);
			 set @cnt = @jsl;
			 while (@jsl>0) do
					insert into esidtemp(esid)
					select json_unquote(json_extract(esid,concat('$[',(@cnt-@jsl),']')));
					set @jsl = @jsl - 1;
			 end while;
		end if;
		-- set employeeids = replace(replace(employeeids,'[',''),']','');
		if esid is null and not exists(select * from ems_employee_program_schedule eps, emptemp t where eps.empid = t.empid and eps.schedule_id=scheduleid) then
			insert into ems_employee_program_schedule(empid,schedule_id,status,created_on,created_by) 
			-- (scheduleid,(select empid from emptemp ),s_status,current_timestamp(),actionby);
			select empid,`scheduleid`,`s_status`,current_timestamp(),`actionby` from emptemp;
		else
			update ems_employee_program_schedule eeps
			inner join esidtemp temp on temp.esid=eeps.id
			inner join emptemp etemp on etemp.empid = eeps.empid
			set eeps.status = s_status,
			eeps.updated_on = current_timestamp(),
			eeps.updated_by = actionby;
			-- where eeps.id = esid;
			if not exists(select * from ems_employee_program_schedule eps where eps.schedule_id=scheduleid and eps.status='Pending') then
			 update ems_program_schedules set status='Completed'
			 where status='Finished' and id=scheduleid;
			 end if;
		end if;
		drop temporary table emptemp;
		drop temporary table esidtemp;
		set @sch_date = (select schedule_date from ems_program_schedules where id=scheduleid);
		set @program_name =	(select epm.description from ems_programs_master epm 
		 inner join ems_program_schedules eps on eps.program_id=epm.id where eps.id = scheduleid);
		set @sch_start = (select schedule_starttime from ems_program_schedules where id=scheduleid);
		set @sch_end = (select schedule_endtime from ems_program_schedules where id=scheduleid);
		set @description = (select description from ems_program_schedules where id=scheduleid);
		
		select 0 as successstate,@program_name program_name,@sch_date as schedule_date,@sch_start as schedule_starttime,@sch_end as schedule_endtime,@description as description;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_program_schedules2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_employee_program_schedules2`(
		esid int(11),
		scheduleid int(11),
		employeeid int(11),
		s_status varchar(25), -- values: Scheduled, Pending, Completed
		in actionby int(11)
	)
	begin

		declare exit handler for sqlexception
		begin
			rollback;
			select -1 as successstate;
		end; 
		
		if esid is null and not exists(select * from ems_employee_program_schedule where empid=employeeid and schedule_id=scheduleid) then
			insert into ems_employee_program_schedule(schedule_id,empid,status,created_on,created_by) values
			(scheduleid,employeeid,s_status,current_timestamp(),actionby);
		else
			update ems_employee_program_schedule
			set schedule_id = scheduleid,
			empid = employeeid,
			status = s_status,
			updated_on = current_timestamp(),
			updated_by = actionby
			where id = esid;
		end if;
		select 0 as successstate;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_recognition_message` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_employee_recognition_message`(in recognitiondata varchar(8000))
	begin
	   declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; 
			set @recogid=(select json_unquote(json_extract(recognitiondata,"$.recogid")));
		   -- select @term_id;
		if (ifnull(@recogid,0)=0) then
			insert into employee_recognition_message
			(recognition_sender_empid,recognition_reciever_empid,recognition_type_id,recognition_message_id,recognition_message,created_on,created_by)
			values
			(
			json_unquote(json_extract(recognitiondata,"$.actionby")),
			json_unquote(json_extract(recognitiondata,"$.empid")),
			json_unquote(json_extract(recognitiondata,"$.recognition_type_id")),
			json_unquote(json_extract(recognitiondata,"$.recognition_message_id")),
			json_unquote(json_extract(recognitiondata,"$.message")),
			current_timestamp(),
			json_unquote(json_extract(recognitiondata,"$.actionby"))
			);
			 select 0 as statuscode;
		else
			update employee_recognition_message t
			set 
			t.recognition_reciever_empid=json_unquote(json_extract(recognitiondata,"$.empid")),
			t.recognition_type_id=json_unquote(json_extract(recognitiondata,"$.recognition_type_id")),
			t.recognition_message_id  =json_unquote(json_extract(recognitiondata,"$.recognition_message_id")),
			t.recognition_message = json_unquote(json_extract(recognitiondata,"$.message")),
			t.updated_on=current_timestamp(),
			t.updated_by=json_unquote(json_extract(recognitiondata,"$.actionby"))
			where t.id = @recogid;
			select 0 as statuscode;
		end if;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_recognition_message_read_status` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_employee_recognition_message_read_status`(in recogid int,empid int ,isread int)
	BEGIN
	   declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; 

		   update employee_recognition_message erm set
		   erm.recognition_isread=`isread`,
		   erm.updated_on=current_timestamp(),
		   erm.updated_by=`empid`
		   where erm.recognition_reciever_empid=`empid` and erm.id=`recogid` ;
		   select 0 as statuscode;
	  END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_resignation` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_employee_resignation`(in resignationdata varchar(8000))
	begin
	/*	declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; */
			set @reg_id = (select json_unquote(json_extract(resignationdata,"$.resgid")));
			if (ifnull(@reg_id,0) = 0) then
			if not exists(select * from ems_employee_resignations where empid=(select json_unquote(json_extract(resignationdata,"$.empid")))) then
			insert into ems_employee_resignations
			(`empid`,`applied_date`,`notice_period`,`original_relieving_date`,`requested_relieving_date`,`reason_id`,`comment`,`status`,`created_on`,`created_by`)
			values
			(
			(select json_unquote(json_extract(resignationdata,"$.empid"))),
			(select json_unquote(json_extract(resignationdata,"$.applied_date"))),
			(select json_unquote(json_extract(resignationdata,"$.notice_period"))),
			(select json_unquote(json_extract(resignationdata,"$.original_relieving_date"))),
			(select json_unquote(json_extract(resignationdata,"$.requested_relieving_date"))),
			(select json_unquote(json_extract(resignationdata,"$.reason_id"))),
			(select json_unquote(json_extract(resignationdata,"$.resg_comment"))),
			(select json_unquote(json_extract(resignationdata,"$.resg_status"))),
			current_timestamp(),
			(select json_unquote(json_extract(resignationdata,"$.actionby")))
			);
			 select 0 as statuscode;
			 else
					  select 1 as statuscode;
			 end if;
		else
		  set @actula_relieve_date=(select json_unquote(json_extract(resignationdata,"$.actual_relieving_date")));
		  if(@actula_relieve_date='null')then
		  set @actula_relieve_date=null;
		  end if;
			update ems_employee_resignations
			set 
			-- actual_relieving_date = json_unquote(json_extract(resignationdata,"$.actual_relieving_date")),
			`requested_relieving_date`=(select json_unquote(json_extract(resignationdata,"$.requested_relieving_date"))),
			`reason_id`=(select json_unquote(json_extract(resignationdata,"$.reason_id"))),
			`comment`  =(select json_unquote(json_extract(resignationdata,"$.resg_comment"))),
			`actual_relieving_date`  = @actula_relieve_date,
			`approver_comment` =(select  json_unquote(json_extract(resignationdata,"$.approver_comment"))),
			`status` = (select json_unquote(json_extract(resignationdata,"$.resg_status"))),
			`updated_on`=current_timestamp(),
			`updated_by`=(select json_unquote(json_extract(resignationdata,"$.actionby")))
			where `id` =(select json_unquote(json_extract(resignationdata,"$.resgid")));
			if((select json_unquote(json_extract(resignationdata,"$.resg_status")))='Approved')then
			 CALL `set_checklists_to_employee`(null,@eid,null,'','Pending','Pending Checklist','Offboarding',json_unquote(json_extract(resignationdata,"$.actionby")),@p);
	-- select @p;
		  --  update employee set employee.status=2 where employee.id=json_unquote(json_extract(resignationdata,"$.empid"));
									
		  --    update employee_login set employee_login.status='Inactive' where employee_login.id=json_unquote(json_extract(resignationdata,"$.empid"));

			end if;
				select 0 as statuscode;
		end if;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_shifts` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_employee_shifts`(
		`shift_id` int(11),
		`from_date` date,
		`to_date` date,
		`weekoffs` JSON, -- format: [0,1,2] 0- Sunday, 1 - Monday etc.
		`empids` JSON -- format: [1,2,3,4]
	)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			-- SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
			select -1 as successstate;
		END; 
		-- first we need to set employee weekoffs
		set @weekoffs = replace(replace(`weekoffs`,'[',''),']','');
		set @empids = replace(replace(`empids`,'[',''),']','');
		
		drop temporary table if exists tempweekoffs;
		drop temporary table if exists tempempids;
		
		create temporary table tempweekoffs( sid int auto_increment not null, val varchar(255), key (sid) );
		create temporary table tempempids( sid int auto_increment not null, val varchar(255), key (sid) );
		
		set @sql1 = concat("insert into tempweekoffs (val) values ('", replace(( select @weekoffs as data), ",", "'),('"),"');");
		set @sql2 = concat("insert into tempempids (val) values ('", replace(( select @empids as data), ",", "'),('"),"');");
		
		prepare stmt1 from @sql1;
		execute stmt1;
		deallocate prepare stmt1;
		
		prepare stmt2 from @sql2;
		execute stmt2;
		deallocate prepare stmt2;
		
		set @day1 = (select val from tempweekoffs where sid=1);
		set @day2 = (select val from tempweekoffs where sid=2);
		set @day3 = (select val from tempweekoffs where sid=3);
		
		if (@day1 is not null and @day1 <> '') then
			update employee_weekoffs set effectivetodate=current_date() where empid in (select val from tempempids) and effectivetodate is null;
		
		set @weekempcount = (select count(*) from tempempids);
		set @j = 1;
		set @wval = 0;
		while @j<=@weekempcount do
			set @wval = (select val from tempempids where sid=@j);
			if exists (select * from employee_weekoffs where empid = @wval
													and effectivefromdate = `from_date`
													and effectivetodate = `to_date`)
			then
				update employee_weekoffs 
				set weekoffday1=@day1,
				 weekoffday2=@day2,
				 weekoffday3=@day3
				where empid=@wval
				and effectivefromdate = `from_date`
				and effectivetodate = `to_date`;

			 elseif exists (select * from employee_weekoffs where empid = @wval
													and (effectivefromdate between `from_date` and `to_date`
													or effectivetodate between `from_date` and `to_date`
													or (effectivefromdate < `from_date` and effectivetodate > `to_date`)
													)
							)
					then
						update employee_weekoffs 
						set effectivetodate = (case when effectivefromdate>=(`from_date`+ interval -1 day) then current_timestamp() 
						else (`from_date`+ interval -1 day) end)
						where empid=@wval 
						and (effectivefromdate between `from_date` and `to_date`
							or effectivetodate between `from_date` and `to_date`
							 or (effectivefromdate < `from_date` and effectivetodate > `to_date`)
							);
						
						insert into employee_weekoffs(empid,weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate)
					   select @wval,@day1,@day2,@day3, `from_date`,`to_date` ;
						
				else
						insert into employee_weekoffs(empid,weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate)
					   select @wval,@day1,@day2,@day3, `from_date`,`to_date` ;
				end if;
				
				set @j = @j + 1;
				set @wval = 0;
		end while;
		end if;
		-- now assign shifts to employees
		-- check same shift is already exists
		set @count = (select count(*) from tempempids);

		set @i = 1;
		set @val = 0;
		while @i<=@count do
			set @val = (select val from tempempids where sid=@i);

			set @frmdt=(select DATE(fromdate)  from employee_shift_details where empid = @val order by fromdate desc limit 1);
			set @todt=(select DATE(todate) from employee_shift_details where empid = @val order by fromdate desc limit 1);
			if exists (select * from employee_shift_details where empid = @val
													and fromdate = `from_date`
													and todate = `to_date`)
			then
				update employee_shift_details 
				set shiftid=`shift_id` 
				where empid=@val
				and fromdate = `from_date`
				and todate = `to_date`;
			 elseif exists (select * from employee_shift_details where empid = @val
													and (fromdate between `from_date` and `to_date`
													or todate between `from_date` and `to_date`
													or (fromdate < `from_date` and todate > `to_date`)
													)
							)
					then
						update employee_shift_details 
						set todate = (case when fromdate>=(`from_date`+ interval -1 day) then current_timestamp() else (`from_date`+ interval -1 day) end)
						where empid=@val 
						and (fromdate between `from_date` and `to_date`
							or todate between `from_date` and `to_date`
							 or (fromdate < `from_date` and todate > `to_date`)
							);
						
						insert into employee_shift_details(empid,shiftid,fromdate,todate)
						select @val ,`shift_id`,`from_date`,`to_date`;
						-- delete record if fromdate>todate
						delete from employee_shift_details where empid=@val and fromdate>todate;
				else
					insert into employee_shift_details(empid,shiftid,fromdate,todate)
					select @val ,`shift_id`,`from_date`,`to_date`;
				end if;
				
				set @i = @i + 1;
				set @val = 0;
		end while;
	  
		
		drop temporary table tempweekoffs;
		drop temporary table tempempids;
		select 1 as successstate;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_shifts_v2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_employee_shifts_v2`(
		`shift_id` int(11),
		`from_date` datetime,
		`to_date` datetime,
		`weekoffs` JSON, -- format: [0,1,2] 0- Sunday, 1 - Monday etc.
		`empids` JSON -- format: [1,2,3,4]
	)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			-- SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
			select -1 as successstate;
		END; 
		-- first we need to set employee weekoffs
		set @weekoffs = replace(replace(`weekoffs`,'[',''),']','');
		set @empids = replace(replace(`empids`,'[',''),']','');
		
		drop temporary table if exists tempweekoffs;
		drop temporary table if exists tempempids;
		
		create temporary table tempweekoffs( sid int auto_increment not null, val varchar(255), key (sid) );
		create temporary table tempempids( sid int auto_increment not null, val varchar(255), key (sid) );
		
		set @sql1 = concat("insert into tempweekoffs (val) values ('", replace(( select @weekoffs as data), ",", "'),('"),"');");
		set @sql2 = concat("insert into tempempids (val) values ('", replace(( select @empids as data), ",", "'),('"),"');");
		
		prepare stmt1 from @sql1;
		execute stmt1;
		deallocate prepare stmt1;
		
		prepare stmt2 from @sql2;
		execute stmt2;
		deallocate prepare stmt2;
		
		set @day1 = (select val from tempweekoffs where sid=1);
		set @day2 = (select val from tempweekoffs where sid=2);
		set @day3 = (select val from tempweekoffs where sid=3);
		
		if (@day1 is not null and @day1 <> '') then
			update employee_weekoffs set effectivetodate=current_date() where empid in (select val from tempempids) and effectivetodate is null;
			
			insert into employee_weekoffs(empid,weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate)
			select val,@day1,@day2,@day3, `from_date`,`to_date` from tempempids;
		end if;
		-- now assign shifts to employees
		-- check same shift is already exists
		set @count = (select count(*) from tempempids);

		set @i = 1;
		set @val = 0;
		while @i<=@count do
			set @val = (select val from tempempids where sid=@i);

			set @frmdt=(select fromdate  from employee_shift_details where empid = @val order by fromdate desc limit 1);
			set @todt=(select todate from employee_shift_details where empid = @val order by fromdate desc limit 1);
			if exists (select * from employee_shift_details where empid = @val
													and fromdate = `from_date`
													and todate = `to_date`)
			then
				update employee_shift_details 
				set shiftid=`shift_id` 
				where empid=@val
				and fromdate = `from_date`
				and todate = `to_date`;
			 elseif exists (select * from employee_shift_details where empid = @val
													and (fromdate between `from_date` and `to_date`
													or todate between `from_date` and `to_date`
													or (fromdate < `from_date` and todate > `to_date`)
													)
							)
					then
						update employee_shift_details 
						set todate = (case when fromdate>=(`from_date`+ interval -1 day) then current_timestamp() else (`from_date`+ interval -1 day) end)
						where empid=@val 
						and (fromdate between `from_date` and `to_date`
							or todate between `from_date` and `to_date`
							 or (fromdate < `from_date` and todate > `to_date`)
							);
						
						insert into employee_shift_details(empid,shiftid,fromdate,todate)
						select @val ,`shift_id`,`from_date`,`to_date`;
						
				else
					insert into employee_shift_details(empid,shiftid,fromdate,todate)
					select @val ,`shift_id`,`from_date`,`to_date`;
				end if;
				
				set @i = @i + 1;
				set @val = 0;
		end while;
	  
		
		drop temporary table tempweekoffs;
		drop temporary table tempempids;
		select 1 as successstate;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_employee_termination` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_employee_termination`(in terminationdata varchar(8000))
	begin
	   declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; 
			set @term_id=(select json_unquote(json_extract(terminationdata,"$.termid")));
		   -- select @term_id;
			set @eid=(select json_unquote(json_extract(terminationdata,"$.empid")));
		   -- select @eid;
		if (ifnull(@term_id,0)=0) then
		  if not exists(select * from ems_employee_terminations t where t.empid=json_unquote(json_extract(terminationdata,"$.empid"))) then
			insert into ems_employee_terminations
			(empid,termination_date,category_id,status,comment,created_on,created_by)
			values
			(
			json_unquote(json_extract(terminationdata,"$.empid")),
			json_unquote(json_extract(terminationdata,"$.termination_date")),
			json_unquote(json_extract(terminationdata,"$.category_id")),
			json_unquote(json_extract(terminationdata,"$.term_status")),
			json_unquote(json_extract(terminationdata,"$.term_comment")),
			current_timestamp(),
			json_unquote(json_extract(terminationdata,"$.actionby"))
			);
		  CALL `set_checklists_to_employee`(null,@eid,null,'','Pending','Pending Checklist','Offboarding',json_unquote(json_extract(terminationdata,"$.actionby")),@p);
	-- select @p;
			  update employee set employee.status=2 where employee.id=json_unquote(json_extract(terminationdata,"$.empid"));
										
			  update employee_login set employee_login.status='Inactive' where employee_login.id=json_unquote(json_extract(terminationdata,"$.empid"));
			 select 0 as statuscode;
			 else
					  select 1 as statuscode;
			 end if;
		else
			update ems_employee_terminations t
			set 
			t.termination_date=json_unquote(json_extract(terminationdata,"$.termination_date")),
			t.category_id=json_unquote(json_extract(terminationdata,"$.category_id")),
			t.comment  =json_unquote(json_extract(terminationdata,"$.term_comment")),
			t.status = json_unquote(json_extract(terminationdata,"$.term_status")),
			t.updated_on=current_timestamp(),
			t.updated_by=json_unquote(json_extract(terminationdata,"$.actionby"))
			where t.id = @term_id;
		end if;
		select 0 as statuscode;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_emp_education_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_emp_education_details`(
	in empeducationsdata varchar(8000)
	-- json ('{ "empid": 18, "education": [{ "course": "MCA", "institutename": "IARE", "fromdate": "2010-03-11", "todate": "2013-10-08" }] }'); 
	 )
	begin

	set @educationcount = 0;
		set @educationcount = (select json_length(empeducationsdata, '$.education'));
		  set @i = 0;
		set @insertedstring = '';
		set @eid = 0;
	   set @eid =  (select id from employee where empid = (select json_unquote(json_extract(empeducationsdata,"$.empid"))));    
		
	-- select @eid;
	 if not exists (select id from employee_education_details where empid = @eid) then
	begin
	set @i = 0;
		set @insertedstring = '';
	while @i < @educationcount do
	set @insertedstring = concat('insert into employee_education_details(`empid`,`course`,`institutename`,`fromdate`,`todate`)
	values (',@eid,',json_unquote(json_extract(''',empeducationsdata,''',"$.education[',@i,'].course")),
	json_unquote(json_extract(''',empeducationsdata,''',"$.education[',@i,'].institutename")),
	json_unquote(json_extract(''',empeducationsdata,''',"$.education[',@i,'].fromdate")),
	json_unquote(json_extract(''',empeducationsdata,''',"$.education[',@i,'].todate")))');
	prepare stmt from @insertedstring;
	execute stmt;
	deallocate prepare stmt;
	set @insertedstring = '';

	set @i = @i + 1;
	end while;

	select 0 statuscode;
	end;
	else
	begin
	set @i = 0;
		set @insertedstring = '';
	delete from employee_education_details where empid = @eid;
	while @i < @educationcount do
	set @insertrstring = concat('insert into employee_education_details(`empid`,`course`,`institutename`,`fromdate`,`todate`)
	values (',@eid,',json_unquote(json_extract(''',empeducationsdata,''',"$.education[',@i,'].course")),
	json_unquote(json_extract(''',empeducationsdata,''',"$.education[',@i,'].institutename")),
	json_unquote(json_extract(''',empeducationsdata,''',"$.education[',@i,'].fromdate")),
	json_unquote(json_extract(''',empeducationsdata,''',"$.education[',@i,'].todate")))');
	prepare stmt from @insertrstring;
	execute stmt;
	deallocate prepare stmt;
	set @insertrstring = '';

	set @i = @i + 1;
	end while;
	select 0 statuscode;
	end;
	end if;
	  
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_emp_employement` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_emp_employement`(
	in employementdata varchar(8000)
	)
	begin

		set @experiencecount = 0;
		set @experiencecount = (select json_length(employementdata, '$.experience'));
		set @k = 0;
		set @insertexstring = '';
		set @updaterstring = '';
		set @eid = 0;
		set @rid = 0;

	set @eid = (select id from employee where empid = (select json_unquote(json_extract(employementdata,"$.empid"))));    
	set @empid = (select id from employee_financials_master where empid = @eid);    

	-- select @eid;
	if (ifnull(@empid,0)=0) then
	begin

	insert into employee_financials_master(`empid`,`bankname`,`ifsccode`,`nameasperbankaccount`,
	`branchname`,`bankaccountnumber`,`uanumber`,`pfaccountnumber`,`pan`,`esi`)
	values
	(
	@eid,
	json_unquote(json_extract(employementdata,"$.bankname")),
	json_unquote(json_extract(employementdata,"$.ifsccode")),
	json_unquote(json_extract(employementdata,"$.nameasperbankaccount")),
	json_unquote(json_extract(employementdata,"$.branchname")),
	json_unquote(json_extract(employementdata,"$.bankaccountnumber")),
	json_unquote(json_extract(employementdata,"$.uanumber")),
	json_unquote(json_extract(employementdata,"$.pfaccountnumber")),
	json_unquote(json_extract(employementdata,"$.pan")),
	json_unquote(json_extract(employementdata,"$.esi"))
	);

	set @insertexstring = '';
	set @k = 0;
	while @k < @experiencecount do
		set @insertexstring = concat('insert into employee_experience_details(`empid`,`companyname`,`designation`,`skills`,`fromdate`,`todate`)
		values (',@eid,',json_unquote(json_extract(''',employementdata,''',"$.experience[',@k,'].companyname")),
		json_unquote(json_extract(''',employementdata,''',"$.experience[',@k,'].designation")),
		json_unquote(json_extract(''',employementdata,''',"$.experience[',@k,'].skills")),
		json_unquote(json_extract(''',employementdata,''',"$.experience[',@k,'].fromdate")),
		json_unquote(json_extract(''',employementdata,''',"$.experience[',@k,'].todate")))');
		prepare stmt from @insertexstring;
		execute stmt;
		deallocate prepare stmt;
		set @insertexstring = '';
		
		set @k = @k + 1;
	end while;
	select 0 statuscode;
	end;
	else
	begin
	update employee_financials_master
	set `bankname` = (select json_unquote(json_extract(employementdata,"$.bankname"))),
	`ifsccode` = (select json_unquote(json_extract(employementdata,"$.ifsccode"))),
	`nameasperbankaccount` = (select json_unquote(json_extract(employementdata,"$.nameasperbankaccount"))),
	`branchname` = (select json_unquote(json_extract(employementdata,"$.branchname"))),
	`bankaccountnumber`= (select json_unquote(json_extract(employementdata,"$.bankaccountnumber"))),
	`uanumber`= (select json_unquote(json_extract(employementdata,"$.uanumber"))),
	`pfaccountnumber` = (select json_unquote(json_extract(employementdata,"$.pfaccountnumber"))),
	`pan` = (select json_unquote(json_extract(employementdata,"$.pan"))),
	`esi` = (select json_unquote(json_extract(employementdata,"$.esi")))
	where employee_financials_master.empid = @eid;

	set @i = 0;

	delete from employee_experience_details where empid = @eid;

	while @i < @experiencecount do
	set @insertrstring = concat('insert into employee_experience_details(`empid`,`companyname`,`designation`,`skills`,`fromdate`,`todate`)
	values (',@eid,',json_unquote(json_extract(''',employementdata,''',"$.experience[',@i,'].companyname")),
	json_unquote(json_extract(''',employementdata,''',"$.experience[',@i,'].designation")),
	json_unquote(json_extract(''',employementdata,''',"$.experience[',@i,'].skills")),
	json_unquote(json_extract(''',employementdata,''',"$.experience[',@i,'].fromdate")),
	json_unquote(json_extract(''',employementdata,''',"$.experience[',@i,'].todate")))');
	prepare stmt from @insertrstring;
	execute stmt;
	deallocate prepare stmt;
	set @insertrstring = '';

	set @i = @i + 1;
	end while;
	select 0 statuscode;
	end;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_emp_job_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_emp_job_details`(
	in empjobdata varchar(8000)
	)
	begin
		set @promotionscount = 0;
		set @promotionscount = (select json_length(empjobdata, '$.promotions'));
		set @k = 0;
		set @insertexstring = '';
		   set @eid = 0;
		
	set @eid = (select id from employee where empid = (select json_unquote(json_extract(empjobdata,"$.empid"))));    
	set @cempid = (select id from ems_employee_contract_details where empid = @eid);    
	set @startdatevalue = trim(json_unquote(json_extract(empjobdata,"$.startdate")));
	set @enddatevalue = trim(json_unquote(json_extract(empjobdata,"$.enddate")));
			  if (@startdatevalue = 'null') then
					set @startdatevalue = null;
				end if;
				if (@enddatevalue = 'null') then
					set @enddatevalue = null;
				end if;
	-- select @eid;
	if (ifnull(@cempid,0)=0) then
	begin

	insert into ems_employee_contract_details(`empid`,`contractname`,`startdate`,`enddate`,`notes`,`fileid`)
	values
	(
	@eid,
	json_unquote(json_extract(empjobdata,"$.contractname")),
	@startdatevalue,
	@enddatevalue,
	json_unquote(json_extract(empjobdata,"$.notes")),
	json_unquote(json_extract(empjobdata,"$.fileid"))
	);

	set @insertexstring = '';
	set @k = 0;
	while @k < @promotionscount do
		set @insertexstring = concat('insert into ems_employee_promotions_details(`empid`,`salary`,`description`,`effectivedate`,`annualsalary`)
		values (',@eid,',json_unquote(json_extract(''',empjobdata,''',"$.promotions[',@k,'].newsalary")),
		json_unquote(json_extract(''',empjobdata,''',"$.promotions[',@k,'].newdescription")),
		json_unquote(json_extract(''',empjobdata,''',"$.promotions[',@k,'].effectivedate")),
		json_unquote(json_extract(''',empjobdata,''',"$.promotions[',@k,'].annualsalary")))');
		prepare stmt from @insertexstring;
		execute stmt;
		deallocate prepare stmt;
		set @insertexstring = '';
		
		set @k = @k + 1;
	end while;
	select 0 statuscode;
	end;
	else
	begin
	update ems_employee_contract_details
	set `contractname` = (select json_unquote(json_extract(empjobdata,"$.contractname"))),
	`startdate` = @startdatevalue,
	`enddate` = @enddatevalue,
	`notes` = (select json_unquote(json_extract(empjobdata,"$.notes"))),
	`fileid`= (select json_unquote(json_extract(empjobdata,"$.fileid")))
	where ems_employee_contract_details.empid = @eid;

	set @insertexstring = '';
	set @k = 0;
	while @k < @promotionscount do
		set @insertexstring = concat('insert into ems_employee_promotions_details(`empid`,`salary`,`description`,`effectivedate`,`annualsalary`)
		values (',@eid,',json_unquote(json_extract(''',empjobdata,''',"$.promotions[',@k,'].newsalary")),
		json_unquote(json_extract(''',empjobdata,''',"$.promotions[',@k,'].newdescription")),
		json_unquote(json_extract(''',empjobdata,''',"$.promotions[',@k,'].effectivedate")),
		json_unquote(json_extract(''',empjobdata,''',"$.promotions[',@k,'].annualsalary")))');
		prepare stmt from @insertexstring;
		execute stmt;
		deallocate prepare stmt;
		set @insertexstring = '';
		
		set @k = @k + 1;
	end while;
	select 0 statuscode;
	end;
	end if;
	  end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_emp_personal_info` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_emp_personal_info`(
	in employeedata varchar(8000)
-- JSON Data: (CALL `set_emp_personal_info`('{"condidateid": 5,"empid": null,"firstname": "Raju","middlename": "","lastname": "Mani","personalemail": "raju@gmail.com",
-- 	"officeemail": "raju@gmail.com","dateofbirth": "1993-05-22","gender": 2,"maritalstatus": 2,	"hiredon": "2022-09-13 00:00:00","usertype": 1,	"designation": 3,
-- "department": 5,	"employmenttype": "1","dateofjoin": "2021-06-01","companylocation": 1,"reportingmanager": 2,"noticeperiod": 60,"languages_spoken": "English,Telugu",
-- "bloodgroup": 1,	"contactnumber": "9032824989",	"emergencycontactnumber": "",	"emergencycontactrelation": "",	"emergencycontactname": "",	"address": "Sangareddy",
-- 	"city": 609,"state": 1,	"pincode": "345454","country": 1,"paddress": "sangareddy","pcity": 34,"pstate": 25,	"ppincode": "345454","pcountry": 1,
-- 	"aadharnumber": "","passport": "","status": 1,"actionby": 1,"relations": [{"firstname": "Ram Bhoopal","lastname": "U","gender": 1,"contactnumber": "",
-- 	"status": "Alive","relationship": 5,"dateofbirth": ""},{"firstname": "Ragini","lastname": "ragam","gender": 2,"contactnumber": "","status": "Alive",
-- 	"relationship": 4,"dateofbirth": null}],"education": [{"course": "MCA",	"institutename": "IARE","fromdate": "2010-03-11",
-- "todate": "2013-10-08"}],"experience": [{"companyname": "sreeb technologies","designation":"softwere Enginerr","skills": "test","fromdate": "2018-04-18","todate": "2021-05-31"}]} '); 
)
begin
	/*declare exit handler for sqlexception
	begin
	    rollback;
	    select -1 as statuscode;
	end; */
	DECLARE vleave_id int(11);
    declare vid int(1);
    DECLARE leavetype_cursor cursor for select temp_lm_leavesmaster.leave_id,leavetype from temp_lm_leavesmaster;
    set @weekoff1 = (select ems_rulevalues.value from ems_rulevalues where ems_rulevalues.ruleid =
				     (select ems_rulemaster.id from ems_rulemaster where ems_rulemaster.rulename = 'DEFAULT_WEEKOFF_1')
				     and effectivetodate is null);
    set @weekoff2 = (select ems_rulevalues.value from ems_rulevalues where ems_rulevalues.ruleid =
				     (select ems_rulemaster.id from ems_rulemaster where ems_rulemaster.rulename = 'DEFAULT_WEEKOFF_2')
				     and effectivetodate is null);
    set @weekoff3 = (select ems_rulevalues.value from ems_rulevalues where ems_rulevalues.ruleid =
				     (select ems_rulemaster.id from ems_rulemaster where ems_rulemaster.rulename = 'DEFAULT_WEEKOFF_3')
				     and effectivetodate is null);                 
    
	set @statuscode=0;
    set @eid = 0;
    set @rid = 0;
	set @eid = (select e.id from employee e where e.empid = (select json_unquote(json_extract(employeedata,"$.empid"))));  
    
	set @personalemail =json_unquote(json_extract(employeedata,"$.personalemail"));
    set @mail = @personalemail;
	set @officeemail=json_unquote(json_extract(employeedata,"$.officeemail"));
    Set @usertypecount=(select json_length(employeedata, '$.usertype'));
	set @relationdata=json_unquote(json_extract(employeedata,"$.relations"));
    if(@relationdata='null')then
		set @relationscount = 0;
        set @relationdata = null;
    else 
        set @relationscount = (select json_length(employeedata, '$.relations'));
    end if;
	
    set @educationdata=json_unquote(json_extract(employeedata,"$.education"));
    if(@educationdata='null')then
        set @educationcount = 0;
        set @educationdata=null;
    else 
        set @educationcount = (select json_length(employeedata, '$.education'));
    end if;
    
	set @experiencedata=json_unquote(json_extract(employeedata,"$.experience"));
    if(@experiencedata='null')then
        set @experiencecount = 0;
    else 
        set @experiencecount = (select json_length(employeedata, '$.experience'));
    end if;

	set @employeelocation = (select json_unquote(json_extract(employeedata,"$.companylocation")));
    set @cid= (select json_unquote(json_extract(employeedata,"$.condidateid")));
    set @i = 0;
    set @insertrstring = '';
    set @updaterstring = '';

	set @bloodgroup=(select json_unquote(json_extract(employeedata,"$.bloodgroup")));	
	if(@bloodgroup='null')then
	set @bloodgroup=null;
	end if;
	set @city=(select json_unquote(json_extract(employeedata,"$.city")));
	if(@city='null')then
	    set @city=null;
	end if;
	set @state=(select json_unquote(json_extract(employeedata,"$.state")));
	if(@state='null')then
	    set @state=null;
	end if;
	set @country=(select json_unquote(json_extract(employeedata,"$.country")));
	if(@country='null')then
	    set @country=null;
	end if;
	set @pcity=(select json_unquote(json_extract(employeedata,"$.pcity")));
	if(@pcity='null')then
	    set @pcity=null;
	end if;
	set @pstate=(select json_unquote(json_extract(employeedata,"$.pstate")));
	if(@pstate='null')then
	    set @pstate=null;
	end if;
	set @pcountry=(select json_unquote(json_extract(employeedata,"$.pcountry")));
	if(@pcountry='null')then
	    set @pcountry=null;
	end if; 
-- select @eid;
if (ifnull(@eid,0)=0) then
  begin
  if(@personalemail<>'')then
    if exists(select * from employee e where e.personalemail=@personalemail)then
      set @statuscode=1;
      set @mail='Personal email already exists.';
	end if;
  end if; 
  if(@officeemail<>'')then
    if exists(select * from employee e where e.officeemail=@officeemail)then
      set @statuscode=1;
      set @mail='Office email already exists.';
	end if;
  end if; 
 if(@statuscode=0)then
   	select employee_idgenerator.prefix,employee_idgenerator.seed,employee_idgenerator.currentvalue 
	into @ei_prefix,@ei_seed,@ei_currentvalue 
	from employee_idgenerator where employee_idgenerator.companylocation = @employeelocation;
	if (@ei_prefix is not null) then
	set @employeeid = (select concat(@ei_prefix,@ei_currentvalue));
	else
	set @employeeid = (select @ei_currentvalue);
  -- 	select @employeeid;
	end if;


	insert into employee(`empid`,`firstname`,`middlename`,`lastname`,`personalemail`,`officeemail`,`dateofbirth`,`hiredon`,
	`gender`,`maritalstatus`,`employmenttype`,`dateofjoin`,`noticeperiod`,`languages_spoken`,
	`bloodgroup`,`contactnumber`,`emergencycontactnumber`,`emergencycontactrelation`,
	`emergencycontactname`,`address`,`city`,`state`,`pincode`,`country`,`paddress`,`pcity`,
	`pstate`,`ppincode`,`pcountry`,`aadharnumber`,`passport`,`status`,`created_on`,`created_by`)
	values
	(@employeeid,
	json_unquote(json_extract(employeedata,"$.firstname")),
	json_unquote(json_extract(employeedata,"$.middlename")),
	json_unquote(json_extract(employeedata,"$.lastname")),
	json_unquote(json_extract(employeedata,"$.personalemail")),
	json_unquote(json_extract(employeedata,"$.officeemail")),
	json_unquote(json_extract(employeedata,"$.dateofbirth")),
	json_unquote(json_extract(employeedata,"$.hiredon")),
	json_unquote(json_extract(employeedata,"$.gender")),
	json_unquote(json_extract(employeedata,"$.maritalstatus")),
	json_unquote(json_extract(employeedata,"$.employmenttype")),
	json_unquote(json_extract(employeedata,"$.dateofjoin")),
	json_unquote(json_extract(employeedata,"$.noticeperiod")),
	json_unquote(json_extract(employeedata,"$.languages_spoken")),
	@bloodgroup,
	json_unquote(json_extract(employeedata,"$.contactnumber")),
	json_unquote(json_extract(employeedata,"$.emergencycontactnumber")),
	json_unquote(json_extract(employeedata,"$.emergencycontactrelation")),
	json_unquote(json_extract(employeedata,"$.emergencycontactname")),
	json_unquote(json_extract(employeedata,"$.address")),
	@city,
	@state,
	json_unquote(json_extract(employeedata,"$.pincode")),
	@country,
	json_unquote(json_extract(employeedata,"$.paddress")),
	@pcity,
	@pstate,
	json_unquote(json_extract(employeedata,"$.ppincode")),
	@pcountry,	
	json_unquote(json_extract(employeedata,"$.aadharnumber")),
	json_unquote(json_extract(employeedata,"$.passport")),
	json_unquote(json_extract(employeedata,"$.status")),
	current_timestamp(),
	json_unquote(json_extract(employeedata,"$.actionby"))
	);                        

	set @eid = (select e.id from employee e where e.empid = @employeeid);

	IF @eid is not null then      -- update employee_idgenerator.currentvalue count
    set @prefix = (select v.prefix from employee_idgenerator v where v.companylocation = @employeelocation);
    if @prefix is not null then
		update employee_idgenerator set employee_idgenerator.currentvalue = employee_idgenerator.currentvalue + 1 
			where employee_idgenerator.prefix = @prefix;
    elseif @prefix is null then
		update employee_idgenerator set employee_idgenerator.currentvalue = employee_idgenerator.currentvalue + 1 
			where employee_idgenerator.prefix is null;
    end if;
    if (json_unquote(json_extract(employeedata,"$.reportingmanager")) <> 'Self') then
		INSERT INTO employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
		(@eid,json_unquote(json_extract(employeedata,"$.reportingmanager")),current_timestamp());
        
        set @k = 0;
	    while @k < @usertypecount do
         set @roleid=(select json_unquote(json_extract(`employeedata`,concat('$.usertype[',convert((@k),char),'].id'))));
	    INSERT INTO employee_roles(employee_id,role_id,rmid,effective_from_date) VALUES
		(@eid,@roleid,json_unquote(json_extract(employeedata,"$.reportingmanager")),current_timestamp());
    	set @k = @k + 1;
	    end while;
    elseif (json_unquote(json_extract(employeedata,"$.reportingmanager")) = 'Self') then
		INSERT INTO employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
		(@eid,@eid,current_timestamp());
        set @k = 0;
	    while @k < @usertypecount do
		set @roleid=(select json_unquote(json_extract(`employeedata`,concat('$.usertype[',convert((@k),char),'].id'))));
	    INSERT INTO employee_roles(employee_id,role_id,rmid,effective_from_date) VALUES
		(@eid,@roleid,@eid,current_timestamp());
    	set @k = @k + 1;
	    end while;
    end if;
    INSERT INTO employee_designations(empid,designationid,effectivestartdate) values
    (@eid,json_unquote(json_extract(employeedata,"$.designation")),current_timestamp());
    
       -- adding leave balance records for the employee
    if exists(select modulesmaster.id from modulesmaster where modulesmaster.modulename = 'Leave Management') then
    drop temporary table if exists temp_lm_leavesmaster;
    create temporary table temp_lm_leavesmaster (
		leave_id int(11),
		leavetype int(1)
	);
    insert into temp_lm_leavesmaster(leave_id) select lm_leavesmaster.id from lm_leavesmaster;
	update temp_lm_leavesmaster -- leavetype to add/not add year 
	set temp_lm_leavesmaster.leavetype = 1
	where leave_id in (select lm_rulevalues.leavetypeid from lm_rulevalues where lm_rulevalues.ruleid = 3);
    if exists(select temp_lm_leavesmaster.leave_id from temp_lm_leavesmaster where temp_lm_leavesmaster.leave_id = 9) then
		update temp_lm_leavesmaster set temp_lm_leavesmaster.leavetype = 1
		where temp_lm_leavesmaster.leave_id = 9;
    end if;
	set @year = (select fn_get_leave_cycle_year());
	open leavetype_cursor;
		set @ltype_count = 0;
		set @ltype_count = found_rows();
		set @e = 0;
		WHILE @e < @ltype_count do
			fetch leavetype_cursor into vleave_id,vid;
			insert into lm_employeeleavebalance(empid,leavetypeid,balance,lastupdatedat,leave_cycle_year) values
			(@eid,vleave_id,0,current_timestamp(),case when vid = 1 then @year else null end);
			set @e = @e + 1;
		end while;
	close leavetype_cursor;
    call credit_employee_event_leave(@eid); -- crediting event-based leaves
    drop temporary table temp_lm_leavesmaster;
    end if; 
 
    insert into employee_departments(empid,departmentid,effectivestartdate) values
    (@eid,json_unquote(json_extract(employeedata,"$.department")),current_timestamp());
    
    set @weekoff_string = '';
    set @weekoff_string = concat('insert into employee_weekoffs(empid');
    if (@weekoff1 is not null) then
    set @weekoff_string = concat(@weekoff_string,',weekoffday1');
    end if;
    if (@weekoff2 is not null) then
    set @weekoff_string = concat(@weekoff_string,',weekoffday2');
    end if;
    if (@weekoff3 is not null) then
    set @weekoff_string = concat(@weekoff_string,',weekoffday3');
    end if;
    set @weekoff_string =concat(@weekoff_string,',effectivefromdate) values(',@eid);
    if (@weekoff1 is not null) then
    set @weekoff_string = concat(@weekoff_string,',',@weekoff1);
    end if;
    if (@weekoff2 is not null) then
    set @weekoff_string = concat(@weekoff_string,',',@weekoff2);
    end if;
    if (@weekoff3 is not null) then
    set @weekoff_string = concat(@weekoff_string,',',@weekoff3);
    end if;
    set @weekoff_string = concat(@weekoff_string,',''',current_date(),''')');
    prepare stmt from @weekoff_string;
	execute stmt;
	deallocate prepare stmt;
    
    set @weekoff_insert_id = (select last_insert_id());
    if (@weekoff_insert_id is not null) then -- inserting working days of a employee
        call update_working_days_for_employee(@eid,'n',json_unquote(json_extract(employeedata,"$.dateofjoin")));
    end if;
    end if;
 
    insert into employee_worklocations(empid,locationid,effectivefromdate) values
    (@eid,@employeelocation,current_timestamp());
	set @i = 0;
	set @insertrstring = '';
	while @i < @relationscount do
	-- select json_unquote(json_extract(employeedata,concat('$.relations[',@i,'].gender')));
	set @insertrstring = concat('insert into employee_relations(`empid`,`firstname`,`lastname`,`gender`,`contactnumber`,`dateofbirth`,`relationship`,`status`)
	values (',@eid,', (case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].firstname")) = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].firstname")) end),
	(case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].lastname")) = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].lastname")) end) ,
	(case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].gender")) = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].gender")) end),
	(case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].contactnumber")) = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].contactnumber")) end),
	(case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].dateofbirth")) = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].dateofbirth")) end),
	(case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].relationship")) = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].relationship")) end),
	(case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].status"))  = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].status")) end))');
	
	prepare stmt from @insertrstring;
	execute stmt;
	deallocate prepare stmt;
	set @insertrstring = '';
	set @i = @i + 1;
	end while;
	set @i = 0;
    set @insertedstring = '';
	while @i < @educationcount do
	set @insertedstring = concat('insert into employee_education_details(`empid`,`course`,`institutename`,`fromdate`,`todate`)
	values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.education[',@i,'].course")),
	json_unquote(json_extract(''',employeedata,''',"$.education[',@i,'].institutename")),
	json_unquote(json_extract(''',employeedata,''',"$.education[',@i,'].fromdate")),
	json_unquote(json_extract(''',employeedata,''',"$.education[',@i,'].todate")))');
	prepare stmt from @insertedstring;
	execute stmt;
	deallocate prepare stmt;
	set @insertedstring = '';
	set @i = @i + 1;
	end while;

	set @insertexstring = '';
	set @k = 0;
	while @k < @experiencecount do
	set @insertexstring = concat('insert into employee_experience_details(`empid`,`companyname`,`designation`,`skills`,`fromdate`,`todate`)
	values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].companyname")),
	json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].designation")),
    json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].skills")),
	json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].fromdate")),
	json_unquote(json_extract(''',employeedata,''',"$.experience[',@k,'].todate")))');
	prepare stmt from @insertexstring;
	execute stmt;
	deallocate prepare stmt;
	set @insertexstring = '';
	
	set @k = @k + 1;
	end while;

  CALL `set_checklists_to_employee`(null,@eid,null,'','Pending','Pending Checklist','Onboarding',json_unquote(json_extract(employeedata,"$.actionby")),@p);
-- select @p;

   update ems_new_hire nh set nh.status=4,
       nh.updated_on=current_timestamp(),
       nh.empid=@eid
        where nh.id=@cid; 
        
    update files_master set empid=@eid where candidate_id =@cid ;
  select 0 statuscode , @eid as empid;
  else
  select @statuscode statuscode , @eid as empid, @mail email;
 end if;
end;
else

begin
  if(@personalemail<>'')then
    if exists(select * from employee e where e.personalemail=@personalemail and e.id <> @eid)then
      set @statuscode=1;
       set @mail='Personal email already exists.';
	end if;
  end if; 
  if(@officeemail<>'')then
    if exists(select * from employee e where e.officeemail=@officeemail and e.id <> @eid)then
      set @statuscode=1;
      set @mail='Office Email already exists.';
	end if;
  end if; 
 if(@statuscode=0)then
	update employee e  set
	-- `empid` = (select json_unquote(json_extract(employeedata,"$.empid"))),
	`firstname` 	= (select json_unquote(json_extract(employeedata,"$.firstname"))),
	`middlename` 	= (select json_unquote(json_extract(employeedata,"$.middlename"))),
	`lastname` 		= (select json_unquote(json_extract(employeedata,"$.lastname"))),
	`personalemail` = (select json_unquote(json_extract(employeedata,"$.personalemail"))),
	`officeemail` 	= (select json_unquote(json_extract(employeedata,"$.officeemail"))),
	`dateofbirth` 	= (select json_unquote(json_extract(employeedata,"$.dateofbirth"))),
	`hiredon` 	= (select json_unquote(json_extract(employeedata,"$.hiredon"))),
	`gender` 		= (select json_unquote(json_extract(employeedata,"$.gender"))),
	`maritalstatus` = (select json_unquote(json_extract(employeedata,"$.maritalstatus"))),
	`employmenttype` 			= (select json_unquote(json_extract(employeedata,"$.employmenttype"))),
	`dateofjoin` 				= (select json_unquote(json_extract(employeedata,"$.dateofjoin"))),
	`noticeperiod` 			= (select json_unquote(json_extract(employeedata,"$.noticeperiod"))),	
	`languages_spoken` 			= (select json_unquote(json_extract(employeedata,"$.languages_spoken"))),
	`bloodgroup` 				= @bloodgroup,
	`contactnumber` 			= (select json_unquote(json_extract(employeedata,"$.contactnumber"))),
	`emergencycontactnumber` 	= (select json_unquote(json_extract(employeedata,"$.emergencycontactnumber"))),
	`emergencycontactrelation` = (select json_unquote(json_extract(employeedata,"$.emergencycontactrelation"))),
	`emergencycontactname` = (select json_unquote(json_extract(employeedata,"$.emergencycontactname"))),
	`address` 		= (select json_unquote(json_extract(employeedata,"$.address"))),
	`city` 			= @city, -- (select json_unquote(json_extract(employeedata,"$.city"))),
	`state` 		= @state, -- (select json_unquote(json_extract(employeedata,"$.state"))),
	`pincode` 		= (select json_unquote(json_extract(employeedata,"$.pincode"))),
	`country` 		= @country, -- (select json_unquote(json_extract(employeedata,"$.country"))),
	`paddress` 		= (select json_unquote(json_extract(employeedata,"$.paddress"))),
	`pcity` 		= @pcity, -- (select json_unquote(json_extract(employeedata,"$.pcity"))),
	`pstate` 		= @pstate, -- (select json_unquote(json_extract(employeedata,"$.pstate"))),
	`ppincode` 		= (select json_unquote(json_extract(employeedata,"$.ppincode"))),
	`pcountry` 		= @pcountry,  -- (select json_unquote(json_extract(employeedata,"$.pcountry"))),
	`aadharnumber` 	= (select json_unquote(json_extract(employeedata,"$.aadharnumber"))),
	`passport` 		= (select json_unquote(json_extract(employeedata,"$.passport"))),
	`status` 		= (select json_unquote(json_extract(employeedata,"$.status"))),
	`updated_on`	= current_timestamp(),
	`updated_by`	= (select json_unquote(json_extract(employeedata,"$.actionby")))
	where e.id = @eid;

	IF ((SELECT reportingmanagerid FROM employee_reportingmanagers WHERE empid = @eid order by id desc limit 1) <> (select json_unquote(json_extract(employeedata,"$.reportingmanager")))) THEN
		update employee_reportingmanagers SET effectiveenddate = current_timestamp()
		where empid = @eid and effectiveenddate is null order by employee_reportingmanagers.id desc limit 1;
		if (json_unquote(json_extract(employeedata,"$.reportingmanager")) <> 'Self') then
			insert into employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
			(@eid,json_unquote(json_extract(employeedata,"$.reportingmanager")),current_timestamp());
		elseif (json_unquote(json_extract(employeedata,"$.reportingmanager")) = 'Self') then
			insert into employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
			(@eid,@eid,current_timestamp());
		end if;
	END IF;

	IF ((SELECT designationid FROM employee_designations WHERE empid = @eid order by id desc limit 1) <> (select json_unquote(json_extract(employeedata,"$.designation")))) THEN
		update employee_designations SET effectiveenddate = current_timestamp()
		where empid = @eid and effectiveenddate is null order by employee_designations.id desc limit 1;
		insert into employee_designations(empid,designationid,effectivestartdate) VALUES
		(@eid,json_unquote(json_extract(employeedata,"$.designation")),current_timestamp());
	END IF;

	IF ((SELECT departmentid FROM employee_departments WHERE empid = @eid order by id desc limit 1) <> (select json_unquote(json_extract(employeedata,"$.department")))) THEN
		update employee_departments SET effectiveenddate = current_timestamp()
		where empid = @eid and effectiveenddate is null order by employee_departments.id desc limit 1;
		insert into employee_departments(empid,departmentid,effectivestartdate) VALUES
		(@eid,json_unquote(json_extract(employeedata,"$.department")),current_timestamp());
	END IF;
        update employee_roles set effective_to_date=current_date()
        where  employee_id=@eid;
        set @k = 0;
	    while @k < @usertypecount do
      set @roleid=(select json_unquote(json_extract(`employeedata`,concat('$.usertype[',convert((@k),char),'].id'))));
	 if exists (select e.role_id from employee_roles e where e.employee_id = @eid 
		and e.role_id =@roleid) then
        update employee_roles set employee_roles.effective_to_date = null where employee_roles.employee_id = @eid 
		and employee_roles.role_id =@roleid;
            	else
                if (json_unquote(json_extract(employeedata,"$.reportingmanager")) = 'Self') then
					INSERT INTO employee_roles(employee_id,role_id,rmid,effective_from_date) VALUES
		(@eid,@roleid,@eid,current_timestamp());
            else
			INSERT INTO employee_roles(employee_id,role_id,rmid,effective_from_date) VALUES
		(@eid,@roleid,json_unquote(json_extract(employeedata,"$.reportingmanager")),current_timestamp());
		end if;


	end if;
    set @k = @k + 1;
	    end while;
		
    -- since in employee edit scenario, we can't edit multiple roles (if any) commenting out here. this will be handled in a separate user-role mapping screen

	if((select locationid from employee_worklocations where `employee_worklocations`.`empid` = @eid and effectivetodate is null) <> @employeelocation) then
		update employee_worklocations 
		set effectivetodate = current_timestamp() where `employee_worklocations`.`empid` = @eid
		and effectivetodate is null;
		insert into employee_worklocations(empid,locationid,effectivefromdate) values
		(@eid,@employeelocation,current_timestamp());
	end if;

	delete from employee_relations where empid = @eid;

	while @i < @relationscount do
		/*set @insertrstring = concat('insert into employee_relations(`empid`,`firstname`,`lastname`,`gender`,`contactnumber`,`dateofbirth`,`relationship`,`status`)
		values (',@eid,',json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].firstname")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].lastname")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].gender")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].contactnumber")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].dateofbirth")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].relationship")),
		json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].status")))');*/
		
		set @insertrstring = concat('insert into employee_relations(`empid`,`firstname`,`lastname`,`gender`,`contactnumber`,`dateofbirth`,`relationship`,`status`)
		values (',@eid,', (case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].firstname")) = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].firstname")) end),
		(case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].lastname")) = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].lastname")) end) ,
		(case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].gender")) = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].gender")) end),
		(case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].contactnumber")) = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].contactnumber")) end),
		(case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].dateofbirth")) = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].dateofbirth")) end),
		(case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].relationship")) = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].relationship")) end),
		(case when json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].status"))  = ''null'' then null else json_unquote(json_extract(''',employeedata,''',"$.relations[',@i,'].status")) end))');

		prepare stmt from @insertrstring;
		execute stmt;
		deallocate prepare stmt;
		set @insertrstring = '';
		set @i = @i + 1;
	end while;
	set @i = 0;
	select 2 as statuscode , @eid as empid;
 else
  select @statuscode statuscode , @eid as empid, @mail email;
 end if;
end;
end if;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_ems_employee_column_configuration_values` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_ems_employee_column_configuration_values`(
		in employee_id int(11),
		in employee_status_value int(1),
		in employee_type_value int(1),
		in department_value int(1),
		in designation_value int(1),
		in location_value int(1),
		in gender_value int(1),
		in blood_group_value int(1),
		in marital_status_value int(1),
		in shift_value int(1),
		in reporting_manager_value int(1)
	)
	begin
	if not exists(select id from ems_employee_column_configuration_master 
				  where ems_employee_column_configuration_master.empid = employee_id) then
		INSERT INTO `ems_employee_column_configuration_master`
		(`empid`,`employee_status`,`employee_type`,`department`,`designation`,`location`,`gender`,`blood_group`,`marital_status`,
		 `shift`,`reporting_manager`) VALUES
		(employee_id,1,1,1,1,1,1,1,1,1,1);
	elseif (employee_id is not null) then
		update ems_employee_column_configuration_master
		set ems_employee_column_configuration_master.employee_status = employee_status_value,
		ems_employee_column_configuration_master.employee_type = employee_type_value,
		ems_employee_column_configuration_master.department = department_value,
		ems_employee_column_configuration_master.designation = designation_value,
		ems_employee_column_configuration_master.location = location_value,
		ems_employee_column_configuration_master.gender = gender_value,
		ems_employee_column_configuration_master.blood_group = blood_group_value,
		ems_employee_column_configuration_master.marital_status = marital_status_value,
		ems_employee_column_configuration_master.shift = shift_value,
		ems_employee_column_configuration_master.reporting_manager = reporting_manager_value
		where empid = employee_id;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_ems_induction_conductedby` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_ems_induction_conductedby`(in conducteddata varchar(8000))
	begin
		declare exit handler for sqlexception
		begin
			show errors;
			rollback;
			select -1 as successstate;
		end; 
		set @conid = (select id from ems_induction_conductedby where id = (select json_unquote(json_extract(conducteddata,"$.id"))));   
		set @empsscount = 0;
		set @empsscount = (select json_length(conducteddata, '$.empids'));
		set @insertexstring = '';
		set @program_id = json_unquote(json_extract(conducteddata,"$.program_id"));           
		set @department_id = json_unquote(json_extract(conducteddata,"$.department_id"));
			
		if @conid is null then  -- Here Checking  Id Is Existing or not
			begin
				if not exists(select * from ems_induction_conductedby where program_id=@program_id and department_id=@department_id) then
					insert into ems_induction_conductedby(`program_id`,`department_id`,`status`,`created_on`,`created_by`)
						values (
						@program_id,            
						@department_id,
						json_unquote(json_extract(conducteddata,"$.status")),
						current_timestamp(),
						json_unquote(json_extract(conducteddata,"$.actionby"))
						);
					set @inserted_id=last_insert_id();
					-- (select id from ems_induction_conductedby order by id desc limit 1);
				
					set @k = 0;
					set @duplicateflag = 0;
					-- handle duplicates case
					while @k < @empsscount do
						set  @emplid = json_unquote(json_extract(conducteddata,concat('$.empids[',@k,']')));
						if exists (select * from ems_employee_induction_conductedby where induction_conductedby_id = @inserted_id and empid=@emplid) then
							set @duplicateflag = 1;
						else 
							insert into ems_employee_induction_conductedby(`induction_conductedby_id`,`empid`) values 
							(@inserted_id,@emplid);
							set @insertexstring = '';
						end if;
						set @k = @k + 1;
					end while;		
					set @statuscode=0;
					select @statuscode as statuscode;
			else
				select 1 as statuscode; -- duplicate record
			end if;
		  end;
		else -- update case (here delete & insert)
		   begin
				delete from ems_employee_induction_conductedby where induction_conductedby_id=@conid;
				set @k = 0;
				while @k < @empsscount do
					/*set @insertexstring = concat('insert into ems_employee_induction_conductedby(
						`induction_conductedby_id`,`empid`) values (',@conid,',
					json_unquote(json_extract(''',conducteddata,''',"$.empids[',@k,']")))');
					prepare stmt from @insertexstring;
					execute stmt;
					deallocate prepare stmt;*/
					insert into ems_employee_induction_conductedby(`induction_conductedby_id`,`empid`) 
					values (@conid,json_unquote(json_extract(conducteddata,concat('$.empids[',@k,']'))));
					set @insertexstring = '';
					set @k = @k + 1;
				end while;
				set @statuscode=0;
				select @statuscode as statuscode;
			end;
		end if;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_ems_messages` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_ems_messages`(
		IN `messagedata` VARCHAR(8000) -- JSON array format: [{"code":"EMS1","screenname":"","message":"This screen is required","userid":1},  {"code":"EMS2","screenname":"","message":"Fromdate should be lessthan Todate","userid":1}]
	)
	BEGIN

		/* DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
		END; */
		
		set @arraylen = (select json_length(`messagedata`));
		set @tot = @arraylen;
		while ((@tot-@arraylen) < @tot) do
			set @sqlquery = concat('select json_unquote(json_extract(''',`messagedata`,''',"$[',(@tot-@arraylen),']")) into @subjson');
			prepare stmt from @sqlquery;
			execute stmt;
			deallocate prepare stmt;
			set @code = json_unquote(json_extract(@subjson,'$.code'));
			set @screenname = json_unquote(json_extract(@subjson,'$.screenname'));
			set @message = json_unquote(json_extract(@subjson,'$.message'));
			set @userid = json_unquote(json_extract(@subjson,'$.userid'));
			if @code not in (select ems_messages.code from ems_messages where ems_messages.code <=> @code) then
				-- new entry, so insert
				insert into ems_messages(code,screenname,message,created_by,created_on) 
				values(@code,@screenname,@message,@userid,current_timestamp());
			else -- exists, so update
				update ems_messages set ems_messages.message=@message,ems_messages.updated_by=@userid ,ems_messages.updated_on=current_timestamp()  where ems_messages.code <=> @code ;
			end if;
			set @arraylen = @arraylen - 1;
		end while;
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_error_logs` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_error_logs`(
		`service` varchar(255),
		`function` varchar(255),
		`method` varchar(512),
		`request` varchar(10000),
		`response` varchar(10000),
		`statuscode` int(11)
	)
	begin

		declare exit handler for sqlexception
		begin
			rollback;
		   select -1 as successstate;
		end; 
	 
		insert into errorlogs(service,function,method,request,response,statuscode,createdat) 
		values(`service`,`function`,`method`,`request`,`response`,`statuscode`,current_timestamp());
		
		select 0 as successstate;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_error_message` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_error_message`(
	in error_message varchar(1024)
	)
	begin
		set @ecode = (select lm_errormessages.errorcode from lm_errormessages order by lm_errormessages.id desc limit 1);
		set @ecode = substring(@ecode,3);
		set @ecode = (cast(@ecode as unsigned) + 1);
		INSERT INTO lm_errormessages(errorcode,errormessage) values(@ecode,error_message);
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_esi_for_state` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_esi_for_state`(
	esi_number varchar(18),
	state_id int(11)
	)
	begin
	if ((esi_number is not null) and (state_id is not null)) then
		if not exists (select esi_configs.id from esi_configs where esi_configs.state_id = `state_id`) then
			insert into esi_configs(name,state_id,value,effective_from_date) values
			('Company ESI Registration Number',`state_id`,`esi_number`,current_timestamp());
		else
			set @id = (select max(esi_configs.id) from esi_configs where esi_configs.state_id = `state_id`);
			set @esi_number = (select esi_configs.value from esi_configs where esi_configs.id = @id);
			if (@esi_number <> `esi_number`) then
				update esi_configs set esi_configs.effective_to_date = current_timestamp()
				where esi_configs.id = @id;
				insert into esi_configs(name,state_id,value,effective_from_date) values
				('Company ESI Registration Number',`state_id`,`esi_number`,current_timestamp());
			end if;
		end if;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_filecategory` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_filecategory`(
	`moduleid` int,
	`filecategory` varchar(64)
	)
	begin
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			-- SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
			select -1 as successstate;
		END; 
		set @successstate = 0;
		if not exists(select * from filecategory_master where module_id=`moduleid` and category =`filecategory`) then
			INSERT INTO filecategory_master(module_id,category) values(`moduleid`,`filecategory`);
		else
			set @successstate = 1;
		end if;
		
		select @successstate;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_filepaths_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_filepaths_master`(
	`moduleid` int,
	`rootfolder` varchar(64),
	`modulecode` varchar(16)
	)
	begin
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			-- SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
			select -1 as successstate;
		END; 
		set @successstate = 0;
		if not exists(select * from filepaths_master where module_id=`moduleid` and root_folder =`rootfolder` and module_code=`modulecode`) then
			INSERT INTO filepaths_master(module_id,root_folder,module_code) values(`moduleid`,`rootfolder`,`modulecode`);
		else
			set @successstate = 1;
		end if;
		
		select @successstate;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_files_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_files_master`(
	`fid` int,
	`employee_id` int,
	`candidateid` int,
	`filecategory` varchar(64),
	`moduleid` int,
	`documentnumber` varchar(64),
	`file_name` varchar(1024),
	`modulecode` varchar(16),
	`request_id` int,
	`status` varchar(32)
	)
	begin
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			-- SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
			select -1 as successstate;
		END; 
		set @successstate = 0;
			if not exists(select * from files_master where id=`fid`) then
		-- if not exists(select * from filepaths_master where module_id=`moduleid` and root_folder =`rootfolder` and module_code=`modulecode`) then
			INSERT INTO files_master
			(
				empid,
				candidate_id,
				file_category,
				document_number,
				filepath_id,
				filename,
				request_id,
				upload_date,
				file_status
			) 
			values
			(
				`employee_id`,
				`candidateid`,
				(select id from filecategory_master where module_id in (1,`moduleid`) and category=`filecategory`),-- as file_category,
				`documentnumber`,
				(select id from filepaths_master where module_id=`moduleid` and module_code=`modulecode`),-- as filepath_id,
				`file_name`,
				`request_id`,
				current_timestamp(),
				`status`
			);
			set @inserted_id=last_insert_id();
			set @filepath=(select concat(root_folder,'\\',module_code,'\\')  from filepaths_master where module_id=`moduleid` limit 1);
			select @successstate as successstate,id,@filepath as filepath,concat((case when empid=0 and candidate_id is not null then concat('CAN',candidate_id) else empid end),'_',`filecategory`,'_',ifnull(`request_id`,''),'_',filename) as filename 
			from files_master 
			where id=@inserted_id;
	 
		else
			update files_master
			set	empid = `employee_id`,
				candidate_id =`candidateid`,
				file_category = (select id from filecategory_master where module_id in (1,`moduleid`) and category=`filecategory`),
				document_number = `documentnumber`,
				filename = `file_name`,
				request_id = `request_id`,
				upload_date = current_timestamp(),
				file_status = ifnull(`status`,file_status)
			where id = `fid`;
			 set @filepath=(select concat(root_folder,'\\',module_code,'\\')  from filepaths_master where module_id=`moduleid` limit 1);
			select @successstate as successstate,id,@filepath as filepath,concat((case when empid=0 and candidate_id is not null then concat('CAN',candidate_id) else empid end),'_',`filecategory`,'_',ifnull(`request_id`,''),'_',filename) as filename 
			from files_master 
			where id= `fid`;
		end if;
		/*
			DECLARE EXIT HANDLER FOR SQLEXCEPTION
			BEGIN
				ROLLBACK;
				-- SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
				select -1 as successstate;
			END; 
			set @successstate = 0;
				if not exists(select * from files_master where id=`fid`) then
			-- if not exists(select * from filepaths_master where module_id=`moduleid` and root_folder =`rootfolder` and module_code=`modulecode`) then
				INSERT INTO files_master
				(
					empid,
					candidate_id,
					file_category,
					document_number,
					filepath_id,
					filename,
					request_id,
					upload_date,
					file_status
				) 
				values
				(
					`employee_id`,
					`candidateid`,
					(select id from filecategory_master where module_id in (1,`moduleid`) and category=`filecategory`),-- as file_category,
					`documentnumber`,
					(select id from filepaths_master where module_id=`moduleid` and module_code=`modulecode`),-- as filepath_id,
					`file_name`,
					`request_id`,
					current_timestamp(),
					`status`
				);
				set @inserted_id=last_insert_id();
				set @filepath=(select concat(root_folder,'/',module_code)  from filepaths_master where module_id=`moduleid` limit 1);
				select @successstate as successstate,id,@filepath as filepath,concat((case when empid=0 and candidate_id is not null then concat('CAN',candidate_id) else empid end),'_',`filecategory`,'_',ifnull(`request_id`,''),'_',filename) as filename 
				from files_master 
				where id=@inserted_id;
		 
			else
				update files_master
				set	empid = `employee_id`,
					candidate_id =`candidateid`,
					file_category = (select id from filecategory_master where module_id in (1,`moduleid`) and category=`filecategory`),
					document_number = `documentnumber`,
					filename = `file_name`,
					request_id = `request_id`,
					upload_date = current_timestamp(),
					file_status = ifnull(`status`,file_status)
				where id = `fid`;
				 set @filepath=(select concat(root_folder,'/',module_code)  from filepaths_master where module_id=`moduleid` limit 1);
				select @successstate as successstate,id,@filepath as filepath,concat((case when empid=0 and candidate_id is not null then concat('CAN',candidate_id) else empid end),'_',`filecategory`,'_',ifnull(`request_id`,''),'_',filename) as filename 
				from files_master 
				where id= `fid`;
			end if;
		*/
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_files_master_status` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_files_master_status`(
	`fid` int,
	`status` varchar(32)
	)
	begin
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			-- SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
			select -1 as successstate;
		END; 
		set @successstate = 0;
		if exists(select * from files_master where id=`fid`) then
			update files_master
			set	file_status = ifnull(`status`,file_status)
			where id = `fid`;
			select @successstate as successstate;
		else select 1 as successstate;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_holidays_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_holidays_master`(
		hid int(11),
		holiday_year int(4), 
		holiday_description varchar(255),
		holiday_date date,
		holiday_location varchar(1000), -- json input format: [1,2,3]
		createdby int(11)
	)
	begin
		declare exit handler for sqlexception
		begin
			rollback;
			select -1 as successstate;
		end; 
		if (hid is null) then -- new record insert case
			if exists(select * from holidaysmaster where year=holiday_year and date=holiday_date and description=holiday_description and json_contains(holiday_location,concat('[',location,']'),'$')=1) 
				-- or exists(select * from holidaysmaster where year=holiday_year and date=holiday_date and json_contains(holiday_location,concat('[',location,']'),'$')=1)
			then
				select 1 as successstate; -- duplicate record
			else
				set @jsn_len = (select json_length(holiday_location));
				set @cnt = 0;
				while (@cnt < @jsn_len) do 
					insert into holidaysmaster(year,description,date,day,location,leave_cycle_year,created_on,created_by)
					values(holiday_year,holiday_description,holiday_date,dayname(holiday_date),(select json_unquote(json_extract(holiday_location,concat('$[',@cnt,']')))),(select fn_get_leave_cycle_year()),current_timestamp(),createdby);
					set @cnt = @cnt + 1;
				end while;
				select 0 as successstate;
			end if;
		else -- existing record update case
			if exists(select * from holidaysmaster where year=holiday_year and date=holiday_date and description=holiday_description and json_contains(holiday_location,concat('[',location,']'),'$')=1) 
				-- or exists(select * from holidaysmaster where year=holiday_year and date=holiday_date and json_contains(holiday_location,concat('[',location,']'),'$')=1)
			then
				select 1 as successstate; -- duplicate record
			else
				update holidaysmaster 
				set year=holiday_year,description=holiday_description,date=holiday_date,day=dayname(holiday_date),location= (select json_unquote(json_extract(holiday_location,concat('$[0]')))),updated_by=createdby,updated_on=current_timestamp()
				where id = hid;
			end if;
			select 0 as successstate;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_income_group` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_income_group`(
	`income_group_name` varchar(255),
	`income_from_value` decimal(15,2),
	`income_to_value` decimal(15,2),
	`status` varchar(64),
	`description` varchar(1000),
	`components_json` varchar(1000)
	)
	begin
	if (income_group_name is not null) then
		INSERT INTO payroll_income_groups_master(group_name,income_from_value,income_to_value,status,description) values
		(`income_group_name`,`income_from_value`,`income_to_value`,`status`,`description`);
		set @last_insert_id = (select last_insert_id());
		IF (@last_insert_id IS NOT NULL) then
			set @insert_string = components_json;
			set @v = 0;
			set @v = JSON_LENGTH(@insert_string);
			set @u = 0;
			WHILE (@u < @v) do
				set @value = (select json_extract(@insert_string,concat('$[',@u,']')));
				set @svalue = (select payroll_salary_components_master.section_id from payroll_salary_components_master 
							   where payroll_salary_components_master.id = cast(@value as unsigned));
				if (@svalue = 2) then
				update payroll_income_groups_master set payroll_income_groups_master.status = 'Configuration In Progress'
				where payroll_income_groups_master.id = @last_insert_id;
				end if;
				select is_this_component_a_part_of_employee_salary_structure,
				calculate_on_pro_rata_basis,
				is_this_component_taxable,
				consider_for_esi_contribution,
				consider_for_epf_contribution,
				show_this_component_in_payslip
				into @z1,@z2,@z3,@z4,@z5,@z6
				from payroll_product_earning_components_configurations_master where component_id = cast(@value as unsigned);
				INSERT INTO payroll_income_group_components_master(group_id,component_id,display_name,
				is_this_component_a_part_of_employee_salary_structure,
				calculate_on_pro_rata_basis,
				is_this_component_taxable,
				consider_for_esi_contribution,
				consider_for_epf_contribution,
				show_this_component_in_payslip,
				effective_from_date,
				status
				)
				values (@last_insert_id,(cast(@value as signed)),
				(select payroll_salary_components_master.component from payroll_salary_components_master 
				 where payroll_salary_components_master.id = (cast(@value as signed))),
				@z1,@z2,@z3,@z4,@z5,@z6,curdate(),(case when (@svalue = 2) then 'Active' else `status` end)); 
				set @lid = (select last_insert_id()); 
				if (@lid is not null) then
					select epf_always,epf_only_when_pf_wage_is_less_than_standard_pf_wage
						into @epf1,@epf2
						from payroll_product_earning_components_epf_configs_master
						where component_id = cast(@value as unsigned);
					insert into payroll_earning_components_epf_configs_details
						(pigcm_id,epf_always,epf_only_when_pf_wage_is_less_than_standard_pf_wage,effective_from_date) values
						(@lid,@epf1,@epf2,curdate());
				end if;
				set @u = @u + 1;
			end while;
		end if;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_integration_empids_lookup` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_integration_empids_lookup`(
	  `boon_emp_id` int(11),
	  `biometric_id`  int(11)
	)
	begin
		set @successstate = 0;
		if (select count(*) from integration_empids where boonempid=`boon_emp_id`)>0 then -- existing record, so update
			update integration_empids 
			set boonempid=`boon_emp_id`,
				deviceempid=`biometric_id`
			where boonempid=`boon_emp_id`;
			 set @successstate = (select id from integration_empids where boonempid=`boon_emp_id`);
		elseif (select count(*) from integration_empids where deviceempid=`biometric_id`)>0 then -- this is also existing record, so update
			update integration_empids 
			set boonempid=`boon_emp_id`,
				deviceempid=`biometric_id`
			where deviceempid=`biometric_id`;
			set @successstate = (select id from integration_empids where deviceempid=`biometric_id`);
		else -- not existing, so insert 
			insert into integration_empids (boonempid,deviceempid) values(`boon_emp_id`,`biometric_id`);
			set @successstate = last_insert_id();
		end if;
		select @successstate;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_leavepolicies` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_leavepolicies`(
		in `ruledata` varchar(20000) /* json format:[{"ruleid":1,"rulename":"advanced_leaves_eligibility","description":"max leaves eligibility","value":12,"categoryid":2},
			{"ruleid": 6,"rulename": "LEAVES_MIN_SERVICE_ELIGIBILITY","description": "Minimum service (in months) for employees to get these leaves (for the first time joinee)","value": 12,"leavetypeid": 2}
			{
		"ruleid": 6,
		"rulename": "LEAVES_MIN_SERVICE_ELIGIBILITY",
		"description": "Minimum service (in months) for employees to get these leaves (for the first time joinee)",
		"value": 12,
		"leavetypeid": 2,
		"status":"inactive"
	}
			]
		*/
	)
	begin
		DECLARE vvalue varchar(64);
		declare vstatus char(8);
		set @arraylen = (select json_length(ruledata));
		set @i =0;
		set @tot= @arraylen;
		set @sqlquery = '';
		while ((@tot-@i)>0) do
			set @sqlquery = concat(@sqlquery,'select json_unquote(json_extract(''',ruledata,''',"$[',@i,']")) into @subjson');
			
			prepare stmt from @sqlquery;
			execute stmt;
			deallocate prepare stmt;
			-- select @subjson;    
			set @fromdate = null;
			set @fromdate = (select json_unquote(json_extract(@subjson,'$.isFromDate')));
			set @todate = null;
			set @todate = (select json_unquote(json_extract(@subjson,'$.isToDate')));
			/* (select lm_rulevalues.effectivefromdate from lm_rulevalues 
						   where lm_rulevalues.leavetypeid = json_unquote(json_extract(@subjson,'$.leavetype_id'))
						   and lm_rulevalues.ruleid = json_unquote(json_extract(@subjson,'$.ruleid'))
						   order by lm_rulevalues.id desc limit 1)*/     
			set vvalue = '';
			set vvalue = (select lm_rulevalues.value from lm_rulevalues 
						   where lm_rulevalues.leavetypeid = json_unquote(json_extract(@subjson,'$.leavetype_id'))
						   and lm_rulevalues.ruleid = json_unquote(json_extract(@subjson,'$.ruleid'))
						   order by lm_rulevalues.id desc limit 1);
			set vstatus = '';
			set vstatus = (select lm_rulevalues.status from lm_rulevalues 
						   where lm_rulevalues.leavetypeid = json_unquote(json_extract(@subjson,'$.leavetype_id'))
						   and lm_rulevalues.ruleid = json_unquote(json_extract(@subjson,'$.ruleid'))
						   order by lm_rulevalues.id desc limit 1);
						   select @fromdate,@todate,vstatus,vvalue;
			if(json_unquote(json_extract(@subjson,'$.leavetype_id')) is not null) then  
				-- update leave colour          
				update lm_leavesmaster set lm_leavesmaster.leavecolor = json_unquote(json_extract(@subjson,'$.leavecolor')) 
				where lm_leavesmaster.id = json_unquote(json_extract(@subjson,'$.leavetype_id'));
				-- insert/update rule values
				if(vvalue = json_unquote(json_extract(@subjson,'$.value')) and -- predefined leave
					@fromdate = 0 and
					vstatus = 'Active') then
					select 1,@fromdate,@todate,vstatus,vvalue;
					update lm_rulevalues set 
						lm_rulevalues.effectivefromdate = current_timestamp()
						where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
					update lm_leavesmaster set lm_leavesmaster.status = 'Active' 
						where lm_leavesmaster.id = json_unquote(json_extract(@subjson,'$.leavetype_id'));   
				elseif(vvalue <> json_unquote(json_extract(@subjson,'$.value')) and -- predefined leave 
					@fromdate = 0 and
					vstatus = 'Active') then
					select 2,@fromdate,@todate,vstatus,vvalue;
					update lm_rulevalues set 
						lm_rulevalues.value = json_unquote(json_extract(@subjson,'$.value')),
						lm_rulevalues.effectivefromdate = current_timestamp()
						where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
					update lm_leavesmaster set lm_leavesmaster.status = 'Active' 
						where lm_leavesmaster.id = json_unquote(json_extract(@subjson,'$.leavetype_id'));    
				elseif(vvalue is not null and (vvalue <> json_unquote(json_extract(@subjson,'$.value')))
						and @fromdate = 1) then -- both types
					select 3,@fromdate,@todate,vstatus,vvalue;
					update lm_rulevalues set lm_rulevalues.status = 'Inactive',
						lm_rulevalues.effectivetodate = current_timestamp() 
						where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
					insert into lm_rulevalues(ruleid,leavetypeid,value,effectivefromdate,status) values
						(json_unquote(json_extract(@subjson,'$.ruleid')),
						json_unquote(json_extract(@subjson,'$.leavetype_id')),
						json_unquote(json_extract(@subjson,'$.value')),
						current_timestamp(),
						json_unquote(json_extract(@subjson,'$.status')));   
						select 3;
				elseif(vvalue is null and -- customized leave  
						@fromdate = 0  and
						vstatus <> json_unquote(json_extract(@subjson,'$.status')) and vstatus = 'Inactive') then
					select 4,@fromdate,@todate,vstatus,vvalue;
					update lm_rulevalues set lm_rulevalues.status = json_unquote(json_extract(@subjson,'$.status')),
						lm_rulevalues.effectivefromdate = current_timestamp(),
						lm_rulevalues.value = json_unquote(json_extract(@subjson,'$.value'))
						where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
					update lm_leavesmaster set lm_leavesmaster.status = 'Active' 
						where lm_leavesmaster.id = json_unquote(json_extract(@subjson,'$.leavetype_id'));   
				elseif(vvalue = json_unquote(json_extract(@subjson,'$.value')) and -- customized leave
					@fromdate = 1 and
					@todate = 1 and
					vstatus <> json_unquote(json_extract(@subjson,'$.status')) and vstatus = 'Inactive') then
					select 5,@fromdate,@todate,vstatus,vvalue;
					insert into lm_rulevalues(ruleid,leavetypeid,value,effectivefromdate,status) values
						(json_unquote(json_extract(@subjson,'$.ruleid')),
						json_unquote(json_extract(@subjson,'$.leavetype_id')),
						json_unquote(json_extract(@subjson,'$.value')),
						current_timestamp(),
						json_unquote(json_extract(@subjson,'$.status')));
					select 'hi';
				elseif(vvalue = json_unquote(json_extract(@subjson,'$.value')) and -- customized leave
					@fromdate = 1 and
					vstatus <> json_unquote(json_extract(@subjson,'$.status')) and vstatus = 'Active') then
					select 6,@fromdate,@todate,vstatus,vvalue;
					update lm_rulevalues set lm_rulevalues.status = json_unquote(json_extract(@subjson,'$.status')),
						lm_rulevalues.effectivetodate = current_timestamp()
						where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
				end if;   
			elseif (json_unquote(json_extract(@subjson,'$.leavetype_id')) is null) then
				set vvalue = 0;
				set vvalue = (select lm_rulevalues.value from lm_rulevalues 
							   where lm_rulevalues.ruleid = json_unquote(json_extract(@subjson,'$.ruleid'))
							   order by lm_rulevalues.effectivefromdate desc limit 1);
			   if(vvalue <> json_unquote(json_extract(@subjson,'$.value'))) then           
					update lm_rulevalues set lm_rulevalues.status = 'Inactive',
					lm_rulevalues.effectivetodate = current_timestamp() 
					where lm_rulevalues.id = json_unquote(json_extract(@subjson,'$.rulevalue_id')); 
					insert into lm_rulevalues(ruleid,value,effectivefromdate,status) values
					(json_unquote(json_extract(@subjson,'$.ruleid')),
					json_unquote(json_extract(@subjson,'$.value')),
					current_timestamp(),
					json_unquote(json_extract(@subjson,'$.status')));
			   end if;
			end if;    
			set @i = @i+1;
			set @sqlquery = '';
		end while;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_new_hire` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_new_hire`(in newhiredata varchar(8000))
	BEGIN
		/* DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
		END; */
	  set @canid=  (select json_unquote(json_extract(newhiredata,"$.candidate_id")));
	 -- select @canid;
	  if(@canid='null') then
	   set @canid =null;
	   
	   end if;
	  set @eid = (select id from ems_new_hire where candidate_id =@canid); 
	  set @email=(select json_unquote(json_extract(newhiredata,"$.personal_email")));
	  -- select @email;
	  if(@email='')then
			set @isproceed=0;
	   else
			 if exists(select * from ems_new_hire where personal_email = @email and candidate_id <> ifnull(@canid,0)) then
				set @isproceed=1;
			 else 
				set @isproceed=0;
			 end if;
			
		end if;
	   -- select @isproceed; 

			if not exists (select * from ems_new_hire where candidate_id = (select json_unquote(json_extract(newhiredata,"$.candidate_id")))) then
			   if(@isproceed=0) then
					insert into ems_new_hire(`firstname`,`middlename`,`lastname`,`personal_email`,`dateofjoin`,`hired_date`,`designation`,`contact_number`,
					`alternatecontact_number`,`status`,`created_on`,`created_by`) 
					values(
					json_unquote(json_extract(newhiredata,"$.firstname")),
					json_unquote(json_extract(newhiredata,"$.middlename")),
					json_unquote(json_extract(newhiredata,"$.lastname")),
					json_unquote(json_extract(newhiredata,"$.personal_email")),
					json_unquote(json_extract(newhiredata,"$.dateofjoin")),
					json_unquote(json_extract(newhiredata,"$.hired_date")),
					json_unquote(json_extract(newhiredata,"$.designation")),
					json_unquote(json_extract(newhiredata,"$.contact_number")),
					json_unquote(json_extract(newhiredata,"$.alternatecontact_number")),
					json_unquote(json_extract(newhiredata,"$.status")),
					current_timestamp(),
					json_unquote(json_extract(newhiredata,"$.actionby"))
				   );
					set @id=(select last_insert_id());
					update ems_new_hire set `candidate_id` =@id  where id=@id;
				  select 0 as statuscode,@id as candidate_id;
			 else
					select 1 as statuscode,null  as candidate_id , 'Personal email already exists' as email;
			  end if;
		else 
		 if(@isproceed=0) then
					update ems_new_hire set
					`firstname` 	= (select json_unquote(json_extract(newhiredata,"$.firstname"))),
					`middlename` 	= (select json_unquote(json_extract(newhiredata,"$.middlename"))),
					`lastname` 		= (select json_unquote(json_extract(newhiredata,"$.lastname"))),
					`personal_email` = (select json_unquote(json_extract(newhiredata,"$.personal_email"))),
					`dateofjoin` 	= (select json_unquote(json_extract(newhiredata,"$.dateofjoin"))),
					`hired_date` 	= (select json_unquote(json_extract(newhiredata,"$.hired_date"))),
					`designation` 		= (select json_unquote(json_extract(newhiredata,"$.designation"))),
					`contact_number` 			= (select json_unquote(json_extract(newhiredata,"$.contact_number"))),
					`alternatecontact_number` 	= (select json_unquote(json_extract(newhiredata,"$.alternatecontact_number"))),
					`status`                    = (select json_unquote(json_extract(newhiredata,"$.status"))),
					`updated_on`				= current_timestamp(),
					`updated_by`				= (select json_unquote(json_extract(newhiredata,"$.actionby")))
					where id = @eid;
			
					select 0 as statuscode,@eid  as candidate_id;
			
				else
					select 1 as statuscode,null  as candidate_id , 'Personal email already exists' as email;
			end if;
		end if;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_offboard_settings` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_offboard_settings`(
		in onboarddata varchar(8000)
		)
	begin
		/*declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; */
		set @ruledatacount = 0;
		set @ruledatacount =(select json_length(onboarddata, '$.ruledata'));
		set @i = 0;
		while @i < @ruledatacount do

		set @existingvalue= (select rv.value from ems_rulevalues rv 
		where rv.id=(select json_unquote(json_extract(onboarddata,concat('$.ruledata[',@i,'].id')))));

		set @newvalue= (select json_unquote(json_extract(onboarddata,concat('$.ruledata[',@i,'].rulevalue'))));
	   select @existingvalue;
	   select @newvalue;
	   if(@existingvalue<>@newvalue) then
				update ems_rulevalues rv set 
					   rv.effectivefromdate=current_timestamp(),
					   rv.value=@newvalue
					   where rv.id= (select json_unquote(json_extract(onboarddata,concat('$.ruledata[',@i,'].id')))); 
			if(@newvalue<>0) then
			set @insertrstring = '';
			set @insertrstring = concat('insert into ems_rulevalues(`ruleid`,`value`,`effectivefromdate`,`status`)
			values (json_unquote(json_extract(''',onboarddata,''',"$.ruledata[',@i,'].ruleid")),
		   json_unquote(json_extract(''',onboarddata,''',"$.ruledata[',@i,'].rulevalue")),
		   current_timestamp(),1)');
		   prepare stmt from @insertrstring;
		  execute stmt;
		  deallocate prepare stmt;
		  set @insertrstring = '';
		  select 0 as statuscode;
		 end if;
		 end if;
		   set @i = @i + 1;
		   end while;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_onboard_settings` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_onboard_settings`(
		in onboarddata varchar(8000)
		)
	begin
		/*declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; */
		set @ruledatacount = 0;
		set @ruledatacount =(select json_length(onboarddata, '$.ruledata'));
		set @i = 0;
		while @i < @ruledatacount do

		set @existingvalue= (select rv.value from ems_rulevalues rv 
		where rv.id=(select json_unquote(json_extract(onboarddata,concat('$.ruledata[',@i,'].id')))));

		set @newvalue= (select json_unquote(json_extract(onboarddata,concat('$.ruledata[',@i,'].rulevalue'))));
	   select @existingvalue;
	   select @newvalue;
	   if(@existingvalue<>@newvalue) then
				update ems_rulevalues rv set 
					   rv.effectivefromdate=current_timestamp(),
					   rv.value=@newvalue
					   where rv.id= (select json_unquote(json_extract(onboarddata,concat('$.ruledata[',@i,'].id')))); 
			if(@newvalue<>0) then
			set @insertrstring = '';
			select 1;
		   insert into ems_rulevalues(`ruleid`,`value`,`effectivefromdate`,`status`)
			values (
			(select json_unquote(json_extract(onboarddata,concat('$.ruledata[',@i,'].ruleid')))),
			(select json_unquote(json_extract(onboarddata,concat('$.ruledata[',@i,'].rulevalue')))),        
			  current_timestamp(),1);
		  select 2;
		  select 0 as statuscode;
		 end if;
		 end if;
		   set @i = @i + 1;
		   end while;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_payroll_messages` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_payroll_messages`(
		IN `messagedata` VARCHAR(8000) -- JSON array format: [{"code":"EMS1","screenname":"","message":"This screen is required","userid":1},  {"code":"EMS2","screenname":"","message":"Fromdate should be lessthan Todate","userid":1}]
	)
	BEGIN

		/* DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
		END; */
		
		set @arraylen = (select json_length(`messagedata`));

		set @tot = @arraylen;
		while ((@tot-@arraylen) < @tot) do
			set @sqlquery = concat('select json_unquote(json_extract(''',`messagedata`,''',"$[',(@tot-@arraylen),']")) into @subjson');
			prepare stmt from @sqlquery;
			execute stmt;
			deallocate prepare stmt;
			set @code = json_unquote(json_extract(@subjson,'$.code'));
			set @screenname = json_unquote(json_extract(@subjson,'$.screenname'));
			set @message = json_unquote(json_extract(@subjson,'$.message'));
			set @userid = json_unquote(json_extract(@subjson,'$.userid'));
			if @code not in (select payroll_messages.code from payroll_messages where payroll_messages.code <=> @code) then
				-- new entry, so insert
				insert into payroll_messages(code,screenname,message,created_by,created_on) 
				values(@code,@screenname,@message,@userid,current_timestamp());
			else -- exists, so update
				update payroll_messages set payroll_messages.message=@message,payroll_messages.updated_by=@userid 
				,payroll_messages.updated_on=current_timestamp()  where payroll_messages.code <=> @code ;
			end if;
			set @arraylen = @arraylen - 1;
		end while;
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_pay_group_to_employee` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_pay_group_to_employee`(
		emp_id_value int(11),
		pay_group_id_value int(11),
		ctc_value decimal(15,2),
		components_json varchar(1000),
		esi_applicable int(1)
	)
	begin
	set @doj = (select employee.dateofjoin from employee where employee.id = emp_id_value);
	if (emp_id_value is not null and pay_group_id_value is not null and ctc_value is not null) then
		insert into payroll_employee_pay_group_mapping_master(empid,income_group_id,effective_from_date) values
		(emp_id_value,pay_group_id_value,@doj);
		set @lid = (select last_insert_id());
		if not exists (select * from employee_ctc_master where empid = emp_id_value) and (@lid is not null) then
			insert into employee_ctc_master(empid,cost_to_company,effective_from_date) values
			(emp_id_value,ctc_value,@doj);
			set @employee_ctc_master_id = 0;
			set @employee_ctc_master_id = (select last_insert_id());
			set @insert_string = components_json;
			set @columns_string = (select json_keys(@insert_string));
			set @v = 0;
			set @v = JSON_LENGTH(@insert_string);
			set @u = 0;
			WHILE (@u < @v) do
				set @column_name_value = (select json_unquote(json_extract(@columns_string,concat('$[',@u,']'))));
				set @value = (select json_unquote(json_extract(@insert_string,concat('$.',@column_name_value,''))));
				set @insertstring = '';
				set @insertstring = concat('update employee_ctc_master set ',@column_name_value,' = ',@value,' where employee_ctc_master.id = ',@employee_ctc_master_id);
				-- select @column_name_value,@value,@insertstring;
				prepare stmt from @insertstring;
				execute stmt;
				deallocate prepare stmt; 
				set @u = @u + 1;
			end while;
		end if; 
		if (esi_applicable = 1) then
			insert into payroll_employee_esi_status_details(empid,is_gross_sal_ltoet_esi_cutoff,updated_on) values
			(emp_id_value,1,current_timestamp());
		end if;
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_preonboard_candidate_educations` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_preonboard_candidate_educations`(in educationdata varchar(8000))
	BEGIN
		/*declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; */
		set @cid=(select json_unquote(json_extract(educationdata, '$.candidateid')));
	   -- select @cid;
		set @educationcount = 0;
		set @educationcount = (select json_length(educationdata, '$.education'));
		set @j = 0;
		if exists(select * from ems_candidate_education_details ced where ced.candidateid = @cid) then
		delete from ems_candidate_education_details where candidateid = @cid;
		end if;
		set @isinsert=0;
		set @insertedstring = '';
		while @j < @educationcount do
		
		set @insertedstring = concat('insert into ems_candidate_education_details(`candidateid`,`course`,`institutename`,`fromdate`,`todate`)
		values (',@cid,',json_unquote(json_extract(''',educationdata,''',"$.education[',@j,'].course")),
		json_unquote(json_extract(''',educationdata,''',"$.education[',@j,'].institutename")),
		json_unquote(json_extract(''',educationdata,''',"$.education[',@j,'].fromdate")),
		json_unquote(json_extract(''',educationdata,''',"$.education[',@j,'].todate")))');
		-- select @insertedstring;
		prepare estmt from @insertedstring;
		execute estmt;
		deallocate prepare estmt;
		set @insertedstring = '';

		set @j = @j + 1;
		set  @isinsert=1;
		end while;
		 update ems_preonboard_candidate  pc set
		 pc.stepcompleted=(select json_unquote(json_extract(educationdata,"$.stepcompleted")))
		 where pc.candidateid=@cid;
		select 0 as statuscode;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_preonboard_candidate_experience` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_preonboard_candidate_experience`(in experiencedata varchar(8000))
	BEGIN
		 /* declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; */
			set @cid=(select json_unquote(json_extract(experiencedata, '$.candidateid')));
			set @experiencecount = 0;
			set @experiencecount = (select json_length(experiencedata, '$.experience'));
			set @isinsert=0;
			set @i = 0;
			set @insertrstring='';
			if exists(select * from ems_candidate_experience_details cex where cex.candidateid = @cid) then
			delete from ems_candidate_experience_details where candidateid = @cid;
			end if;
			while @i < @experiencecount do
			set @insertrstring = concat('insert into ems_candidate_experience_details(`candidateid`,`companyname`,`designation`,`skills`,`fromdate`,`todate`)
			values (',@cid,',json_unquote(json_extract(''',experiencedata,''',"$.experience[',@i,'].companyname")),
					json_unquote(json_extract(''',experiencedata,''',"$.experience[',@i,'].designation")),
			json_unquote(json_extract(''',experiencedata,''',"$.experience[',@i,'].skills")),
			json_unquote(json_extract(''',experiencedata,''',"$.experience[',@i,'].fromdate")),
			json_unquote(json_extract(''',experiencedata,''',"$.experience[',@i,'].todate")))');
			prepare stmt from @insertrstring;
			execute stmt;
			deallocate prepare stmt;
			set @insertrstring = '';
			set @i = @i + 1;
			end while;
			update ems_preonboard_candidate  pc set
			pc.stepcompleted=(select json_unquote(json_extract(experiencedata,"$.stepcompleted")))
			where pc.candidateid=@cid;
		select 0 as statuscode;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_preonboard_candidate_information` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_preonboard_candidate_information`(in candidatedata varchar(8000))
	BEGIN
		/*declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; */
			set @relationscount = 0;
			set @relationscount = (select json_length(candidatedata, '$.relations'));
		 --   select @relationscount;
			set @preid=(select json_unquote(json_extract(candidatedata,"$.preid")));
			set @candidateid=(select json_unquote(json_extract(candidatedata,"$.candidateid")));
			set @bloodgroup=(select json_unquote(json_extract(candidatedata,"$.bloodgroup")));
			if(@bloodgroup='null')then
			set @bloodgroup=null;
			end if;
			set @city=(select json_unquote(json_extract(candidatedata,"$.city")));
			if(@city='null')then
			set @city=null;
			end if;
			set @state=(select json_unquote(json_extract(candidatedata,"$.state")));
			if(@state='null')then
			set @state=null;
			end if;
			set @country=(select json_unquote(json_extract(candidatedata,"$.country")));
			if(@country='null')then
			set @country=null;
			end if;
			set @pcity=(select json_unquote(json_extract(candidatedata,"$.pcity")));
			if(@pcity='null')then
			set @pcity=null;
			end if;
			set @pstate=(select json_unquote(json_extract(candidatedata,"$.pstate")));
			if(@pstate='null')then
			set @pstate=null;
			end if;
			set @pcountry=(select json_unquote(json_extract(candidatedata,"$.pcountry")));
			if(@pcountry='null')then
			set @pcountry=null;
			end if; 
			if (ifnull(@preid,0)=0)  then
			-- and not exists (select * from ems_preonboard_candidate pc where pc.candidateid = json_unquote(json_extract(candidatedata,"$.candidateid"))) then
				  insert into ems_preonboard_candidate(`candidateid`,`firstname`,`middlename`,`lastname`,`personal_email`,`dateofbirth`
				,`hired_date`,`gender`,`maritalstatus`,`dateofjoin`,`noticeperiod`,`languages_spoken`,`bloodgroup`,`designation`,`contact_number`,
				`emergencycontact_number`,`emergencycontact_relation`,`emergencycontactname`,`address`,`city`,`state`,`pincode`,`country`,`paddress`,`pcity`,
			   `pstate`,`ppincode`,`pcountry`,`aadharnumber`,`passport`,`stepcompleted`,`created_on`,`created_by`) 
			values(
			json_unquote(json_extract(candidatedata,"$.candidateid")),
			json_unquote(json_extract(candidatedata,"$.firstname")),
			json_unquote(json_extract(candidatedata,"$.middlename")),
			json_unquote(json_extract(candidatedata,"$.lastname")),
			json_unquote(json_extract(candidatedata,"$.personal_email")),
			json_unquote(json_extract(candidatedata,"$.dateofbirth")),
			json_unquote(json_extract(candidatedata,"$.hired_date")),
			json_unquote(json_extract(candidatedata,"$.gender")),
			json_unquote(json_extract(candidatedata,"$.maritalstatus")),
			json_unquote(json_extract(candidatedata,"$.dateofjoin")),
			json_unquote(json_extract(candidatedata,"$.noticeperiod")),
			json_unquote(json_extract(candidatedata,"$.languages_spoken")),
			@bloodgroup,
			json_unquote(json_extract(candidatedata,"$.designation")),
			json_unquote(json_extract(candidatedata,"$.contact_number")),
			json_unquote(json_extract(candidatedata,"$.emergencycontact_number")),
			json_unquote(json_extract(candidatedata,"$.emergencycontact_relation")),
			json_unquote(json_extract(candidatedata,"$.emergencycontactname")),
			json_unquote(json_extract(candidatedata,"$.address")),
			@city,
			@state,
			json_unquote(json_extract(candidatedata,"$.pincode")),
			@country,
			json_unquote(json_extract(candidatedata,"$.paddress")),
			@pcity,
			@pstate,
			json_unquote(json_extract(candidatedata,"$.ppincode")),
			@pcountry,
			json_unquote(json_extract(candidatedata,"$.aadharnumber")),
			json_unquote(json_extract(candidatedata,"$.passport")),
			1,
			current_timestamp(),
			json_unquote(json_extract(candidatedata,"$.actionby"))
			);        
			set @i = 0;
			set @insertrstring = '';
				while @i < @relationscount do
				set @insertrstring = concat('insert into ems_candidate_relations(`candidateid`,`firstname`,`lastname`,`gender`,`contactnumber`,`dateofbirth`,`relationship`,`status`)
				values (',@candidateid,',json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].firstname")),
				json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].lastname")),
				json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].gender")),
				json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].contactnumber")),
				json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].dateofbirth")),
				json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].relationship")),
				json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].status")))');
				prepare stmt from @insertrstring;
				execute stmt;
				deallocate prepare stmt;
				set @insertrstring = '';
				set @i = @i + 1;
				end while;
				set @i = 0;
			 select 0 as statuscode;
		else 

		  update ems_preonboard_candidate  pc set
			`firstname` 	= (select json_unquote(json_extract(candidatedata,"$.firstname"))),
			`middlename` 	= (select json_unquote(json_extract(candidatedata,"$.middlename"))),
			`lastname` 		= (select json_unquote(json_extract(candidatedata,"$.lastname"))),
			`personal_email` = (select json_unquote(json_extract(candidatedata,"$.personal_email"))),
			`dateofbirth` 	= (select json_unquote(json_extract(candidatedata,"$.dateofbirth"))),
			`hired_date` 	= (select json_unquote(json_extract(candidatedata,"$.hired_date"))),
			`gender` 		= (select json_unquote(json_extract(candidatedata,"$.gender"))),
			`maritalstatus` = (select json_unquote(json_extract(candidatedata,"$.maritalstatus"))),
			`dateofjoin` 				= (select json_unquote(json_extract(candidatedata,"$.dateofjoin"))),
			`noticeperiod` 			= (select json_unquote(json_extract(candidatedata,"$.noticeperiod"))),
			`languages_spoken` 			= (select json_unquote(json_extract(candidatedata,"$.languages_spoken"))),
			`bloodgroup` 				= @bloodgroup, -- (select json_unquote(json_extract(candidatedata,"$.bloodgroup"))),
			`designation` 				= (select json_unquote(json_extract(candidatedata,"$.designation"))),
			`contact_number` 			= (select json_unquote(json_extract(candidatedata,"$.contact_number"))),
			`emergencycontact_number` 	= (select json_unquote(json_extract(candidatedata,"$.emergencycontact_number"))),
			`emergencycontact_relation` = (select json_unquote(json_extract(candidatedata,"$.emergencycontact_relation"))),
			`emergencycontactname` = (select json_unquote(json_extract(candidatedata,"$.emergencycontactname"))),
			`address` 		= (select json_unquote(json_extract(candidatedata,"$.address"))),
			`city` 			= @city, -- (select json_unquote(json_extract(candidatedata,"$.city"))),
			`state` 		= @state, -- (select json_unquote(json_extract(candidatedata,"$.state"))),
			`pincode` 		= (select json_unquote(json_extract(candidatedata,"$.pincode"))),
			`country` 		= @country, -- (select json_unquote(json_extract(candidatedata,"$.country"))),
			`paddress` 		= (select json_unquote(json_extract(candidatedata,"$.paddress"))),
			`pcity` 		= @pcity, -- (select json_unquote(json_extract(candidatedata,"$.pcity"))),
			`pstate` 		= @pstate, -- (select json_unquote(json_extract(candidatedata,"$.pstate"))),
			`ppincode` 		= (select json_unquote(json_extract(candidatedata,"$.ppincode"))),
			`pcountry` 		= @pcountry, -- (select json_unquote(json_extract(candidatedata,"$.pcountry"))),
			`aadharnumber` 	= (select json_unquote(json_extract(candidatedata,"$.aadharnumber"))),
			`passport` 		= (select json_unquote(json_extract(candidatedata,"$.passport"))),
			`updated_on`	= current_timestamp(),
			`updated_by`	= (select json_unquote(json_extract(candidatedata,"$.actionby")))
			where pc.id = @preid;
		   if  exists(select * from ems_candidate_relations cr where cr.candidateid = @candidateid) then
			delete from ems_candidate_relations  where candidateid = @candidateid;
			end if; 
			set @i = 0;
			set @insertrstring = '';
			while @i < @relationscount do
		set @insertrstring = concat('insert into ems_candidate_relations(`candidateid`,`firstname`,`lastname`,`gender`,`contactnumber`,`dateofbirth`,`relationship`,`status`)
		values (',@candidateid,',json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].firstname")),
		json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].lastname")),
		json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].gender")),
		json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].contactnumber")),
		json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].dateofbirth")),
		json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].relationship")),
		json_unquote(json_extract(''',candidatedata,''',"$.relations[',@i,'].status")))');
		prepare stmt from @insertrstring;
		execute stmt;
		deallocate prepare stmt;
		set @insertrstring = '';
		set @i = @i + 1;
		end while;
		set @i = 0;
			select 0 as statuscode;
		end if;
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_programs_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_programs_master`(
		pid int(11),
		program_type varchar(64),
		p_description varchar(255),
		p_status int(11), -- values: Active, Inactive
		in actionby int(11)
	)
	begin
		declare exit handler for sqlexception
		begin
			rollback;
			select -1 as successstate;
		end; 
		
		if pid is null and exists(select * from ems_programs_master where name=program_type) then
			select 1 as successstate;
		elseif pid is null and not exists(select * from ems_programs_master where name=program_type) then
			insert into ems_programs_master(name,description,status,created_on,created_by) values
			(program_type,p_description,p_status,current_timestamp(),actionby);
			select 0 as successstate;
		else
			set @statusFlag = (select status from ems_programs_master where id=pid);
			
			update ems_programs_master
			set name = program_type,
			description = p_description,
			status = p_status,
			updated_on = current_timestamp(),
			updated_by = actionby
			where id = pid;
			select 0 as successstate;
			
		end if;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_programs_status` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_programs_status`(
		pid int(11),
		p_status int(11), -- values: Active, Inactive
		in actionby int(11)
	)
	begin

		declare exit handler for sqlexception
		begin
			rollback;
			select -1 as successstate;
		end; 
		
		if pid is null then
			select 1 as successstate;
		else
			if p_status=2 and (select count(*) from ems_program_schedules where program_id=pid and schedule_date>=current_date())>0 then
				select 1 as successstate;
			else 
				update ems_programs_master
				set status = p_status,
				updated_on = current_timestamp(),
				updated_by = actionby
				where id = pid;
				select 0 as successstate;
			end if;
		end if;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_program_schedules` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_program_schedules`(
		scheduleid int(11),
		programid int(11),
		department_id int(11),
		s_description varchar(500),
		s_status varchar(50),
		reason varchar(500),
		conductedby int(11),
		scheduledate date,
		starttime time,
		endtime time,
		in actionby int(11)
	)
	begin

		declare exit handler for sqlexception
		begin
			rollback;
			select -1 as successstate;
		end; 
		
		if scheduleid is null then
			insert into ems_program_schedules(program_id,department,description,conducted_by,schedule_date,schedule_starttime,
			schedule_endtime,status,reason,created_on,created_by) values
			(programid,department_id,s_description,conductedby,scheduledate,starttime,endtime,s_status,reason,current_timestamp(),actionby);
		else
			update ems_program_schedules
			set program_id = programid,
			department = department_id,
			description = s_description,
			conducted_by = conductedby,
			schedule_date = scheduledate,
			schedule_starttime = starttime,
			schedule_endtime = endtime,
			status=s_status,
			reason=reason,
			updated_on = current_timestamp(),
			updated_by = actionby
			where id = scheduleid;
			
			if (s_status='Cancelled') then
				update ems_employee_program_schedule
				set status = 'Cancelled'
				where schedule_id = scheduleid;
			end if;
		end if;
		select 0 as successstate;
		
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_program_tasks` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_program_tasks`(
		taskid int(11),
		programid int(11),
		task_name varchar(64),
		in actionby int(11)
	)
	begin

		declare exit handler for sqlexception
		begin
			rollback;
			select -1 as successstate;
		end; 
		
		if taskid is null then
			insert into ems_program_tasks(program_id,name,created_on,created_by) values
			(programid,task_name,current_timestamp(),actionby);
		else
			update ems_program_tasks
			set program_id = programid,
			name = task_name,
			updated_on = current_timestamp(),
			updated_by = actionby
			where id = taskid;
		end if;
		select 0 as successstate;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_reason_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_reason_master`(
		in reason_id int(11),
		in reason varchar(100),
		in reason_status int(11), -- values: 1(Active) , 2(Inactive)
		in actionby int(11)
	)
	begin
		declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; 
		
		if (ifnull(reason_id,0)=0) then
			insert into ems_reason_master(`reason`,`status`,`created_on`,`created_by`) values
			(reason,reason_status,current_timestamp(),actionby);
				select 0 as statuscode;
		else
			update ems_reason_master r
			set r.reason=reason,
			r.status = reason_status,
			r.updated_on=current_timestamp(),
			r.updated_by=actionby
			where r.id = reason_id;
			select 0 as statuscode;
		end if;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_role_access` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `set_role_access`(
	  in `rolejson` nvarchar(2000)
	  )
	BEGIN
		declare role_id integer;
		declare functionalitycount integer;
		DECLARE temp_cursor CURSOR FOR select roleid,count(screenfunctionalityid) from rolescreenaccess group by roleid;
		-- below line is a fix for an issue. Not used in the procedure.
		set @screencount = (select json_length(rolejson, '$.screens'));
		
		CREATE TEMPORARY TABLE temp(
		sfid int(11)
		);
		SET @sstring = '';
		SET @pstring = '';
		SET @screenscount = 0;
		SET @screenscount = (SELECT JSON_LENGTH(`rolejson`, '$.screens'));
		SET @roleId = 0;
		SET @roleId = (SELECT JSON_UNQUOTE(JSON_EXTRACT(`rolejson`,'$.roleId')));
		SET @pcount = 0;
		SET @screenid = 0;
		SET @permission = 0;
		SET @i = 0;
		WHILE @i < @screencount DO
			SET @j = 0;
			SET @pstring = concat('$.screens[',@i,'].permissions');
			SET @pcount = (SELECT JSON_LENGTH(`rolejson`, @pstring));
			WHILE @j < @pcount DO
				SET @sstring = concat('$.screens[',@i,'].permissions[',@j,']');
				SET @screenid = (SELECT JSON_UNQUOTE(JSON_EXTRACT(`rolejson`,concat('$.screens[',@i,'].screenId'))));
				SET @permission = (SELECT JSON_UNQUOTE(JSON_EXTRACT(`rolejson`,concat('$.screens[',@i,'].permissions[',@j,']'))));
				INSERT INTO temp(sfid) 
				SELECT id from screenfunctionalitiesmaster where screenfunctionalitiesmaster.screenid = @screenid and 
				screenfunctionalitiesmaster.functionalityid = @permission;
			
				SET @j = @j + 1;
			END WHILE;
			SET @i = @i + 1;
		END WHILE;
		SET @fcount = 0;
		SET @fcount = (select count(*) from temp);
		set @output = NULL;
		set @output = 1;

		open temp_cursor;
		set @j = 0;
		set @k = 0;
		set @k = found_rows();
		count_test: while @j < @k do
		set role_id = 0; 
		set functionalitycount = 0;
		fetch temp_cursor into role_id,functionalitycount;
		-- select role_id,functionalitycount,@output,@fcount;
		if @fcount = functionalitycount then
			if not exists(select sfid from temp where sfid not in
				(select screenfunctionalityid from rolescreenaccess where rolescreenaccess.roleid = role_id)) then
				set @role = '';
				if (@roleId not in (select distinct roleid from rolescreenaccess)) then
					set @role = concat('These permissions cannot be given. ','"', (select name from rolesmaster where id = role_id),'"',' role has the same permissions.');
					set @output = 0;
					leave count_test;
				elseif (@roleId in (select distinct roleid from rolescreenaccess)) then
					set @role = concat('This role cannot be updated. ','"', (select name from rolesmaster where id = role_id),'"',' role has the same permissions.');
					set @output = 0;
					leave count_test;
				end if;
			end if;
		end if;    
		set @j = @j + 1;
		end while;
		close temp_cursor;
		
		if (@output = 1) then
			if (@roleId not in (select distinct roleid from rolescreenaccess)) then
				INSERT INTO rolescreenaccess(roleid,screenfunctionalityid)
				SELECT @roleId, sfid FROM temp;
				set @role = '';
				set @role = 'Screen access to new role created successfully.';	
			elseif (@roleId in (select distinct roleid from rolescreenaccess)) then
				delete from rolescreenaccess where roleid = @roleId;
				INSERT INTO rolescreenaccess(roleid,screenfunctionalityid)
				SELECT @roleId, sfid FROM temp;
				set @role = '';
				set @role = 'Screen access of role updated successfully.';	
			end if;
		end if;
		
		select @output, @role;
		
		set @role = '';
		drop temporary table temp;
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_shift_master` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_shift_master`(
		`shift_name` VARCHAR(255),
		`shiftdescription` VARCHAR(128), 
		`from_time` time,
		`to_time` time,
		`total_hours` time,
		`grace_intime` time,
		`grace_outtime` time,
		`max_lates` int(11),
		`leave_deduction_count` float,
		`leavetype_for_deduction` varchar(64),
		`overtimeduration` time,
		`status` int,
		`created_by` int
	)
	BEGIN 
	   declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; 
		if not exists (select * from shiftsmaster where shiftname=`shift_name` or (fromtime=`from_time` and totime=`to_time`)) then
			insert into shiftsmaster(shiftname,shift_description,fromtime,totime,status,totalhours,graceperiod_intime,graceperiod_outtime,max_lates_count_per_month,leave_deduction_amount_post_lates_limit,leavetype_for_deduction_post_lates_limit,min_duration_for_overtime,created_on,created_by) values 
			(`shift_name`,`shiftdescription`,`from_time`,`to_time`,`status`,`total_hours`,`grace_intime`,`grace_outtime`,`max_lates`,`leave_deduction_count`,`leavetype_for_deduction`,`overtimeduration`,current_timestamp(),`created_by`);
		   select 0 as statuscode;
		   select last_insert_id() as shiftid;
		else 
			select null as shiftid;
		end if;
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_shift_master_V2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_shift_master_V2`(
		`shift_name` VARCHAR(255),
		`shiftdescription` VARCHAR(128), 
		`from_time` time,
		`to_time` time,
		`total_hours` time,
		`grace_intime` time,
		`grace_outtime` time,
		`max_lates` int(11),
		`leave_deduction_count` float,
		`leavetype_for_deduction` varchar(64),
		`overtimeduration` time
	)
	BEGIN
		/* DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
		END; */
		if not exists (select * from shiftsmaster where shiftname=`shift_name` or (fromtime=`from_time` and totime=`to_time`)) then
			insert into shiftsmaster(shiftname,shift_description,fromtime,totime,status,totalhours,graceperiod_intime,graceperiod_outtime,max_lates_count_per_month,leave_deduction_amount_post_lates_limit,leavetype_for_deduction_post_lates_limit,min_duration_for_overtime) values 
			(`shift_name`,`shiftdescription`,`from_time`,`to_time`,'Active',`total_hours`,`grace_intime`,`grace_outtime`,`max_lates`,`leave_deduction_count`,`leavetype_for_deduction`,`overtimeduration`);
			select last_insert_id() as shiftid;
		else 
			select null as shiftid;
		end if;
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `set_termination_category` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `set_termination_category`(
		in termination_id int(11),
		in termination_category varchar(100),
		in termination_status int(11), -- values: 1(Active) , 2(Inactive)
		in actionby int(11)
	  )
	begin
		declare exit handler for sqlexception
		begin
			rollback;
			select -1 as statuscode;
		end; 
		
		if (ifnull(termination_id,0)=0) then
			insert into ems_termination_category_master(`category`,`status`,`created_on`,`created_by`) values
			(termination_category,termination_status,current_timestamp(),actionby);
			select 0 as statuscode;
		else
			update ems_termination_category_master tc
			set tc.category=termination_category,
			tc.status = termination_status,
			tc.updated_on=current_timestamp(),
			tc.updated_by=actionby
			where tc.id = termination_id;
			select 0 as statuscode;
		end if;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `testprocedure` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `testprocedure`(
		in tablename varchar(255), 
		in wherecolumn varchar(255), 
		in wherecolumnvalue varchar(255), 
		in tabledata varchar(8000)
	)
	begin
		-- declare @i int;
		set @sqlquery = '';
		set @sqlquery = concat(@sqlquery,'update ',tablename);
		set @sqlquery = concat(@sqlquery,' set ');
		set @i = 0;
		set @len = (select json_length(tabledata) - 1); 

	   while @i <= @len do 
			set @k = concat('select json_unquote(json_extract(json_keys(''',tabledata,'''),''$[',@i,']'')) into @col ');
			prepare stmt from @k;
			execute stmt;
			deallocate prepare stmt;
			
			set @k =concat('select json_unquote(json_extract(''',tabledata,''',''$.',@col,''')) into @val '); 
			prepare stmt from @k;
			execute stmt;
			deallocate prepare stmt;

			set @sqlquery = concat(@sqlquery,@col); 
			set @sqlquery = concat(@sqlquery,' = ');
			set @sqlquery = concat(@sqlquery,'''',@val,''''); 
			/* set @datatype = (select data_type from information_schema.columns where table_name=tablename and ordinal_position=@i);
			-- add single quotes if datatype is varchar or datetime
			if (@datatype='varchar' or @datatype='datetime') then
				set @sqlquery = concat(@sqlquery,'''');
			end if;
			set @sqlquery = concat(@sqlquery,json_unquote(json_extract(tabledata,concat('$.',(select column_name from information_schema.columns where table_name=tablename and ordinal_position=@i)))));
			 if (@datatype='varchar' or @datatype='datetime') then
				set @sqlquery = concat(@sqlquery,'''');
			end if;   */
			if @i<@len then
				set @sqlquery = concat(@sqlquery,',');
			end if;
			set @i = @i + 1;
		end while;   
		
	   set @sqlquery = concat(@sqlquery,' where ',wherecolumn,' = ',wherecolumnvalue);
	   -- select @sqlquery;   
	   prepare stmt from @sqlquery;
	   execute stmt;
	   deallocate prepare stmt;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `toggle_leavetype` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `toggle_leavetype`(
	in id int(11),
	in leavetype_status varchar(8)
	)
	BEGIN
	drop temporary table if exists ttemp;
	CREATE TEMPORARY TABLE ttemp(
		id int(11),
		status varchar(12)
		);
	INSERT INTO ttemp(id,status)
		select lm_rulevalues.id,lm_rulevalues.status from lm_rulevalues where lm_rulevalues.id in
		(SELECT MAX(lm_rulevalues.id) from lm_rulevalues where lm_rulevalues.leavetypeid = `id` group by lm_rulevalues.ruleid);
	IF(leavetype_status = 'Inactive') then
		update lm_leavesmaster set lm_leavesmaster.status = 'Inactive' where lm_leavesmaster.id = `id`;
		update lm_rulevalues set  lm_rulevalues.effectivetodate = current_timestamp(), lm_rulevalues.status = 'Inactive'
		where lm_rulevalues.id in (select ttemp.id from ttemp);
	ELSEIF(leavetype_status = 'Active') then
		UPDATE lm_leavesmaster SET lm_leavesmaster.status = 'Active' WHERE lm_leavesmaster.id = `id`;
		if exists(select * from lm_leavesmaster where lm_leavesmaster.id = `id` and lm_leavesmaster.ispredefined = 1) then
			INSERT INTO lm_rulevalues(ruleid,leavetypeid,value,effectivefromdate,status)
			select v.ruleid,v.leavetypeid,v.value,current_timestamp(),'Active' from lm_rulevalues v where v.leavetypeid = id
			and v.id in (select ttemp.id from ttemp);
		elseif not exists(select * from lm_leavesmaster where lm_leavesmaster.id = `id` and lm_leavesmaster.ispredefined = 1) then
			INSERT INTO lm_rulevalues(ruleid,leavetypeid,value,effectivefromdate,status)
			select v.ruleid,v.leavetypeid,v.value,current_timestamp(),'Inactive' from lm_rulevalues v where v.leavetypeid = id
			and v.id in (select ttemp.id from ttemp);
		end if;
	END IF;
	drop temporary table ttemp;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `updatemastertable` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `updatemastertable`(
		in tablename varchar(255), 
		in wherecolumn varchar(255), 
		in wherecolumnvalue varchar(255), 
		in tabledata varchar(8000)
	)
	begin
		-- declare @i int;
		set @sqlquery = '';
		set @sqlquery = concat(@sqlquery,'update ',tablename);
		set @sqlquery = concat(@sqlquery,' set ');
		set @i = 0;
		set @len = (select json_length(tabledata) - 1); 

	   while @i <= @len do 
			set @k = concat('select json_unquote(json_extract(json_keys(''',tabledata,'''),''$[',@i,']'')) into @col ');
			prepare stmt from @k;
			execute stmt;
			deallocate prepare stmt;
			
			set @k =concat('select trim(json_unquote(json_extract(''',tabledata,''',''$.',@col,'''))) into @val '); 
			prepare stmt from @k;
			execute stmt;
			deallocate prepare stmt;

			set @sqlquery = concat(@sqlquery,@col); 
			set @sqlquery = concat(@sqlquery,' = ');
			set @sqlquery = concat(@sqlquery,'''',@val,''''); 
			/* set @datatype = (select data_type from information_schema.columns where table_name=tablename and ordinal_position=@i);
			-- add single quotes if datatype is varchar or datetime
			if (@datatype='varchar' or @datatype='datetime') then
				set @sqlquery = concat(@sqlquery,'''');
			end if;
			set @sqlquery = concat(@sqlquery,json_unquote(json_extract(tabledata,concat('$.',(select column_name from information_schema.columns where table_name=tablename and ordinal_position=@i)))));
			 if (@datatype='varchar' or @datatype='datetime') then
				set @sqlquery = concat(@sqlquery,'''');
			end if;   */
			if @i<@len then
				set @sqlquery = concat(@sqlquery,',');
			end if;
			set @i = @i + 1;
		end while;   
		
	   set @sqlquery = concat(@sqlquery,' where ',wherecolumn,' = ',wherecolumnvalue);
	   -- select @sqlquery;   
	   prepare stmt from @sqlquery;
	   execute stmt;
	   deallocate prepare stmt;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `updatestatus` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `updatestatus`(
		in tablename varchar(255), 
		in id int(11),
		in statusvalue int(11)
	)
	begin
		-- declare @i int;
		set @sqlquery = '';
		set @sqlquery = concat(@sqlquery,'update ',tablename);
		set @sqlquery = concat(@sqlquery,' set status=''',statusvalue,'''');
		set @sqlquery = concat(@sqlquery,' where id=',id);
		-- select @sqlquery;
	   prepare stmt from @sqlquery;
	   execute stmt;
	   deallocate prepare stmt;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `updatestatus_V2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `updatestatus_V2`(
		in tablename varchar(255), 
		in id int(11),
		in statusvalue char(8)
	)
	begin
		-- declare @i int;
		set @sqlquery = '';
		set @sqlquery = concat(@sqlquery,'update ',tablename);
		set @sqlquery = concat(@sqlquery,' set status=''',statusvalue,'''');
		set @sqlquery = concat(@sqlquery,' where id=',id);
		-- select @sqlquery;
	   prepare stmt from @sqlquery;
	   execute stmt;
	   deallocate prepare stmt;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `update_employee_compoff_validity_status_cron` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `update_employee_compoff_validity_status_cron`(
		comp_off_date date
	)
	begin
	declare vid int(11);
	declare vdate date;
	declare emp_cursor cursor for select empid,compoff_date from compoff;
	drop temporary table if exists compoff; 
	create temporary table compoff(
		empid int(11),
		compoff_date date
	);

	drop temporary table if exists payroll_table;
	create temporary table payroll_table (
	emp_id int(11),
	comp_date date
	);

	set @tdays = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
			   lm_rulemaster.rulename = 'COMPOFF_THRESHOLD_DAYS_TO_LAPSE_OR_CONVERT_LEAVES_TO_PERKS') order by lm_rulevalues.id desc limit 1); 
	if (comp_off_date is null) then
		set @rdate = (select curdate());
	else 
		set @rdate = comp_off_date;
	end if;
	set @rdate = date_sub(@rdate, interval @tdays day);

	insert into compoff(empid,compoff_date) 
	select lm_register_comp_off.empid,lm_register_comp_off.comp_off_date from lm_register_comp_off
	where lm_register_comp_off.comp_off_date = cast(@rdate as date);

	IF (@tdays IS NOT NULL) THEN
		-- select @rdate;
		update lm_register_comp_off 
		set lm_register_comp_off.status = 'Expired',
		lm_register_comp_off.updateddate = current_timestamp()
		where lm_register_comp_off.comp_off_date = cast(@rdate as date)
		and lm_register_comp_off.status = 'Approved'; 
		set @flag = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
				lm_rulemaster.rulename = 'LEAVES_LAPSED_CONVERSION_TO_PERKS_APPLICABLE') order by lm_rulevalues.id desc limit 1); 
		if (@flag is not null and @flag <> 0) then
		if exists(select * from modulesmaster where modulename = 'Payroll' and modulesmaster.effectivestartdate is not null) then
		
		set @pid = (select payroll_perks_master.id from payroll_perks_master where payroll_perks_master.category = 'CompOff');
		
		insert into payroll_table select empid,event_date from payroll_employee_perk_details
		where payroll_employee_perk_details.event_date = cast(@rdate as date);
		
		open emp_cursor;
			set @empid_count = 0;
			set @empid_count =found_rows();
			set @e = 0;
			while @e < @empid_count do
			fetch emp_cursor into vid,vdate;
			if not exists(select payroll_table.emp_id from payroll_table where payroll_table.emp_id = vid and payroll_table.comp_date = vdate) then
			insert into payroll_employee_perk_details(empid,event_date,perk_id,units_count,createdon) values
			(vid,vdate,@pid,1,current_date());
			end if;
			set @e = @e + 1;
			end while;
		close emp_cursor;
		end if;
		end if;           
	END IF;
	drop temporary table compoff;
	drop temporary table payroll_table;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `update_employee_leave_summary_cron` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `update_employee_leave_summary_cron`(
	in input_date date
	)
	begin
	DECLARE vid int(11);
	DECLARE vempid int(11);
	DECLARE fdate date;
	DECLARE tdate date;
	declare fdatehalf int(1);
	declare tdatehalf int(1);
	DECLARE temp_cursor cursor for select id from lm_leavesmaster where lm_leavesmaster.status = 'Active';
	DECLARE empid_cursor cursor for select employee_table.id from employee_table;   
	DECLARE leave_cursor cursor for select fromdate,todate,fromhalfdayleave,tohalfdayleave from employee_leaves
									where employee_leaves.empid = vempid and employee_leaves.leavetype = vid;  
	set @summary_year = (select year(curdate()));           

	set @start_month = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
					   select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
					   lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));                     

	CREATE TEMPORARY TABLE employee_table(
		id int(11)
	);
	INSERT INTO employee_table
	select employee.id from employee where employee.status = 1;

	CREATE temporary TABLE els(
	  `id` int(11),
	  `empid` int(11) NOT NULL,
	  `leavetype_id` int(11) NOT NULL,
	  `year` int(4) DEFAULT NULL,
	  `january` float DEFAULT NULL,
	  `february` float DEFAULT NULL,
	  `march` float DEFAULT NULL,
	  `april` float DEFAULT NULL,
	  `may` float DEFAULT NULL,
	  `june` float DEFAULT NULL,
	  `july` float DEFAULT NULL,
	  `august` float DEFAULT NULL,
	  `september` float DEFAULT NULL,
	  `october` float DEFAULT NULL,
	  `november` float DEFAULT NULL,
	  `december` float DEFAULT NULL,
	  `total` float DEFAULT NULL
	  );
	  
	CREATE TEMPORARY TABLE employee_leave_summary_table(
		empid int(11),
		leavetype_id int(11),
		year int(4) 
	);

	INSERT INTO employee_leave_summary_table
	select empid,leavetype_id,year from employee_leave_summary where employee_leave_summary.year = @summary_year;
	if (@start_month <> 1) then
	INSERT INTO employee_leave_summary_table
	select empid,leavetype_id,year from employee_leave_summary where employee_leave_summary.year = @summary_year + 1;
	end if;
	-- select count(*) from employee_leave_summary_table;
	create index idx_elst on employee_leave_summary_table(empid,leavetype_id,year);

	CREATE temporary TABLE `employee_leaves` (
	  `empid` int(11) NOT NULL,
	  `leavetype` int(11) NOT NULL,
	  `fromdate` datetime DEFAULT NULL,
	  `todate` datetime DEFAULT NULL,
	  `fromhalfdayleave` varchar(32) DEFAULT NULL,
	  `tohalfdayleave` varchar(32) DEFAULT NULL
	  );
	insert into employee_leaves
	select empid, leavetype,fromdate,todate,fromhalfdayleave,tohalfdayleave from lm_employeeleaves 
	where (lm_employeeleaves.leavestatus = 'Approved' and date(lm_employeeleaves.approvedon) = (case when input_date is null then (select subdate(current_date, 1)) else input_date end)) or
		  (lm_employeeleaves.leavestatus = 'Cancelled' and date(lm_employeeleaves.updatedon) = (case when input_date is null then (select subdate(current_date, 1)) else input_date end));

	OPEN temp_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		set vid = 0;
		fetch temp_cursor into vid;
		OPEN empid_cursor;
			set @empid_count = 0;
			set @empid_count =found_rows();
			set @e = 0;
			while @e < @empid_count do
			fetch empid_cursor into vempid;   
				if not exists(select * from employee_leave_summary_table where employee_leave_summary_table.empid = vempid 
							and employee_leave_summary_table.leavetype_id = vid and employee_leave_summary_table.year = @summary_year) then
					insert into employee_leave_summary(empid,leavetype_id,year,january,february,march,april,may,june,july,august,september,october,november,december,total) values 
					(vempid,vid,@summary_year,0,0,0,0,0,0,0,0,0,0,0,0,0);
				end if; 
				if (@start_month <> 1) and
				not exists(select * from employee_leave_summary_table where employee_leave_summary_table.empid = vempid 
							and employee_leave_summary_table.leavetype_id = vid and employee_leave_summary_table.year = (@summary_year + 1)) then
					insert into employee_leave_summary(empid,leavetype_id,year,january,february,march,april,may,june,july,august,september,october,november,december,total) values 
					(vempid,vid,(@summary_year + 1),0,0,0,0,0,0,0,0,0,0,0,0,0);
				end if; 
				open leave_cursor;
				set @leave_count = 0;
				set @leave_count = found_rows();
				set @v = 0;
				while @v < @leave_count do
				fetch leave_cursor into fdate,tdate,fdatehalf,tdatehalf;
				set @date = null;
				set @date = fdate;
					while datediff(tdate,@date) >= 0 do
					
					set @month = (select monthname(@date));
					set @year_value = (select year(@date));
					set @sqltext = '';
					set @sqltext = concat('update employee_leave_summary set employee_leave_summary.',@month,' = ',
					'employee_leave_summary.',@month,' + 1 - ',(0.5 * (case when @date = fdate then fdatehalf
																			when @date = tdate then tdatehalf
																			else 0 end)),' where empid = ',vempid,' and leavetype_id = ',
					vid,' and year = ',@year_value);
					prepare stmt from @sqltext;
					execute stmt;
					deallocate prepare stmt;
					set @date = date_add(@date, interval 1 day);
					end while;
				set @v = @v + 1;
				end while;
				close leave_cursor;
				set @e = @e + 1;
			end while;
		CLOSE empid_cursor;      
		set @j = @j + 1;
		end while;
	CLOSE temp_cursor;
	if (@start_month = 1) then
		UPDATE employee_leave_summary 
		set employee_leave_summary.total = 	employee_leave_summary.january + employee_leave_summary.february +
											employee_leave_summary.march + employee_leave_summary.april +
											employee_leave_summary.may + employee_leave_summary.june +
											employee_leave_summary.july + employee_leave_summary.august +
											employee_leave_summary.september + employee_leave_summary.october +
											employee_leave_summary.november + employee_leave_summary.december
		where employee_leave_summary.year = @summary_year;
	elseif (@start_month <> 1) then

	insert into els select * from employee_leave_summary where employee_leave_summary.year = @summary_year + 1;  

		set @totaltext = '';
		set @totaltext = 'update employee_leave_summary set employee_leave_summary.total = ';
		set @tt = 0;
		set @tt = @start_month;    
		while (@tt <= 12) do
			set @totaltext = concat(@totaltext,(select MONTHNAME(concat('2020-',@tt,'-01'))));
			set @totaltext = case when (@tt <> 12) then concat(@totaltext,' + ')
									else concat(@totaltext,'')
									end;
			set @tt = @tt + 1;
		end while;
		set @totaltext = concat(@totaltext, ' where employee_leave_summary.year = ',@summary_year);
		-- select @totaltext;
		prepare stmt from @totaltext;
		execute stmt;
		deallocate prepare stmt; 
		
		set @total2text = '';
		set @total2text = 'update employee_leave_summary e1 set e1.total = e1.total + (select ';
		set @t2t = 1;
		while (@t2t < @start_month) do
			set @total2text = concat(@total2text,(select MONTHNAME(concat('2020-',@t2t,'-01'))));
			set @total2text = case when (@t2t < (@start_month - 1)) then concat(@total2text,' + ')
									else concat(@total2text,'')
									end;
			set @t2t = @t2t + 1;
		end while;
		set @total2text = concat(@total2text, ' from els e2 where e2.empid = e1.empid
		and e2.leavetype_id = e1.leavetype_id and e2.year = ',@summary_year,' + 1) where e1.year = ',@summary_year); 
		-- select @total2text;
		prepare stmt from @total2text;
		execute stmt;
		deallocate prepare stmt; 
		
	end if;                                    
	drop temporary table employee_table; 
	drop temporary table employee_leave_summary_table;
	drop temporary table employee_leaves;
	drop temporary table els;
	 
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `update_employee_working_days_cron` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `update_employee_working_days_cron`(
	in `date_value` date
	)
	BEGIN
	DECLARE vempid int(11);
	declare vw1 int(1);
	declare vw2 int(1);
	declare vw3 int(1);
	DECLARE vfromdate date; 
	DECLARE vtodate varchar(10);
	DECLARE empid_cursor cursor for select employee_table.id,weekoffday1,weekoffday2,weekoffday3,effective_fromdate,effective_todate 
			from employee_table;   
	DECLARE emp_cursor cursor for select temp_employee.id from temp_employee;       
	set @start_month = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
						select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
						lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));
					   
	if (`date_value` is null) then 
		set @month_name = (select monthname(curdate()));
		set @month_number = (select month(curdate()));
		set @summary_year = (select year(curdate()));  
		set @leave_cycle_year = (select fn_get_leave_cycle_year());
		set @var_date = curdate();
	elseif (`date_value` is not null) then
		set @month_name = (select monthname(`date_value`));
		set @month_number = (select month(`date_value`));
		set @summary_year = (select year(`date_value`));  
		if (@month_number >= @start_month) then
			set @leave_cycle_year = (select year(`date_value`));
		elseif (@month_number < @start_month) then
			set @leave_cycle_year = (select year(`date_value`)) - 1;
		end if;
		set @var_date = `date_value`;
	end if;

	drop temporary table if exists month_table;
	create temporary table month_table(
	month_day date
	);

set @start_date = '';
set @start_date = (SELECT DATE_ADD(@var_date, interval - DAY((@var_date)) + 1 DAY));
set @jstart_date = @start_date;
set @end_date = '';
set @end_date = (SELECT DATE(LAST_DAY(@var_date)));

	WHILE (@start_date <= @end_date) DO
		INSERT INTO month_table(month_day) values (@start_date);
		SET @start_date = (select date_add(@start_date,interval 1 day));
	END WHILE;

	drop temporary table if exists temp_companyworklocationsmaster;
	create temporary table temp_companyworklocationsmaster (
	  `id` int(11) NOT NULL,
	  `branchcode` varchar(64) DEFAULT NULL,
	  `address1` varchar(255) DEFAULT NULL,
	  `address2` varchar(255) DEFAULT NULL,
	  `location` varchar(255) DEFAULT NULL,
	  `city` int(11) NOT NULL,
	  `state` int(11) NOT NULL,
	  `pincode` varchar(128) NOT NULL,
	  `country` int(11) NOT NULL,
	  `createddate` datetime NOT NULL,
	  `status` varchar(32) DEFAULT NULL               
	);  

	insert into temp_companyworklocationsmaster 
	select id,branchcode,address1,address2,location,city,state,pincode,country,createddate,status from companyworklocationsmaster;

	drop temporary table if exists temp_employee_worklocations;
	create temporary table temp_employee_worklocations(
	  `id` int(11) NOT NULL,
	  `empid` int(11) NOT NULL,
	  `locationid` int(11) NOT NULL,
	  `effectivefromdate` date NOT NULL,
	  `effectivetodate` date DEFAULT NULL
	);

	insert into temp_employee_worklocations
	select id,empid,locationid,effectivefromdate,effectivetodate from employee_worklocations;

	drop temporary table if exists temp_holidaysmaster;
	create temporary table temp_holidaysmaster(
	  `id` int(11) NOT NULL,
	  `year` int(4) NOT NULL,
	  `description` varchar(255) NOT NULL,
	  `date` date DEFAULT NULL,
	  `day` varchar(15) NOT NULL,
	  `location` int(11) DEFAULT NULL,
	  `leave_cycle_year` int(4) NOT NULL
	);

	insert into temp_holidaysmaster select id,year,description,date,day,location,leave_cycle_year from holidaysmaster;               

	DROP TEMPORARY TABLE IF EXISTS employee_table;
	CREATE TEMPORARY TABLE employee_table(
		id int(11),
		weekoffday1 int(1),
		weekoffday2 int(1),
		weekoffday3 int(1),
		effective_fromdate date,
		effective_todate varchar(10) 
	);
	INSERT INTO employee_table
		select employee.id, employee_weekoffs.weekoffday1, employee_weekoffs.weekoffday2, employee_weekoffs.weekoffday3,
		employee_weekoffs.effectivefromdate,ifnull(employee_weekoffs.effectivetodate,'') 
		from employee,employee_weekoffs where employee.status = 1
	and employee.id = employee_weekoffs.empid
	and cast(employee.dateofjoin as date) <= @jstart_date;

	drop temporary table if exists temp_employee;
	create temporary table temp_employee(
		id int(11)
	);

INSERT INTO temp_employee(id) select employee.id from employee where employee.status = 1
and cast(employee.dateofjoin as date) <= @jstart_date;

	DROP TEMPORARY TABLE IF EXISTS employee_working_days_table;
	CREATE TEMPORARY TABLE employee_working_days_table(
		empid int(11),
		year int(4) 
	);

INSERT INTO employee_working_days_table
select empid,year from employee_working_days where employee_working_days.year = @summary_year
and empid in (select temp_employee.id from temp_employee where temp_employee.id is not null);

	OPEN emp_cursor;
			set @empid_count = 0;
			set @empid_count =found_rows();
			set @e = 0;
			while @e < @empid_count do
			fetch emp_cursor into vempid;   
			if not exists(select * from employee_working_days_table where employee_working_days_table.empid = vempid 
						  and employee_working_days_table.year = @summary_year) then
					insert into employee_working_days(empid,year,january,february,march,april,may,june,july,august,september,october,november,december,total) values 
					(vempid,@summary_year,0,0,0,0,0,0,0,0,0,0,0,0,0);
			end if; 
			set @e = @e + 1;
			end while;
	CLOSE emp_cursor;

	set @v1 = 0;
	set @v1 = (select day(last_day(@var_date)));
    set @tdaystext = '';
	set @tdaystext = concat('UPDATE employee_working_days
	SET employee_working_days.',@month_name,' = ',@v1,' where employee_working_days.year = ',@summary_year,
    ' and empid in (select temp_employee.id from temp_employee where temp_employee.id is not null)');
	-- select @tdaystext;
    prepare stmt from @tdaystext;
	execute stmt;
	deallocate prepare stmt; 

	OPEN empid_cursor;
			set @empid_count = 0;
			set @empid_count =found_rows();
			set @e = 0;
			while @e < @empid_count do
				fetch empid_cursor into vempid,vw1,vw2,vw3,vfromdate,vtodate; 
				set @count = '';
				set @counttext = '';
				set @counttext = concat('set @count = (select count(m.date) FROM temp_holidaysmaster m, temp_companyworklocationsmaster v  
										WHERE m.location = v.city 
										and v.id =(select s.locationid from temp_employee_worklocations s where s.empid = ',vempid,' order by s.id desc limit 1)
										and m.leave_cycle_year = ',@leave_cycle_year,
										' and month(m.date) = ',@month_number,
										' and dayofweek(m.date) not in (',ifnull(vw1,0),',',ifnull(vw2,0),',',ifnull(vw3,0),')', 
										' and (case when ''',vtodate,''' <> '''' then (m.date >= ''',vfromdate,''' and m.date <= cast(''',vtodate,''' as date))',
										' when ''',vtodate,''' = '''' then ( m.date >= ''',vfromdate,''' ) end ))');
			
				-- select vfromdate,vtodate,@counttext;
				prepare stmt1 from @counttext;
				execute stmt1;
				deallocate prepare stmt1;                        
				set @sqltext = '';
				set @sqltext = concat('UPDATE employee_working_days
				SET employee_working_days.',@month_name,' = ( employee_working_days.',@month_name,' - ',(case when @count <> 0 then @count else 0 end),' - ','(select count(month_day) from month_table where
					dayofweek(month_day) in (',ifnull(vw1,0),',',ifnull(vw2,0),',',ifnull(vw3,0),')', 
										' and (case when ''',vtodate,''' <> '''' then (month_day >= ''',vfromdate,''' and month_day <= cast(''',vtodate,''' as date))',
										' when ''',vtodate,''' = '''' then ( month_day >= ''',vfromdate,''' ) end )))
				where employee_working_days.empid = ',vempid,' and employee_working_days.year = ',@summary_year);
				-- select @sqltext;
				prepare stmt from @sqltext;
				execute stmt;
				deallocate prepare stmt; 
				set @e = @e + 1;
			end while;
	CLOSE empid_cursor;

-- updating total column
UPDATE employee_working_days 
SET employee_working_days.total = 
    (`employee_working_days`.`january`) + (`employee_working_days`.`february`) +
    (`employee_working_days`.`march`) + (`employee_working_days`.`april`) +
    (`employee_working_days`.`may`) + (`employee_working_days`.`june`) +
    (`employee_working_days`.`july`) + (`employee_working_days`.`august`) +
    (`employee_working_days`.`september`) + (`employee_working_days`.`october`) +
    (`employee_working_days`.`november`) + (`employee_working_days`.`december`)
where empid in (select temp_employee.id from temp_employee where temp_employee.id is not null);

	drop temporary table temp_companyworklocationsmaster;
	drop temporary table temp_employee_worklocations;
	drop temporary table employee_table;
	drop temporary table employee_working_days_table;
	drop temporary table temp_holidaysmaster;
	drop temporary table month_table;
	drop temporary table temp_employee;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `update_employee_working_days_cronv2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `update_employee_working_days_cronv2`(
	)
	BEGIN
	DECLARE vempid int(11);
	declare vw1 int(1);
	declare vw2 int(1);
	declare vw3 int(1);
	declare vfromdate date;
	declare vtodate date;
	DECLARE empid_cursor cursor for select employee_table.id,weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
		from employee_table;   
	set @month_name = (select monthname(curdate()));
	set @month_number = (select month(curdate()));
	set @summary_year = (select year(curdate()));  

	create temporary table month_table(
	month_day date
	);

	set @start_date = '';
	set @start_date = (SELECT DATE_ADD(curdate(), interval - DAY((curdate())) + 1 DAY));
	set @end_date = '';
	set @end_date = (SELECT DATE(LAST_DAY(curdate())));
	set @last_date = '';
	set @last_date = @end_date;

	CREATE TEMPORARY TABLE employee_table(
		id int(11),
		weekoffday1 int(1),
		weekoffday2 int(1),
		weekoffday3 int(1),
		effectivefromdate date,
		effectivetodate date
	);
	INSERT INTO employee_table
	select employee.id, employee_weekoffs.weekoffday1, employee_weekoffs.weekoffday2, employee_weekoffs.weekoffday3,
	employee_weekoffs.effectivefromdate, employee_weekoffs.effectivetodate
	from employee,employee_weekoffs where employee.status = 'Active'
	and employee.id = employee_weekoffs.empid;
	-- select * from employee_table;

	WHILE (@start_date <= @end_date) DO
	INSERT INTO month_table(month_day) values (@start_date);
	SET @start_date = (select date_add(@start_date,interval 1 day));
	END WHILE;


	create temporary table temp_companyworklocationsmaster (
	  `id` int(11) NOT NULL,
	  `branchcode` varchar(64) DEFAULT NULL,
	  `address1` varchar(255) DEFAULT NULL,
	  `address2` varchar(255) DEFAULT NULL,
	  `location` varchar(255) DEFAULT NULL,
	  `city` int(11) NOT NULL,
	  `state` int(11) NOT NULL,
	  `pincode` varchar(128) NOT NULL,
	  `country` int(11) NOT NULL,
	  `createddate` datetime NOT NULL,
	  `status` varchar(32) DEFAULT NULL               
	);  

	insert into temp_companyworklocationsmaster 
	select * from companyworklocationsmaster;

	create temporary table temp_employee_worklocations(
	  `id` int(11) NOT NULL,
	  `empid` int(11) NOT NULL,
	  `locationid` int(11) NOT NULL,
	  `effectivefromdate` date NOT NULL,
	  `effectivetodate` date DEFAULT NULL
	);

	insert into temp_employee_worklocations
	select * from employee_worklocations;

	create temporary table temp_holidaysmaster(
	  `id` int(11) NOT NULL,
	  `year` int(4) NOT NULL,
	  `description` varchar(255) NOT NULL,
	  `date` date DEFAULT NULL,
	  `day` varchar(15) NOT NULL,
	  `location` int(11) DEFAULT NULL,
	  `leave_cycle_year` int(4) NOT NULL
	);

	insert into temp_holidaysmaster select * from holidaysmaster;               

	CREATE TEMPORARY TABLE employee_working_days_table(
		empid int(11),
		year int(4) 
	);

	INSERT INTO employee_working_days_table
	select empid,year from employee_working_days where employee_working_days.year = @summary_year;

	OPEN empid_cursor;
			set @empid_count = 0;
			set @empid_count =found_rows();
			set @e = 0;
			while @e < @empid_count do
			fetch empid_cursor into vempid,vw1,vw2,vw3,vfromdate,vtodate;   
			if not exists(select * from employee_working_days_table where employee_working_days_table.empid = vempid 
						  and employee_working_days_table.year = @summary_year) then
					insert into employee_working_days(empid,year,january,february,march,april,may,june,july,august,september,october,november,december,total) values 
					(vempid,@summary_year,0,0,0,0,0,0,0,0,0,0,0,0,0);
			end if; 
			set @e = @e + 1;
			end while;
	CLOSE empid_cursor;

	OPEN empid_cursor;
			set @empid_count = 0;
			set @empid_count =found_rows();
			set @e = 0;
			while @e < @empid_count do
				fetch empid_cursor into vempid,vw1,vw2,vw3,vfromdate,vtodate; 
				if vtodate is null then
				set vtodate = @last_date;
				end if;
				set @v1 = 0;
				set @v1 = (select day(last_day(curdate())));
				set @count = '';
				set @counttext = '';
				set @counttext = concat('set @count = (select count(m.date) FROM temp_holidaysmaster m, temp_companyworklocationsmaster v  
										WHERE m.location = v.city 
										and v.id =(select s.locationid from temp_employee_worklocations s where s.empid = ',vempid,' order by s.id desc limit 1)
										and m.leave_cycle_year = ',@summary_year,
										' and m.date between ''',vfromdate,''' and ''', (case when vtodate is not null then vtodate else @last_date end),
										''' and month(m.date) = ',@month_number,
										' and dayofweek(m.date) not in (',ifnull(vw1,0),',',ifnull(vw2,0),',',ifnull(vw3,0),'))');
				prepare stmt1 from @counttext;
				execute stmt1;
				deallocate prepare stmt1;                        
				set @sqltext = '';
				set @sqltext = concat('UPDATE employee_working_days
				SET employee_working_days.',@month_name,' = (',@v1,' - ',@count,' - ','(select count(month_day) from month_table where
					dayofweek(month_day) in (',ifnull(vw1,0),',',ifnull(vw2,0),',',ifnull(vw3,0),')
					and month_day between ''',vfromdate,''' and ''',(case when vtodate is not null then vtodate else @last_date end),'''))
				where employee_working_days.empid = ',vempid,' and employee_working_days.year = ',@summary_year);
				-- select @sqltext;
				-- select vempid,vw1,vw2,vw3;
				prepare stmt from @sqltext;
				execute stmt;
				deallocate prepare stmt; 
				set @e = @e + 1;
			end while;
	CLOSE empid_cursor;

	-- updating total column
	UPDATE employee_working_days 
	SET employee_working_days.total = 
		(`employee_working_days`.`january`) + (`employee_working_days`.`february`) +
		(`employee_working_days`.`march`) + (`employee_working_days`.`april`) +
		(`employee_working_days`.`may`) + (`employee_working_days`.`june`) +
		(`employee_working_days`.`july`) + (`employee_working_days`.`august`) +
		(`employee_working_days`.`september`) + (`employee_working_days`.`october`) +
		(`employee_working_days`.`november`) + (`employee_working_days`.`december`);

	drop temporary table temp_companyworklocationsmaster;
	drop temporary table temp_employee_worklocations;
	drop temporary table employee_table;
	drop temporary table employee_working_days_table;
	drop temporary table temp_holidaysmaster;
	drop temporary table month_table;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `update_ems_induction_conductedby_status` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `update_ems_induction_conductedby_status`(
	in `id` int(11),
	in `status` int(11)
	)
	begin
		update ems_induction_conductedby set ems_induction_conductedby.status=`status`
		where ems_induction_conductedby.id=`id`;
		select 0 as statuscode;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `update_monthly_epf_wages` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `update_monthly_epf_wages`(
		year_value int(4),
		month_value int(2),
		financial_year_value varchar(16)
	)
	begin
	declare vemp_id int(11);
	DECLARE fdate date;
	DECLARE tdate date;
	declare fdatehalf int(1);
	declare tdatehalf int(1);
	declare vincome_group_id int(3);
	declare vcomponent_id int(11);
	DECLARE vepf_always int(1);
	declare vsp int(1);
	declare income_groups_cursor cursor for select income_groups_master_table.id from income_groups_master_table;
	DECLARE empid_cursor cursor for select employee_ctc_table.empid from employee_ctc_table where employee_ctc_table.group_id = vincome_group_id;   
	declare emp_cursor cursor for select employee_ctc_table.empid from employee_ctc_table; 
	declare component_config_cursor cursor for select ig_components_master.component_id,ig_components_master.epf_always,
			ig_components_master.epf_owpfw_is_less_than_spfw from ig_components_master where ig_components_master.group_id = vincome_group_id;
	DECLARE leave_cursor cursor for select fromdate,todate,fromhalfdayleave,tohalfdayleave from employeeleaves_table
			where employeeleaves_table.empid = vemp_id;

	set @day_count_id = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
						 where payroll_client_component_configuration_details.rule_id = 
						 (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
						 where payroll_client_component_configuration_master.rule_name = 'CALCULATE_SALARY_BASED_ON_WORKING_DAYS_OR_CALENDAR_DAYS')
						 order by id desc limit 1); -- WORKING - working days, CALENDAR - calendar rays 

	select monthname(str_to_date(month_value,'%m')),month_value,day(last_day(cast(concat(year_value,'-',month_value,'-01') as date))) 
		into @month_name,@month_id,@month_days; 

	create temporary table employeeleaves_table (
		empid int(11),
	  `fromdate` datetime DEFAULT NULL,
	  `todate` datetime DEFAULT NULL,
	  `fromhalfdayleave` varchar(32) DEFAULT NULL,
	  `tohalfdayleave` varchar(32) DEFAULT NULL
	);

	insert into employeeleaves_table
	select empid,fromdate,todate,fromhalfdayleave,tohalfdayleave from lm_employeeleaves 
	where lm_employeeleaves.leavestatus = 'Approved' and 
		  ((month(lm_employeeleaves.fromdate) = @month_id) or (month(lm_employeeleaves.todate) = @month_id) or 
		  (@month_id between month(lm_employeeleaves.fromdate) and month(lm_employeeleaves.fromdate)))
	and lm_employeeleaves.leavetype = 10 and 
	((year(lm_employeeleaves.fromdate) = year_value) or (year(lm_employeeleaves.todate) = year_value));

	-- select * from employeeleaves_table;
	set @spf_wage = (select payroll_product_component_rulevalues.value 
					from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
					(select id from payroll_product_component_rulemaster 
					where payroll_product_component_rulemaster.rule_name = 'MAXIMUM_SALARY_CONSIDERED_FOR_EMPLOYER_CONTRIBUTION')
					order by id desc limit 1);

	create temporary table income_groups_master_table(
	id int(11)
	);

	insert into income_groups_master_table(id) select payroll_income_groups_master.id from payroll_income_groups_master
	where payroll_income_groups_master.status = 'Active';

	create temporary table ig_components_master(
	id int(11),
	group_id int(11),
	component_id int(11),
	epf_always int(1),
	epf_owpfw_is_less_than_spfw int(1)
	);

	insert into ig_components_master(id,group_id,component_id,epf_always,epf_owpfw_is_less_than_spfw) 
	select v.id, v.group_id,v.component_id,s.epf_always,s.epf_only_when_pf_wage_is_less_than_standard_pf_wage
	from payroll_income_group_components_master v, payroll_earning_components_epf_configs_details s
	where v.id = s.pigcm_id
	and s.effective_to_date is null;

	create temporary table salary_components_table (
	component_id int(11),
	short_name varchar(64)
	);

	insert into salary_components_table(component_id,short_name) select payroll_salary_components_master.id, component_short_name
	from payroll_salary_components_master;

	create index s_idx on salary_components_table(component_id,short_name);

	create temporary table employee_ctc_table (
		empid int(11),
	   group_id int(11), 
	  `cost_to_company` decimal(15,2) NOT NULL,
	  `basic_salary` decimal(15,2) NOT NULL,
	  `dearness_allowance` decimal(15,2) DEFAULT NULL,
	  `house_rent_allowance` decimal(15,2) DEFAULT NULL,
	  `conveyance_allowance` decimal(15,2) DEFAULT NULL,
	  `travelling_allowance` decimal(15,2) DEFAULT NULL,
	  `transport_allowance` decimal(15,2) DEFAULT NULL,
	  `commission` decimal(15,2) DEFAULT NULL,
	  `bonus` decimal(15,2) DEFAULT NULL,
	  `gratuity` decimal(15,2) DEFAULT NULL,
	  `leave_encashment` decimal(15,2) DEFAULT NULL,
	  `fixed_allowance` decimal(15,2) DEFAULT NULL,
	  `children_education_allowance` decimal(15,2) DEFAULT NULL,
	  `hostel_expenditure_allowance` decimal(15,2) DEFAULT NULL,
	  `helper_allowance` decimal(15,2) DEFAULT NULL,
	  `uniform_allowance` decimal(15,2) DEFAULT NULL,
	  `daily_allowance` decimal(15,2) DEFAULT NULL,
	  `city_compensatory_allowance` decimal(15,2) DEFAULT NULL,
	  `overtime_allowance` decimal(15,2) DEFAULT NULL,
	  `telephone_allowance` decimal(15,2) DEFAULT NULL,
	  `fixed_medical_allowance` decimal(15,2) DEFAULT NULL,
	  `project_allowance` decimal(15,2) DEFAULT NULL,
	  `food_allowance` decimal(15,2) DEFAULT NULL,
	  `holiday_allowance` decimal(15,2) DEFAULT NULL,
	  `entertainment_allowance` decimal(15,2) DEFAULT NULL,
	  `custom_allowance` decimal(15,2) DEFAULT NULL,
	  `food_coupon` decimal(15,2) DEFAULT NULL,
	  `gift_coupon` decimal(15,2) DEFAULT NULL,
	  `research_allowance` decimal(15,2) DEFAULT NULL,
	  `books_and_periodicals_allowance` decimal(15,2) DEFAULT NULL,
	  `fuel_allowance` decimal(15,2) DEFAULT NULL,
	  `driver_allowance` decimal(15,2) DEFAULT NULL,
	  `leave_travel_allowance` decimal(15,2) DEFAULT NULL,
	  `vehicle_maintenance_allowance` decimal(15,2) DEFAULT NULL,
	  `telephone_and_internet_allowance` decimal(15,2) DEFAULT NULL
	);

	insert into employee_ctc_table(empid,group_id,cost_to_company,basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,
	travelling_allowance,transport_allowance,commission,bonus,gratuity,leave_encashment,fixed_allowance,
	children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
	overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
	custom_allowance,food_coupon,gift_coupon,research_allowance,
	books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
	telephone_and_internet_allowance)
	select employee_ctc_master.empid,payroll_employee_pay_group_mapping_master.paygroupid,cost_to_company,
	basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,travelling_allowance,transport_allowance,
	commission,bonus,gratuity,leave_encashment,fixed_allowance,
	children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
	overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
	custom_allowance,food_coupon,gift_coupon,research_allowance,
	books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
	telephone_and_internet_allowance
	from employee_ctc_master,payroll_employee_pay_group_mapping_master
	where employee_ctc_master.effective_to_date is null
	and employee_ctc_master.empid = payroll_employee_pay_group_mapping_master.empid
	and payroll_employee_pay_group_mapping_master.effective_to_date is null;

	-- select * from employee_ctc_table;
	create temporary table worked_days_table (
		empid int(11),
		working_days decimal(5,2),
		lop decimal(5,2) default 0,
		worked_days decimal(5,2)
	);

	set @sqltext = '';
	if (@day_count_id = 1) then
	set @sqltext = concat('insert into worked_days_table(empid,working_days) select e.empid,',@month_name,' from employee_working_days e, employee_ctc_master m
						   where e.empid = m.empid');
	elseif (@day_count_id = 0) then           
	set @sqltext = concat('insert into worked_days_table(empid,working_days) select empid,',@month_days,' from employee_ctc_master');            
	end if;
	prepare stmt from @sqltext;
	execute stmt;
	deallocate prepare stmt;
	-- update LoPs
			open emp_cursor;
			set @u1 = 0;
			set @u1 = found_rows();
			set @u2 = 0;
			WHILE @u2 < @u1 do
			set vemp_id = 0;
			fetch emp_cursor into vemp_id;
				open leave_cursor;
				set @leave_count = 0;
				set @leave_count = found_rows();
				set @f = 0;
				while @f < @leave_count do
				fetch leave_cursor into fdate,tdate,fdatehalf,tdatehalf;
				set @date = null;
				set @date = fdate;
					while datediff(tdate,@date) >= 0 do
					set @sqltext = '';
					if ((month(@date) = @month_id) and (year(@date) = year_value)) then
					set @sqltext = concat('update worked_days_table set worked_days_table.lop = worked_days_table.lop + 1 - ',
										  (0.5 * (case when @date = fdate then fdatehalf
													   when @date = tdate then tdatehalf
													   else 0 end)),' where empid = ',vemp_id);
					
					prepare stmt from @sqltext;
					execute stmt;
					deallocate prepare stmt;
					end if;
					set @date = date_add(@date, interval 1 day);
					end while;
				set @f = @f + 1;
				end while;
				close leave_cursor;
			set @u2 = @u2 + 1;
			end while;
			close emp_cursor;      
			update worked_days_table set worked_days_table.worked_days = worked_days_table.working_days - lop;
	select * from worked_days_table;

	open income_groups_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		set vincome_group_id = 0;
		open component_config_cursor;
				set @q1 = 0;
				set @q1 = found_rows();
				set @q2 = 0;
				WHILE @q2 < @q1 do
				set vemp_id = 0;
				fetch component_config_cursor into vcomponent_id,vepf_always,vsp;
				select short_name into @short_name_value from salary_components_table where salary_components_table.component_id = vcomponent_id;
				set @sqltext = '';
				set @sqltext = 'update ';
				
				
				
				
				
				
				
				set @q2 = @q2 + 1;
				end while;
				close component_config_cursor;
		fetch income_groups_cursor into vincome_group_id;
			open empid_cursor;
			set @v1 = 0;
			set @v1 = found_rows();
			set @v2 = 0;
			WHILE @v2 < @v1 do
			set vemp_id = 0;
			fetch empid_cursor into vemp_id;
				
			set @v2 = @v2 + 1;
			end while;
			close empid_cursor;
			
		set @j = @j + 1;
		end while;
	close income_groups_cursor;

	drop temporary table employeeleaves_table;
	drop temporary table worked_days_table;
	DROP TEMPORARY TABLE income_groups_master_table;
	drop temporary table ig_components_master;
	drop temporary table employee_ctc_table;
	drop temporary table salary_components_table;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `update_monthly_salary` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
create procedure update_monthly_salary(
	empids_json varchar(2000),
    year_value int(4),
	month_value int(2),
    financial_year_value varchar(16),
    created_by_value int(11)
)
begin
declare vemp_id int(11);
DECLARE fdate date;
DECLARE tdate date;
declare fdatehalf int(1);
declare tdatehalf int(1);
declare vcm_id int(11);
declare vshort_name varchar(64);
declare vapplicable_frequency int(2);
declare vstate_id int(11);
declare vsalary_from_value float;
declare vsalary_to_value float;
declare vtax_value float;
declare vincome_group_id int(3);
declare vcomponent_id int(11);
declare vesi_enabled int(1);
declare vepf_enabled int(1);
DECLARE vepf_always int(1);
declare vsp int(1);
declare vdate date;
declare income_groups_cursor cursor for select income_groups_master_table.id from income_groups_master_table;
DECLARE empid_cursor cursor for select employee_ctc_table.empid from employee_ctc_table where employee_ctc_table.group_id = vincome_group_id;   
declare emp_cursor cursor for select employee_ctc_table.empid from employee_ctc_table; 
DECLARE wdays_cursor cursor for select worked_days_table.empid, worked_days_table.date_of_join from worked_days_table
        where worked_days_table.date_of_join between cast(@payroll_window_start_date as date) and cast(@payroll_window_end_date as date);
declare components_cursor cursor for select component_id,short_name,applicable_frequency from salary_components_table; 
declare component_config_cursor cursor for select ig_components_master.component_id,ig_components_master.esi_contribution_enabled,
        ig_components_master.epf_contribution_enabled,ig_components_master.epf_always,
	    ig_components_master.epf_owpfw_is_less_than_spfw from ig_components_master where ig_components_master.group_id = vincome_group_id;
DECLARE leave_cursor cursor for select fromdate,todate,fromhalfdayleave,tohalfdayleave from employeeleaves_table
        where employeeleaves_table.empid = vemp_id;
DECLARE ptax_cursor cursor for select state_id,salary_from_value,salary_to_value,tax_value from professional_tax_table;   
     
set @assessment_year = (select fn_get_assessment_year());

	set @day_count_id = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
						 where payroll_client_component_configuration_details.rule_id = 
						 (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
						 where payroll_client_component_configuration_master.rule_name = 'CALCULATE_SALARY_BASED_ON_WORKING_DAYS_OR_CALENDAR_DAYS')
						 order by id desc limit 1); -- WORKING - working days, CALENDAR - calendar rays 

	select monthname(str_to_date(month_value,'%m')),month_value,day(last_day(cast(concat(year_value,'-',month_value,'-01') as date))) 
		into @month_name,@month_id,@month_days; 
		
	set @previous_month_id = 0;
	set @previous_year = 0;
	if (@month_id <> 1) then
		set @previous_month_id = (@month_id - 1);
		set @previous_month_name = (select monthname(str_to_date(@previous_month_id,'%m')));
		set @previous_year = year_value;
	elseif(@month_id = 1) then
		set @previous_month_id = 12;
		set @previous_year = (year_value - 1);
	end if;
	set @previous_month_days = (select day(last_day(cast(concat(@previous_year,'-',@previous_month_id,'-01') as date))));     

	-- getting employee and employer pf contribution settings    
	set @employee_epf_wage = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							  where payroll_client_component_configuration_details.rule_id = 
							  (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							  where payroll_client_component_configuration_master.rule_name = 'ACTUAL_PF_WAGE_OR_RESTRICTED_PF_WAGE_FOR_EMPLOYEE_CONTRIBUTION')
							  order by id desc limit 1);    

	set @employer_epf_wage = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							  where payroll_client_component_configuration_details.rule_id = 
							  (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							  where payroll_client_component_configuration_master.rule_name = 'ACTUAL_PF_WAGE_OR_RESTRICTED_PF_WAGE_FOR_EMPLOYER_CONTRIBUTION')
							  order by id desc limit 1); 

	-- getting payroll and leave window dates
	set @payroll_wf_date = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							where payroll_client_component_configuration_details.rule_id = 
							(select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							where payroll_client_component_configuration_master.rule_name = 'PAYROLL_WINDOW_FROM_DATE')
							and effective_to_date is null);    
							
	set @payroll_wt_date = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							where payroll_client_component_configuration_details.rule_id = 
							(select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							where payroll_client_component_configuration_master.rule_name = 'PAYROLL_WINDOW_TO_DATE')
							and effective_to_date is null);    

	set @leave_wstart_date = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							  where payroll_client_component_configuration_details.rule_id = 
							  (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							  where payroll_client_component_configuration_master.rule_name = 'LEAVE_WINDOW_START_DATE')
							  and effective_to_date is null);    
						 
	set @leave_wend_date = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							where payroll_client_component_configuration_details.rule_id = 
							(select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							where payroll_client_component_configuration_master.rule_name = 'LEAVE_WINDOW_END_DATE')
							and effective_to_date is null);
							
	set @tpcbe = (select payroll_product_component_rulevalues.value 
				  from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
				  (select id from payroll_product_component_rulemaster 
				  where payroll_product_component_rulemaster.rule_name = 'TOTAL_PERCENTAGE_CONTRIBUTION_BY_EMPLOYEE')
				  and effectivetodate is null);
							
	set @eps = (select payroll_product_component_rulevalues.value 
				from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
				(select id from payroll_product_component_rulemaster 
				where payroll_product_component_rulemaster.rule_name = 'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_EPS')
				and effectivetodate is null);
							
	set @eepf = (select payroll_product_component_rulevalues.value 
				from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
				(select id from payroll_product_component_rulemaster 
				where payroll_product_component_rulemaster.rule_name = 'TOTAL_PERCENTAGE_CONTRIBUTION_BY_EMPLOYER')
				and effectivetodate is null);
							
	set @edli = (select payroll_product_component_rulevalues.value 
				from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
				(select id from payroll_product_component_rulemaster 
				where payroll_product_component_rulemaster.rule_name = 'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_EDLI')
				and effectivetodate is null);
							
	set @admin = (select payroll_product_component_rulevalues.value 
				from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
				(select id from payroll_product_component_rulemaster 
				where payroll_product_component_rulemaster.rule_name = 'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_ADMIN_CHARGES')
				and effectivetodate is null); 
				
	set @er_in_ctc = (select payroll_client_component_configuration_details.value
					  from payroll_client_component_configuration_details where payroll_client_component_configuration_details.rule_id =
					  (select id from payroll_client_component_configuration_master 
					  where payroll_client_component_configuration_master.rule_name = 'EMPLOYER_CONTRIBUTION_TO_BE_INCLUDED_IN_CTC'
					  and payroll_client_component_configuration_master.component_id = 12)
					  and effective_to_date is null);

	set @er_edli_in_ctc = (select payroll_client_component_configuration_details.value
						   from payroll_client_component_configuration_details where payroll_client_component_configuration_details.rule_id =
						   (select id from payroll_client_component_configuration_master 
						   where payroll_client_component_configuration_master.rule_name = 'EMPLOYER_EDLI_CONTRIBUTION_TO_BE_INCLUDED_IN_CTC')
						   and effective_to_date is null);

	set @er_admin_in_ctc = (select payroll_client_component_configuration_details.value
							from payroll_client_component_configuration_details where payroll_client_component_configuration_details.rule_id =
							(select id from payroll_client_component_configuration_master 
							where payroll_client_component_configuration_master.rule_name = 'ADMIN_CHARGES_INCLUDED_IN_CTC')
							and effective_to_date is null);       
							
	set @consider_all_comp_lop = (select payroll_client_component_configuration_details.value
								  from payroll_client_component_configuration_details where payroll_client_component_configuration_details.rule_id =
								  (select id from payroll_client_component_configuration_master 
								  where payroll_client_component_configuration_master.rule_name = 'CONSIDER_ALL_COMP_IF_PF_WAGE_IS_LESS_THAN_STATUTORY_VALUE_AFTER_LOP')
								  and effective_to_date is null);                        
							
	-- esi 

	set @max_gross_salary = (select payroll_product_component_rulevalues.value 
							 from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
							 (select id from payroll_product_component_rulemaster 
							 where payroll_product_component_rulemaster.rule_name = 'MAXIMUM_GROSS_SALARY_PERMITTED_TO_RECEIVE_ESI'
							 and payroll_product_component_rulemaster.component_id = 11)
							 and effectivetodate is null);

	set @esi_pcbe = (select payroll_product_component_rulevalues.value 
					 from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
					 (select id from payroll_product_component_rulemaster 
					 where payroll_product_component_rulemaster.rule_name = 'CONTRIBUTION_RATE_OF_EMPLOYEE')
					 and effectivetodate is null);
					 
	set @esi_pcbemployer = (select payroll_product_component_rulevalues.value
							from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
							(select id from payroll_product_component_rulemaster
							where payroll_product_component_rulemaster.rule_name = 'CONTRIBUTION_RATE_OF_EMPLOYER')
							and effectivetodate is null);                 

	set @esi_er_in_ctc = (select payroll_client_component_configuration_details.value
						  from payroll_client_component_configuration_details where payroll_client_component_configuration_details.rule_id =
						  (select id from payroll_client_component_configuration_master 
						  where payroll_client_component_configuration_master.rule_name = 'EMPLOYER_CONTRIBUTION_TO_BE_INCLUDED_IN_CTC'
						  and payroll_client_component_configuration_master.component_id = 11)
						  and effective_to_date is null);       
						  
	set @cp1_start_date = (select payroll_product_component_rulevalues.value 
						   from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
						   (select id from payroll_product_component_rulemaster 
						   where payroll_product_component_rulemaster.rule_name = 'CONTRIBUTION_PERIOD_1_START_DATE'
						   and payroll_product_component_rulemaster.component_id = 11)
						   and effectivetodate is null);    
						   
	set @cp1_end_date = (select payroll_product_component_rulevalues.value 
						 from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
						 (select id from payroll_product_component_rulemaster 
						 where payroll_product_component_rulemaster.rule_name = 'CONTRIBUTION_PERIOD_1_END_DATE'
						 and payroll_product_component_rulemaster.component_id = 11)
						 and effectivetodate is null);                           

	set @cp2_start_date = (select payroll_product_component_rulevalues.value 
						   from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
						   (select id from payroll_product_component_rulemaster 
						   where payroll_product_component_rulemaster.rule_name = 'CONTRIBUTION_PERIOD_2_START_DATE'
						   and payroll_product_component_rulemaster.component_id = 11)
						   and effectivetodate is null);    

	set @cp2_end_date = (select payroll_product_component_rulevalues.value 
						 from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
						 (select id from payroll_product_component_rulemaster 
						 where payroll_product_component_rulemaster.rule_name = 'CONTRIBUTION_PERIOD_2_END_DATE'
						 and payroll_product_component_rulemaster.component_id = 11)
						 and effectivetodate is null);    
						 
	set @wage_days_pm = (select payroll_product_component_rulevalues.value 
						 from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
						 (select id from payroll_product_component_rulemaster 
						 where payroll_product_component_rulemaster.rule_name = 'WAGE_DAYS_PER_MONTH'
						 and payroll_product_component_rulemaster.component_id = 11)
						 and effectivetodate is null);                     
						   
	set @max_exempt_wage = (select payroll_product_component_rulevalues.value 
							from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
							(select id from payroll_product_component_rulemaster 
							where payroll_product_component_rulemaster.rule_name = 'MAXIMUM_DAILY_WAGE_FOR_EMPLOYEE_CONTRIBUTION_EXEMPTION'
							and payroll_product_component_rulemaster.component_id = 11)
							and effectivetodate is null);                       
						   
	set @cp_start_date = concat(year_value,@cp1_start_date);
	set @cp_end_date = concat(year_value,@cp1_end_date);
	if (month_value < (select month(@cp_start_date))) then
		set @cp_start_date = concat((year_value - 1),@cp2_start_date);
		set @cp_end_date = concat((year_value),@cp2_end_date);
	elseif (month_value > (select month(@cp_end_date))) then    
		set @cp_start_date = concat(year_value,@cp2_start_date);
		set @cp_end_date = concat((year_value + 1),@cp2_end_date);
	end if;                      
						   
	drop temporary table if exists emp_esi_table;                      
	create temporary table emp_esi_table(
		empid int(11),
		is_gross_sal_ltoet_esi_cutoff int(1),
		last_contribution_month int(2),
		last_contribution_year int(4)
	);              
	insert into emp_esi_table(empid,is_gross_sal_ltoet_esi_cutoff,last_contribution_month,last_contribution_year)
	select empid,is_gross_sal_ltoet_esi_cutoff,last_contribution_month,last_contribution_year from payroll_employee_esi_status_details;   

	create index emp_esi_idx on emp_esi_table(empid,is_gross_sal_ltoet_esi_cutoff,last_contribution_month,last_contribution_year);     
	  
	drop temporary table if exists empids_table;            
	create temporary table empids_table (
		emp_id int(11)
	);        
	if (empids_json is not null) then
		set @insert_string = empids_json;
		set @ev = 0;
		set @ev = JSON_LENGTH(@insert_string);
		set @eu = 0;
		WHILE (@eu < @ev) do   
			set @empid_value = (select json_extract(@insert_string,concat('$[',@eu,']')));
			insert into empids_table(emp_id) values (@empid_value);
			set @eu = @eu + 1;
		end while;
	end if;
	-- select * from empids_table;
	drop temporary table if exists employeeleaves_table;
	create temporary table employeeleaves_table (
		empid int(11),
	  `fromdate` datetime DEFAULT NULL,
	  `todate` datetime DEFAULT NULL,
	  `fromhalfdayleave` varchar(32) DEFAULT NULL,
	  `tohalfdayleave` varchar(32) DEFAULT NULL
	);
set @payroll_window_start_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
set @payroll_window_end_date = (SELECT DATE(LAST_DAY(@payroll_window_start_date)));
	-- setting leave window dates based on leave window configuration
	if (@payroll_wf_date = @leave_wstart_date) then
		set @leave_start_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
		set @leave_end_date = (SELECT DATE(LAST_DAY(@leave_start_date)));
		insert into employeeleaves_table
		select empid,fromdate,todate,fromhalfdayleave,tohalfdayleave from lm_employeeleaves 
		where lm_employeeleaves.leavestatus = 'Approved' and 
			((month(lm_employeeleaves.fromdate) = @month_id) or (month(lm_employeeleaves.todate) = @month_id) or 
			(@month_id between month(lm_employeeleaves.fromdate) and month(lm_employeeleaves.todate)))
		and lm_employeeleaves.leavetype = 10 and 
		((year(lm_employeeleaves.fromdate) = year_value) or (year(lm_employeeleaves.todate) = year_value))
		and case when (empids_json is not null) then (lm_employeeleaves.empid in (select emp_id from empids_table where emp_id is not null))
				 else lm_employeeleaves.empid = lm_employeeleaves.empid
				 end;
	elseif(@payroll_wf_date <> @leave_wstart_date) then
		if ((@leave_wstart_date = '20') or (@leave_wstart_date = '21') or (@leave_wstart_date = '22') or (@leave_wstart_date = '23') or
			(@leave_wstart_date = '24') or (@leave_wstart_date = '25') or (@leave_wstart_date = '26') or (@leave_wstart_date = '27') or
			(@leave_wstart_date = '28')) then
		set @leave_start_date = (select cast(concat(@previous_year,'-',@previous_month_id,'-',@leave_wstart_date) as date));
		set @leave_end_date = (select cast(concat(year_value,'-',month_value,'-',@leave_wend_date) as date));
		elseif (@leave_wstart_date = 'LAST_BUT_2_DAYS') then
			set @leave_start_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_start_date = (select date_sub(@leave_start_date, interval 3 day));
			set @leave_end_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_end_date = (SELECT DATE(LAST_DAY(@leave_end_date)));
			set @leave_end_date = (select date_sub(@leave_end_date, interval 3 day));
		elseif (@leave_wstart_date = 'LAST_BUT_1_DAY') then
			set @leave_start_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_start_date = (select date_sub(@leave_start_date, interval 2 day));
			set @leave_end_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_end_date = (SELECT DATE(LAST_DAY(@leave_end_date)));
			set @leave_end_date = (select date_sub(@leave_end_date, interval 2 day));
		elseif (@leave_wstart_date = 'LAST_DAY') then
			set @leave_start_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_start_date = (select date_sub(@leave_start_date, interval 1 day));
			set @leave_end_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_end_date = (SELECT DATE(LAST_DAY(@leave_end_date)));
			set @leave_end_date = (select date_sub(@leave_end_date, interval 1 day));
		end if;
		insert into employeeleaves_table
		select empid,fromdate,todate,fromhalfdayleave,tohalfdayleave from lm_employeeleaves 
		where lm_employeeleaves.leavestatus = 'Approved' and 
			((lm_employeeleaves.fromdate between @leave_start_date and @leave_end_date) or
			 (lm_employeeleaves.todate between @leave_start_date and @leave_end_date) or
			 (@month_id between month(lm_employeeleaves.fromdate) and month(lm_employeeleaves.todate)))
		and lm_employeeleaves.leavetype = 10 and 
		((year(lm_employeeleaves.fromdate) = year_value) or (year(lm_employeeleaves.todate) = year_value))
		and case when (empids_json is not null) then (lm_employeeleaves.empid in (select emp_id from empids_table where emp_id is not null))
				 else lm_employeeleaves.empid = lm_employeeleaves.empid
				 end;
	end if;

	-- select * from employeeleaves_table;
	set @spf_wage = (select payroll_product_component_rulevalues.value 
					from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
					(select id from payroll_product_component_rulemaster 
					where payroll_product_component_rulemaster.rule_name = 'MAXIMUM_SALARY_CONSIDERED_FOR_EMPLOYER_CONTRIBUTION')
					and effectivetodate is null);
					
	set @max_edli_value = (@edli/100.0) * @spf_wage;                   

	drop temporary table if exists income_groups_master_table;
	create temporary table income_groups_master_table(
	id int(11)
	);

	insert into income_groups_master_table(id) select payroll_income_groups_master.id from payroll_income_groups_master
	where payroll_income_groups_master.status = 'Active';

	drop temporary table if exists ig_components_master;
	create temporary table ig_components_master(
		id int(11),
		group_id int(11),
		component_id int(11),
		esi_contribution_enabled int(1),
		epf_contribution_enabled int(1),
		epf_always int(1),
		epf_owpfw_is_less_than_spfw int(1),
		short_name varchar(64),
		applicable_frequency int(2)
	);

	insert into ig_components_master(id,group_id,component_id,esi_contribution_enabled,epf_contribution_enabled,epf_always,epf_owpfw_is_less_than_spfw) 
	select v.id, v.group_id,v.component_id,v.consider_for_esi_contribution,v.consider_for_epf_contribution,s.epf_always,s.epf_only_when_pf_wage_is_less_than_standard_pf_wage
	from payroll_income_group_components_master v, payroll_earning_components_epf_configs_details s
	where v.id = s.pigcm_id
	and s.effective_to_date is null;

	drop temporary table if exists salary_components_table;
	create temporary table salary_components_table (
	component_id int(11),
	short_name varchar(64),
	applicable_frequency int(2)
	);

	insert into salary_components_table(component_id,short_name,applicable_frequency) select payroll_salary_components_master.id, 
	component_short_name, applicable_frequency from payroll_salary_components_master
	where section_id = 1 and applicable_frequency is not null
	and component_short_name is not null;

	create index s_idx on salary_components_table(component_id,short_name,applicable_frequency);

	drop temporary table if exists employee_ctc_table;
	create temporary table employee_ctc_table (
	   empid int(11),
	   group_id int(11), 
	  `cost_to_company` 	decimal(15,2) NOT NULL,
	  `basic_salary` 		decimal(15,2) NOT NULL,
	  `dearness_allowance` 	decimal(15,2) default 0,
	  `house_rent_allowance` decimal(15,2) default 0,
	  `conveyance_allowance` decimal(15,2) default 0,
	  `travelling_allowance` decimal(15,2) default 0,
	  `transport_allowance` 	decimal(15,2) default 0,
	  `commission` 				decimal(15,2) default 0,
	  `bonus` 					decimal(15,2) default 0,
	  `gratuity` 				decimal(15,2) default 0,
	  `leave_encashment` 				decimal(15,2) default 0,
	  `fixed_allowance` 				decimal(15,2) default 0,
	  `children_education_allowance` 	decimal(15,2) default 0,
	  `hostel_expenditure_allowance` 	decimal(15,2) default 0,
	  `helper_allowance` 				decimal(15,2) default 0,
	  `uniform_allowance` 				decimal(15,2) default 0,
	  `daily_allowance` 				decimal(15,2) default 0,
	  `city_compensatory_allowance` 	decimal(15,2) default 0,
	  `overtime_allowance` 				decimal(15,2) default 0,
	  `telephone_allowance` 			decimal(15,2) default 0,
	  `fixed_medical_allowance` 		decimal(15,2) default 0,
	  `project_allowance` 				decimal(15,2) default 0,
	  `food_allowance` 					decimal(15,2) default 0,
	  `holiday_allowance` 				decimal(15,2) default 0,
	  `entertainment_allowance` 		decimal(15,2) default 0,
	  `custom_allowance` 				decimal(15,2) default 0,
	  `food_coupon` 					decimal(15,2) default 0,
	  `gift_coupon` 					decimal(15,2) default 0,
	  `research_allowance` 				decimal(15,2) default 0,
	  `books_and_periodicals_allowance` decimal(15,2) default 0,
	  `fuel_allowance` 					decimal(15,2) default 0,
	  `driver_allowance` 				decimal(15,2) default 0,
	  `leave_travel_allowance` 			decimal(15,2) default 0,
	  `vehicle_maintenance_allowance` decimal(15,2) default 0,
	  `telephone_and_internet_allowance` decimal(15,2) default 0,
	  `other_allowance`                 decimal(15,2) default 0,
	  `paid_days`                       decimal(4,2),
	  `lop_days`                        decimal(4,2),
	  `epf_wage` 			decimal(15,2) default 0,				-- employee epf wage
	  `employer_epf_wage`   decimal(15,2) default 0,				-- employer epf wage
	  `employee_epf_value`  decimal(15,2) default 0,
	  `employer_epf`        decimal(15,2) default 0,
	  `employer_epf_amount` decimal(15,2) default 0,
	  `employer_eps_amount` decimal(15,2) default 0,
	  `employer_edli`       decimal(15,2) default 0, 
	  `employer_admin`      decimal(15,2) default 0,
	  `total_epf_value`     decimal(15,2) default 0,
	  `professional_tax` 	decimal(15,2) default 0,
	  `esi_wage`			decimal(15,2) default 0,
	  `employee_esi_value` 	decimal(15,2) default 0,
	  `employer_esi_value`	decimal(15,2) default 0,
	  `total_esi_value`     decimal(15,2) default 0,
	  `state_id` 		int(11),
	  `total_salary` 	decimal(15,2) default 0
	);

	insert into employee_ctc_table(empid,group_id,cost_to_company,basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,
		travelling_allowance,transport_allowance,commission,bonus,gratuity,leave_encashment,fixed_allowance,
		children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
		overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
		custom_allowance,food_coupon,gift_coupon,research_allowance,
		books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
		telephone_and_internet_allowance,other_allowance)
	select employee_ctc_master.empid,payroll_employee_pay_group_mapping_master.income_group_id,cost_to_company,
		basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,travelling_allowance,transport_allowance,
		commission,bonus,gratuity,leave_encashment,fixed_allowance,
		children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
		overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
		custom_allowance,food_coupon,gift_coupon,research_allowance,
		books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
		telephone_and_internet_allowance,other_allowance
	from employee_ctc_master,payroll_employee_pay_group_mapping_master
	where employee_ctc_master.effective_to_date is null
	and employee_ctc_master.empid = payroll_employee_pay_group_mapping_master.empid
	and case when (empids_json is not null) then (employee_ctc_master.empid in (select emp_id from empids_table where emp_id is not null))
			 else employee_ctc_master.empid = employee_ctc_master.empid
			 end
	and payroll_employee_pay_group_mapping_master.effective_to_date is null;
		-- update employee work locations
	update employee_ctc_table, employee_worklocations, companyworklocationsmaster
			set employee_ctc_table.state_id = companyworklocationsmaster.state
			where employee_ctc_table.empid = employee_worklocations.empid
			and employee_worklocations.locationid = companyworklocationsmaster.id
			and employee_worklocations.effectivetodate is null;
			

	drop temporary table if exists professional_tax_table;
	create temporary table professional_tax_table (
		state_id int(11),
		salary_from_value float,
		salary_to_value float,
		tax_value float
	);

	insert into professional_tax_table
	select state_id,salary_from_value,salary_to_value,tax_value from payroll_employee_professional_tax_master
	where payroll_employee_professional_tax_master.state_id in (select state_id from employee_ctc_table);

-- select * from employee_ctc_table;
if (@payroll_wf_date = @leave_wstart_date) then
	drop temporary table if exists worked_days_table;
	create temporary table worked_days_table (
		empid int(11),
		working_days decimal(5,2),
		lop decimal(5,2) default 0,
		worked_days decimal(5,2),
        date_of_join date,
        reduce_days decimal(5,2) default 0
	);
	
	set @sqltext = '';
	if (@day_count_id = 'WORKING') then
	set @sqltext = concat('insert into worked_days_table(empid,working_days,date_of_join) select e.empid,',@month_name,',cast(dateofjoin as date) from employee_working_days e, employee_ctc_table m, employee em
						  where em.id = e.empid and e.empid = m.empid and e.year = ',year_value);
	elseif (@day_count_id = 'CALENDAR') then           
	set @sqltext = concat('insert into worked_days_table(empid,working_days,date_of_join) 
                           select employee_ctc_table.empid, ',@month_days,
						   ' ,cast(dateofjoin as date) from employee_ctc_table, employee where employee_ctc_table.empid = employee.id');            
	end if;
	prepare stmt from @sqltext;
	execute stmt;
	deallocate prepare stmt;
	-- update LoPs
	open emp_cursor;
		set @u1 = 0;
		set @u1 = found_rows();
		set @u2 = 0;
		WHILE @u2 < @u1 do
		set vemp_id = 0;
		fetch emp_cursor into vemp_id;
		open leave_cursor;
			set @leave_count = 0;
			set @leave_count = found_rows();
			set @f = 0;
			while @f < @leave_count do
			fetch leave_cursor into fdate,tdate,fdatehalf,tdatehalf;
			set @vdate = null;
			set @vdate = fdate;
				while datediff(tdate,@vdate) >= 0 do
				set @sqltext = '';
				if ((month(@vdate) = @month_id) and (year(@vdate) = year_value) and (@vdate >= @leave_start_date and @vdate <= @leave_end_date)) then
				set @sqltext = concat('update worked_days_table set worked_days_table.lop = worked_days_table.lop + 1 - ',
									(0.5 * (case when @vdate = fdate then fdatehalf
												when @vdate = tdate then tdatehalf
												else 0 end)),' where worked_days_table.empid = ',vemp_id);
				prepare stmt from @sqltext;
				execute stmt;
				deallocate prepare stmt;
				end if;
				set @vdate = date_add(@vdate, interval 1 day);
				end while;
			set @f = @f + 1;
			end while;
		close leave_cursor;
		set @u2 = @u2 + 1;
		end while;
	close emp_cursor;  
    IF (@day_count_id = 'WORKING') THEN
    drop temporary table if exists month_table;
	create temporary table month_table(
	month_day date
	);
    open wdays_cursor;
		set @u1 = 0;
		set @u1 = found_rows();
		set @u2 = 0;
		WHILE @u2 < @u1 do
		set vemp_id = 0;
		fetch wdays_cursor into vemp_id,vdate;
		set @balance = datediff(vdate,@payroll_window_start_date);
        set @jstart_date = @payroll_window_start_date;
		set @jend_date = date_sub(vdate, interval 1 day);
        truncate table month_table; 
        WHILE (@jstart_date <= @jend_date) DO
			INSERT INTO month_table(month_day) values (@jstart_date);
			SET @jstart_date = (select date_add(@jstart_date,interval 1 day));
		END WHILE;
        set @jstart_date = @payroll_window_start_date;
        select employee_weekoffs.weekoffday1, employee_weekoffs.weekoffday2, employee_weekoffs.weekoffday3
		into @w1,@w2,@w3
		from employee,employee_weekoffs where employee.status = 1
		and employee.id = employee_weekoffs.empid
		and employee.id = employee_id
		order by employee_weekoffs.id desc limit 1;
        set @n = 0;
		set @n = (select count(month_day) from month_table where dayofweek(month_day) in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0))
				and month_day between @jstart_date and @jend_date);
		set @n = @n + (select count(m.date)
					FROM holidaysmaster m, companyworklocationsmaster v  
				WHERE m.location = v.city 
				and v.id =(select s.locationid from employee_worklocations s where s.empid = employee_id order by s.id desc limit 1)
				and m.date between @jstart_date and @jend_date
				and dayofweek(m.date) not in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0)));
        SET @balance = @balance - @n;        
        update worked_days_table set reduce_days = @balance where worked_days_table.empid = vemp_id;
		set @u2 = @u2 + 1;
		end while;
	close wdays_cursor;
    update worked_days_table set worked_days_table.worked_days = worked_days_table.working_days - lop - reduce_days;
    ELSEIF (@day_count_id = 'CALENDAR') then
	update worked_days_table set worked_days_table.worked_days = worked_days_table.working_days - lop - (case when (date_of_join between cast(@payroll_window_start_date as date) and cast(@payroll_window_end_date as date))
								                                                                              then ((select day(date_of_join)) - 1) else 0 end);
    end if;
	update employee_ctc_table,worked_days_table
	set employee_ctc_table.paid_days = worked_days_table.worked_days,
    employee_ctc_table.lop_days = worked_days_table.lop
	where employee_ctc_table.empid = worked_days_table.empid;
	-- select * from worked_days_table;
elseif (@payroll_wf_date <> @leave_wstart_date) then
	drop temporary table if exists worked_days_table;
	create temporary table worked_days_table (
		empid int(11),
		working_days_previous_month decimal(5,2),
		lop_previous_month decimal(5,2) default 0,
		working_days_present_month decimal(5,2),
		lop_present_month decimal(5,2) default 0,
        date_of_join date,
		worked_value decimal(15,14),
        reduce_days decimal(5,2) default 0,
        worked_days decimal(5,2)
	);
	
	set @sqltext = '';
	if (@day_count_id = 'WORKING') then
	set @sqltext = concat('insert into worked_days_table(empid,working_days_previous_month,working_days_present_month,date_of_join) select e.empid,',@previous_month_name,',',@month_name,',cast(dateofjoin as date) from employee_working_days e, employee_ctc_table m,employee em
						  where em.id = e.empid and e.empid = m.empid and e.year = ',@previous_year);
	elseif (@day_count_id = 'CALENDAR') then           
	set @sqltext = concat('insert into worked_days_table(empid,working_days_previous_month,working_days_present_month,date_of_join) 
						   select employee_ctc_table.empid, ',@previous_month_days,',',@month_days,
										    ' ,cast(dateofjoin as date) from employee_ctc_table, employee where employee_ctc_table.empid = employee.id');            
	end if;
	prepare stmt from @sqltext;
	execute stmt;
	deallocate prepare stmt;
	-- update LoPs
	open emp_cursor;
		set @u1 = 0;
		set @u1 = found_rows();
		set @u2 = 0;
		WHILE @u2 < @u1 do
		set vemp_id = 0;
		fetch emp_cursor into vemp_id;
			open leave_cursor;
			set @leave_count = 0;
			set @leave_count = found_rows();
			set @f = 0;
			while @f < @leave_count do
			fetch leave_cursor into fdate,tdate,fdatehalf,tdatehalf;
			set @vdate = null;
			set @vdate = fdate;
				while datediff(tdate,@vdate) >= 0 do
				set @sqltext = '';
				if ((month(@vdate) = @previous_month_id) and (year(@vdate) = @previous_year) and (@vdate >= @leave_start_date and @vdate <= @leave_end_date)) then
				set @sqltext = concat('update worked_days_table set worked_days_table.lop_previous_month = worked_days_table.lop_previous_month + 1 - ',
									(0.5 * (case when @vdate = fdate then fdatehalf
												when @vdate = tdate then tdatehalf
												else 0 end)),' where empid = ',vemp_id);
				prepare stmt from @sqltext;
				execute stmt;
				deallocate prepare stmt;                                   
				elseif ((month(@vdate) = @month_id) and (year(@vdate) = year_value) and (@vdate >= @leave_start_date and @vdate <= @leave_end_date)) then
				set @sqltext = concat('update worked_days_table set worked_days_table.lop_present_month = worked_days_table.lop_present_month + 1 - ',
									(0.5 * (case when @vdate = fdate then fdatehalf
												when @vdate = tdate then tdatehalf
												else 0 end)),' where empid = ',vemp_id);
				prepare stmt from @sqltext;
				execute stmt;
				deallocate prepare stmt;                                   
				end if;      
				set @vdate = date_add(@vdate, interval 1 day);
				end while;
			set @f = @f + 1;
			end while;
			close leave_cursor;
		set @u2 = @u2 + 1;
		end while;
	close emp_cursor;  
    if (@day_count_id = 'WORKING') then
    drop temporary table if exists month_table;
	create temporary table month_table(
	month_day date
	);
    open wdays_cursor;
		set @u1 = 0;
		set @u1 = found_rows();
		set @u2 = 0;
		WHILE @u2 < @u1 do
		set vemp_id = 0;
		fetch wdays_cursor into vemp_id,vdate;
		set @balance = datediff(vdate,@payroll_window_start_date);
        set @jstart_date = @payroll_window_start_date;
		set @jend_date = date_sub(vdate, interval 1 day);
        truncate table month_table; 
        WHILE (@jstart_date <= @jend_date) DO
			INSERT INTO month_table(month_day) values (@jstart_date);
			SET @jstart_date = (select date_add(@jstart_date,interval 1 day));
		END WHILE;
        set @jstart_date = @payroll_window_start_date;
        select employee_weekoffs.weekoffday1, employee_weekoffs.weekoffday2, employee_weekoffs.weekoffday3
		into @w1,@w2,@w3
		from employee,employee_weekoffs where employee.status = 1
		and employee.id = employee_weekoffs.empid
		and employee.id = vemp_id
		order by employee_weekoffs.id desc limit 1;
        set @n = 0;
		set @n = (select count(month_day) from month_table where dayofweek(month_day) in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0))
				  and month_day between @jstart_date and @jend_date);
		set @n = @n + (select count(m.date)
					FROM holidaysmaster m, companyworklocationsmaster v  
				WHERE m.location = v.city 
				and v.id =(select s.locationid from employee_worklocations s where s.empid = vemp_id order by s.id desc limit 1)
				and m.date between @jstart_date and @jend_date
				and dayofweek(m.date) not in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0)));
        SET @balance = @balance - @n;        
        update worked_days_table set reduce_days = @balance where worked_days_table.empid = vemp_id;
		set @u2 = @u2 + 1;
		end while;
	close wdays_cursor;
    update worked_days_table set worked_days_table.worked_days = working_days_present_month - lop_previous_month - lop_present_month - reduce_days;
    update worked_days_table set worked_days_table.worked_value = (1 - (case when (working_days_previous_month <> 0)
                                                                            then (lop_previous_month/(working_days_previous_month * 1.0)) 
                                                                            else 0 end) - ((reduce_days + lop_present_month)/(working_days_present_month * 1.0)));
    elseif (@day_count_id = 'CALENDAR') then
	update worked_days_table set worked_days_table.worked_days = working_days_present_month - lop_previous_month - lop_present_month - reduce_days;
    update worked_days_table set worked_days_table.worked_value = (1 - (case when (working_days_previous_month <> 0)
                                                                            then (lop_previous_month/(working_days_previous_month * 1.0)) 
                                                                            else 0 end) - (((case when (date_of_join between cast(@payroll_window_start_date as date) and cast(@payroll_window_end_date as date)) 
                                                                                                  then datediff(date_of_join,cast(@payroll_window_start_date as date)) 
                                                                                                  else 0 end) + lop_present_month)/(working_days_present_month * 1.0)));
    end if;
    update employee_ctc_table,worked_days_table
	set employee_ctc_table.lop_days = ifnull(worked_days_table.lop_previous_month,0) + ifnull(worked_days_table.lop_present_month,0),
    employee_ctc_table.paid_days = worked_days_table.worked_days
	where employee_ctc_table.empid = worked_days_table.empid;
	-- select * from worked_days_table;
end if;      
open components_cursor;
	set @mu1 = 0;
	set @mu1 = found_rows();
	set @mu2 = 0;
	WHILE @mu2 < @mu1 do
		set vcm_id = 0;
		set vshort_name = 0;
		set vapplicable_frequency = 0;
		fetch components_cursor into vcm_id,vshort_name, vapplicable_frequency;
		set @short_name_text = '';
		set @validity = 0;
		set @validity = mod((@month_id - 3),vapplicable_frequency);
		if (@validity = 0) then
			set @short_name_text = concat('update employee_ctc_table set ',vshort_name,' = ',vshort_name,' * ',vapplicable_frequency,' * (1/12.0)');
		prepare stmt from @short_name_text;
		execute stmt;
		deallocate prepare stmt;
		else
			set @short_name_text = concat('update employee_ctc_table set ',vshort_name,' = 0');
		prepare stmt from @short_name_text;
		execute stmt;
		deallocate prepare stmt;
		end if;
		
		set @mu2 = @mu2 + 1;
	end while;
close components_cursor;
	-- insert gross salary details of employees
	insert into employee_gross_salary_details(empid,year,month,basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,
		travelling_allowance,transport_allowance,commission,bonus,gratuity,leave_encashment,fixed_allowance,
		children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
		overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
		custom_allowance,food_coupon,gift_coupon,research_allowance,
		books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
		telephone_and_internet_allowance,other_allowance,financial_year,created_on,created_by)
	select employee_ctc_table.empid,year_value,month_value,basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,travelling_allowance,
		transport_allowance, commission,bonus,gratuity,leave_encashment,fixed_allowance,
		children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
		overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
		custom_allowance,food_coupon,gift_coupon,research_allowance,
		books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
		telephone_and_internet_allowance,other_allowance,financial_year_value,current_timestamp(),created_by_value
	from employee_ctc_table;
        
	-- update total_gross_salary value
	update employee_gross_salary_details e
	set e.total_gross_salary = ifnull(basic_salary,0) + ifnull(dearness_allowance,0) + ifnull(house_rent_allowance,0) + 
		ifnull(conveyance_allowance,0) + ifnull(travelling_allowance,0) + ifnull(transport_allowance,0) +  ifnull(commission,0) + 
		ifnull(bonus,0) + ifnull(gratuity,0) + ifnull(leave_encashment,0) + ifnull(fixed_allowance,0) + ifnull(children_education_allowance,0) + 
		ifnull(hostel_expenditure_allowance,0) + ifnull(helper_allowance,0) + ifnull(uniform_allowance,0) + ifnull(daily_allowance,0) + 
		ifnull(city_compensatory_allowance,0) + ifnull(overtime_allowance,0) + ifnull(telephone_allowance,0) + ifnull(fixed_medical_allowance,0) + 
		ifnull(project_allowance,0) + ifnull(food_allowance,0) + ifnull(holiday_allowance,0) + ifnull(entertainment_allowance,0) + 
		ifnull(custom_allowance,0) + ifnull(food_coupon,0) + ifnull(gift_coupon,0) + ifnull(research_allowance,0) + 
		ifnull(books_and_periodicals_allowance,0) + ifnull(fuel_allowance,0) + ifnull(driver_allowance,0) + ifnull(leave_travel_allowance,0) + 
		ifnull(vehicle_maintenance_allowance,0) + ifnull(telephone_and_internet_allowance,0) + ifnull(other_allowance,0)
	where e.empid in (select employee_ctc_table.empid from employee_ctc_table where employee_ctc_table.empid is not null)
	and e.year = year_value
	and e.month = month_value;
        
	-- calculate esi for different pay groups starts
	
	open income_groups_cursor;
	set @i = 0;
	set @i = found_rows();
	set @j = 0;
	WHILE @j < @i do
	set vincome_group_id = 0;
	fetch income_groups_cursor into vincome_group_id;
		if exists(select ig_components_master.id from ig_components_master where ig_components_master.component_id = 
					(select payroll_salary_components_master.id from payroll_salary_components_master 
					where payroll_salary_components_master.component_short_name = 'esi')
					and ig_components_master.group_id = vincome_group_id) then
        open component_config_cursor;
			set @v1 = 0;
			set @v1 = found_rows();
			set @v2 = 0;
            set @esi_components_string = '';
            WHILE @v2 < @v1 do
				set vcomponent_id = 0;
				set vesi_enabled = 0;
				set vepf_enabled = 0;
				set vepf_always = 0;
				set vsp = 0;
				fetch component_config_cursor into vcomponent_id,vesi_enabled,vepf_enabled,vepf_always,vsp;
                if (vesi_enabled = 1) then
					set vshort_name = 0;
					select salary_components_table.short_name into vshort_name from salary_components_table 
					where salary_components_table.component_id = vcomponent_id;            
					set @esi_components_string = concat(@esi_components_string,case when (@esi_components_string = '') 
																					then vshort_name
																					else concat(' + ',vshort_name)
																					end);                                               
                end if;    
                set @v2 = @v2 + 1;
			end while;
		close component_config_cursor;    
		-- updating esi_wages 
		set @esi_wage_string = concat('update employee_ctc_table set esi_wage = (',@esi_components_string,') where
                                       employee_ctc_table.group_id = ',vincome_group_id);
		-- select @esi_wage_string;
        prepare stmt from @esi_wage_string;
		execute stmt;
		deallocate prepare stmt;                  
        end if;
	set @j = @j + 1;
	end while;
	close income_groups_cursor; -- calculation of esi wages for different pay groups ends            
                    
    -- calculation of esi contributions starts
	open income_groups_cursor;
	set @i = 0;
	set @i = found_rows();
	set @j = 0;
	WHILE @j < @i do
	set vincome_group_id = 0;
	
	fetch income_groups_cursor into vincome_group_id;
		if exists(select ig_components_master.id from ig_components_master where ig_components_master.component_id = 
					(select payroll_salary_components_master.id from payroll_salary_components_master 
					where payroll_salary_components_master.component_short_name = 'esi')
					and ig_components_master.group_id = vincome_group_id) then
		
			set @esi_value_string = concat('update employee_ctc_table set employee_esi_value = 
                                            case when (esi_wage/(1.0 * ',@wage_days_pm,') > ',@max_exempt_wage,') then (esi_wage * ',@esi_pcbe/100.0,
											') else 0 end where employee_ctc_table.group_id = ',vincome_group_id);
			prepare stmt from @esi_value_string;
			execute stmt;
			deallocate prepare stmt;
			
			set @esi_value_string = concat('update employee_ctc_table set employer_esi_value = esi_wage * ',@esi_pcbemployer/100.0,
											' where employee_ctc_table.group_id = ',vincome_group_id);
			prepare stmt from @esi_value_string;
			execute stmt;
			deallocate prepare stmt;
			
			set @sqltext = '';
			set @sqltext = 'update employee_ctc_table set employee_ctc_table.total_esi_value = employee_esi_value ';
			if (@esi_er_in_ctc = 1) then 
				set @sqltext = concat(@sqltext,' + employer_esi_value');
			end if;
			set @sqltext = concat(@sqltext,' where employee_ctc_table.group_id = ',vincome_group_id);
			prepare stmt from @sqltext;
			execute stmt;
			deallocate prepare stmt;
			
			open empid_cursor;
			set @esiu1 = 0;
			set @esiu1 = found_rows();
			set @esiu2 = 0;
			WHILE @esiu2 < @esiu1 do
			set vemp_id = 0;
			fetch empid_cursor into vemp_id;
			if exists (select emp_esi_table.empid from emp_esi_table where emp_esi_table.empid = vemp_id
                       and emp_esi_table.is_gross_sal_ltoet_esi_cutoff = 1) then
                
                set @eesi_value = 0;
                set @er_esi_value = 0;    
                set @esi_wage = 0;
                select employee_ctc_table.employee_esi_value, employer_esi_value
                into @eesi_value, @er_esi_value
                from employee_ctc_table where employee_ctc_table.empid = vemp_id;
                insert into payroll_esi_details(empid,year,month,employee_esi_value,employer_esi_value,financial_year,
												assessment_year,created_on,created_by) values
				(vemp_id,year_value,month_value,@eesi_value, @er_esi_value,financial_year_value,@assessment_year,current_timestamp(),created_by_value);                                                 
                if (@esi_wage <= @max_gross_salary) then
					update payroll_employee_esi_status_details
					set payroll_employee_esi_status_details.last_contribution_month = month_value,
						payroll_employee_esi_status_details.last_contribution_year = year_value,
						payroll_employee_esi_status_details.updated_on = current_timestamp(),
						payroll_employee_esi_status_details.updated_by = created_by_value
					where payroll_employee_esi_status_details.empid = vemp_id;
                elseif (@esi_wage > @max_gross_salary) then
					update payroll_employee_esi_status_details
					set payroll_employee_esi_status_details.is_gross_sal_ltoet_esi_cutoff = 0,
						payroll_employee_esi_status_details.last_contribution_month = month_value,
						payroll_employee_esi_status_details.last_contribution_year = year_value,
						payroll_employee_esi_status_details.updated_on = current_timestamp(),
						payroll_employee_esi_status_details.updated_by = created_by_value
					where payroll_employee_esi_status_details.empid = vemp_id;
                end if;
            elseif exists (select emp_esi_table.empid from emp_esi_table where emp_esi_table.empid = vemp_id
                       and emp_esi_table.is_gross_sal_ltoet_esi_cutoff = 0) then    
                set @lcm = (select emp_esi_table.last_contribution_month from emp_esi_table where emp_esi_table.empid = vemp_id);
                set @lcy = (select emp_esi_table.last_contribution_year from emp_esi_table where emp_esi_table.empid = vemp_id);
                set @last_contribution_date = (select cast(concat(@lcy,'-',@lcm,'-01') as date));
                if (@last_contribution_date < @cp_start_date) then
					delete from payroll_employee_esi_status_details
					where empid = vemp_id;
                elseif ((@last_contribution_date between @cp_start_date and @cp_end_date) and 
                        (month_value = (select month(@cp_end_date)))) then    
                    insert into payroll_esi_details(empid,year,month,employee_esi_value,employer_esi_value,financial_year,
													assessment_year,created_on,created_by) values
					(vemp_id,year_value,month_value,@eesi_value, @er_esi_value,financial_year_value,@assessment_year,current_timestamp(),created_by_value);
                    delete from payroll_employee_esi_status_details
					where empid = vemp_id;
                end if;
			end if;
				set @esiu2 = @esiu2 + 1;
			end while;
			close empid_cursor;  
		end if;
	set @j = @j + 1;
	end while;
	close income_groups_cursor; -- esi calculation for different pay groups ends
    
    update employee_gross_salary_details, employee_ctc_table
		set employee_gross_salary_details.esi = employee_ctc_table.total_esi_value
		where employee_gross_salary_details.empid = employee_ctc_table.empid
		and employee_gross_salary_details.year = year_value
		and employee_gross_salary_details.month = @month_id;
        
        -- calculate epf for different pay groups
        open income_groups_cursor;
		set @i = 0;
		set @i = found_rows();
		set @j = 0;
		WHILE @j < @i do
		set vincome_group_id = 0;
		
		fetch income_groups_cursor into vincome_group_id;
		if exists(select ig_components_master.id from ig_components_master where ig_components_master.component_id = 
             (select payroll_salary_components_master.id from payroll_salary_components_master 
                             where payroll_salary_components_master.component_short_name = 'employee_provident_fund')
              and ig_components_master.group_id = vincome_group_id) then
        -- set @columns_string = '';      
        -- calculate employee and employer epf wages for this pay group
        open empid_cursor;
		set @epfu1 = 0;
	    set @epfu1 = found_rows();
	    set @epfu2 = 0;
        WHILE @epfu2 < @epfu1 do
        set vemp_id = 0;
        fetch empid_cursor into vemp_id;
			open component_config_cursor;
			set @v1 = 0;
			set @v1 = found_rows();
			set @v2 = 0;
            set @vepf_always_wage = 0;
            set @vsp_wage = 0;
			WHILE @v2 < @v1 do
				set vcomponent_id = 0;
				set vesi_enabled = 0;
				set vepf_enabled = 0;
				set vepf_always = 0;
				set vsp = 0;
				fetch component_config_cursor into vcomponent_id,vesi_enabled,vepf_enabled,vepf_always,vsp;
				set vshort_name = 0;
				select salary_components_table.short_name into vshort_name from salary_components_table 
				where salary_components_table.component_id = vcomponent_id;
					if ((vshort_name <> 'house_rent_allowance') and (vepf_enabled = 1)) then
                    if (vepf_always = 1) then
						set @var = 0;
						set @short_name_text = '';
						set @short_name_text = concat('select ',vshort_name,' into @var from employee_ctc_table where employee_ctc_table.empid = ',vemp_id);
						-- select @short_name_text;
						prepare stmt from @short_name_text;
						execute stmt;
						deallocate prepare stmt;
						set @vepf_always_wage = @vepf_always_wage + @var;
                    elseif (vsp = 1) then
						set @short_name_text = '';
						set @short_name_text = concat('select ',vshort_name,' into @var from employee_ctc_table where employee_ctc_table.empid = ',vemp_id);
						-- select @short_name_text;
						prepare stmt from @short_name_text;
						execute stmt;
						deallocate prepare stmt;
						set @vsp_wage = @vsp_wage + @var;
                    end if;
					end if;
				set @v2 = @v2 + 1;
			end while;
			close component_config_cursor;
            if (@employee_epf_wage = 'ACTUAL') then
				if (@vepf_always_wage < @spf_wage) then
					set @epf_wage = 0;
					set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
					if (@epf_wage > @spf_wage) then
						set @epf_wage = @spf_wage;
					end if;
                elseif (@vepf_always_wage >= @spf_wage) then    
					set @epf_wage = 0;
					set @epf_wage = @epf_wage + @vepf_always_wage;
                end if;
				update employee_ctc_table set employee_ctc_table.epf_wage = @epf_wage where employee_ctc_table.empid = vemp_id; 
			elseif (@employee_epf_wage = 'RESTRICTED') then	
				set @epf_wage = 0;
				set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
                if (@epf_wage > @spf_wage) then
					set @epf_wage = @spf_wage;
				end if;
                update employee_ctc_table set employee_ctc_table.epf_wage = @epf_wage where employee_ctc_table.empid = vemp_id;
            end if;
            if (@employer_epf_wage = 'ACTUAL') then
				if (@vepf_always_wage < @spf_wage) then
					set @epf_wage = 0;
					set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
					if (@epf_wage > @spf_wage) then
						set @epf_wage = @spf_wage;
					end if;
                elseif (@vepf_always_wage >= @spf_wage) then    
					set @epf_wage = 0;
					set @epf_wage = @epf_wage + @vepf_always_wage;
                end if;
				update employee_ctc_table set employee_ctc_table.employer_epf_wage = @epf_wage where employee_ctc_table.empid = vemp_id; 
			elseif (@employer_epf_wage = 'RESTRICTED') then	
				set @epf_wage = 0;
				set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
                if (@epf_wage > @spf_wage) then
					set @epf_wage = @spf_wage;
				end if;
                update employee_ctc_table set employee_ctc_table.employer_epf_wage = @epf_wage where employee_ctc_table.empid = vemp_id;
            end if;
        set @epfu2 = @epfu2 + 1;
		end while;
        close empid_cursor;  
    -- calculate gross epf contribution    
    update employee_ctc_table   
		set employee_ctc_table.employee_epf_value = employee_ctc_table.epf_wage * (@tpcbe/100.0),
			employee_ctc_table.employer_epf       = employee_ctc_table.employer_epf_wage * (@eepf/100.0),
            employee_ctc_table.employer_eps_amount = (case when (employee_ctc_table.employer_epf_wage >= @spf_wage) then @spf_wage 
													  else employee_ctc_table.employer_epf_wage
                                                      end) * (@eps/100.0),
			employee_ctc_table.employer_edli      = employee_ctc_table.employer_epf_wage * (@edli/100.0),
			employee_ctc_table.employer_admin     = employee_ctc_table.employer_epf_wage * (@admin/100.0)
        where employee_ctc_table.group_id = vincome_group_id;
        
    update employee_ctc_table 
        set employee_ctc_table.employer_edli = case when (employee_ctc_table.employer_edli > @max_edli_wage) then @max_edli_wage
				                               else employee_ctc_table.employer_edli
                                               end
        where employee_ctc_table.group_id = vincome_group_id;    
        
    update employee_ctc_table
		set employee_ctc_table.employer_epf_amount = ((employee_ctc_table.employer_epf_wage * (@eepf/100.0)) - employee_ctc_table.employer_eps_amount)
        where employee_ctc_table.group_id = vincome_group_id;
        
    set @sqltext = '';
    set @sqltext = 'update employee_ctc_table set employee_ctc_table.total_epf_value = employee_epf_value ';
    if (@er_in_ctc = 1) then 
		set @sqltext = concat(@sqltext,' + employer_epf ');
    end if;
    if (@er_edli_in_ctc = 1) then
		set @sqltext = concat(@sqltext,' + employer_edli ');
    end if;
    if (@er_admin_in_ctc = 1) then
		set @sqltext = concat(@sqltext,' + employer_admin ');
    end if;
    set @sqltext = concat(@sqltext,' where employee_ctc_table.group_id = ',vincome_group_id);
    prepare stmt from @sqltext;
	execute stmt;
	deallocate prepare stmt;
        
    -- calculate salary proportional to attendance
if (@payroll_wf_date = @leave_wstart_date) then    
		open empid_cursor;
		set @qu1 = 0;
	    set @qu1 = found_rows();
	    set @qu2 = 0;
        WHILE @qu2 < @qu1 do
        set vemp_id = 0;
        fetch empid_cursor into vemp_id;
			select worked_days,working_days into @n1,@n2
			from worked_days_table where worked_days_table.empid = vemp_id;
			set @m = (@n1/(@n2*1.0));
            update employee_ctc_table 
            set 
            basic_salary                     = (@m * basic_salary),                               
			dearness_allowance               = (@m * dearness_allowance),
			house_rent_allowance             = (@m * house_rent_allowance),
			conveyance_allowance             = (@m * conveyance_allowance),
			travelling_allowance             = (@m * travelling_allowance),
			transport_allowance              = (@m * transport_allowance),
			commission                       = (@m * commission),
			bonus                            = (@m * bonus),
			gratuity                         = (@m * gratuity),
			leave_encashment                 = (@m * leave_encashment),
			fixed_allowance                  = (@m * fixed_allowance),
			children_education_allowance     = (@m * children_education_allowance),
			hostel_expenditure_allowance     = (@m * hostel_expenditure_allowance),
			helper_allowance                 = (@m * helper_allowance),
			uniform_allowance                = (@m * uniform_allowance),
			daily_allowance                  = (@m * daily_allowance),
			city_compensatory_allowance      = (@m * city_compensatory_allowance),
			overtime_allowance               = (@m * overtime_allowance),
			telephone_allowance              = (@m * telephone_allowance),
			fixed_medical_allowance          = (@m * fixed_medical_allowance),
			project_allowance                = (@m * project_allowance),
			food_allowance                   = (@m * food_allowance),
			holiday_allowance                = (@m * holiday_allowance),
			entertainment_allowance          = (@m * entertainment_allowance),
			custom_allowance                 = (@m * custom_allowance),
			food_coupon                      = (@m * food_coupon),
			gift_coupon                      = (@m * gift_coupon),
			research_allowance               = (@m * research_allowance),
			books_and_periodicals_allowance  = (@m * books_and_periodicals_allowance),
			fuel_allowance                   = (@m * fuel_allowance),
			driver_allowance                 = (@m * driver_allowance),
			leave_travel_allowance           = (@m * leave_travel_allowance),
			vehicle_maintenance_allowance    = (@m * vehicle_maintenance_allowance),
			telephone_and_internet_allowance = (@m * telephone_and_internet_allowance),
            other_allowance      			 = (@m * other_allowance)
            where employee_ctc_table.empid = vemp_id;
            
        set @qu2 = @qu2 + 1;
		end while;
        close empid_cursor;  
elseif (@payroll_wf_date <> @leave_wstart_date) then 
		open empid_cursor;
		set @dqu1 = 0;
	    set @dqu1 = found_rows();
	    set @dqu2 = 0;
        WHILE @dqu2 < @dqu1 do
        set vemp_id = 0;
        fetch empid_cursor into vemp_id;
			select worked_value into @m
			from worked_days_table where worked_days_table.empid = vemp_id;
			
            update employee_ctc_table 
            set 
            basic_salary                     = (@m * basic_salary),                               
			dearness_allowance               = (@m * dearness_allowance),
			house_rent_allowance             = (@m * house_rent_allowance),
			conveyance_allowance             = (@m * conveyance_allowance),
			travelling_allowance             = (@m * travelling_allowance),
			transport_allowance              = (@m * transport_allowance),
			commission                       = (@m * commission),
			bonus                            = (@m * bonus),
			gratuity                         = (@m * gratuity),
			leave_encashment                 = (@m * leave_encashment),
			fixed_allowance                  = (@m * fixed_allowance),
			children_education_allowance     = (@m * children_education_allowance),
			hostel_expenditure_allowance     = (@m * hostel_expenditure_allowance),
			helper_allowance                 = (@m * helper_allowance),
			uniform_allowance                = (@m * uniform_allowance),
			daily_allowance                  = (@m * daily_allowance),
			city_compensatory_allowance      = (@m * city_compensatory_allowance),
			overtime_allowance               = (@m * overtime_allowance),
			telephone_allowance              = (@m * telephone_allowance),
			fixed_medical_allowance          = (@m * fixed_medical_allowance),
			project_allowance                = (@m * project_allowance),
			food_allowance                   = (@m * food_allowance),
			holiday_allowance                = (@m * holiday_allowance),
			entertainment_allowance          = (@m * entertainment_allowance),
			custom_allowance                 = (@m * custom_allowance),
			food_coupon                      = (@m * food_coupon),
			gift_coupon                      = (@m * gift_coupon),
			research_allowance               = (@m * research_allowance),
			books_and_periodicals_allowance  = (@m * books_and_periodicals_allowance),
			fuel_allowance                   = (@m * fuel_allowance),
			driver_allowance                 = (@m * driver_allowance),
			leave_travel_allowance           = (@m * leave_travel_allowance),
			vehicle_maintenance_allowance    = (@m * vehicle_maintenance_allowance),
			telephone_and_internet_allowance = (@m * telephone_and_internet_allowance),
            other_allowance      		     = (@m * other_allowance)
            where employee_ctc_table.empid = vemp_id;
            
        set @dqu2 = @dqu2 + 1;
		end while;
        close empid_cursor; 
end if;

			-- calculate employee and employer epf wages for this pay group after LoP deduction
			open empid_cursor;
			set @epfu1 = 0;
			set @epfu1 = found_rows();
			set @epfu2 = 0;
			WHILE @epfu2 < @epfu1 do
			set vemp_id = 0;
			fetch empid_cursor into vemp_id;
				open component_config_cursor;
				set @v1 = 0;
				set @v1 = found_rows();
				set @v2 = 0;
				set @vepf_always_wage = 0;
				set @vsp_wage = 0;
				WHILE @v2 < @v1 do
					set vcomponent_id = 0;
					set vesi_enabled = 0;
					set vepf_enabled = 0;
					set vepf_always = 0;
					set vsp = 0;
					fetch component_config_cursor into vcomponent_id,vesi_enabled,vepf_enabled,vepf_always,vsp;
					set vshort_name = 0;
					select salary_components_table.short_name into vshort_name from salary_components_table 
					where salary_components_table.component_id = vcomponent_id;
						if ((vshort_name <> 'house_rent_allowance') and (vepf_enabled = 1)) then
						if (vepf_always = 1) then
							set @var = 0;
							set @short_name_text = '';
							set @short_name_text = concat('select ',vshort_name,' into @var from employee_ctc_table where employee_ctc_table.empid = ',vemp_id);
							-- select @short_name_text;
							prepare stmt from @short_name_text;
							execute stmt;
							deallocate prepare stmt;
							set @vepf_always_wage = @vepf_always_wage + @var;
						elseif (vsp = 1) then
							set @short_name_text = '';
							set @short_name_text = concat('select ',vshort_name,' into @var from employee_ctc_table where employee_ctc_table.empid = ',vemp_id);
							-- select @short_name_text;
							prepare stmt from @short_name_text;
							execute stmt;
							deallocate prepare stmt;
							set @vsp_wage = @vsp_wage + @var;
						end if;
						end if;
					set @v2 = @v2 + 1;
				end while;
				close component_config_cursor;
				if (@employee_epf_wage = 'ACTUAL') then
					if (@vepf_always_wage < @spf_wage) then
						set @epf_wage = 0;
						set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
						if (@epf_wage > @spf_wage) then
							set @epf_wage = @spf_wage;
						end if;
					elseif (@vepf_always_wage >= @spf_wage) then    
						set @epf_wage = 0;
						set @epf_wage = @epf_wage + @vepf_always_wage;
					end if;
					update employee_ctc_table set employee_ctc_table.epf_wage = @epf_wage where employee_ctc_table.empid = vemp_id; 
				elseif (@employee_epf_wage = 'RESTRICTED') then	
					set @epf_wage = 0;
					set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
					if (@epf_wage > @spf_wage) then
						set @epf_wage = @spf_wage;
					end if;
					update employee_ctc_table set employee_ctc_table.epf_wage = @epf_wage where employee_ctc_table.empid = vemp_id;
				end if;
				if (@employer_epf_wage = 'ACTUAL') then
					if (@vepf_always_wage < @spf_wage) then
						set @epf_wage = 0;
						set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
						if (@epf_wage > @spf_wage) then
							set @epf_wage = @spf_wage;
						end if;
					elseif (@vepf_always_wage >= @spf_wage) then    
						set @epf_wage = 0;
						set @epf_wage = @epf_wage + @vepf_always_wage;
					end if;
					update employee_ctc_table set employee_ctc_table.employer_epf_wage = @epf_wage where employee_ctc_table.empid = vemp_id; 
				elseif (@employer_epf_wage = 'RESTRICTED') then	
					set @epf_wage = 0;
					set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
					if (@epf_wage > @spf_wage) then
						set @epf_wage = @spf_wage;
					end if;
					update employee_ctc_table set employee_ctc_table.employer_epf_wage = @epf_wage where employee_ctc_table.empid = vemp_id;
				end if;
			set @epfu2 = @epfu2 + 1;
			end while;
			close empid_cursor;  
		-- calculate net epf contribution    
		update employee_ctc_table   
			set employee_ctc_table.employee_epf_value  = employee_ctc_table.epf_wage * (@tpcbe/100.0),
				employee_ctc_table.employer_epf        = employee_ctc_table.employer_epf_wage * (@eepf/100.0),
				employee_ctc_table.employer_eps_amount = (case when (employee_ctc_table.employer_epf_wage >= @spf_wage) then @spf_wage 
														  else employee_ctc_table.employer_epf_wage
														  end) * (@eps/100.0),
				employee_ctc_table.employer_edli       = employee_ctc_table.employer_epf_wage * (@edli/100.0),
				employee_ctc_table.employer_admin      = employee_ctc_table.employer_epf_wage * (@admin/100.0)
			where employee_ctc_table.group_id = vincome_group_id;
			
		update employee_ctc_table 
			set employee_ctc_table.employer_edli = case when (employee_ctc_table.employer_edli > @max_edli_wage) then @max_edli_wage
												   else employee_ctc_table.employer_edli
												   end
			where employee_ctc_table.group_id = vincome_group_id;    
			
		update employee_ctc_table
			set employee_ctc_table.employer_epf_amount = ((employee_ctc_table.employer_epf_wage * (@eepf/100.0)) - employee_ctc_table.employer_eps_amount)
			where employee_ctc_table.group_id = vincome_group_id;													      
				
		set @sqltext = '';
		set @sqltext = 'update employee_ctc_table set employee_ctc_table.total_epf_value = employee_epf_value ';
		if (@er_in_ctc = 1) then 
			set @sqltext = concat(@sqltext,' + employer_epf ');
		end if;
		if (@er_edli_in_ctc = 1) then
			set @sqltext = concat(@sqltext,' + employer_edli ');
		end if;
		if (@er_admin_in_ctc = 1) then
			set @sqltext = concat(@sqltext,' + employer_admin ');
		end if;
		set @sqltext = concat(@sqltext,' where employee_ctc_table.group_id = ',vincome_group_id);
		prepare stmt from @sqltext;
		execute stmt;
		deallocate prepare stmt;
			
			-- add epf details in epf table
			insert into payroll_epf_details(empid,year,month,employee_epf_wage,employer_epf_wage,employee_epf_value,employer_eps_value,employer_epf_value,
			employer_edli_value,employer_admin_charges_value,financial_year,created_on,created_by) 
			select empid,year_value,month_value,epf_wage,employer_epf_wage,employee_epf_value,employer_eps_amount,employer_epf_amount,employer_edli,employer_admin,financial_year_value,current_timestamp(),created_by_value
			from employee_ctc_table where employee_ctc_table.group_id = vincome_group_id;
			end if;
			
			set @j = @j + 1;
			end while;
			close income_groups_cursor; -- epf calculation for different pay groups ends
			
			-- updating total epf values in employee gross salary table
			update employee_gross_salary_details, employee_ctc_table
				set employee_gross_salary_details.employee_provident_fund = employee_ctc_table.total_epf_value
				where employee_gross_salary_details.empid = employee_ctc_table.empid
				and employee_gross_salary_details.year = year_value
				and employee_gross_salary_details.month = @month_id;
				
			insert into employee_net_salary_details(empid,year,month,basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,
				travelling_allowance,transport_allowance,commission,bonus,gratuity,esi,employee_provident_fund,leave_encashment,fixed_allowance,
				children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
				overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
				custom_allowance,food_coupon,gift_coupon,research_allowance,
				books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
				telephone_and_internet_allowance,other_allowance,paid_days,lop_days,financial_year,created_on,created_by)
			select employee_ctc_table.empid,year_value,month_value,basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,travelling_allowance,
				transport_allowance, commission,bonus,gratuity,total_esi_value,total_epf_value,leave_encashment,fixed_allowance,
				children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
				overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
				custom_allowance,food_coupon,gift_coupon,research_allowance,
				books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
				telephone_and_internet_allowance,other_allowance,paid_days,lop_days,financial_year_value,current_timestamp(),created_by_value
			from employee_ctc_table;        
			
			-- deductions not included
			update employee_ctc_table set total_salary = ifnull(basic_salary,0) + ifnull(dearness_allowance,0) + ifnull(house_rent_allowance,0) + 
				ifnull(conveyance_allowance,0) + ifnull(travelling_allowance,0) + ifnull(transport_allowance,0) +  ifnull(commission,0) + ifnull(bonus,0) + 
				ifnull(gratuity,0) + ifnull(leave_encashment,0) + ifnull(fixed_allowance,0) + ifnull(children_education_allowance,0) + 
				ifnull(hostel_expenditure_allowance,0) + ifnull(helper_allowance,0) + ifnull(uniform_allowance,0) + ifnull(daily_allowance,0) + 
				ifnull(city_compensatory_allowance,0) + ifnull(overtime_allowance,0) + ifnull(telephone_allowance,0) + ifnull(fixed_medical_allowance,0) + 
				ifnull(project_allowance,0) + ifnull(food_allowance,0) + ifnull(holiday_allowance,0) + ifnull(entertainment_allowance,0) + 
				ifnull(custom_allowance,0) + ifnull(food_coupon,0) + ifnull(gift_coupon,0) + ifnull(research_allowance,0) + 
				ifnull(books_and_periodicals_allowance,0) + ifnull(fuel_allowance,0) + ifnull(driver_allowance,0) + ifnull(leave_travel_allowance,0) + ifnull(vehicle_maintenance_allowance,0) + 
				ifnull(telephone_and_internet_allowance,0) + ifnull(other_allowance,0);
			-- select * from employee_ctc_table;
			
			open emp_cursor;
			set @pt1 = 0;
			set @pt1 = found_rows();
			set @pt2 = 0;
			WHILE @pt2 < @pt1 do
			set vemp_id = 0;
			fetch emp_cursor into vemp_id;
				open ptax_cursor;
				set @w1 = 0;
				set @w1 = found_rows();
				set @w2 = 0;
				WHILE @w2 < @w1 do
				set @salary = 0;
				set vstate_id = 0;
				set vsalary_from_value = 0;
				set vsalary_to_value = 0;
				set vtax_value = 0;
				fetch ptax_cursor into vstate_id,vsalary_from_value,vsalary_to_value,vtax_value; 
				-- select vstate_id,vsalary_from_value,vsalary_to_value,vtax_value,vemp_id;
				set @state_id = 0;
				set @state_id = (select state_id from employee_ctc_table where employee_ctc_table.empid = vemp_id);
				if (@state_id = vstate_id) then
					set @salary = (select total_salary from employee_ctc_table where employee_ctc_table.empid = vemp_id);
					if (vsalary_to_value is not null) then
						if (@salary between vsalary_from_value and vsalary_to_value) then
							update employee_ctc_table 
							set employee_ctc_table.professional_tax = vtax_value
							where employee_ctc_table.empid = vemp_id;
							insert into payroll_employee_professional_tax_details(empid,year,month,professional_tax_value,financial_year,created_on,created_by)
							values (vemp_id,year_value,month_value,vtax_value,financial_year_value,current_timestamp(),created_by_value);
						end if;
					else
						if (@salary > vsalary_from_value) then
							update employee_ctc_table 
							set employee_ctc_table.professional_tax = vtax_value
							where empid = vemp_id;
							insert into payroll_employee_professional_tax_details(empid,year,month,professional_tax_value,financial_year,created_on,created_by)
							values (vemp_id,year_value,month_value,vtax_value,financial_year_value,current_timestamp(),created_by_value);
						end if;
					end if;
				end if;
				set @w2 = @w2 + 1;
				end while;
				close ptax_cursor;  
			set @pt2 = @pt2 + 1;
			end while;
			close emp_cursor;   
			
			update employee_gross_salary_details e, employee_ctc_table t
			set e.professional_tax = t.professional_tax
			where e.empid = t.empid
			and e.year = year_value
			and e.month = month_value;
			
			update employee_net_salary_details e, employee_ctc_table t
			set e.professional_tax = t.professional_tax
			where e.empid = t.empid
			and e.year = year_value
			and e.month = month_value;
			
			update employee_ctc_table set total_salary = ifnull(total_salary,0) - ifnull(total_esi_value,0) - ifnull(total_epf_value,0) - ifnull(professional_tax,0);
			
			update employee_net_salary_details v, employee_ctc_table s
			set v.total_net_salary = s.total_salary
			where v.empid = s.empid
			and v.year = year_value
			and v.month = month_value;
			
	drop temporary table emp_esi_table;
	drop temporary table empids_table;
	drop temporary table employeeleaves_table;
	drop temporary table worked_days_table;
    drop temporary table if exists month_table;
	DROP TEMPORARY TABLE income_groups_master_table;
	drop temporary table ig_components_master;
	drop temporary table employee_ctc_table;
	drop temporary table salary_components_table;
	drop temporary table professional_tax_table;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `update_monthly_salaryv2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `update_monthly_salaryv2`(
		empids_json varchar(2000),
		year_value int(4),
		month_value int(2),
		financial_year_value varchar(16),
		created_by_value int(11)
	)
	begin
	declare vemp_id int(11);
	DECLARE fdate date;
	DECLARE tdate date;
	declare fdatehalf int(1);
	declare tdatehalf int(1);
	declare vcm_id int(11);
	declare vshort_name varchar(64);
	declare vapplicable_frequency int(2);
	declare vstate_id int(11);
	declare vsalary_from_value float;
	declare vsalary_to_value float;
	declare vtax_value float;
	declare vincome_group_id int(3);
	declare vcomponent_id int(11);
	declare vesi_enabled int(1);
	declare vepf_enabled int(1);
	DECLARE vepf_always int(1);
	declare vsp int(1);
	declare income_groups_cursor cursor for select income_groups_master_table.id from income_groups_master_table;
	DECLARE empid_cursor cursor for select employee_ctc_table.empid from employee_ctc_table where employee_ctc_table.group_id = vincome_group_id;   
	declare emp_cursor cursor for select employee_ctc_table.empid from employee_ctc_table; 
	declare components_cursor cursor for select component_id,short_name,applicable_frequency from salary_components_table; 
	declare component_config_cursor cursor for select ig_components_master.component_id,ig_components_master.esi_contribution_enabled,
			ig_components_master.epf_contribution_enabled,ig_components_master.epf_always,
			ig_components_master.epf_owpfw_is_less_than_spfw from ig_components_master where ig_components_master.group_id = vincome_group_id;
	DECLARE leave_cursor cursor for select fromdate,todate,fromhalfdayleave,tohalfdayleave from employeeleaves_table
			where employeeleaves_table.empid = vemp_id;
	DECLARE ptax_cursor cursor for select state_id,salary_from_value,salary_to_value,tax_value from professional_tax_table;        

	set @day_count_id = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
						 where payroll_client_component_configuration_details.rule_id = 
						 (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
						 where payroll_client_component_configuration_master.rule_name = 'CALCULATE_SALARY_BASED_ON_WORKING_DAYS_OR_CALENDAR_DAYS')
						 order by id desc limit 1); -- WORKING - working days, CALENDAR - calendar rays 

	select monthname(str_to_date(month_value,'%m')),month_value,day(last_day(cast(concat(year_value,'-',month_value,'-01') as date))) 
		into @month_name,@month_id,@month_days; 
		
	set @previous_month_id = 0;
	set @previous_year = 0;
	if (@month_id <> 1) then
		set @previous_month_id = (@month_id - 1);
		set @previous_month_name = (select monthname(str_to_date(@previous_month_id,'%m')));
		set @previous_year = year_value;
	elseif(@month_id = 1) then
		set @previous_month_id = 12;
		set @previous_year = (year_value - 1);
	end if;
	set @previous_month_days = (select day(last_day(cast(concat(@previous_year,'-',@previous_month_id,'-01') as date))));     

	-- getting employee and employer pf contribution settings    
	set @employee_epf_wage = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							  where payroll_client_component_configuration_details.rule_id = 
							  (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							  where payroll_client_component_configuration_master.rule_name = 'ACTUAL_PF_WAGE_OR_RESTRICTED_PF_WAGE_FOR_EMPLOYEE_CONTRIBUTION')
							  order by id desc limit 1);    

	set @employer_epf_wage = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							  where payroll_client_component_configuration_details.rule_id = 
							  (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							  where payroll_client_component_configuration_master.rule_name = 'ACTUAL_PF_WAGE_OR_RESTRICTED_PF_WAGE_FOR_EMPLOYER_CONTRIBUTION')
							  order by id desc limit 1); 

	-- getting payroll and leave window dates
	set @payroll_wf_date = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							where payroll_client_component_configuration_details.rule_id = 
							(select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							where payroll_client_component_configuration_master.rule_name = 'PAYROLL_WINDOW_FROM_DATE')
							and effective_to_date is null);    
							
	set @payroll_wt_date = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							where payroll_client_component_configuration_details.rule_id = 
							(select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							where payroll_client_component_configuration_master.rule_name = 'PAYROLL_WINDOW_TO_DATE')
							and effective_to_date is null);    

	set @leave_wstart_date = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							  where payroll_client_component_configuration_details.rule_id = 
							  (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							  where payroll_client_component_configuration_master.rule_name = 'LEAVE_WINDOW_START_DATE')
							  and effective_to_date is null);    
						 
	set @leave_wend_date = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							where payroll_client_component_configuration_details.rule_id = 
							(select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							where payroll_client_component_configuration_master.rule_name = 'LEAVE_WINDOW_END_DATE')
							and effective_to_date is null);
							
	set @tpcbe = (select payroll_product_component_rulevalues.value 
				  from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
				  (select id from payroll_product_component_rulemaster 
				  where payroll_product_component_rulemaster.rule_name = 'TOTAL_PERCENTAGE_CONTRIBUTION_BY_EMPLOYEE')
				  and effectivetodate is null);
							
	set @eps = (select payroll_product_component_rulevalues.value 
				from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
				(select id from payroll_product_component_rulemaster 
				where payroll_product_component_rulemaster.rule_name = 'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_EPS')
				and effectivetodate is null);
							
	set @eepf = (select payroll_product_component_rulevalues.value 
				from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
				(select id from payroll_product_component_rulemaster 
				where payroll_product_component_rulemaster.rule_name = 'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_EPF')
				and effectivetodate is null);
							
	set @edli = (select payroll_product_component_rulevalues.value 
				from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
				(select id from payroll_product_component_rulemaster 
				where payroll_product_component_rulemaster.rule_name = 'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_EDLI')
				and effectivetodate is null);
							
	set @admin = (select payroll_product_component_rulevalues.value 
				from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
				(select id from payroll_product_component_rulemaster 
				where payroll_product_component_rulemaster.rule_name = 'PERCENTAGE_CONTRIBUTION_BY_EMPLOYER_TOWARDS_ADMIN_CHARGES')
				and effectivetodate is null); 
	drop temporary table if exists empids_table;            
	create temporary table empids_table (
		emp_id int(11)
	);        
	if (empids_json is not null) then
		set @insert_string = empids_json;
		set @ev = 0;
		set @ev = JSON_LENGTH(@insert_string);
		set @eu = 0;
		WHILE (@eu < @ev) do   
			set @empid_value = (select json_extract(@insert_string,concat('$[',@eu,']')));
			insert into empids_table(emp_id) values (@empid_value);
			set @eu = @eu + 1;
		end while;
	end if;
	-- select * from empids_table;
	drop temporary table if exists employeeleaves_table;
	create temporary table employeeleaves_table (
		empid int(11),
	  `fromdate` datetime DEFAULT NULL,
	  `todate` datetime DEFAULT NULL,
	  `fromhalfdayleave` varchar(32) DEFAULT NULL,
	  `tohalfdayleave` varchar(32) DEFAULT NULL
	);
	-- setting leave window dates based on leave window configuration
	if (@payroll_wf_date = @leave_wstart_date) then
		insert into employeeleaves_table
		select empid,fromdate,todate,fromhalfdayleave,tohalfdayleave from lm_employeeleaves 
		where lm_employeeleaves.leavestatus = 'Approved' and 
			((month(lm_employeeleaves.fromdate) = @month_id) or (month(lm_employeeleaves.todate) = @month_id) or 
			(@month_id between month(lm_employeeleaves.fromdate) and month(lm_employeeleaves.todate)))
		and lm_employeeleaves.leavetype = 10 and 
		((year(lm_employeeleaves.fromdate) = year_value) or (year(lm_employeeleaves.todate) = year_value))
		and case when (empids_json is not null) then (lm_employeeleaves.empid in (select emp_id from empids_table where emp_id is not null))
				 else lm_employeeleaves.empid = lm_employeeleaves.empid
				 end;
	elseif(@payroll_wf_date <> @leave_wstart_date) then
		if ((@leave_wstart_date = '20') or (@leave_wstart_date = '21') or (@leave_wstart_date = '22') or (@leave_wstart_date = '23') or
			(@leave_wstart_date = '24') or (@leave_wstart_date = '25') or (@leave_wstart_date = '26') or (@leave_wstart_date = '27') or
			(@leave_wstart_date = '28')) then
		set @leave_start_date = (select cast(concat(@previous_year,'-',@previous_month_id,'-',@leave_wstart_date) as date));
		set @leave_end_date = (select cast(concat(year_value,'-',month_value,'-',@leave_wend_date) as date));
		elseif (@leave_wstart_date = 'LAST_BUT_2_DAYS') then
			set @leave_start_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_start_date = (select date_sub(@leave_start_date, interval 3 day));
			set @leave_end_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_end_date = (SELECT DATE(LAST_DAY(@leave_end_date)));
			set @leave_end_date = (select date_sub(@leave_end_date, interval 3 day));
		elseif (@leave_wstart_date = 'LAST_BUT_1_DAY') then
			set @leave_start_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_start_date = (select date_sub(@leave_start_date, interval 2 day));
			set @leave_end_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_end_date = (SELECT DATE(LAST_DAY(@leave_end_date)));
			set @leave_end_date = (select date_sub(@leave_end_date, interval 2 day));
		elseif (@leave_wstart_date = 'LAST_DAY') then
			set @leave_start_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_start_date = (select date_sub(@leave_start_date, interval 1 day));
			set @leave_end_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_end_date = (SELECT DATE(LAST_DAY(@leave_end_date)));
			set @leave_end_date = (select date_sub(@leave_end_date, interval 1 day));
		end if;

		insert into employeeleaves_table
		select empid,fromdate,todate,fromhalfdayleave,tohalfdayleave from lm_employeeleaves 
		where lm_employeeleaves.leavestatus = 'Approved' and 
			((lm_employeeleaves.fromdate between @leave_start_date and @leave_end_date) or
			 (lm_employeeleaves.todate between @leave_start_date and @leave_end_date) or
			 (@month_id between month(lm_employeeleaves.fromdate) and month(lm_employeeleaves.todate)))
		and lm_employeeleaves.leavetype = 10 and 
		((year(lm_employeeleaves.fromdate) = year_value) or (year(lm_employeeleaves.todate) = year_value))
		and case when (empids_json is not null) then (lm_employeeleaves.empid in (select emp_id from empids_table where emp_id is not null))
				 else lm_employeeleaves.empid = lm_employeeleaves.empid
				 end;
	end if;


	-- select * from employeeleaves_table;
	set @spf_wage = (select payroll_product_component_rulevalues.value 
					from payroll_product_component_rulevalues where payroll_product_component_rulevalues.rule_id =
					(select id from payroll_product_component_rulemaster 
					where payroll_product_component_rulemaster.rule_name = 'MAXIMUM_SALARY_CONSIDERED_FOR_EMPLOYER_CONTRIBUTION')
					and effectivetodate is null);

	drop temporary table if exists income_groups_master_table;
	create temporary table income_groups_master_table(
	id int(11)
	);

	insert into income_groups_master_table(id) select payroll_income_groups_master.id from payroll_income_groups_master
	where payroll_income_groups_master.status = 'Active';

	drop temporary table if exists ig_components_master;
	create temporary table ig_components_master(
		id int(11),
		group_id int(11),
		component_id int(11),
		esi_contribution_enabled int(1),
		epf_contribution_enabled int(1),
		epf_always int(1),
		epf_owpfw_is_less_than_spfw int(1),
		short_name varchar(64),
		applicable_frequency int(2)
	);

	insert into ig_components_master(id,group_id,component_id,esi_contribution_enabled,epf_contribution_enabled,epf_always,epf_owpfw_is_less_than_spfw) 
	select v.id, v.group_id,v.component_id,v.consider_for_esi_contribution,v.consider_for_epf_contribution,s.epf_always,s.epf_only_when_pf_wage_is_less_than_standard_pf_wage
	from payroll_income_group_components_master v, payroll_earning_components_epf_configs_details s
	where v.id = s.pigcm_id
	and s.effective_to_date is null;

	drop temporary table if exists salary_components_table;
	create temporary table salary_components_table (
	component_id int(11),
	short_name varchar(64),
	applicable_frequency int(2)
	);

	insert into salary_components_table(component_id,short_name,applicable_frequency) select payroll_salary_components_master.id, 
	component_short_name, applicable_frequency from payroll_salary_components_master
	where section_id = 1 and applicable_frequency is not null
	and component_short_name is not null;

	create index s_idx on salary_components_table(component_id,short_name,applicable_frequency);

	drop temporary table if exists employee_ctc_table;
	create temporary table employee_ctc_table (
		empid int(11),
	   group_id int(11), 
	  `cost_to_company` 	decimal(15,2) NOT NULL,
	  `basic_salary` 		decimal(15,2) NOT NULL,
	  `dearness_allowance` 	decimal(15,2) default 0,
	  `house_rent_allowance` decimal(15,2) default 0,
	  `conveyance_allowance` decimal(15,2) default 0,
	  `travelling_allowance` decimal(15,2) default 0,
	  `transport_allowance` 	decimal(15,2) default 0,
	  `commission` 				decimal(15,2) default 0,
	  `bonus` 					decimal(15,2) default 0,
	  `gratuity` 				decimal(15,2) default 0,
	  `leave_encashment` 				decimal(15,2) default 0,
	  `fixed_allowance` 				decimal(15,2) default 0,
	  `children_education_allowance` 	decimal(15,2) default 0,
	  `hostel_expenditure_allowance` 	decimal(15,2) default 0,
	  `helper_allowance` 				decimal(15,2) default 0,
	  `uniform_allowance` 				decimal(15,2) default 0,
	  `daily_allowance` 				decimal(15,2) default 0,
	  `city_compensatory_allowance` 	decimal(15,2) default 0,
	  `overtime_allowance` 				decimal(15,2) default 0,
	  `telephone_allowance` 			decimal(15,2) default 0,
	  `fixed_medical_allowance` 		decimal(15,2) default 0,
	  `project_allowance` 				decimal(15,2) default 0,
	  `food_allowance` 					decimal(15,2) default 0,
	  `holiday_allowance` 				decimal(15,2) default 0,
	  `entertainment_allowance` 		decimal(15,2) default 0,
	  `custom_allowance` 				decimal(15,2) default 0,
	  `food_coupon` 					decimal(15,2) default 0,
	  `gift_coupon` 					decimal(15,2) default 0,
	  `research_allowance` 				decimal(15,2) default 0,
	  `books_and_periodicals_allowance` decimal(15,2) default 0,
	  `fuel_allowance` 					decimal(15,2) default 0,
	  `driver_allowance` 				decimal(15,2) default 0,
	  `leave_travel_allowance` 			decimal(15,2) default 0,
	  `vehicle_maintenance_allowance` decimal(15,2) default 0,
	  `telephone_and_internet_allowance` decimal(15,2) default 0,
	  `epf_wage` 			decimal(15,2) default 0,
	  `employer_epf_wage`   decimal(15,2) default 0,
	  `professional_tax` 	decimal(15,2) default 0,
	  `state_id` 		int(11),
	  `total_salary` 	decimal(15,2) default 0
	);

	insert into employee_ctc_table(empid,group_id,cost_to_company,basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,
		travelling_allowance,transport_allowance,commission,bonus,gratuity,leave_encashment,fixed_allowance,
		children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
		overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
		custom_allowance,food_coupon,gift_coupon,research_allowance,
		books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
		telephone_and_internet_allowance)
	select employee_ctc_master.empid,payroll_employee_pay_group_mapping_master.income_group_id,cost_to_company,
		basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,travelling_allowance,transport_allowance,
		commission,bonus,gratuity,leave_encashment,fixed_allowance,
		children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
		overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
		custom_allowance,food_coupon,gift_coupon,research_allowance,
		books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
		telephone_and_internet_allowance
	from employee_ctc_master,payroll_employee_pay_group_mapping_master
	where employee_ctc_master.effective_to_date is null
	and employee_ctc_master.empid = payroll_employee_pay_group_mapping_master.empid
	and case when (empids_json is not null) then (employee_ctc_master.empid in (select emp_id from empids_table where emp_id is not null))
			 else employee_ctc_master.empid = employee_ctc_master.empid
			 end
	and payroll_employee_pay_group_mapping_master.effective_to_date is null;
		-- update employee work locations
	update employee_ctc_table, employee_worklocations, companyworklocationsmaster
			set employee_ctc_table.state_id = companyworklocationsmaster.state
			where employee_ctc_table.empid = employee_worklocations.empid
			and employee_worklocations.locationid = companyworklocationsmaster.id;

	drop temporary table if exists professional_tax_table;
	create temporary table professional_tax_table (
		state_id int(11),
		salary_from_value float,
		salary_to_value float,
		tax_value float
	);

	insert into professional_tax_table
	select state_id,salary_from_value,salary_to_value,tax_value from payroll_employee_professional_tax_master
	where payroll_employee_professional_tax_master.state_id in (select state_id from employee_ctc_table);

	-- select * from employee_ctc_table;
	if (@payroll_wf_date = @leave_wstart_date) then
	drop temporary table if exists worked_days_table;
	create temporary table worked_days_table (
		empid int(11),
		working_days decimal(5,2),
		lop decimal(5,2) default 0,
		worked_days decimal(5,2)
	);

	set @sqltext = '';
	if (@day_count_id = 'WORKING') then
	set @sqltext = concat('insert into worked_days_table(empid,working_days) select e.empid,',@month_name,' from employee_working_days e, employee_ctc_table m
						   where e.empid = m.empid and e.year = ',year_value);
	elseif (@day_count_id = 'CALENDAR') then           
	set @sqltext = concat('insert into worked_days_table(empid,working_days) select empid,',@month_days,' from employee_ctc_table');            
	end if;
	prepare stmt from @sqltext;
	execute stmt;
	deallocate prepare stmt;
	-- update LoPs
			open emp_cursor;
			set @u1 = 0;
			set @u1 = found_rows();
			set @u2 = 0;
			WHILE @u2 < @u1 do
			set vemp_id = 0;
			fetch emp_cursor into vemp_id;
				open leave_cursor;
				set @leave_count = 0;
				set @leave_count = found_rows();
				set @f = 0;
				while @f < @leave_count do
				fetch leave_cursor into fdate,tdate,fdatehalf,tdatehalf;
				set @date = null;
				set @date = fdate;
					while datediff(tdate,@date) >= 0 do
					set @sqltext = '';
					if ((month(@date) = @month_id) and (year(@date) = year_value)) then
					set @sqltext = concat('update worked_days_table set worked_days_table.lop = worked_days_table.lop + 1 - ',
										  (0.5 * (case when @date = fdate then fdatehalf
													   when @date = tdate then tdatehalf
													   else 0 end)),' where empid = ',vemp_id);
					
					prepare stmt from @sqltext;
					execute stmt;
					deallocate prepare stmt;
					end if;
					set @date = date_add(@date, interval 1 day);
					end while;
				set @f = @f + 1;
				end while;
				close leave_cursor;
			set @u2 = @u2 + 1;
			end while;
			close emp_cursor;      
			update worked_days_table set worked_days_table.worked_days = worked_days_table.working_days - lop;
	-- select * from worked_days_table;
	elseif (@payroll_wf_date <> @leave_wstart_date) then
	drop temporary table if exists worked_days_table;
	create temporary table worked_days_table (
		empid int(11),
		working_days_previous_month decimal(5,2),
		lop_previous_month decimal(5,2) default 0,
		working_days_present_month decimal(5,2),
		lop_present_month decimal(5,2) default 0,
		worked_value decimal(15,14)
	);

	set @sqltext = '';
	if (@day_count_id = 'WORKING') then
	set @sqltext = concat('insert into worked_days_table(empid,working_days_previous_month,working_days_present_month) select e.empid,',@previous_month_name,',',@month_name,' from employee_working_days e, employee_ctc_table m
						   where e.empid = m.empid and e.year = ',@previous_year);
	elseif (@day_count_id = 'CALENDAR') then           
	set @sqltext = concat('insert into worked_days_table(empid,working_days_previous_month,working_days_present_month) select empid,',@previous_month_days,',',@month_days,' from employee_ctc_table');            
	end if;
	prepare stmt from @sqltext;
	execute stmt;
	deallocate prepare stmt;
	-- update LoPs
			open emp_cursor;
			set @u1 = 0;
			set @u1 = found_rows();
			set @u2 = 0;
			WHILE @u2 < @u1 do
			set vemp_id = 0;
			fetch emp_cursor into vemp_id;
				open leave_cursor;
				set @leave_count = 0;
				set @leave_count = found_rows();
				set @f = 0;
				while @f < @leave_count do
				fetch leave_cursor into fdate,tdate,fdatehalf,tdatehalf;
				set @date = null;
				set @date = fdate;
					while datediff(tdate,@date) >= 0 do
					set @sqltext = '';
					if ((month(@date) = @previous_month_id) and (year(@date) = @previous_year)) then
					set @sqltext = concat('update worked_days_table set worked_days_table.lop_previous_month = worked_days_table.lop_previous_month + 1 - ',
										  (0.5 * (case when @date = fdate then fdatehalf
													   when @date = tdate then tdatehalf
													   else 0 end)),' where empid = ',vemp_id);
					elseif ((month(@date) = @month_id) and (year(@date) = year_value)) then
					set @sqltext = concat('update worked_days_table set worked_days_table.lop_present_month = worked_days_table.lop_present_month + 1 - ',
										  (0.5 * (case when @date = fdate then fdatehalf
													   when @date = tdate then tdatehalf
													   else 0 end)),' where empid = ',vemp_id);
					end if;                                   
					prepare stmt from @sqltext;
					execute stmt;
					deallocate prepare stmt;
					set @date = date_add(@date, interval 1 day);
					end while;
				set @f = @f + 1;
				end while;
				close leave_cursor;
			set @u2 = @u2 + 1;
			end while;
			close emp_cursor;      
			update worked_days_table set worked_days_table.worked_value = (1 - (lop_previous_month/(working_days_previous_month * 1.0)) - (lop_present_month/(working_days_present_month * 1.0)));
	-- select * from worked_days_table;
	end if;      
			open components_cursor;
			set @mu1 = 0;
			set @mu1 = found_rows();
			set @mu2 = 0;
			WHILE @mu2 < @mu1 do
			set vcm_id = 0;
			set vshort_name = 0;
			set vapplicable_frequency = 0;
			fetch components_cursor into vcm_id,vshort_name, vapplicable_frequency;
			set @short_name_text = '';
			set @validity = 0;
			set @validity = mod((@month_id - 3),vapplicable_frequency);
			if (@validity = 0) then
				set @short_name_text = concat('update employee_ctc_table set ',vshort_name,' = ',vshort_name,' * ',vapplicable_frequency,' * (1/12.0)');
			prepare stmt from @short_name_text;
			execute stmt;
			deallocate prepare stmt;
			else
				set @short_name_text = concat('update employee_ctc_table set ',vshort_name,' = 0');
			prepare stmt from @short_name_text;
			execute stmt;
			deallocate prepare stmt;
			end if;
			
			set @mu2 = @mu2 + 1;
			end while;
			close components_cursor;
			-- insert gross salary details of employees
			insert into employee_gross_salary_details(empid,year,month,basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,
				travelling_allowance,transport_allowance,commission,bonus,gratuity,leave_encashment,fixed_allowance,
				children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
				overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
				custom_allowance,food_coupon,gift_coupon,research_allowance,
				books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
				telephone_and_internet_allowance,financial_year,created_on,created_by)
			select employee_ctc_table.empid,year_value,month_value,basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,travelling_allowance,
				transport_allowance, commission,bonus,gratuity,leave_encashment,fixed_allowance,
				children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
				overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
				custom_allowance,food_coupon,gift_coupon,research_allowance,
				books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
				telephone_and_internet_allowance,financial_year_value,current_timestamp(),created_by_value
			from employee_ctc_table;
			
			open income_groups_cursor;
			set @i = 0;
			set @i = found_rows();
			set @j = 0;
			WHILE @j < @i do
			set vincome_group_id = 0;
			
			fetch income_groups_cursor into vincome_group_id;
			if exists(select ig_components_master.id from ig_components_master where ig_components_master.component_id = 
				 (select payroll_salary_components_master.id from payroll_salary_components_master 
								 where payroll_salary_components_master.component_short_name = 'employee_provident_fund')
				  and ig_components_master.group_id = vincome_group_id) then
			-- set @columns_string = '';      
			-- calculate employee and employer epf wages for this pay group
			open empid_cursor;
			set @epfu1 = 0;
			set @epfu1 = found_rows();
			set @epfu2 = 0;
			WHILE @epfu2 < @epfu1 do
			set vemp_id = 0;
			fetch empid_cursor into vemp_id;
				open component_config_cursor;
				set @v1 = 0;
				set @v1 = found_rows();
				set @v2 = 0;
				set @vepf_always_wage = 0;
				set @vsp_wage = 0;
				WHILE @v2 < @v1 do
					set vcomponent_id = 0;
					set vesi_enabled = 0;
					set vepf_enabled = 0;
					set vepf_always = 0;
					set vsp = 0;
					fetch component_config_cursor into vcomponent_id,vesi_enabled,vepf_enabled,vepf_always,vsp;
					set vshort_name = 0;
					select salary_components_table.short_name into vshort_name from salary_components_table 
					where salary_components_table.component_id = vcomponent_id;
						if ((vshort_name <> 'house_rent_allowance') and (vepf_enabled = 1)) then
						if (vepf_always = 1) then
							set @var = 0;
							set @short_name_text = '';
							set @short_name_text = concat('select ',vshort_name,' into @var from employee_ctc_table where employee_ctc_table.empid = ',vemp_id);
							-- select @short_name_text;
							prepare stmt from @short_name_text;
							execute stmt;
							deallocate prepare stmt;
							set @vepf_always_wage = @vepf_always_wage + @var;
						elseif (vsp = 1) then
							set @short_name_text = '';
							set @short_name_text = concat('select ',vshort_name,' into @var from employee_ctc_table where employee_ctc_table.empid = ',vemp_id);
							-- select @short_name_text;
							prepare stmt from @short_name_text;
							execute stmt;
							deallocate prepare stmt;
							set @vsp_wage = @vsp_wage + @var;
						end if;
						end if;
					set @v2 = @v2 + 1;
				end while;
				close component_config_cursor;
				if (@employee_epf_wage = 'ACTUAL') then
					if (@vepf_always_wage < @spf_wage) then
						set @epf_wage = 0;
						set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
						if (@epf_wage > @spf_wage) then
							set @epf_wage = @spf_wage;
						end if;
					elseif (@vepf_always_wage >= @spf_wage) then    
						set @epf_wage = 0;
						set @epf_wage = @epf_wage + @vepf_always_wage;
					end if;
					update employee_ctc_table set employee_ctc_table.epf_wage = @epf_wage where employee_ctc_table.empid = vemp_id; 
				elseif (@employee_epf_wage = 'RESTRICTED') then	
					set @epf_wage = 0;
					set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
					if (@epf_wage > @spf_wage) then
						set @epf_wage = @spf_wage;
					end if;
					update employee_ctc_table set employee_ctc_table.epf_wage = @epf_wage where employee_ctc_table.empid = vemp_id;
				end if;
				if (@employer_epf_wage = 'ACTUAL') then
					if (@vepf_always_wage < @spf_wage) then
						set @epf_wage = 0;
						set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
						if (@epf_wage > @spf_wage) then
							set @epf_wage = @spf_wage;
						end if;
					elseif (@vepf_always_wage >= @spf_wage) then    
						set @epf_wage = 0;
						set @epf_wage = @epf_wage + @vepf_always_wage;
					end if;
					update employee_ctc_table set employee_ctc_table.employer_epf_wage = @epf_wage where employee_ctc_table.empid = vemp_id; 
				elseif (@employer_epf_wage = 'RESTRICTED') then	
					set @epf_wage = 0;
					set @epf_wage = @epf_wage + @vepf_always_wage + @vsp_wage;
					if (@epf_wage > @spf_wage) then
						set @epf_wage = @spf_wage;
					end if;
					update employee_ctc_table set employee_ctc_table.employer_epf_wage = @epf_wage where employee_ctc_table.empid = vemp_id;
				end if;
			set @epfu2 = @epfu2 + 1;
			end while;
			close empid_cursor;  
		-- calculate gross epf contribution    
		update employee_gross_salary_details, employee_ctc_table
		set employee_gross_salary_details.employee_provident_fund = (employee_ctc_table.epf_wage * (@tpcbe/100.00))
		where employee_gross_salary_details.empid = employee_ctc_table.empid
		and employee_gross_salary_details.year = year_value
		and employee_gross_salary_details.month = @month_id
		and employee_ctc_table.group_id = vincome_group_id;
			
		-- calculate salary proportional to attendance
	if (@payroll_wf_date = @leave_wstart_date) then    
			open empid_cursor;
			set @qu1 = 0;
			set @qu1 = found_rows();
			set @qu2 = 0;
			WHILE @qu2 < @qu1 do
			set vemp_id = 0;
			fetch empid_cursor into vemp_id;
				select worked_days,working_days into @n1,@n2
				from worked_days_table where worked_days_table.empid = vemp_id;
				set @m = (@n1/(@n2*1.0));
				update employee_ctc_table 
				set 
				basic_salary                     = (@m * basic_salary),                               
				dearness_allowance               = (@m * dearness_allowance),
				house_rent_allowance             = (@m * house_rent_allowance),
				conveyance_allowance             = (@m * conveyance_allowance),
				travelling_allowance             = (@m * travelling_allowance),
				transport_allowance              = (@m * transport_allowance),
				commission                       = (@m * commission),
				bonus                            = (@m * bonus),
				gratuity                         = (@m * gratuity),
				leave_encashment                 = (@m * leave_encashment),
				fixed_allowance                  = (@m * fixed_allowance),
				children_education_allowance     = (@m * children_education_allowance),
				hostel_expenditure_allowance     = (@m * hostel_expenditure_allowance),
				helper_allowance                 = (@m * helper_allowance),
				uniform_allowance                = (@m * uniform_allowance),
				daily_allowance                  = (@m * daily_allowance),
				city_compensatory_allowance      = (@m * city_compensatory_allowance),
				overtime_allowance               = (@m * overtime_allowance),
				telephone_allowance              = (@m * telephone_allowance),
				fixed_medical_allowance          = (@m * fixed_medical_allowance),
				project_allowance                = (@m * project_allowance),
				food_allowance                   = (@m * food_allowance),
				holiday_allowance                = (@m * holiday_allowance),
				entertainment_allowance          = (@m * entertainment_allowance),
				custom_allowance                 = (@m * custom_allowance),
				food_coupon                      = (@m * food_coupon),
				gift_coupon                      = (@m * gift_coupon),
				research_allowance               = (@m * research_allowance),
				books_and_periodicals_allowance  = (@m * books_and_periodicals_allowance),
				fuel_allowance                   = (@m * fuel_allowance),
				driver_allowance                 = (@m * driver_allowance),
				leave_travel_allowance           = (@m * leave_travel_allowance),
				vehicle_maintenance_allowance    = (@m * vehicle_maintenance_allowance),
				telephone_and_internet_allowance = (@m * telephone_and_internet_allowance),
				epf_wage        				 = (@m * epf_wage),
				employer_epf_wage     			 = (@m * employer_epf_wage)
				where employee_ctc_table.empid = vemp_id;
				
			set @qu2 = @qu2 + 1;
			end while;
			close empid_cursor;  
	elseif (@payroll_wf_date <> @leave_wstart_date) then 
			open empid_cursor;
			set @dqu1 = 0;
			set @dqu1 = found_rows();
			set @dqu2 = 0;
			WHILE @dqu2 < @dqu1 do
			set vemp_id = 0;
			fetch empid_cursor into vemp_id;
				select worked_value into @m
				from worked_days_table where worked_days_table.empid = vemp_id;
				
				update employee_ctc_table 
				set 
				basic_salary                     = (@m * basic_salary),                               
				dearness_allowance               = (@m * dearness_allowance),
				house_rent_allowance             = (@m * house_rent_allowance),
				conveyance_allowance             = (@m * conveyance_allowance),
				travelling_allowance             = (@m * travelling_allowance),
				transport_allowance              = (@m * transport_allowance),
				commission                       = (@m * commission),
				bonus                            = (@m * bonus),
				gratuity                         = (@m * gratuity),
				leave_encashment                 = (@m * leave_encashment),
				fixed_allowance                  = (@m * fixed_allowance),
				children_education_allowance     = (@m * children_education_allowance),
				hostel_expenditure_allowance     = (@m * hostel_expenditure_allowance),
				helper_allowance                 = (@m * helper_allowance),
				uniform_allowance                = (@m * uniform_allowance),
				daily_allowance                  = (@m * daily_allowance),
				city_compensatory_allowance      = (@m * city_compensatory_allowance),
				overtime_allowance               = (@m * overtime_allowance),
				telephone_allowance              = (@m * telephone_allowance),
				fixed_medical_allowance          = (@m * fixed_medical_allowance),
				project_allowance                = (@m * project_allowance),
				food_allowance                   = (@m * food_allowance),
				holiday_allowance                = (@m * holiday_allowance),
				entertainment_allowance          = (@m * entertainment_allowance),
				custom_allowance                 = (@m * custom_allowance),
				food_coupon                      = (@m * food_coupon),
				gift_coupon                      = (@m * gift_coupon),
				research_allowance               = (@m * research_allowance),
				books_and_periodicals_allowance  = (@m * books_and_periodicals_allowance),
				fuel_allowance                   = (@m * fuel_allowance),
				driver_allowance                 = (@m * driver_allowance),
				leave_travel_allowance           = (@m * leave_travel_allowance),
				vehicle_maintenance_allowance    = (@m * vehicle_maintenance_allowance),
				telephone_and_internet_allowance = (@m * telephone_and_internet_allowance),
				epf_wage        				 = (@m * epf_wage),
				employer_epf_wage          		 = (@m * employer_epf_wage)
				where employee_ctc_table.empid = vemp_id;
				
			set @dqu2 = @dqu2 + 1;
			end while;
			close empid_cursor; 
	end if;
	insert into employee_net_salary_details(empid,year,month,basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,
				travelling_allowance,transport_allowance,commission,bonus,gratuity,employee_provident_fund,leave_encashment,fixed_allowance,
				children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
				overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
				custom_allowance,food_coupon,gift_coupon,research_allowance,
				books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
				telephone_and_internet_allowance,financial_year,created_on,created_by)
			select employee_ctc_table.empid,year_value,month_value,basic_salary,dearness_allowance,house_rent_allowance,conveyance_allowance,travelling_allowance,
				transport_allowance, commission,bonus,gratuity,(epf_wage * (@tpcbe/100.0)),leave_encashment,fixed_allowance,
				children_education_allowance,hostel_expenditure_allowance,helper_allowance,uniform_allowance,daily_allowance,city_compensatory_allowance,
				overtime_allowance,telephone_allowance,fixed_medical_allowance,project_allowance,food_allowance,holiday_allowance,entertainment_allowance,
				custom_allowance,food_coupon,gift_coupon,research_allowance,
				books_and_periodicals_allowance,fuel_allowance,driver_allowance,leave_travel_allowance,vehicle_maintenance_allowance,
				telephone_and_internet_allowance,financial_year_value,current_timestamp(),created_by_value
			from employee_ctc_table
			where employee_ctc_table.group_id = vincome_group_id;    
			
			-- add epf details in epf table
			insert into payroll_epf_details(empid,year,month,employee_epf_wage,employer_epf_wage,employee_epf_value,employer_eps_value,employer_epf_value,
			employer_edli_value,employer_admin_charges_value,financial_year,created_on,created_by) 
			select empid,year_value,month_value,epf_wage,employer_epf_wage,0,0,0,0,0,financial_year_value,current_timestamp(),created_by_value
			from employee_ctc_table where employee_ctc_table.group_id = vincome_group_id;
			end if;
			
			set @j = @j + 1;
			end while;
			close income_groups_cursor;
			
			update payroll_epf_details   
			set payroll_epf_details.employee_epf_value           = payroll_epf_details.epf_wage * (@tpcbe/100.0),
				payroll_epf_details.employer_eps_value           = payroll_epf_details.employer_epf_wage * (@eps/100.0),
				payroll_epf_details.employer_epf_value           = payroll_epf_details.employer_epf_wage * (@eepf/100.0),
				payroll_epf_details.employer_edli_value          = payroll_epf_details.employer_epf_wage * (@edli/100.0),
				payroll_epf_details.employer_admin_charges_value = payroll_epf_details.employer_epf_wage * (@admin/100.0)
			where payroll_epf_details.year = year_value
			and payroll_epf_details.month = month_value
			and payroll_epf_details.financial_year = financial_year_value
			and payroll_epf_details.empid in (select empid from employee_ctc_table where employee_ctc_table.empid is not null) ;
			
			-- update epf_wage column with epf_value 
			update employee_ctc_table, payroll_epf_details
				set employee_ctc_table.epf_wage = payroll_epf_details.employee_epf_value
				where employee_ctc_table.empid = payroll_epf_details.empid
				and payroll_epf_details.year = year_value
				and payroll_epf_details.month = month_value
				and payroll_epf_details.financial_year = financial_year_value;
			-- epf not included
			update employee_ctc_table set total_salary = ifnull(basic_salary,0) + ifnull(dearness_allowance,0) + ifnull(house_rent_allowance,0) + 
				ifnull(conveyance_allowance,0) + ifnull(travelling_allowance,0) + ifnull(transport_allowance,0) +  ifnull(commission,0) + ifnull(bonus,0) + 
				ifnull(gratuity,0) + ifnull(leave_encashment,0) + ifnull(fixed_allowance,0) + ifnull(children_education_allowance,0) + 
				ifnull(hostel_expenditure_allowance,0) + ifnull(helper_allowance,0) + ifnull(uniform_allowance,0) + ifnull(daily_allowance,0) + 
				ifnull(city_compensatory_allowance,0) + ifnull(overtime_allowance,0) + ifnull(telephone_allowance,0) + ifnull(fixed_medical_allowance,0) + 
				ifnull(project_allowance,0) + ifnull(food_allowance,0) + ifnull(holiday_allowance,0) + ifnull(entertainment_allowance,0) + 
				ifnull(custom_allowance,0) + ifnull(food_coupon,0) + ifnull(gift_coupon,0) + ifnull(research_allowance,0) + 
				ifnull(books_and_periodicals_allowance,0) + ifnull(fuel_allowance,0) + ifnull(driver_allowance,0) + ifnull(leave_travel_allowance,0) + ifnull(vehicle_maintenance_allowance,0) + 
				ifnull(telephone_and_internet_allowance,0);
			-- select * from employee_ctc_table;
			
			open emp_cursor;
			set @pt1 = 0;
			set @pt1 = found_rows();
			set @pt2 = 0;
			WHILE @pt2 < @pt1 do
			set vemp_id = 0;
			fetch emp_cursor into vemp_id;
				open ptax_cursor;
				set @w1 = 0;
				set @w1 = found_rows();
				set @w2 = 0;
				WHILE @w2 < @w1 do
				set @salary = 0;
				set vstate_id = 0;
				set vsalary_from_value = 0;
				set vsalary_to_value = 0;
				set vtax_value = 0;
				fetch ptax_cursor into vstate_id,vsalary_from_value,vsalary_to_value,vtax_value; 
				-- select vstate_id,vsalary_from_value,vsalary_to_value,vtax_value,vemp_id;
				set @state_id = 0;
				set @state_id = (select state_id from employee_ctc_table where employee_ctc_table.empid = vemp_id);
				if (@state_id = vstate_id) then
					set @salary = (select total_salary from employee_ctc_table where employee_ctc_table.empid = vemp_id);
					if (vsalary_to_value is not null) then
						if (@salary between vsalary_from_value and vsalary_to_value) then
							update employee_ctc_table 
							set employee_ctc_table.professional_tax = vtax_value
							where employee_ctc_table.empid = vemp_id;
							insert into payroll_employee_professional_tax_details(empid,year,month,professional_tax_value,financial_year,created_on,created_by)
							values (vemp_id,year_value,month_value,vtax_value,financial_year_value,current_timestamp(),created_by_value);
						end if;
					else
						if (@salary > vsalary_from_value) then
							update employee_ctc_table 
							set employee_ctc_table.professional_tax = vtax_value
							where empid = vemp_id;
							insert into payroll_employee_professional_tax_details(empid,year,month,professional_tax_value,financial_year,created_on,created_by)
							values (vemp_id,year_value,month_value,vtax_value,financial_year_value,current_timestamp(),created_by_value);
						end if;
					end if;
				end if;
				set @w2 = @w2 + 1;
				end while;
				close ptax_cursor;  
			set @pt2 = @pt2 + 1;
			end while;
			close emp_cursor;   
			
			update employee_gross_salary_details e, employee_ctc_table t
			set e.professional_tax = t.professional_tax
			where e.empid = t.empid
			and e.year = year_value
			and e.month = month_value;
			
			update employee_net_salary_details e, employee_ctc_table t
			set e.professional_tax = t.professional_tax
			where e.empid = t.empid
			and e.year = year_value
			and e.month = month_value;
			
	drop temporary table empids_table;
	drop temporary table employeeleaves_table;
	drop temporary table worked_days_table;
	DROP TEMPORARY TABLE income_groups_master_table;
	drop temporary table ig_components_master;
	drop temporary table employee_ctc_table;
	drop temporary table salary_components_table;
	drop temporary table professional_tax_table;

	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `update_shift_status` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `update_shift_status`(
			`shift_id` int(11),
			`status_value` varchar(32)
	)
	begin
		/* DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
		END; */
		if exists(select * from employee_shift_details where shiftid=`shift_id` and current_date() between fromdate and todate) then
			select 0 as updateStatus;
		else
			update shiftsmaster set status=`status_value` where id=`shift_id` ;
			select 1 as updateStatus;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `update_shift_status_V2` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO,ALLOW_INVALID_DATES,NO_AUTO_CREATE_USER' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `update_shift_status_V2`(
			`shift_id` int(11),
			`status_value` varchar(32)
	)
	begin
		/* DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;
			SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated' AS Message;
		END; */
		if exists(select * from employee_shift_details where shiftid=`shift_id` and current_date() between fromdate and todate) then
			select 0 as updateStatus;
		else
			update shiftsmaster set status=`status_value` where id=`shift_id` ;
			select 1 as updateStatus;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `update_working_days_for_employee` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `update_working_days_for_employee`(
	employee_id int(11),
flag char(1),
applicable_date date
)
BEGIN
declare vw1 int(1);
declare vw2 int(1);
declare vw3 int(1);

set @month_name = (select monthname(applicable_date));
set @month_number = (select month(applicable_date));
set @summary_year = (select year(applicable_date));  
set @cycle = (select fn_get_leave_cycle_year());
set @v1 = 0;
set @v1 = (select day(last_day(applicable_date))); -- total number of days in the month

drop temporary table if exists month_table;
create temporary table month_table(
month_day date,
week_number int(2)
);

set @start_date = '';
set @start_date = (SELECT DATE_ADD(applicable_date, interval - DAY((applicable_date)) + 1 DAY));
set @end_date = '';
set @end_date = (SELECT DATE(LAST_DAY(applicable_date)));

WHILE (@start_date <= @end_date) DO
	INSERT INTO month_table(month_day,week_number) values (@start_date,week(@start_date));
	SET @start_date = (select date_add(@start_date,interval 1 day));
END WHILE;
-- select * from month_table;
select employee_weekoffs.weekoffday1, employee_weekoffs.weekoffday2, employee_weekoffs.weekoffday3
into vw1,vw2,vw3
from employee,employee_weekoffs where employee.status = 1
and employee.id = employee_weekoffs.empid
and employee.id = employee_id
and employee_weekoffs.effectivetodate is null;

if not exists(select * from employee_working_days where employee_working_days.empid = employee_id 
					  and employee_working_days.year = @summary_year) then
			  insert into employee_working_days(empid,year,january,february,march,april,may,june,july,august,september,october,november,december,total) values 
              (employee_id,@summary_year,0,0,0,0,0,0,0,0,0,0,0,0,0);
end if;            

if (flag = 'w') then -- when weekoffs are changed
	-- get previous weekoffs 
	set @w1 = '';
	set @w2 = '';
	set @w3 = '';
	select employee_weekoffs.weekoffday1, employee_weekoffs.weekoffday2, employee_weekoffs.weekoffday3
	into @w1,@w2,@w3
	from employee,employee_weekoffs where employee.status = 1
	and employee.id = employee_weekoffs.empid
	and employee.id = employee_id
	order by employee_weekoffs.id desc limit 1,1;
	set @n = 0;
	set @n = (select count(month_day) from month_table where -- weekoffs for previous weekoff duration in the month
					dayofweek(month_day) in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0))
			and (month_day >= @start_date)
			and (month_day < applicable_date)
			and (week(month_day) <> (select week(applicable_date))));
	set @n = @n + (select count(m.date) -- company holidays for previous weekoff duration in the month
			FROM holidaysmaster m, companyworklocationsmaster v  
			WHERE m.location = v.city 
			and v.id =(select s.locationid from employee_worklocations s where s.empid = employee_id order by s.id desc limit 1)
			and m.leave_cycle_year = @summary_year 
			and month(m.date) = @month_number
			and dayofweek(m.date) not in (ifnull(vw1,0),ifnull(vw2,0),ifnull(vw3,0)));
	set @n = @n + (select count(month_day) from month_table where -- weekoffs for updated weekoff duration in the month
				dayofweek(month_day) in (ifnull(vw1,0),ifnull(vw2,0),ifnull(vw3,0))
			and (month_day <= @end_date)
			and (month_day >= applicable_date)
			and (week(month_day) <> (select week(applicable_date))));         
	set @n = @n + (select count(m.date) -- company holidays for updated weekoff duration in the month
			FROM holidaysmaster m, companyworklocationsmaster v  
			WHERE m.location = v.city 
			and v.id =(select s.locationid from employee_worklocations s where s.empid = employee_id order by s.id desc limit 1)
			and m.leave_cycle_year = @summary_year 
			and month(m.date) = @month_number
			and dayofweek(m.date) not in (ifnull(vw1,0),ifnull(vw2,0),ifnull(vw3,0)));
	set @n = @n + (select case when weekoffday1 is not null then 1 else 0 end +
						case when weekoffday2 is not null then 1 else 0 end +
						case when weekoffday3 is not null then 1 else 0 end
				from employee_weekoffs where employee_weekoffs.empid = employee_id order by employee_weekoffs.id desc limit 1);          
	set @sqltext = '';
	set @sqltext = concat('UPDATE employee_working_days SET employee_working_days.',@month_name,' = (',@v1,' - ',@n,')',
		' where employee_working_days.empid = ',employee_id,' and employee_working_days.year = ',@summary_year);
	prepare stmt from @sqltext;
	execute stmt;
	deallocate prepare stmt;     
elseif (flag = 'b') then -- when branch is changed   
	set @w1 = '';
	set @w2 = '';
	set @w3 = '';
	select employee_weekoffs.weekoffday1, employee_weekoffs.weekoffday2, employee_weekoffs.weekoffday3
	into @w1,@w2,@w3
	from employee,employee_weekoffs where employee.status = 1
	and employee.id = employee_weekoffs.empid
	and employee.id = employee_id
	order by employee_weekoffs.id desc limit 1;
    set @n = 0;
	set @n = (select count(month_day) from month_table where dayofweek(month_day) in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0)));
    set @n = @n + (select count(m.date)
				   FROM holidaysmaster m, companyworklocationsmaster v  
			WHERE m.location = v.city 
			and v.id =(select s.locationid from employee_worklocations s where s.empid = employee_id order by s.id desc limit 1)
			and m.leave_cycle_year = @cycle 
            and (m.date >= @start_date)
			and (m.date < applicable_date)
			and dayofweek(m.date) not in (ifnull(vw1,0),ifnull(vw2,0),ifnull(vw3,0)));
    set @n = @n + (select count(m.date)
				   FROM holidaysmaster m, companyworklocationsmaster v  
			WHERE m.location = v.city 
			and v.id =(select s.locationid from employee_worklocations s where s.empid = employee_id order by s.id desc limit 1,1)
			and m.leave_cycle_year = @cycle
            and (m.date <= @end_date)
			and (m.date >= applicable_date)
			and dayofweek(m.date) not in (ifnull(vw1,0),ifnull(vw2,0),ifnull(vw3,0)));
    set @sqltext = '';
	set @sqltext = concat('UPDATE employee_working_days SET employee_working_days.',@month_name,' = (',@v1,' - ',@n,')',
		' where employee_working_days.empid = ',employee_id,' and employee_working_days.year = ',@summary_year);
	prepare stmt from @sqltext;
	execute stmt;
	deallocate prepare stmt;  
elseif (flag = 'n') then -- for a new employee   
    set @jdate = (select cast(employee.dateofjoin as date) from employee where employee.id = employee_id);
    if ((select month(@jdate)) = @month_number) then
		set @v1 = (select datediff(@end_date,@jdate)) + 1;
		set @w1 = '';
		set @w2 = '';
		set @w3 = '';
		select employee_weekoffs.weekoffday1, employee_weekoffs.weekoffday2, employee_weekoffs.weekoffday3
		into @w1,@w2,@w3
		from employee,employee_weekoffs where employee.status = 1
		and employee.id = employee_weekoffs.empid
		and employee.id = employee_id
		order by employee_weekoffs.id desc limit 1;
		set @n = 0;
		set @n = (select count(month_day) from month_table where dayofweek(month_day) in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0))
				and month_day between (select cast(@jdate as date)) and @end_date);
		set @n = @n + (select count(m.date)
					FROM holidaysmaster m, companyworklocationsmaster v  
				WHERE m.location = v.city 
				and v.id =(select s.locationid from employee_worklocations s where s.empid = employee_id order by s.id desc limit 1)
				and m.leave_cycle_year = @cycle 
				and m.date between (select cast(@jdate as date)) and @end_date
				and dayofweek(m.date) not in (ifnull(vw1,0),ifnull(vw2,0),ifnull(vw3,0)));
		set @sqltext = '';
		set @sqltext = concat('UPDATE employee_working_days SET employee_working_days.',@month_name,' = (',@v1,' - ',@n,')',
			                  ' where employee_working_days.empid = ',employee_id,' and employee_working_days.year = ',@summary_year);
		prepare stmt from @sqltext;
		execute stmt;
		deallocate prepare stmt; 
    end if;
end if; 
drop temporary table month_table;

	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `upload_employee_ctc_details` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `upload_employee_ctc_details`(
		file_path varchar(1000)
	)
	begin
	CREATE temporary TABLE `employee_ctc_from_pay_group_table` (
	  `empid` int(11) NOT NULL,
	  `pay_group_id` int(11),
	  `cost_to_company` decimal(15,2) NULL,
	  `basic_salary` decimal(15,2) NULL,
	  `dearness_allowance` decimal(15,2) DEFAULT NULL,
	  `house_rent_allowance` decimal(15,2) DEFAULT NULL,
	  `conveyance_allowance` decimal(15,2) DEFAULT NULL,
	  `travelling_allowance` decimal(15,2) DEFAULT NULL,
	  `transport_allowance` decimal(15,2) DEFAULT NULL,
	  `commission` decimal(15,2) DEFAULT NULL,
	  `bonus` decimal(15,2) DEFAULT NULL,
	  `gratuity` decimal(15,2) DEFAULT NULL,
	  `leave_encashment` decimal(15,2) DEFAULT NULL,
	  `fixed_allowance` decimal(15,2) DEFAULT NULL,
	  `children_education_allowance` decimal(15,2) DEFAULT NULL,
	  `hostel_expenditure_allowance` decimal(15,2) DEFAULT NULL,
	  `helper_allowance` decimal(15,2) DEFAULT NULL,
	  `uniform_allowance` decimal(15,2) DEFAULT NULL,
	  `daily_allowance` decimal(15,2) DEFAULT NULL,
	  `city_compensatory_allowance` decimal(15,2) DEFAULT NULL,
	  `overtime_allowance` decimal(15,2) DEFAULT NULL,
	  `telephone_allowance` decimal(15,2) DEFAULT NULL,
	  `fixed_medical_allowance` decimal(15,2) DEFAULT NULL,
	  `project_allowance` decimal(15,2) DEFAULT NULL,
	  `food_allowance` decimal(15,2) DEFAULT NULL,
	  `holiday_allowance` decimal(15,2) DEFAULT NULL,
	  `entertainment_allowance` decimal(15,2) DEFAULT NULL,
	  `custom_allowance` decimal(15,2) DEFAULT NULL,
	  `food_coupon` decimal(15,2) DEFAULT NULL,
	  `gift_coupon` decimal(15,2) DEFAULT NULL,
	  `research_allowance` decimal(15,2) DEFAULT NULL,
	  `books_and_periodicals_allowance` decimal(15,2) DEFAULT NULL,
	  `fuel_allowance` decimal(15,2) DEFAULT NULL,
	  `driver_allowance` decimal(15,2) DEFAULT NULL,
	  `leave_travel_allowance` decimal(15,2) DEFAULT NULL,
	  `vehicle_maintenance_allowance` decimal(15,2) DEFAULT NULL,
	  `telephone_and_internet_allowance` decimal(15,2) DEFAULT NULL
	  );

	drop temporary table if exists employee_ctc_from_excel_sheet_table;
	create temporary TABLE `employee_ctc_from_excel_sheet_table` (
	  `empid` int(11) NOT NULL,
	  `cost_to_company` decimal(15,2) NULL,
	  `basic_salary` decimal(15,2) NULL,
	  `dearness_allowance` decimal(15,2) DEFAULT NULL,
	  `house_rent_allowance` decimal(15,2) DEFAULT NULL,
	  `conveyance_allowance` decimal(15,2) DEFAULT NULL,
	  `travelling_allowance` decimal(15,2) DEFAULT NULL,
	  `transport_allowance` decimal(15,2) DEFAULT NULL,
	  `commission` decimal(15,2) DEFAULT NULL,
	  `bonus` decimal(15,2) DEFAULT NULL,
	  `gratuity` decimal(15,2) DEFAULT NULL,
	  `leave_encashment` decimal(15,2) DEFAULT NULL,
	  `fixed_allowance` decimal(15,2) DEFAULT NULL,
	  `children_education_allowance` decimal(15,2) DEFAULT NULL,
	  `hostel_expenditure_allowance` decimal(15,2) DEFAULT NULL,
	  `helper_allowance` decimal(15,2) DEFAULT NULL,
	  `uniform_allowance` decimal(15,2) DEFAULT NULL,
	  `daily_allowance` decimal(15,2) DEFAULT NULL,
	  `city_compensatory_allowance` decimal(15,2) DEFAULT NULL,
	  `overtime_allowance` decimal(15,2) DEFAULT NULL,
	  `telephone_allowance` decimal(15,2) DEFAULT NULL,
	  `fixed_medical_allowance` decimal(15,2) DEFAULT NULL,
	  `project_allowance` decimal(15,2) DEFAULT NULL,
	  `food_allowance` decimal(15,2) DEFAULT NULL,
	  `holiday_allowance` decimal(15,2) DEFAULT NULL,
	  `entertainment_allowance` decimal(15,2) DEFAULT NULL,
	  `custom_allowance` decimal(15,2) DEFAULT NULL,
	  `food_coupon` decimal(15,2) DEFAULT NULL,
	  `gift_coupon` decimal(15,2) DEFAULT NULL,
	  `research_allowance` decimal(15,2) DEFAULT NULL,
	  `books_and_periodicals_allowance` decimal(15,2) DEFAULT NULL,
	  `fuel_allowance` decimal(15,2) DEFAULT NULL,
	  `driver_allowance` decimal(15,2) DEFAULT NULL,
	  `leave_travel_allowance` decimal(15,2) DEFAULT NULL,
	  `vehicle_maintenance_allowance` decimal(15,2) DEFAULT NULL,
	  `telephone_and_internet_allowance` decimal(15,2) DEFAULT NULL
	  );
	  
	set @file_text = '';
	set @file_text = concat('LOAD DATA LOCAL INFILE ''',file_path,''' INTO TABLE employee_ctc_from_excel_sheet_table 
		CHARACTER SET utf8
		FIELDS TERMINATED BY '','' 
		ENCLOSED BY ''"'' 
		LINES TERMINATED BY ''\\n'' 
		IGNORE 1 LINES');
	prepare stmt from @file_text;
	execute stmt;
	deallocate prepare stmt;  
	-- select @file_text;



	drop temporary table employee_ctc_from_pay_group_table;
	drop temporary table employee_ctc_from_excel_sheet_table;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `validatelastpasswordmatch` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `validatelastpasswordmatch`(IN `id` INT, IN `login` VARCHAR(255),IN `currentpwd` varchar(1024),IN `newpwd` varchar(1024))
	BEGIN
		if (`currentpwd` is null) then -- forgot password case
			if exists(select * from employee_login where employee_login.id=`id` and employee_login.login=`login`) then 
				if exists(select * from employee_login where employee_login.id=`id` and employee_login.login=`login` and employee_login.password=MD5(`newpwd`)) then select 1;
				else select 0;
				end if;
			else
				select -1;-- this is the case of current password not matched
			end if;
		else
			if exists(select * from employee_login where employee_login.id=`id` and employee_login.login=`login` and employee_login.password=MD5(`currentpwd`)) then 
				if exists(select * from employee_login where employee_login.id=`id` and employee_login.login=`login` and employee_login.password=MD5(`newpwd`)) then select 1;
				else select 0;
				end if;
			else
				select -1;-- this is the case of current password not matched
			end if;
		end if;
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `validateleave` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `validateleave`(
	IN `employee_id` INT(11),
	IN `leavetype_id` INT(11),
	IN `fromdate` date,
	IN `todate` date,
	IN `fromdatehalfday` bit,
	IN `todatehalfday` bit,
	IN `isdocuploaded` bit,
	in `leave_id` int(11)
	)
	BEGIN
		DECLARE vrulename varchar(255);
		DECLARE vrulevalue varchar(255);
		DECLARE vdate date;
		DECLARE temp_cursor CURSOR FOR select rulename,rulevalue from rules;
		
		-- getting the list of holidays of this employee's location for this leave cycle year
		declare holidays_cursor cursor for select distinct v.date from holidaysmaster v 
				where v.location = (select city from companyworklocationsmaster where id =
									(SELECT employee_worklocations.locationid FROM employee_worklocations 
									 WHERE employee_worklocations.empid = `employee_id` order by id desc limit 1))
				and v.leave_cycle_year = (select fn_get_leave_cycle_year()); 
		
		DROP TEMPORARY TABLE IF EXISTS rules;
		CREATE TEMPORARY TABLE rules(
			rulename varchar(255),
			rulevalue varchar(64)
		);
		DROP TEMPORARY TABLE if exists em;
		CREATE TEMPORARY TABLE em(
			message varchar(255),
			message_string varchar(1000)
		);
		DROP TEMPORARY TABLE if exists datetable;
		create temporary table datetable(
			ldate date,
			weekday int(1),
			companyholiday int(1),
			dvalue varchar(8)
		);
		-- filling all days selected for leave into a table
		set @d = 0;
		while date_add(`fromdate`, interval @d day) <= `todate` do
			insert into datetable(ldate,weekday,companyholiday,dvalue) values
			(date_add(`fromdate`, interval @d day),dayofweek(date_add(`fromdate`, interval @d day)),0,1);
			set @d = @d + 1;
		end while;
		
		drop temporary table if exists weekoffs_table;
		create temporary table weekoffs_table (
			weekoff1 int(11),
			weekoff2 int(11),
			weekoff3 int(11),
			effective_fromdate date,
			effective_todate date
		);
		
		insert into weekoffs_table(weekoff1,weekoff2,weekoff3,effective_fromdate,effective_todate) 
		select weekoffday1,weekoffday2,weekoffday3,effectivefromdate,effectivetodate 
		from employee_weekoffs
		where employee_weekoffs.empid = employee_id; 
		
		OPEN holidays_cursor;
			set @v = 0;
			set @v = found_rows();
			set @w = 0;
			WHILE @w < @v do
			set vdate = null;
			fetch holidays_cursor into vdate;
			-- updating companyholiday flag to 1 on company holidays in the selected leave range
			if (vdate between `fromdate` and `todate`) then
				update datetable set datetable.companyholiday = case when datetable.ldate = vdate then 1
																	 else datetable.companyholiday end; 
			end if;
			SET @w = @w + 1;
			END WHILE;
		close holidays_cursor;
		-- select * from datetable;
		IF(`leave_id` is null) then
			-- leavetype not configured as advanced leave
			IF(`leavetype_id` <> (SELECT lm_leavesmaster.id FROM lm_leavesmaster WHERE lm_leavesmaster.leavename = 'Advanced Leave')) THEN
		
			-- inserting all configured rules for selected leave type into temp table
			insert into rules(rulename,rulevalue)  
			SELECT lm_rulemaster.rulename,lm_rulevalues.value
			from lm_rulemaster,lm_rulevalues,
			(select max(id) as id, ruleid from lm_rulevalues
			where lm_rulevalues.leavetypeid = `leavetype_id` group by ruleid order by ruleid) ids
			where lm_rulemaster.id=lm_rulevalues.ruleid
			and lm_rulemaster.id = ids.ruleid
			and ids.id = lm_rulevalues.id
			and lm_rulevalues.status = 'Active'
			and lm_rulevalues.leavetypeid= `leavetype_id`;
			
			insert into rules(rulename,rulevalue)  
			SELECT lm_rulemaster.rulename,lm_rulevalues.value
			from lm_rulemaster,lm_rulevalues,
			(select max(id) as id, ruleid from lm_rulevalues
			where lm_rulevalues.leavetypeid is null group by ruleid order by ruleid) ids
			where lm_rulemaster.id=lm_rulevalues.ruleid
			and lm_rulemaster.id = ids.ruleid
			and ids.id = lm_rulevalues.id
			and lm_rulevalues.status = 'Active'
			and lm_rulevalues.leavetypeid is null;
			
			set @freq = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_CREDIT_FREQUENCY');
			if (@freq in (select lm_rulevalues.ruleid from lm_rulevalues where lm_rulevalues.leavetypeid = `leavetype_id`)) then
			
				set @leave_balance = (select ifnull(lm_employeeleavebalance.balance,0) from lm_employeeleavebalance where lm_employeeleavebalance.leavetypeid = `leavetype_id` and lm_employeeleavebalance.empid = `employee_id`
									and lm_employeeleavebalance.leave_cycle_year	= fn_get_leave_cycle_year());
									
				SET @leave_cycle_month = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
										select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
										lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));
				set @current_year = year(current_timestamp());                   
				set @current_month = month(current_timestamp());
				if(@leave_cycle_month = 1) then
					set @current_year = @current_year;
				elseif ((@leave_cycle_month <> 1) and (@leave_cycle_month <= @current_month)) then
					set @current_year = @current_year;
				elseif ((@leave_cycle_month <> 1) and (@leave_cycle_month > @current_month)) then
					set @current_year = @current_year - 1;
				end if;                          
				-- setting leave cycle start date
				set @leave_cycle_start = concat(@current_year,'-',@leave_cycle_month,'-01');
				if(@leave_cycle_month = 1) then
					set @leave_cycle_end = concat(@current_year,'-','12','-01');
				elseif(@leave_cycle_month <> 1) then
					set @leave_cycle_end = concat((@current_year + 1),'-',(@leave_cycle_month - 1),'-01');
				end if;
				set @leave_cycle_end = (select last_day(@leave_cycle_end));
				set @leave_count = (select count(lm_employeeleaves.id) from lm_employeeleaves where lm_employeeleaves.empid = `employee_id` and 
									lm_employeeleaves.leavetype = `leavetype_id` and lm_employeeleaves.fromdate between @leave_cycle_start and @leave_cycle_end
									and lm_employeeleaves.leavestatus in ('Approved','Submitted'));
				
				set @last_leave = (select lm_employeeleaves.todate from lm_employeeleaves where lm_employeeleaves.leavetype = `leavetype_id` and 
								lm_employeeleaves.empid = `employee_id` and lm_employeeleaves.leavestatus in ('Approved','Submitted')
								order by lm_employeeleaves.todate desc limit 1); 
				
				set @total_leaves = (select count(lm_employeeleaves.id) from lm_employeeleaves where lm_employeeleaves.empid = `employee_id` and 
									lm_employeeleaves.leavetype = `leavetype_id` and lm_employeeleaves.leave_cycle_year = fn_get_leave_cycle_year()
									and lm_employeeleaves.leavestatus in ('Approved','Submitted'));                      
				
				set @hvalue = 0;
				set @wvalue = 0;
				
				OPEN temp_cursor;
					set @i = 0;
					set @i = found_rows();
					set @j = 0;
					WHILE @j < @i do
					set vrulename = '';
					set vrulevalue = '';
					fetch temp_cursor into vrulename,vrulevalue;
					
					-- updating dvalue value to 0 on company holidays if below rule equals 0
					if (vrulename = 'LEAVES_COMPANY_HOLIDAYS_INCLUDED') then
						SET @hvalue = vrulevalue;	
						if (@hvalue = 0) then
						update datetable, weekoffs_table 
						set datetable.dvalue = 0 
						where datetable.weekday not in (ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))
						and companyholiday = 1
						and ((weekoffs_table.effective_fromdate <= datetable.ldate and datetable.ldate <= weekoffs_table.effective_todate)
							or (datetable.ldate >= effective_fromdate and effective_todate is null));     
						end if; 
					end if;
					-- updating dvalue value to 0 on weekoffs if below rule equals 0
					if (vrulename = 'LEAVES_WEEKENDS_INCLUDED') then
						set @wvalue = vrulevalue;
						if (@wvalue = 0) then
						-- update datetable set datetable.dvalue = 0 where datetable.weekday in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0));
						update datetable, weekoffs_table 
						set datetable.dvalue = 0 
						where datetable.weekday in (ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))
						and ((weekoffs_table.effective_fromdate <= datetable.ldate and datetable.ldate <= weekoffs_table.effective_todate)
							or (datetable.ldate >= effective_fromdate and effective_todate is null));    
						end if;
					end if;
					
					set @j = @j + 1;
					end while;
				close temp_cursor;
				
				OPEN temp_cursor;
					set @i = 0;
					set @i = found_rows();
					set @j = 0;
					WHILE @j < @i do
					set vrulename = '';
					set vrulevalue = '';
					fetch temp_cursor into vrulename,vrulevalue;
					
					-- handling half days 
					if (`fromdate` < `todate`) then
						if (`fromdatehalfday` = 1) then
						update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
						end if;
						if (`todatehalfday` = 1) then
						update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
						end if;
					elseif (`fromdate` = `todate`) then
						if ((`fromdatehalfday` = 1) and (`todatehalfday` = 0)) then
						update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
						elseif ((`fromdatehalfday` = 0) and (`todatehalfday` = 1)) then
						update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
						end if;
					end if;
					
					set @leave_duration = 0;
					set @leave_duration = (select sum(cast(datetable.dvalue as unsigned)) from datetable);
					
					-- verifying if there is balance
					if (@leave_balance < @leave_duration) then
						if not exists(select * from em where em.message = 'LM109') then
							insert into em(message) values('LM109');
						end if;
					elseif (@leave_balance >= @leave_duration) then
					-- filling errormessages table with errors
						if (vrulename = 'LEAVES_MAX_CAP_FOR_ONE_INSTANCE' and vrulevalue < (select sum(datetable.dvalue) from datetable where datetable.weekday not in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0)) and datetable.companyholiday = 0)) then
							insert into em(message) values('LM97');
						end if;
						if (vrulename = 'LEAVES_MIN_DAYS_PRIOR_APPLICATION' and vrulevalue > (datediff(`fromdate`,curdate())) and (`fromdate` >= curdate())) then
							set @prior_count = (select fn_get_min_days_prior_value_for_leave_type(`leavetype_id`));
							insert into em(message) values('LM98');
						end if;
						if (vrulename = 'LEAVES_DURATION_FOR_BACKDATED_LEAVES' and (vrulevalue < (datediff(curdate(),`fromdate`))) and (`fromdate` < curdate())) then
							insert into em(message) values('LM143');
							-- select vrulevalue,(datediff(`fromdate`,curdate()));
						end if;
						if (vrulename = 'LEAVES_MAX_AVAIL_COUNT' and vrulevalue <= @leave_count) then
							insert into em(message) values('LM99'); 
						end if;
						if (vrulename = 'MAX_AVAIL_COUNT' and vrulevalue <= @total_leaves) then
							insert into em(message) values('LM102');
						end if;
						if (vrulename = 'LEAVES_MIN_DAYS_FOR_DOCUMENT_UPLOAD' and cast(vrulevalue as unsigned) <= @leave_duration and isdocuploaded = 0) then
							insert into em(message) values('LM107');
						end if;
					end if;
					
				set @j = @j + 1;
					end while;
				close temp_cursor;    
									
				
				-- select * from datetable;   
				set @fileupload = (select case when exists(select em.message from em where em.message = 'LM107') then 0 else 1 end);
				update em,lm_errormessages
				set em.message_string = lm_errormessages.errormessage
				where em.message = lm_errormessages.errorcode;
				
				update em
				set em.message_string = concat(em.message_string,' ',@prior_count)
				where em.message = 'LM98';
				
				if exists(select * from em) then
				select json_arrayagg(json_object(
				'leavecount',	(select sum(datetable.dvalue) from datetable),
				'message',		message_string,
				'fileupload', 	@fileupload
				)) as count_json
				from em;
			else
				select json_arrayagg(json_object(
				'leavecount',	(select sum(datetable.dvalue) from datetable), 
				'message',		1,
				'fileupload', 1
				)) as count_json ;
			end if;   
			-- for LoP ,bereavement, marriage, maternity and paternity leave types    
			elseif (@freq not in (select lm_rulevalues.ruleid from lm_rulevalues where lm_rulevalues.leavetypeid = `leavetype_id`)) then
			
			set @leave_balance = (select lm_employeeleavebalance.balance from lm_employeeleavebalance where lm_employeeleavebalance.leavetypeid = `leavetype_id` 
								and lm_employeeleavebalance.empid = `employee_id`);
			-- select @leave_balance;  
			set @leave_count = (select count(lm_employee_utilized_event_leaves.id) from lm_employee_utilized_event_leaves where lm_employee_utilized_event_leaves.empid = `employee_id` and 
								lm_employee_utilized_event_leaves.leavetype = `leavetype_id`
								and lm_employee_utilized_event_leaves.leavestatus in ('Approved','Submitted'));
			
			set @last_leave = (select lm_employee_utilized_event_leaves.todate from lm_employee_utilized_event_leaves where lm_employee_utilized_event_leaves.leavetype = `leavetype_id` and 
							lm_employee_utilized_event_leaves.empid = `employee_id` and lm_employee_utilized_event_leaves.leavestatus in ('Approved','Submitted') 
							order by lm_employee_utilized_event_leaves.todate desc limit 1); 
							
			set @total_leaves = (select count(lm_employee_utilized_event_leaves.id) from lm_employee_utilized_event_leaves 
								where lm_employee_utilized_event_leaves.empid = `employee_id` and 
								lm_employee_utilized_event_leaves.leavetype = `leavetype_id` and lm_employee_utilized_event_leaves.leavestatus in ('Approved','Submitted'));                      
			
			OPEN temp_cursor;
				set @i = 0;
				set @i = found_rows();
				set @j = 0;
				WHILE @j < @i do
				set vrulename = '';
				set vrulevalue = '';
				fetch temp_cursor into vrulename,vrulevalue;
				
				-- updating dvalue value to 0 on company holidays if below rule equals 0
					if (vrulename = 'LEAVES_COMPANY_HOLIDAYS_INCLUDED') then
						SET @hvalue = vrulevalue;	
						if (@hvalue = 0) then
						update datetable, weekoffs_table 
						set datetable.dvalue = 0 
						where datetable.weekday not in (ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))
						and companyholiday = 1
						and ((weekoffs_table.effective_fromdate <= datetable.ldate and datetable.ldate <= weekoffs_table.effective_todate)
							or (datetable.ldate >= effective_fromdate and effective_todate is null));     
						end if; 
					end if;
					-- updating dvalue value to 0 on weekoffs if below rule equals 0
					if (vrulename = 'LEAVES_WEEKENDS_INCLUDED') then
						set @wvalue = vrulevalue;
						if (@wvalue = 0) then
						-- update datetable set datetable.dvalue = 0 where datetable.weekday in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0));
						update datetable, weekoffs_table 
						set datetable.dvalue = 0 
						where datetable.weekday in (ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))
						and ((weekoffs_table.effective_fromdate <= datetable.ldate and datetable.ldate <= weekoffs_table.effective_todate)
							or (datetable.ldate >= effective_fromdate and effective_todate is null));    
						end if;
					end if;
				
				-- handling half days 
				if (`fromdate` < `todate`) then
					if (`fromdatehalfday` = 1) then
					update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
					end if;
					if (`todatehalfday` = 1) then
					update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
					end if;
				elseif (`fromdate` = `todate`) then
					if ((`fromdatehalfday` = 1) and (`todatehalfday` = 0)) then
					update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
					elseif ((`fromdatehalfday` = 0) and (`todatehalfday` = 1)) then
					update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
					end if;
				end if;
				
				set @leave_duration = 0;
				set @leave_duration = (select sum(cast(datetable.dvalue as unsigned)) from datetable);
				
				-- verifying if there is balance
				if ((@leave_balance < @leave_duration) and (`leavetype_id` <> 10)) then
					if not exists(select * from em where em.message = 'LM109') then
						insert into em(message) values('LM109');
					end if;
				elseif ((@leave_balance >= @leave_duration) and (`leavetype_id` <> 10)) then
				-- filling errormessages table with errors
					if (vrulename = 'LEAVES_MAX_CAP_FOR_ONE_INSTANCE' and vrulevalue < (select sum(datetable.dvalue) from datetable where datetable.weekday not in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0)) and datetable.companyholiday = 0)) then
						insert into em(message) values('LM97');
					end if;
					if (vrulename = 'LEAVES_MIN_DAYS_PRIOR_APPLICATION' and vrulevalue > (datediff(`fromdate`,curdate())) and (`fromdate` >= curdate())) then
						set @prior_count = (select fn_get_min_days_prior_value_for_leave_type(`leavetype_id`));
						-- select @prior_count;
						insert into em(message) values('LM98');
					end if;
					if (vrulename = 'LEAVES_DURATION_FOR_BACKDATED_LEAVES' and vrulevalue < (datediff(curdate(),`fromdate`)) and `fromdate` < curdate()) then
						insert into em(message) values('LM143');
					end if;
					if (vrulename = 'LEAVES_MAX_AVAIL_COUNT' and vrulevalue <= @leave_count) then
						insert into em(message) values('LM99'); 
					end if;
					if (coalesce(@last_leave,0) <> 0) then
						if (vrulename = 'LEAVES_GAP_BETWEEN_TERMS' and vrulevalue > (select timestampdiff(year,@last_leave,curdate()))
							and @total_leaves > 0) then
							insert into em(message) values('LM101');
						end if;    
					end if;
					if (vrulename = 'MAX_AVAIL_COUNT' and vrulevalue <= @total_leaves) then
						insert into em(message) values('LM102');
					end if;
					if (vrulename = 'LEAVES_MAX_COUNT_PER_TERM' and vrulevalue < @leave_duration) then
						insert into em(message) values('LM103');
					end if;
					if (vrulename = 'LEAVES_MIN_DAYS_FOR_DOCUMENT_UPLOAD' and cast(vrulevalue as unsigned) <= @leave_duration and isdocuploaded = 0) then
						insert into em(message) values('LM107');
					end if;
				end if;
				
			set @j = @j + 1;
				end while;
			close temp_cursor;    
								
			
			-- select * from datetable;   
			set @fileupload = (select case when exists(select em.message from em where em.message = 'LM107') then 0 else 1 end);
			update em,lm_errormessages
				set em.message_string = lm_errormessages.errormessage
				where em.message = lm_errormessages.errorcode;
				
				update em
				set em.message_string = concat(em.message_string,' ',@prior_count)
				where em.message = 'LM98';
			if (exists(select * from em)) then --  and (leavetype_id <> 10)
					select json_arrayagg(json_object(
					'leavecount',	(select sum(datetable.dvalue) from datetable),
					'message',		message_string,
					'fileupload', 	@fileupload
					)) as count_json
					from em;
			/*	elseif (leavetype_id = 10) then
					select json_arrayagg(json_object(
					'leavecount',	(select sum(datetable.dvalue) from datetable), 
					'message',		1,
					'fileupload', 1
					)) as count_json ;    */
				else
					select json_arrayagg(json_object(
					'leavecount',	(select sum(datetable.dvalue) from datetable), 
					'message',		1,
					'fileupload', 1
					)) as count_json ;
				end if;
			end if;
			-- leave type configured as advanced leave
			ELSEIF (`leavetype_id` = (SELECT lm_leavesmaster.id FROM lm_leavesmaster WHERE lm_leavesmaster.leavename = 'Advanced Leave')) THEN
			
			SET @ltype = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.leavetypeid = `leavetype_id` and lm_rulevalues.ruleid = 
			(select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVETYPE_THAT_CAN_BE_AVAILED_IN_ADVANCE') 
			order by lm_rulevalues.id desc limit 1);
			
			insert into rules(rulename,rulevalue)  
			SELECT lm_rulemaster.rulename,lm_rulevalues.value
			from lm_rulemaster,lm_rulevalues,
			(select max(id) as id, ruleid from lm_rulevalues
			where lm_rulevalues.leavetypeid = @ltype group by ruleid order by ruleid) ids
			where lm_rulemaster.id=lm_rulevalues.ruleid
			and lm_rulemaster.id = ids.ruleid
			and ids.id = lm_rulevalues.id
			and lm_rulevalues.status = 'Active'
			and lm_rulevalues.leavetypeid= @ltype;
			
			insert into rules(rulename,rulevalue)  
			SELECT lm_rulemaster.rulename,lm_rulevalues.value
			from lm_rulemaster,lm_rulevalues,
			(select max(id) as id, ruleid from lm_rulevalues
			where lm_rulevalues.leavetypeid is null group by ruleid order by ruleid) ids
			where lm_rulemaster.id=lm_rulevalues.ruleid
			and lm_rulemaster.id = ids.ruleid
			and ids.id = lm_rulevalues.id
			and lm_rulevalues.status = 'Active'
			and lm_rulevalues.leavetypeid is null;
								
			SET @leave_cycle_month = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
									select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
									lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));
			set @current_year = year(current_timestamp());                   
			set @current_month = month(current_timestamp());
			if(@leave_cycle_month = 1) then
				set @current_year = @current_year;
			elseif ((@leave_cycle_month <> 1) and (@leave_cycle_month <= @current_month)) then
				set @current_year = @current_year;
			elseif ((@leave_cycle_month <> 1) and (@leave_cycle_month > @current_month)) then
				set @current_year = @current_year - 1;
			end if;                          
			set @leave_cycle_start = concat(@current_year,'-',@leave_cycle_month,'-01');
			if(@leave_cycle_month = 1) then
				set @leave_cycle_end = concat(@current_year,'-','12','-01');
			elseif(@leave_cycle_month <> 1) then
				set @leave_cycle_end = concat((@current_year + 1),'-',(@leave_cycle_month - 1),'-01');
			end if;
			set @leave_cycle_end = (select last_day(@leave_cycle_end));
			set @leave_count = (select count(lm_employeeleaves.id) from lm_employeeleaves where lm_employeeleaves.empid = `employee_id` and 
								lm_employeeleaves.leavetype = @ltype and lm_employeeleaves.fromdate between @leave_cycle_start and @leave_cycle_end
								and lm_employeeleaves.leavestatus in ('Approved','Submitted'));
			
			set @last_leave = (select lm_employeeleaves.todate from lm_employeeleaves where lm_employeeleaves.leavetype = @ltype and 
							lm_employeeleaves.empid = `employee_id` and lm_employeeleaves.leave_cycle_year = fn_get_leave_cycle_year() 
							and lm_employeeleaves.leavestatus in ('Approved','Submitted') order by lm_employeeleaves.todate desc limit 1); 
			set @total_leaves = (select count(lm_employeeleaves.id) from lm_employeeleaves where lm_employeeleaves.empid = `employee_id` and 
								lm_employeeleaves.leavetype = @ltype and lm_employeeleaves.leave_cycle_year = fn_get_leave_cycle_year()
								and lm_employeeleaves.leavestatus in ('Approved','Submitted')); 
			set @max_count = 0;
			set @max_count = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster 
							  where lm_rulemaster.rulename = 'LEAVES_MAX_COUNT_PER_YEAR') and lm_rulevalues.leavetypeid = @ltype
							  order by lm_rulevalues.id desc limit 1);  
			set @leave_balance = (@max_count - @total_leaves);                  
			
			set @hvalue = 0;
			set @wvalue = 0;
			
			OPEN temp_cursor;
				set @i = 0;
				set @i = found_rows();
				set @j = 0;
				WHILE @j < @i do
				set vrulename = '';
				set vrulevalue = '';
				fetch temp_cursor into vrulename,vrulevalue;
				
				if (vrulename = 'LEAVES_COMPANY_HOLIDAYS_INCLUDED') then
					SET @hvalue = vrulevalue;	
					if (@hvalue = 0) then
					update datetable, weekoffs_table 
						set datetable.dvalue = 0 
						where datetable.weekday not in (ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))
						and companyholiday = 1
						and ((weekoffs_table.effective_fromdate <= datetable.ldate and datetable.ldate <= weekoffs_table.effective_todate)
							or (datetable.ldate >= effective_fromdate and effective_todate is null)); 
					end if; 
				end if;
				if (vrulename = 'LEAVES_WEEKENDS_INCLUDED') then
					set @wvalue = vrulevalue;
					if (@wvalue = 0) then
					update datetable, weekoffs_table 
						set datetable.dvalue = 0 
						where datetable.weekday in (ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))
						and ((weekoffs_table.effective_fromdate <= datetable.ldate and datetable.ldate <= weekoffs_table.effective_todate)
							or (datetable.ldate >= effective_fromdate and effective_todate is null));   
					end if;
				end if;
				
				set @j = @j + 1;
				end while;
			close temp_cursor;
			
			OPEN temp_cursor;
				set @i = 0;
				set @i = found_rows();
				set @j = 0;
				WHILE @j < @i do
				set vrulename = '';
				set vrulevalue = '';
				fetch temp_cursor into vrulename,vrulevalue;
				
				if (`fromdate` < `todate`) then
					if (`fromdatehalfday` = 1) then
					update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
					end if;
					if (`todatehalfday` = 1) then
					update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
					end if;
				elseif (`fromdate` = `todate`) then
					if ((`fromdatehalfday` = 1) and (`todatehalfday` = 0)) then
					update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
					elseif ((`fromdatehalfday` = 0) and (`todatehalfday` = 1)) then
					update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
					end if;
				end if;
				
				set @leave_duration = 0;
				set @leave_duration = (select sum(cast(datetable.dvalue as unsigned)) from datetable);
				
				-- verifying if there is balance
					if (@leave_balance < @leave_duration) then
						if not exists(select * from em where em.message = 'LM109') then
							insert into em(message) values('LM109');
						end if;
					elseif (@leave_balance >= @leave_duration) then
					-- filling errormessages table with errors
					if (vrulename = 'LEAVES_MAX_CAP_FOR_ONE_INSTANCE' and vrulevalue < (select sum(datetable.dvalue) from datetable where datetable.weekday not in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0)) and datetable.companyholiday = 0)) then
						insert into em(message) values('LM97');
					end if;
					if (vrulename = 'LEAVES_MIN_DAYS_PRIOR_APPLICATION' and vrulevalue > (datediff(`fromdate`,curdate())) and (`fromdate` >= curdate())) then
						set @prior_count = (select fn_get_min_days_prior_value_for_leave_type(`leavetype_id`));
						insert into em(message) values('LM98');
					end if;
					if (vrulename = 'LEAVES_DURATION_FOR_BACKDATED_LEAVES' and vrulevalue < (datediff(curdate(),`fromdate`)) and `fromdate` < curdate()) then
						insert into em(message) values('LM143');
					end if;
					if (vrulename = 'LEAVES_MAX_AVAIL_COUNT' and vrulevalue <= @leave_count) then
						insert into em(message) values('LM99'); 
					end if;
					if (vrulename = 'MAX_AVAIL_COUNT' and vrulevalue <= @total_leaves) then
						insert into em(message) values('LM102');
					end if;
					if (vrulename = 'LEAVES_MIN_DAYS_FOR_DOCUMENT_UPLOAD' and cast(vrulevalue as unsigned) <= @leave_duration and isdocuploaded = 0) then
						insert into em(message) values('LM107');
					end if;
				end if;
				
			set @j = @j + 1;
				end while;
			close temp_cursor;    
								
			-- select * from datetable;       
			set @fileupload = (select case when exists(select em.message from em where em.message = 'LM107') then 0 else 1 end);
			update em,lm_errormessages
			set em.message_string = lm_errormessages.errormessage
			where em.message = lm_errormessages.errorcode;
				
			update em
			set em.message_string = concat(em.message_string,' ',@prior_count)
			where em.message = 'LM98';
				
			if exists(select * from em) then
				select json_arrayagg(json_object(
				'leavecount',	(select sum(datetable.dvalue) from datetable),
				'message',		message_string,
				'fileupload', 	@fileupload
				)) as count_json
				from em;
			else
				select json_arrayagg(json_object(
				'leavecount',	(select sum(datetable.dvalue) from datetable), 
				'message',		1,
				'fileupload', 1
				)) as count_json ;
			end if;        
			END IF;
		ELSEIF(`leave_id` is not null) then 
		set @edit_leave_count = (select lm_employeeleaves.leavecount from lm_employeeleaves where lm_employeeleaves.id = `leave_id`);
		-- leavetype not configured as advanced leave
		IF(`leavetype_id` <> (SELECT lm_leavesmaster.id FROM lm_leavesmaster WHERE lm_leavesmaster.leavename = 'Advanced Leave')) THEN

		-- inserting all configured rules for selected leave type into temp table
		insert into rules(rulename,rulevalue)  
		SELECT lm_rulemaster.rulename,lm_rulevalues.value
		from lm_rulemaster,lm_rulevalues,
		(select max(id) as id, ruleid from lm_rulevalues
		where lm_rulevalues.leavetypeid = `leavetype_id` group by ruleid order by ruleid) ids
		where lm_rulemaster.id=lm_rulevalues.ruleid
		and lm_rulemaster.id = ids.ruleid
		and ids.id = lm_rulevalues.id
		and lm_rulevalues.status = 'Active'
		and lm_rulevalues.leavetypeid= `leavetype_id`;
		
		insert into rules(rulename,rulevalue)  
		SELECT lm_rulemaster.rulename,lm_rulevalues.value
		from lm_rulemaster,lm_rulevalues,
		(select max(id) as id, ruleid from lm_rulevalues
		where lm_rulevalues.leavetypeid is null group by ruleid order by ruleid) ids
		where lm_rulemaster.id=lm_rulevalues.ruleid
		and lm_rulemaster.id = ids.ruleid
		and ids.id = lm_rulevalues.id
		and lm_rulevalues.status = 'Active'
		and lm_rulevalues.leavetypeid is null;
		
		set @freq = (select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVES_CREDIT_FREQUENCY');
		if (@freq in (select lm_rulevalues.ruleid from lm_rulevalues where lm_rulevalues.leavetypeid = `leavetype_id`)) then
		
			set @leave_balance = ((select lm_employeeleavebalance.balance from lm_employeeleavebalance where lm_employeeleavebalance.leavetypeid = `leavetype_id` and lm_employeeleavebalance.empid = `employee_id`
								and lm_employeeleavebalance.leave_cycle_year = fn_get_leave_cycle_year()) + @edit_leave_count);
								
			SET @leave_cycle_month = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
									select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
									lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));
			set @current_year = year(current_timestamp());                   
			set @current_month = month(current_timestamp());
			if(@leave_cycle_month = 1) then
				set @current_year = @current_year;
			elseif ((@leave_cycle_month <> 1) and (@leave_cycle_month <= @current_month)) then
				set @current_year = @current_year;
			elseif ((@leave_cycle_month <> 1) and (@leave_cycle_month > @current_month)) then
				set @current_year = @current_year - 1;
			end if;                          
			-- setting leave cycle start date
			set @leave_cycle_start = concat(@current_year,'-',@leave_cycle_month,'-01');
			if(@leave_cycle_month = 1) then
				set @leave_cycle_end = concat(@current_year,'-','12','-01');
			elseif(@leave_cycle_month <> 1) then
				set @leave_cycle_end = concat((@current_year + 1),'-',(@leave_cycle_month - 1),'-01');
			end if;
			set @leave_cycle_end = (select last_day(@leave_cycle_end));
			set @leave_count = ((select count(lm_employeeleaves.id) from lm_employeeleaves where lm_employeeleaves.empid = `employee_id` and 
								lm_employeeleaves.leavetype = `leavetype_id` and lm_employeeleaves.fromdate between @leave_cycle_start and @leave_cycle_end
								and lm_employeeleaves.leavestatus in ('Approved','Submitted')) - 1);
			
			set @last_leave = (select lm_employeeleaves.todate from lm_employeeleaves where lm_employeeleaves.leavetype = `leavetype_id` and 
							   lm_employeeleaves.empid = `employee_id` and lm_employeeleaves.leavestatus in ('Approved','Submitted') and 
							   lm_employeeleaves.id <> `leave_id` order by lm_employeeleaves.todate desc limit 1); 
			
			set @total_leaves = (select count(lm_employeeleaves.id) from lm_employeeleaves where lm_employeeleaves.empid = `employee_id` and 
								 lm_employeeleaves.leavetype = `leavetype_id` and lm_employeeleaves.leave_cycle_year = fn_get_leave_cycle_year()
								 and lm_employeeleaves.leavestatus in ('Approved','Submitted') and
								 lm_employeeleaves.id <> `leave_id`);                      
			
			set @hvalue = 0;
			set @wvalue = 0;
			
			OPEN temp_cursor;
				set @i = 0;
				set @i = found_rows();
				set @j = 0;
				WHILE @j < @i do
				set vrulename = '';
				set vrulevalue = '';
				fetch temp_cursor into vrulename,vrulevalue;
				
				-- updating dvalue value to 0 on company holidays if below rule equals 0
				if (vrulename = 'LEAVES_COMPANY_HOLIDAYS_INCLUDED') then
					SET @hvalue = vrulevalue;	
					if (@hvalue = 0) then
					update datetable, weekoffs_table 
					set datetable.dvalue = 0 
					where datetable.weekday not in (ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))
					and companyholiday = 1
					and ((weekoffs_table.effective_fromdate <= datetable.ldate and datetable.ldate <= weekoffs_table.effective_todate)
						or (datetable.ldate >= effective_fromdate and effective_todate is null));     
					end if; 
				end if;
				-- updating dvalue value to 0 on weekoffs if below rule equals 0
				if (vrulename = 'LEAVES_WEEKENDS_INCLUDED') then
					set @wvalue = vrulevalue;
					if (@wvalue = 0) then
					-- update datetable set datetable.dvalue = 0 where datetable.weekday in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0));
					update datetable, weekoffs_table 
					set datetable.dvalue = 0 
					where datetable.weekday in (ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))
					and ((weekoffs_table.effective_fromdate <= datetable.ldate and datetable.ldate <= weekoffs_table.effective_todate)
						or (datetable.ldate >= effective_fromdate and effective_todate is null));    
					end if;
				end if;
				
				set @j = @j + 1;
				end while;
			close temp_cursor;
			
			OPEN temp_cursor;
				set @i = 0;
				set @i = found_rows();
				set @j = 0;
				WHILE @j < @i do
				set vrulename = '';
				set vrulevalue = '';
				fetch temp_cursor into vrulename,vrulevalue;
				
				-- handling half days 
				if (`fromdate` < `todate`) then
					if (`fromdatehalfday` = 1) then
					update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
					end if;
					if (`todatehalfday` = 1) then
					update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
					end if;
				elseif (`fromdate` = `todate`) then
					if ((`fromdatehalfday` = 1) and (`todatehalfday` = 0)) then
					update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
					elseif ((`fromdatehalfday` = 0) and (`todatehalfday` = 1)) then
					update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
					end if;
				end if;
				
				set @leave_duration = 0;
				set @leave_duration = (select sum(cast(datetable.dvalue as unsigned)) from datetable);
				
				-- verifying if there is balance
					if (@leave_balance < @leave_duration) then
						if not exists(select * from em where em.message = 'LM109') then
							insert into em(message) values('LM109');
						end if;
					elseif (@leave_balance >= @leave_duration) then
				-- filling errormessages table with errors
					if (vrulename = 'LEAVES_MAX_CAP_FOR_ONE_INSTANCE' and vrulevalue < (select sum(datetable.dvalue) from datetable where datetable.weekday not in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0)) and datetable.companyholiday = 0)) then
						insert into em(message) values('LM97');
					end if;
					if (vrulename = 'LEAVES_MIN_DAYS_PRIOR_APPLICATION' and vrulevalue > (datediff(`fromdate`,curdate())) and (`fromdate` >= curdate())) then
						set @prior_count = (select fn_get_min_days_prior_value_for_leave_type(`leavetype_id`));
						insert into em(message) values('LM98');
					end if;
					if (vrulename = 'LEAVES_DURATION_FOR_BACKDATED_LEAVES' and vrulevalue < (datediff(curdate(),`fromdate`)) and `fromdate` < curdate()) then
						insert into em(message) values('LM143');
					end if;
					if (vrulename = 'LEAVES_MAX_AVAIL_COUNT' and vrulevalue <= @leave_count) then
						insert into em(message) values('LM99'); 
					end if;
					if (vrulename = 'MAX_AVAIL_COUNT' and vrulevalue <= @total_leaves) then
						insert into em(message) values('LM102');
					end if;
					if (vrulename = 'LEAVES_MIN_DAYS_FOR_DOCUMENT_UPLOAD' and cast(vrulevalue as unsigned) <= @leave_duration and isdocuploaded = 0) then
						insert into em(message) values('LM107');
					end if;
				end if;
				
			set @j = @j + 1;
				end while;
			close temp_cursor;    
								
			
			-- select * from datetable;   
			set @fileupload = (select case when exists(select em.message from em where em.message = 'LM107') then 0 else 1 end);
			update em,lm_errormessages
				set em.message_string = lm_errormessages.errormessage
				where em.message = lm_errormessages.errorcode;
				
				update em
				set em.message_string = concat(em.message_string,' ',@prior_count)
				where em.message = 'LM98';
			
			if exists(select * from em) then
				select json_arrayagg(json_object(
				'leavecount',	(select sum(datetable.dvalue) from datetable),
				'message',		message_string,
				'fileupload', 	@fileupload
				)) as count_json
				from em;
			else
				select json_arrayagg(json_object(
				'leavecount',	(select sum(datetable.dvalue) from datetable), 
				'message',		1,
				'fileupload', 1
				)) as count_json ;
			end if;   
		-- for LoP ,bereavement, marriage, maternity and paternity leave types    
		elseif (@freq not in (select lm_rulevalues.ruleid from lm_rulevalues where lm_rulevalues.leavetypeid = `leavetype_id`)) then
		
		set @leave_balance = ((select lm_employeeleavebalance.balance from lm_employeeleavebalance where lm_employeeleavebalance.leavetypeid = `leavetype_id` 
							  and lm_employeeleavebalance.empid = `employee_id`) + @edit_leave_count);
		-- select @leave_balance;  
		set @leave_count = ((select count(lm_employee_utilized_event_leaves.id) from lm_employee_utilized_event_leaves where lm_employee_utilized_event_leaves.empid = `employee_id` and 
							lm_employee_utilized_event_leaves.leavetype = `leavetype_id`
							and lm_employee_utilized_event_leaves.leavestatus in ('Approved','Submitted')) - 1);
		
		set @last_leave = (select lm_employee_utilized_event_leaves.todate from lm_employee_utilized_event_leaves where lm_employee_utilized_event_leaves.leavetype = `leavetype_id` and 
						   lm_employee_utilized_event_leaves.empid = `employee_id` and lm_employee_utilized_event_leaves.leavestatus in ('Approved','Submitted') 
						   and lm_employee_utilized_event_leaves.id <> `leave_id`
						   order by lm_employee_utilized_event_leaves.todate desc limit 1); 
						   
		set @total_leaves = (select count(lm_employee_utilized_event_leaves.id) from lm_employee_utilized_event_leaves 
							 where lm_employee_utilized_event_leaves.empid = `employee_id` and lm_employee_utilized_event_leaves.id <> `leave_id` and
							 lm_employee_utilized_event_leaves.leavetype = `leavetype_id` and lm_employee_utilized_event_leaves.leavestatus in ('Approved','Submitted'));                      
		
		OPEN temp_cursor;
			set @i = 0;
			set @i = found_rows();
			set @j = 0;
			WHILE @j < @i do
			set vrulename = '';
			set vrulevalue = '';
			fetch temp_cursor into vrulename,vrulevalue;
			
			-- updating dvalue value to 0 on company holidays if below rule equals 0
			if (vrulename = 'LEAVES_COMPANY_HOLIDAYS_INCLUDED') then
				SET @hvalue = vrulevalue;	
				if (@hvalue = 0) then
				update datetable, weekoffs_table 
				set datetable.dvalue = 0 
				where datetable.weekday not in (ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))
				and companyholiday = 1
				and ((weekoffs_table.effective_fromdate <= datetable.ldate and datetable.ldate <= weekoffs_table.effective_todate)
					or (datetable.ldate >= effective_fromdate and effective_todate is null));     
				end if; 
			end if;
			-- updating dvalue value to 0 on weekoffs if below rule equals 0
			if (vrulename = 'LEAVES_WEEKENDS_INCLUDED') then
				set @wvalue = vrulevalue;
				if (@wvalue = 0) then
				-- update datetable set datetable.dvalue = 0 where datetable.weekday in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0));
				update datetable, weekoffs_table 
				set datetable.dvalue = 0 
				where datetable.weekday in (ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))
				and ((weekoffs_table.effective_fromdate <= datetable.ldate and datetable.ldate <= weekoffs_table.effective_todate)
					or (datetable.ldate >= effective_fromdate and effective_todate is null));    
				end if;
			end if;
			
			-- handling half days 
			if (`fromdate` < `todate`) then
				if (`fromdatehalfday` = 1) then
				update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
				end if;
				if (`todatehalfday` = 1) then
				update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
				end if;
			elseif (`fromdate` = `todate`) then
				if ((`fromdatehalfday` = 1) and (`todatehalfday` = 0)) then
				update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
				elseif ((`fromdatehalfday` = 0) and (`todatehalfday` = 1)) then
				update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
				end if;
			end if;
			
			set @leave_duration = 0;
			set @leave_duration = (select sum(cast(datetable.dvalue as unsigned)) from datetable);
			
			-- verifying if there is balance
				if ((@leave_balance < @leave_duration) and (`leavetype_id` <> 10)) then
					if not exists(select * from em where em.message = 'LM109') then
						insert into em(message) values('LM109');
					end if;
				elseif ((@leave_balance >= @leave_duration) and (`leavetype_id` <> 10)) then
			-- filling errormessages table with errors
				if (vrulename = 'LEAVES_MAX_CAP_FOR_ONE_INSTANCE' and vrulevalue < (select sum(datetable.dvalue) from datetable where datetable.weekday not in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0)) and datetable.companyholiday = 0)) then
					insert into em(message) values('LM97');
				end if;
				if (vrulename = 'LEAVES_MIN_DAYS_PRIOR_APPLICATION' and vrulevalue > (datediff(`fromdate`,curdate())) and (`fromdate` >= curdate())) then
						set @prior_count = (select fn_get_min_days_prior_value_for_leave_type(`leavetype_id`));
						insert into em(message) values('LM98');
				end if;
				if (vrulename = 'LEAVES_DURATION_FOR_BACKDATED_LEAVES' and vrulevalue < (datediff(curdate(),`fromdate`)) and `fromdate` < curdate()) then
					insert into em(message) values('LM143');
				end if;
				if (vrulename = 'LEAVES_MAX_AVAIL_COUNT' and vrulevalue <= @leave_count) then
					insert into em(message) values('LM99'); 
				end if;
				if (coalesce(@last_leave,0) <> 0) then
					if (vrulename = 'LEAVES_GAP_BETWEEN_TERMS' and vrulevalue > (select timestampdiff(year,@last_leave,curdate()))
						and @total_leaves > 0) then
						insert into em(message) values('LM101');
					end if;
				end if;
				if (vrulename = 'MAX_AVAIL_COUNT' and vrulevalue <= @total_leaves) then
					insert into em(message) values('LM102');
				end if;
				if (vrulename = 'LEAVES_MAX_COUNT_PER_TERM' and vrulevalue < @leave_duration) then
					insert into em(message) values('LM103');
				end if;
				if (vrulename = 'LEAVES_MIN_DAYS_FOR_DOCUMENT_UPLOAD' and cast(vrulevalue as unsigned) <= @leave_duration and isdocuploaded = 0) then
					insert into em(message) values('LM107');
				end if;
			end if;
			
		set @j = @j + 1;
			end while;
		close temp_cursor;    
							
		
		-- select * from datetable;   
		set @fileupload = (select case when exists(select em.message from em where em.message = 'LM107') then 0 else 1 end);
		update em,lm_errormessages
				set em.message_string = lm_errormessages.errormessage
				where em.message = lm_errormessages.errorcode;
				
				update em
				set em.message_string = concat(em.message_string,' ',@prior_count)
				where em.message = 'LM98';
		
		if (exists(select * from em)) then --  and (leavetype_id <> 10)
					select json_arrayagg(json_object(
					'leavecount',	(select sum(datetable.dvalue) from datetable),
					'message',		message_string,
					'fileupload', 	@fileupload
					)) as count_json
					from em;
		/*		elseif (leavetype_id = 10) then
					select json_arrayagg(json_object(
					'leavecount',	(select sum(datetable.dvalue) from datetable), 
					'message',		1,
					'fileupload', 1
					)) as count_json ;    */
				else
					select json_arrayagg(json_object(
					'leavecount',	(select sum(datetable.dvalue) from datetable), 
					'message',		1,
					'fileupload', 1
					)) as count_json ;
				end if;   
		end if;
		-- leave type configured as advanced leave
		ELSEIF (`leavetype_id` = (SELECT lm_leavesmaster.id FROM lm_leavesmaster WHERE lm_leavesmaster.leavename = 'Advanced Leave')) THEN
		
		SET @ltype = (select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.leavetypeid = `leavetype_id` and lm_rulevalues.ruleid = 
		(select lm_rulemaster.id from lm_rulemaster where lm_rulemaster.rulename = 'LEAVETYPE_THAT_CAN_BE_AVAILED_IN_ADVANCE') 
		order by lm_rulevalues.id desc limit 1);
		
		insert into rules(rulename,rulevalue)  
		SELECT lm_rulemaster.rulename,lm_rulevalues.value
		from lm_rulemaster,lm_rulevalues,
		(select max(id) as id, ruleid from lm_rulevalues
		where lm_rulevalues.leavetypeid = @ltype group by ruleid order by ruleid) ids
		where lm_rulemaster.id=lm_rulevalues.ruleid
		and lm_rulemaster.id = ids.ruleid
		and ids.id = lm_rulevalues.id
		and lm_rulevalues.status = 'Active'
		and lm_rulevalues.leavetypeid= @ltype;
		
		insert into rules(rulename,rulevalue)  
		SELECT lm_rulemaster.rulename,lm_rulevalues.value
		from lm_rulemaster,lm_rulevalues,
		(select max(id) as id, ruleid from lm_rulevalues
		where lm_rulevalues.leavetypeid is null group by ruleid order by ruleid) ids
		where lm_rulemaster.id=lm_rulevalues.ruleid
		and lm_rulemaster.id = ids.ruleid
		and ids.id = lm_rulevalues.id
		and lm_rulevalues.status = 'Active'
		and lm_rulevalues.leavetypeid is null;
		
		set @leave_balance = ((select lm_employeeleavebalance.balance from lm_employeeleavebalance where lm_employeeleavebalance.leavetypeid = @ltype and lm_employeeleavebalance.empid = `employee_id`
							  and lm_employeeleavebalance.leave_cycle_year	= fn_get_leave_cycle_year()) + @edit_leave_count);
							  
		SET @leave_cycle_month = (select leave_cycle_year_master.cycle_commencement_month from leave_cycle_year_master where leave_cycle_year_master.id = (
								  select lm_rulevalues.value from lm_rulevalues where lm_rulevalues.ruleid = (select lm_rulemaster.id from lm_rulemaster where 
								  lm_rulemaster.rulename = 'LEAVE_CYCLE_YEAR') order by lm_rulevalues.id desc limit 1));
		set @current_year = year(current_timestamp());                   
		set @current_month = month(current_timestamp());
		if(@leave_cycle_month = 1) then
			set @current_year = @current_year;
		elseif ((@leave_cycle_month <> 1) and (@leave_cycle_month <= @current_month)) then
			set @current_year = @current_year;
		elseif ((@leave_cycle_month <> 1) and (@leave_cycle_month > @current_month)) then
			set @current_year = @current_year - 1;
		end if;                          
		set @leave_cycle_start = concat(@current_year,'-',@leave_cycle_month,'-01');
		if(@leave_cycle_month = 1) then
			set @leave_cycle_end = concat(@current_year,'-','12','-01');
		elseif(@leave_cycle_month <> 1) then
			set @leave_cycle_end = concat((@current_year + 1),'-',(@leave_cycle_month - 1),'-01');
		end if;
		set @leave_cycle_end = (select last_day(@leave_cycle_end));
		set @leave_count = ((select count(lm_employeeleaves.id) from lm_employeeleaves where lm_employeeleaves.empid = `employee_id` and 
							lm_employeeleaves.leavetype = @ltype and lm_employeeleaves.fromdate between @leave_cycle_start and @leave_cycle_end
							and lm_employeeleaves.leavestatus in ('Approved','Submitted')) - 1);
		
		set @last_leave = (select lm_employeeleaves.todate from lm_employeeleaves where lm_employeeleaves.leavetype = @ltype and 
						   lm_employeeleaves.empid = `employee_id` and lm_employeeleaves.leave_cycle_year = fn_get_leave_cycle_year() 
						   and lm_employeeleaves.id <> `leave_id`
						   and lm_employeeleaves.leavestatus in ('Approved','Submitted') order by lm_employeeleaves.todate desc limit 1); 
		
		set @total_leaves = (select count(lm_employeeleaves.id) from lm_employeeleaves where lm_employeeleaves.empid = `employee_id` and 
							lm_employeeleaves.leavetype = @ltype and lm_employeeleaves.id <> `leave_id` 
							and lm_employeeleaves.leave_cycle_year = fn_get_leave_cycle_year()
							and lm_employeeleaves.leavestatus in ('Approved','Submitted'));                      
		
		set @hvalue = 0;
		set @wvalue = 0;
		
		OPEN temp_cursor;
			set @i = 0;
			set @i = found_rows();
			set @j = 0;
			WHILE @j < @i do
			set vrulename = '';
			set vrulevalue = '';
			fetch temp_cursor into vrulename,vrulevalue;
			
			if (vrulename = 'LEAVES_COMPANY_HOLIDAYS_INCLUDED') then
				SET @hvalue = vrulevalue;	
				if (@hvalue = 0) then
				update datetable, weekoffs_table 
					set datetable.dvalue = 0 
					where datetable.weekday not in (ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))
					and companyholiday = 1
					and ((weekoffs_table.effective_fromdate <= datetable.ldate and datetable.ldate <= weekoffs_table.effective_todate)
						or (datetable.ldate >= effective_fromdate and effective_todate is null)); 
				end if; 
			end if;
			if (vrulename = 'LEAVES_WEEKENDS_INCLUDED') then
				set @wvalue = vrulevalue;
				if (@wvalue = 0) then
				update datetable, weekoffs_table 
					set datetable.dvalue = 0 
					where datetable.weekday in (ifnull(weekoff1,0),ifnull(weekoff2,0),ifnull(weekoff3,0))
					and ((weekoffs_table.effective_fromdate <= datetable.ldate and datetable.ldate <= weekoffs_table.effective_todate)
						or (datetable.ldate >= effective_fromdate and effective_todate is null));   
				end if;
			end if;
			
			set @j = @j + 1;
			end while;
		close temp_cursor;
		
		OPEN temp_cursor;
			set @i = 0;
			set @i = found_rows();
			set @j = 0;
			WHILE @j < @i do
			set vrulename = '';
			set vrulevalue = '';
			fetch temp_cursor into vrulename,vrulevalue;
			
			if (`fromdate` < `todate`) then
				if (`fromdatehalfday` = 1) then
				update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
				end if;
				if (`todatehalfday` = 1) then
				update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
				end if;
			elseif (`fromdate` = `todate`) then
				if ((`fromdatehalfday` = 1) and (`todatehalfday` = 0)) then
				update datetable set datetable.dvalue = 0.50 where datetable.ldate = `fromdate`;
				elseif ((`fromdatehalfday` = 0) and (`todatehalfday` = 1)) then
				update datetable set datetable.dvalue = 0.50 where datetable.ldate = `todate`;
				end if;
			end if;
			
			set @leave_duration = 0;
			set @leave_duration = (select sum(cast(datetable.dvalue as unsigned)) from datetable);
			
			-- verifying if there is balance
			if (@leave_balance < @leave_duration) then
				if not exists(select * from em where em.message = 'LM109') then
					insert into em(message) values('LM109');
				end if;
			elseif (@leave_balance >= @leave_duration) then
				-- filling errormessages table with errors
				if (vrulename = 'LEAVES_MAX_CAP_FOR_ONE_INSTANCE' and vrulevalue < (select sum(datetable.dvalue) from datetable where datetable.weekday not in (ifnull(@w1,0),ifnull(@w2,0),ifnull(@w3,0)) and datetable.companyholiday = 0)) then
					insert into em(message) values('LM97');
				end if;
				if (vrulename = 'LEAVES_MIN_DAYS_PRIOR_APPLICATION' and vrulevalue > (datediff(`fromdate`,curdate())) and (`fromdate` >= curdate())) then
						set @prior_count = (select fn_get_min_days_prior_value_for_leave_type(`leavetype_id`));
						insert into em(message) values('LM98');
				end if;
				if (vrulename = 'LEAVES_DURATION_FOR_BACKDATED_LEAVES' and vrulevalue < (datediff(curdate(),`fromdate`)) and `fromdate` < curdate()) then
					insert into em(message) values('LM143');
				end if;
				if (vrulename = 'LEAVES_MAX_AVAIL_COUNT' and vrulevalue <= @leave_count) then
					insert into em(message) values('LM99'); 
				end if;
				if (vrulename = 'MAX_AVAIL_COUNT' and vrulevalue <= @total_leaves) then
					insert into em(message) values('LM102');
				end if;
				if (vrulename = 'LEAVES_MIN_DAYS_FOR_DOCUMENT_UPLOAD' and cast(vrulevalue as unsigned) <= @leave_duration and isdocuploaded = 0) then
					insert into em(message) values('LM107');
				end if;
			end if;
			
		set @j = @j + 1;
			end while;
		close temp_cursor;    
							
		-- select * from datetable;       
		set @fileupload = (select case when exists(select em.message from em where em.message = 'LM107') then 0 else 1 end);
		update em,lm_errormessages
				set em.message_string = lm_errormessages.errormessage
				where em.message = lm_errormessages.errorcode;
				
				update em
				set em.message_string = concat(em.message_string,' ',@prior_count)
				where em.message = 'LM98';
		
		if exists(select * from em) then
			select json_arrayagg(json_object(
			'leavecount',	(select sum(datetable.dvalue) from datetable),
			'message',		message_string,
			'fileupload', 	@fileupload
			)) as count_json
			from em;
		else
			select json_arrayagg(json_object(
			'leavecount',	(select sum(datetable.dvalue) from datetable), 
			'message',		1,
			'fileupload', 1
			)) as count_json ;
		end if;        
		END IF;
		
		end if;
	drop temporary table rules;
	drop temporary table em;
	drop temporary table datetable;
	drop temporary table weekoffs_table;

	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `validate_epf_payment_for_month` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `validate_epf_payment_for_month`(
	year_value int,
	month_value int
	)
	begin
		set @date = (select cast(concat(year_value,'-',month_value,'-01') as date));
		set @cid = (select payroll_salary_components_master.id from payroll_salary_components_master 
					where payroll_salary_components_master.component_short_name = 'employee_provident_fund');
		set @total_count = (select count(payroll_employee_pay_group_mapping_master.empid) from payroll_employee_pay_group_mapping_master
			where payroll_employee_pay_group_mapping_master.income_group_id in
			(select group_id from payroll_income_group_components_master where payroll_income_group_components_master.group_id in
			(select id from payroll_income_groups_master where payroll_income_groups_master.status = 'Active')
			and case when (payroll_income_group_components_master.effective_to_date is null) 
					then (cast(@date as date) >= payroll_income_group_components_master.effective_from_date)
					else (cast(@date as date) between payroll_income_group_components_master.effective_from_date 
					and payroll_income_group_components_master.effective_to_date)
					end
			and payroll_income_group_components_master.component_id = @cid)
			and case when (payroll_employee_pay_group_mapping_master.effective_to_date is null) 
					then (cast(@date as date) >= payroll_employee_pay_group_mapping_master.effective_from_date)
					else (cast(@date as date) between payroll_employee_pay_group_mapping_master.effective_from_date 
					and payroll_employee_pay_group_mapping_master.effective_to_date)
					end);
		set @gen_count = (select count(payroll_epf_details.empid) from payroll_epf_details where payroll_epf_details.year = `year_value`
			and payroll_epf_details.month = `month_value`);         
		if (@total_count = 0) then
			select concat('The total number of resources eligible for Employee Provident Fund contribution for the selected year and month is ',@total_count) as message,0 as value; 
		elseif (@total_count <> @gen_count) then
			select concat('Out of ',@total_count,' resources eligible for Employee Provident Fund contribution for the selected year and month, salary was processed only for ',@gen_count,
						  '. The file can be downloaded when salary processing is completed for the remaining ',@total_count - @gen_count,'.') as message, 0 as value;
		else
			select '' as message,1 as value;
		end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `validate_prefix_assignment` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE PROCEDURE `validate_prefix_assignment`(
		in prefix varchar(16)
		)
	BEGIN
		set @count = 0;
		set @sqltext = '';
		set @sqltext = concat('set @count = (select count(*) from employee where empid like ''','%',prefix,'%','''',')');
		prepare stmt from @sqltext;
		execute stmt;
		deallocate prepare stmt;
		IF (@count = 0) THEN
		select 1 as editflag;
		ELSE
		select 0 as editflag;
		end if;
		
	END ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `validate_reporting_manager` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8 */ ;
	/*!50003 SET character_set_results = utf8 */ ;
	/*!50003 SET collation_connection  = utf8_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `validate_reporting_manager`(
	`emp_id` int(11)
	)
	begin
	if (`emp_id` is not null) then
	if exists (select empid from employee_reportingmanagers 
			   where employee_reportingmanagers.reportingmanagerid = `emp_id`
			   and employee_reportingmanagers.effectiveenddate is null
               -- case when employee_reportingmanagers.effectiveenddate is null
				-- 		then curdate() >= employee_reportingmanagers.effectivestartdate
				-- 		else curdate() between employee_reportingmanagers.effectivestartdate 
				 -- 			 and employee_reportingmanagers.effectiveenddate end
                             ) then
		select 1 as validity; 
	else
		select 0 as validity;    
	end if;         
	end if;
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!50003 DROP PROCEDURE IF EXISTS `validate_salary_processing_date` */;
	/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
	/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
	/*!50003 SET @saved_col_connection = @@collation_connection */ ;
	/*!50003 SET character_set_client  = utf8mb4 */ ;
	/*!50003 SET character_set_results = utf8mb4 */ ;
	/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
	/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
	/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
	DELIMITER ;;
	CREATE  PROCEDURE `validate_salary_processing_date`(
		year_value int(4),
		month_value int(2)
	)
	begin
	set @payroll_wf_date = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							where payroll_client_component_configuration_details.rule_id = 
							(select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							where payroll_client_component_configuration_master.rule_name = 'PAYROLL_WINDOW_FROM_DATE')
							and effective_to_date is null);  
	set @leave_wstart_date = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							  where payroll_client_component_configuration_details.rule_id = 
							  (select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							  where payroll_client_component_configuration_master.rule_name = 'LEAVE_WINDOW_START_DATE')
							  and effective_to_date is null);    

	set @leave_wend_date = (select payroll_client_component_configuration_details.value from payroll_client_component_configuration_details 
							where payroll_client_component_configuration_details.rule_id = 
							(select payroll_client_component_configuration_master.id from payroll_client_component_configuration_master 
							where payroll_client_component_configuration_master.rule_name = 'LEAVE_WINDOW_END_DATE')
							and effective_to_date is null);
	if (@payroll_wf_date = @leave_wstart_date) then    
		set @leave_start_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
		set @leave_end_date = (SELECT DATE(LAST_DAY(@leave_start_date)));                        
	elseif(@payroll_wf_date <> @leave_wstart_date) then
		if ((@leave_wstart_date = '20') or (@leave_wstart_date = '21') or (@leave_wstart_date = '22') or (@leave_wstart_date = '23') or
			(@leave_wstart_date = '24') or (@leave_wstart_date = '25') or (@leave_wstart_date = '26') or (@leave_wstart_date = '27') or
			(@leave_wstart_date = '28')) then
		set @leave_end_date = (select cast(concat(year_value,'-',month_value,'-',@leave_wend_date) as date));
		elseif (@leave_wstart_date = 'LAST_BUT_2_DAYS') then
			set @leave_end_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_end_date = (SELECT DATE(LAST_DAY(@leave_end_date)));
			set @leave_end_date = (select date_sub(@leave_end_date, interval 3 day));
		elseif (@leave_wstart_date = 'LAST_BUT_1_DAY') then
			set @leave_end_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_end_date = (SELECT DATE(LAST_DAY(@leave_end_date)));
			set @leave_end_date = (select date_sub(@leave_end_date, interval 2 day));
		elseif (@leave_wstart_date = 'LAST_DAY') then
			set @leave_end_date = (select cast(concat(year_value,'-',month_value,'-01') as date));
			set @leave_end_date = (SELECT DATE(LAST_DAY(@leave_end_date)));
			set @leave_end_date = (select date_sub(@leave_end_date, interval 1 day));
		end if;
	end if;    
	if (@leave_end_date <= (select curdate())) then
		select 1 as validity, null as end_date;
	else
		select 0 as validity, @leave_end_date as end_date;    
	end if;    
	end ;;
	DELIMITER ;
	/*!50003 SET sql_mode              = @saved_sql_mode */ ;
	/*!50003 SET character_set_client  = @saved_cs_client */ ;
	/*!50003 SET character_set_results = @saved_cs_results */ ;
	/*!50003 SET collation_connection  = @saved_col_connection */ ;
	/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

	/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
	/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
	/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
	/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
	/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
	/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
	/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
DELIMITER ;;
CREATE PROCEDURE `get_new_exit_employee_count_by_month`(
month_value date
)
begin
 set @monthstartdate = DATE_FORMAT(month_value, '%Y-%m-01');
 set @monthenddate = DATE_FORMAT(LAST_DAY(month_value), '%Y-%m-%d');

set @reg_count=0;
select count(emp.id) into @reg_count from employee emp
inner join ems_employee_resignations eer on eer.empid=emp.id
where DATE_FORMAT(`actual_relieving_date`, '%Y-%m-%d')>=@monthstartdate and DATE_FORMAT(`actual_relieving_date`, '%Y-%m-%d')<=@monthenddate
and emp.status=2;

set @ter_count=0;
select count(emp.id) into @ter_count from employee emp
inner join ems_employee_terminations et on et.empid= emp.id
where DATE_FORMAT(`termination_date`, '%Y-%m-%d')>=@monthstartdate and DATE_FORMAT(`termination_date`, '%Y-%m-%d')<=@monthenddate
and emp.status=2; 

select count(id) as new_emp_count,(@reg_count+@ter_count) as exit_emp_count from employee 
where DATE_FORMAT(`created_on`, '%Y-%m-%d')>=@monthstartdate and DATE_FORMAT(`created_on`, '%Y-%m-%d')<=@monthenddate;
end;;
DELIMITER ;


DELIMITER ;;
CREATE PROCEDURE `get_attendance_employees_count_by_date`(req_date date)
begin

   	    set @empcount = ifnull((select count(e.id) from employee e where status=1 and req_date >= (select dateofjoin from employee where status=1 and id=e.id)),0);
		set @wfo_count = ifnull((select count(*) from employee_attendance ea where ea.attendancedate = req_date and ea.attendancetype=1 and ea.empid in (select empid from employee_reportingmanagers where effectiveenddate is null and date(effectivestartdate) <= req_date) and req_date >= (select dateofjoin from employee where id=ea.empid)),0);
        set @wfh_count = ifnull((select count(*) from employee_attendance ea where ea.attendancedate = req_date and ea.attendancetype=2 and ea.empid in (select empid from employee_reportingmanagers where  effectiveenddate is null and date(effectivestartdate) <= req_date) and req_date >= (select dateofjoin from employee where id=ea.empid)),0);
		set @absents_count = @empcount - (@wfo_count + @wfh_count);

	-- 	set @wfo_details = (select json_arrayagg(json_object('empid',ea.empid,'empname',get_employee_name(ea.empid))) from employee_attendance ea where ea.attendancetype=1 and ea.attendancedate = req_date  and ea.empid in (select empid from employee_reportingmanagers where  effectiveenddate is null and date(effectivestartdate) <= req_date) and req_date >= (select dateofjoin from employee where id=ea.empid));
    --     set @wfh_details = (select json_arrayagg(json_object('empid',ea.empid,'empname',get_employee_name(ea.empid))) from employee_attendance ea where ea.attendancetype=2 and ea.attendancedate = req_date  and ea.empid in (select empid from employee_reportingmanagers where  effectiveenddate is null and date(effectivestartdate) <= req_date) and req_date >= (select dateofjoin from employee where id=ea.empid));
    --     set @absents_details = (select json_arrayagg(json_object('empid',e.empid,'empname',get_employee_name(e.empid))) from (select empid from employee_reportingmanagers r where  r.effectiveenddate is null and date(r.effectivestartdate) <= req_date and req_date >= (select dateofjoin from employee where id=r.empid)) e where not exists(select * from employee_attendance where attendancedate = req_date and empid = e.empid and req_date >= (select dateofjoin from employee where id=e.empid)));
	      
        -- insert into empids(emp)
		select @wfo_count as wfo_count,@wfh_count as wfh_count, @absents_count as absents_count
        -- ,@wfo_details as wfo_details,@wfh_details as wfh_details,@onduty_details as onduty_details,@wfrl_details as wfrl_details, @absents_details as absents_details
;
   
end;;

DELIMITER ;

DELIMITER ;;
CREATE PROCEDURE `get_leaves_types_count_by_month`(
month_value date
)
begin
 set @monthstartdate = DATE_FORMAT(month_value, '%Y-%m-01');
 set @monthenddate = DATE_FORMAT(LAST_DAY(month_value), '%Y-%m-%d');   
   set @approved_count=0;
   set @rejected_count=0;
   set @pending_count=0;
    
     select count(lm_leaveapprovalstatustracker.id)  as count into @approved_count
     from lm_leaveapprovalstatustracker, lm_employeeleaves
	 where lm_leaveapprovalstatustracker.leaveid=lm_employeeleaves.id
	 and DATE_FORMAT(lm_employeeleaves.fromdate, '%Y-%m-%d')<=DATE_FORMAT(month_value, '%Y-%m-%d')
   	 and DATE_FORMAT(lm_employeeleaves.todate, '%Y-%m-%d')>=DATE_FORMAT(month_value, '%Y-%m-%d')
     and lm_leaveapprovalstatustracker.status ='Approved'; 
    select count(lm_leaveapprovalstatustracker.id) into @rejected_count 
    from lm_leaveapprovalstatustracker, lm_employeeleaves
    where lm_leaveapprovalstatustracker.leaveid=lm_employeeleaves.id
    and   DATE_FORMAT(lm_employeeleaves.fromdate, '%Y-%m-%d')>=@monthstartdate and DATE_FORMAT(lm_employeeleaves.fromdate, '%Y-%m-%d')<=@monthenddate
	and DATE_FORMAT(lm_employeeleaves.todate, '%Y-%m-%d')>=@monthstartdate and DATE_FORMAT(lm_employeeleaves.todate, '%Y-%m-%d')<=@monthenddate
    and lm_leaveapprovalstatustracker.status ='Rejected';
   
   select count(lm_employeeleaves.id) into @pending_count  
    from lm_leaveapprovalstatustracker, lm_employeeleaves
    where lm_leaveapprovalstatustracker.leaveid=lm_employeeleaves.id
    and lm_leaveapprovalstatustracker.status is null;
	select @approved_count as today_leave_count, @rejected_count as rejected_count, @pending_count as pending_count ;
end;;
DELIMITER ;


DELIMITER ;;
CREATE  PROCEDURE `set_upload_employees`(
		in employeedata varchar(8000)
			)
begin
	/*declare exit handler for sqlexception
	begin
	    rollback;
	    select -1 as statuscode;
	end; */
	DECLARE vleave_id int(11);
    declare vid int(1);
    DECLARE leavetype_cursor cursor for select temp_lm_leavesmaster.leave_id,leavetype from temp_lm_leavesmaster;
    set @weekoff1 = (select ems_rulevalues.value from ems_rulevalues where ems_rulevalues.ruleid =
				     (select ems_rulemaster.id from ems_rulemaster where ems_rulemaster.rulename = 'DEFAULT_WEEKOFF_1')
				     and effectivetodate is null);
    set @weekoff2 = (select ems_rulevalues.value from ems_rulevalues where ems_rulevalues.ruleid =
				     (select ems_rulemaster.id from ems_rulemaster where ems_rulemaster.rulename = 'DEFAULT_WEEKOFF_2')
				     and effectivetodate is null);
    set @weekoff3 = (select ems_rulevalues.value from ems_rulevalues where ems_rulevalues.ruleid =
				     (select ems_rulemaster.id from ems_rulemaster where ems_rulemaster.rulename = 'DEFAULT_WEEKOFF_3')
				     and effectivetodate is null);   
	set @count =(select JSON_LENGTH(employeedata, '$.emplist'));
	 set @k = 0;
	while @k < @count do
	set @empid = json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].empid')));
    set @statuscode=0;
    set @eid = 0;
    set @rid = 0;
	set @eid = (select e.id from employee e where e.empid = (select json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].empid')))));  
   	set @officeemail=json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].officeemail')));
	set @gender =(select gm.id from gendermaster gm where gm.gender=(select json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].gender')))));
    set @maritalstatus =(select mm.id from maritalstatusmaster mm where mm.maritalstatus=(select json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].maritalstatus')))));
    set @employmenttype =(select etm.id from employmenttypemaster etm where etm.employmenttype=(select json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].employmenttype')))));
   	set @employeelocation = (select wl.id from companyworklocationsmaster wl where wl.location=(select json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].companylocation')))));
    set @designation =(select desm.id from designationsmaster desm where desm.designation=(select json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].designation')))));
    set @department =(select deptm.id from departmentsmaster deptm where deptm.deptname=(select json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].department')))));
    set @reportingmanager=(select e.id from employee e where e.firstname);
    set @usertype =(select rm.id from rolesmaster rm where rm.name=(select json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].role')))));
  	set @city=(select c.id from locationsmaster c where c.location= (select json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].city')))));
	if(@city='null')then
	    set @city=null;
	end if;
	set @state=(select st.id from statesmaster st where st.state=(select json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].state')))));
	if(@state='null')then
	    set @state=null;
	end if;
	set @country=(select c.id from countrymaster c where c.country=(select json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].country')))));
	if(@country='null')then
	    set @country=null;
	end if;
	if(@officeemail<>'')then
    if exists(select * from employee e where e.officeemail=@officeemail)then
      set @statuscode=1;
      set @mail='Office email already exists.';
	end if;
  end if; 
 if(@statuscode=0)then
  	insert into employee(`empid`,`firstname`,`lastname`,`officeemail`,`dateofbirth`,`gender`,`maritalstatus`,`contactnumber`,
    `emergencycontactnumber`,`employmenttype`,`dateofjoin`,`address`,`city`,`state`,`pincode`,`country`,`status`,
    `created_on`,`created_by`)
	values
	(json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].empid'))),
	json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].firstname'))),
	json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].lastname'))),
	json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].officeemail'))),
	json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].dateofbirth'))),
	@gender,
	@maritalstatus,
	json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].contactnumber'))),
	json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].emergencycontactnumber'))),
	@employmenttype,
	json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].dateofjoin'))),
	json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].address'))),
	@city,
	@state,
	json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].pincode'))),
	@country,
	'1',
	current_timestamp(),
    json_unquote(json_extract(employeedata,"$.createdby"))
    );

	set @eid = (select e.id from employee e where e.empid = json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].empid'))));
   if (json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].reportingmanager'))) <> json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].firstname')))) then
		INSERT INTO employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
		(@eid,@reportingmanager,current_timestamp());
		INSERT INTO employee_roles(employee_id,role_id,rmid,effective_from_date) VALUES
		(@eid,@usertype,@reportingmanager,current_timestamp());
    elseif (json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].reportingmanager'))) = json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].firstname')))) then
		INSERT INTO employee_reportingmanagers(empid,reportingmanagerid,effectivestartdate) VALUES
		(@eid,@eid,current_timestamp());
		INSERT INTO employee_roles(employee_id,role_id,rmid,effective_from_date) VALUES
		(@eid,@usertype,@eid,current_timestamp());
    end if;
    INSERT INTO employee_designations(empid,designationid,effectivestartdate) values
    (@eid,@designation,current_timestamp());
    
       -- adding leave balance records for the employee
    if exists(select modulesmaster.id from modulesmaster where modulesmaster.modulename = 'Leave Management') then
    drop temporary table if exists temp_lm_leavesmaster;
    create temporary table temp_lm_leavesmaster (
		leave_id int(11),
		leavetype int(1)
	);
    insert into temp_lm_leavesmaster(leave_id) select lm_leavesmaster.id from lm_leavesmaster;
	update temp_lm_leavesmaster -- leavetype to add/not add year 
	set temp_lm_leavesmaster.leavetype = 1
	where leave_id in (select lm_rulevalues.leavetypeid from lm_rulevalues where lm_rulevalues.ruleid = 3);
    if exists(select temp_lm_leavesmaster.leave_id from temp_lm_leavesmaster where temp_lm_leavesmaster.leave_id = 9) then
		update temp_lm_leavesmaster set temp_lm_leavesmaster.leavetype = 1
		where temp_lm_leavesmaster.leave_id = 9;
    end if;
	set @year = (select fn_get_leave_cycle_year());
	open leavetype_cursor;
		set @ltype_count = 0;
		set @ltype_count = found_rows();
		set @e = 0;
		WHILE @e < @ltype_count do
			fetch leavetype_cursor into vleave_id,vid;
			insert into lm_employeeleavebalance(empid,leavetypeid,balance,lastupdatedat,leave_cycle_year) values
			(@eid,vleave_id,0,current_timestamp(),case when vid = 1 then @year else null end);
			set @e = @e + 1;
		end while;
	close leavetype_cursor;
    call credit_employee_event_leave(@eid); -- crediting event-based leaves
    drop temporary table temp_lm_leavesmaster;
    end if; 
 
    insert into employee_departments(empid,departmentid,effectivestartdate) values
    (@eid,@department,current_timestamp());
    
    set @weekoff_string = '';
    set @weekoff_string = concat('insert into employee_weekoffs(empid');
    if (@weekoff1 is not null) then
    set @weekoff_string = concat(@weekoff_string,',weekoffday1');
    end if;
    if (@weekoff2 is not null) then
    set @weekoff_string = concat(@weekoff_string,',weekoffday2');
    end if;
    if (@weekoff3 is not null) then
    set @weekoff_string = concat(@weekoff_string,',weekoffday3');
    end if;
    set @weekoff_string =concat(@weekoff_string,',effectivefromdate) values(',@eid);
    if (@weekoff1 is not null) then
    set @weekoff_string = concat(@weekoff_string,',',@weekoff1);
    end if;
    if (@weekoff2 is not null) then
    set @weekoff_string = concat(@weekoff_string,',',@weekoff2);
    end if;
    if (@weekoff3 is not null) then
    set @weekoff_string = concat(@weekoff_string,',',@weekoff3);
    end if;
    set @weekoff_string = concat(@weekoff_string,',''',current_date(),''')');
    prepare stmt from @weekoff_string;
	execute stmt;
	deallocate prepare stmt;
    
    set @weekoff_insert_id = (select last_insert_id());
    if (@weekoff_insert_id is not null) then -- inserting working days of a employee
        call update_working_days_for_employee(@eid,'n',json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].dateofjoin'))));
    end if;
    insert into employee_worklocations(empid,locationid,effectivefromdate) values
    (@eid,@employeelocation,current_timestamp());

      CALL `set_checklists_to_employee`(null,@eid,null,'','Pending','Pending Checklist','Onboarding',json_unquote(json_extract(employeedata,concat('$.emplist[',convert((@k),char),'].actionby'))),@p);
   --    select 0 statuscode , @eid as empid;
	--   else
	--  select @statuscode statuscode , @eid as empid, @mail email;
	 end if;	
     set @k = @k + 1;
	 end while;
    select 0 statuscode ;
	end;;
DELIMITER ;


DELIMITER ;;
	CREATE  PROCEDURE `get_active_programs_master`()
	begin
		select p.id,
			p.name,
			p.description
		from ems_programs_master p
		where p.status=1;
	end ;;
	DELIMITER ;

	DELIMITER ;;
	CREATE  PROCEDURE `get_active_program_types`()
	begin
		select p.id,
			p.program_id,
			p.department_id,
            ep.description
		from ems_induction_conductedby p,ems_programs_master ep
		where p.program_id=ep.id and p.status=1;
	end ;;
	DELIMITER ;
    
DELIMITER ;;
CREATE PROCEDURE `get_active_branch_cities`()
begin
select json_arrayagg(json_object('city', t.city,'cityname',t.cityname)) as data 
   from (select distinct m.city as city,l.location as cityname	from companyworklocationsmaster m
	inner join employee_idgenerator e on m.id = e.companylocation
	inner join locationsmaster l on m.city = l.id
    where m.status=1) t;
    end;;
DELIMITER ;

DELIMITER ;;
CREATE PROCEDURE `get_active_employees_count`()
begin
select count(id) as active_employees_count from employee where status=1;
end;;
DELIMITER;